{"version":3,"file":"static/js/main.2635646c.js","mappings":"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B,EAAYlV,KC2DhB,SAASwvC,GACdt2C,EACArC,EACAwE,EACAlC,EACAs2C,EACA53C,EACAyiB,EACApzB,EACAwE,EACAs1C,GAEA,MAAO,CACL9nC,UAAWA,EACXrC,QAASA,EACTwE,OAAAA,EACAlC,SAAAA,EACAs2C,SAAAA,EACA53C,eAAAA,EACAyiB,OAAAA,EACApzB,KAAAA,EACAwE,KAAAA,EACAs1C,cAAAA,GAIG,SAAS0O,GACdx2C,EACArC,EACAwE,EACAlC,EACAs2C,EACA53C,EACA4yC,EACAnwB,EACApzB,EACAkS,EACAu2C,EACAC,EACAtd,EACAud,EACAC,EACAlF,GAEA,MAAO,CACL1xC,UAAAA,EACArC,QAAAA,EACAwE,OAAAA,EACAlC,SAAAA,EACAs2C,SAAAA,EACA53C,eAAAA,EACA4yC,QAAAA,EACArxC,IAAAA,EACAu2C,cAAAA,EACAC,aAAAA,EACAtd,MAAAA,EACAud,UAAAA,EACAv1B,OAAAA,EACApzB,KAAAA,EACA4oD,QAAAA,EACAlF,aAAAA,GAIJ,MAcMmF,GAAuCA,CAC3Cp+C,EACAq+C,KAEO,CACL92C,UAAWvH,EACXkF,QAASm5C,EAASC,iBAClB50C,OAAQ20C,EAAStlB,QACjBvxB,SAAU62C,EAASE,kBACnBT,SAAUjvB,QAAO+b,EAAAA,EAAAA,aAAYyT,EAAStlB,QAASslB,EAASE,oBACxDr4C,gBAAgB0kC,EAAAA,EAAAA,aAAYyT,EAAStlB,QAASslB,EAASE,mBACvD51B,OAAQ01B,EAASG,uBACjBjpD,KAAM8oD,EAASI,cACf1kD,KAAMiI,GAAcm8B,IAAIkgB,EAASC,mBAAqBD,EAASK,WA8B7DC,GAAoCA,CACxCzpC,EACAP,IAESO,GAAYP,EAEjBO,EAASm2B,WAAW12B,GAAeoO,MAAM67B,IACvC,MAAMC,EAAe1zC,GAAAA,YAAyByzC,GAC9C,OAAOf,GACLlpC,EACAtY,GACAuiD,EAAa1mD,WnGyxBM,GmGvxBnBy0C,WAAWkS,GACXA,EAAa3mD,WACb,MACA,WACA8B,GACA,MAbJipB,QAAQC,SAkBR47B,GAAoC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,EAASH,WACpCj3D,UAAWF,EAAQ8d,OAAOje,SAC3B,iBAIDM,EAAAA,GAAAA,KAAA,OAAK7Q,MAAO,CAAE+L,MAAO,WA1CpBi8D,EAASH,UAAUpyE,WC3DvB8yE,GAA+C,CAC1D,WACE,6EACF,QACE,mFACF,QACE,sHACF,OACE,wFACF,yBACE,gGACFC,KAAM,4EACN,oBACE,iFACF,YACE,gFACF,mBACE,2EACF,cACE,wFACFC,OACE,wFACFC,MACE,6EACF,YACE,oFACFC,UACE,gFACFC,SACE,gFACFC,OACE,8EACFC,MACE,uFACFC,UACE,2EACF,YACE,mFACFC,WACE,iFACF,cACE,wFACF,oBACE,4EACF,kBACE,4FACFC,UACE,4EACF,iBACE,wFACFC,QACE,4EACFC,QACE,2EACFC,QACE,+FACFC,MACE,8FACFC,KAAM,kFACN,YACE,4EACFC,WACE,iFACFC,OACE,yFACF,oBACE,mFACFC,MACE,yEACF,aACE,8FACFC,OACE,4EACF,cACE,sFACF,gBACE,0FACF,iBACE,iFACFC,cACE,sFACF,cACE,uFACFC,OACE,uFACFC,OACE,yFACFC,OACE,gFACF,wBACE,2FACF,4BACE,wFACF,gBACE,6EACFC,MACE,wFACF,2BACE,kFACF,0BACE,wFACFC,OACE,wFACF,kBACE,uFACF,cACE,+EACF,cACE,2EACF,sBACE,sFACFC,YACE,kFACF,aACE,uFACFC,OACE,8EACFC,QACE,2EACFC,SACE,2EACFC,QACE,mGACFC,SACE,kFACFC,WACE,8FACF,eACE,iFACFC,UACE,sFACFC,SACE,mFACF,cACE,6EACFC,QACE,iFACFC,UACE,sFACFC,SACE,2EACF,gBACE,gFACFC,IAAK,+FACL,YACE,wFACFC,KAAM,yGACN,aACE,+EACFC,KAAM,4EACNC,QACE,6EACFC,QACE,+EACFC,QACE,gFACFC,SACE,4EACFC,SACE,gFACF,gBACE,2EACFC,KAAM,gGACN,uBACE,+EACFtzE,MACE,kFACF,cACE,mGACFuzE,UACE,wFACFC,QACE,8FACFC,IAAK,+EACLC,OACE,6EACFC,WACE,gFACFC,YACE,yFACFC,WACE,iFACFC,MACE,qFACF,cACE,2EACF,eACE,4GACF,iBACE,wFACFC,OACE,4EACF,4BACE,4EACFC,gBACE,wFACFC,UACE,2EACFvX,OACE,iFACF3Z,SACE,oFACF,UACE,6EACFmxB,QACE,wFACFC,eACE,qFACF,eACE,8FACF,oBACE,+EACFC,OACE,uGACF,kBACE,6EACFC,IAAK,2EACL,YACE,yEACF,qBACE,+EACF,YACE,wFACF,cACE,wFACFC,aACE,uFACFC,QACE,+EACFC,MACE,uFACFC,OACE,8EACFC,OACE,mGACFC,OACE,wFACFC,MACE,2FACFC,SACE,4EACF,eACE,wFACF,aACE,iFACF,gBACE,iFACFC,SACE,wFACFC,KAAM,gFACN,kBACE,2FACFC,OACE,iFACFC,OACE,uFACFC,MACE,4EACF,aACE,oGACFC,MACE,kFACFC,UACE,sFACFC,MACE,uGACFC,MACE,wFACFC,IAAK,2EACLC,SACE,qFACFC,SACE,8EACF,gBACE,oFACF,wBACE,wFACF,kBACE,yFACFC,OACE,8EACFC,QACE,4EACFC,OACE,6EACF,kBACE,2FACF,eACE,6EACF,YACE,iFACFC,MACE,0FACF,mBACE,kFACFC,KAAM,iFACN,aACE,kFACF,aACE,oFACF,iBACE,qFACF,YACE,wEACF,iBACE,4EACFC,IAAK,mFACLC,KAAM,sFACN,aACE,wFACF,eACE,4EACFC,YACE,4EACF,uBACE,2EACF,iBACE,qFACFC,KAAM,6FACNC,SACE,kFACF,YACE,iGACF,wBACE,2EACF,YACE,2EACFC,QACE,+EACF,iBACE,wFACF,UACE,wFACFC,SACE,gGACF,sBACE,2EACF,kBACE,4FACF,aACE,8FACFC,KAAM,wFACN,kBACE,+EACFC,UACE,oGACFC,OACE,8EACFC,IAAK,gFACL,aACE,4EACF,YACE,gFACF,YACE,iFACFC,KAAM,2EACNC,KAAM,+FACNC,UACE,iFACF,SACE,+FACF,YACE,2EACFC,mBACE,oFACFC,UACE,wFACF,qBACE,wFACFC,OACE,wFACF,2BACE,6EACF,sBACE,uGACFC,SACE,gFACFC,MACE,iFACF,WACE,wFACF,kBACE,oGACF,sBACE,6EACFC,SACE,+EACF,sBACE,+EACFC,IAAK,mFACL,uBACE,6EACFC,KAAM,wFACNC,YACE,0EACF,eACE,uFACFC,IAAK,yEACLC,OACE,+EACFC,QACE,qFACFC,OACE,oGACFC,UACE,2EACFC,WACE,wFACF,WACE,gFACF,kBACE,oGACFC,SACE,4EACFC,SACE,wFACF,aACE,wFACF,YACE,2GACF,aACE,yFACFC,SACE,wFACF,uBACE,kFACF,gBACE,mFACF,aACE,mFACFC,SACE,4EACFC,KAAM,4FACN,gBACE,uFACFC,WACE,kHACFC,OACE,gFACF,eACE,+EACFC,SACE,6EACFC,YACE,+EACF,kBACE,gFACFC,QACE,mFACFC,IAAK,6EACLC,QACE,mFACFC,OACE,oFACF,kBACE,+FACF,kBACE,+FACF,kBACE,+FACF,iBACE,+FACF,oBACE,2EACF,mBACE,+FACF,wBACE,2EACF,iBACE,+FACFC,UACE,uGACFC,WACE,kFACFC,KAAM,4EACN,iBACE,6FACF,oBACE,kFACFC,UACE,+EACFxoD,KAAM,iFACNyoD,MACE,+FACF,yBACE,wFACFC,UACE,4EACF,WACE,wFACF,eACE,4EACFC,QACE,qFACFC,KAAM,2EACN,mBACE,wFACF,gBACE,sFACF,YACE,iFACFC,QACE,yFACFC,IAAK,oFACLC,MACE,kFACFC,SACE,0EACFC,QACE,wFACFC,UACE,+EACFC,MACE,iGACFC,KAAM,2EACNC,KAAM,iFACN,cACE,gFACF,iBACE,kFACFC,IAAK,gFACL,gBACE,wFACF,YACE,sFACF,kBACE,4EACFC,SACE,wFACF,kBACE,2EACFC,OACE,+EACFC,WACE,sHACF,WACE,2EACF,aACE,gFACF,qBACE,6GACFC,OACE,8EACFC,WACE,kFACF,iBACE,iFACF,wBACE,qFACFC,SACE,2EACFC,MACE,wFACFC,SACE,gFACF,qBACE,gFACF,0BACE,iFACFC,QACE,+EACF,gBACE,kFACF,iBACE,mFACF,qBACE,uFACFC,WACE,gFACF,cACE,+EACF,iBACE,kFACF,SACE,0EACFC,MACE,gGACFC,QACE,4EACF,aACE,wFACFC,IAAK,qFACL,UACE,6EACF,eACE,4EACFC,KAAM,6FACNC,QACE,wFACFC,SACE,iFACF,gBACE,4EACF,yBACE,gFACFC,OACE,+EACF,eACE,4EACF,uBACE,0EACFC,QACE,wFACF,iBACE,wFACF,aACE,+EACFC,UACE,iFACFC,KAAM,oFACNC,MACE,wFACF,YACE,qFACFC,SACE,qFACF,qBACE,iFACFC,KAAM,4EACN,cACE,+EACFC,YACE,+EACFC,YACE,wFACFC,OACE,8EACFC,MACE,kFACF,YACE,6EACF,iBACE,yFACF,cACE,kFACFC,QACE,+EACFC,SACE,8EACF,qBACE,2EACF,oBACE,wFACFvmD,OACE,6EACF,8BACE,kFACFwmD,SACE,kFACF,eACE,kFACF,kBACE,+EACF,kBACE,8EACFC,QACE,wFACFC,QACE,+EACF,iBACE,8EACFC,QACE,4FACF,cACE,qFACF,mBACE,6EACFC,SACE,wGACF,mBACE,2FACFC,OACE,0EACF,eACE,kFACF,aACE,oFACF,mBACE,gFACFC,WACE,wFACFC,UACE,sFACF,eACE,4EACFC,MACE,2EACFC,QACE,0FACF,mBACE,4GACFC,MACE,4FACF,eACE,kGACFC,MACE,4EACFC,UACE,sFACF,mBACE,wFACFC,OACE,8EACFC,OACE,6EACF,aACE,wFACF,sBACE,iFACFC,SACE,2EACFC,OACE,iFACF,iBACE,+FACF,YACE,mFACF,cACE,oFACFC,OACE,wFACF,aACE,qHACF,eACE,uFACFC,MACE,kFACFC,KAAM,yFACN,WACE,2EACF,qBACE,6EACFC,SACE,4FACFC,UACE,wFACF,yBACE,+EACF,aACE,2EACFC,QACE,mFACFC,OACE,4EACF,WACE,oFACFC,KAAM,2EACN,gBACE,4EACF,eACE,mFACFC,SACE,4FACFC,QACE,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","sources":["store/attestSlice.ts","config.ts","icons/eth.svg","icons/dijets.svg","utils/aptos.ts","utils/consts.ts","store/selectors.ts","muiTheme.js","components/HeaderText.tsx","contexts/EthereumProviderContext.tsx","contexts/AlgorandWalletContext.tsx","contexts/NearWalletContext.tsx","contexts/SolanaWalletContext.tsx","contexts/XplaWalletContext.tsx","contexts/AptosWalletContext.tsx","contexts/InjectiveWalletContext.tsx","contexts/TerraWalletContext.tsx","contexts/SuiWalletContext.tsx","hooks/useIsWalletReady.ts","utils/near.ts","utils/injective.ts","utils/sui.ts","hooks/useFetchForeignAsset.ts","utils/algorand.ts","utils/karura.ts","utils/xpla.ts","utils/parseError.ts","utils/solana.ts","utils/terra.ts","utils/sleep.ts","utils/suiPublishHotfix.ts","hooks/useHandleCreateWrapped.tsx","hooks/useAttestSignedVAA.ts","components/ButtonWithLoader.tsx","components/ConnectWalletDialog.tsx","components/ToggleConnectedButton.tsx","utils/sanctions.ts","components/ConnectWalletButton.tsx","components/KeyAndBalance.tsx","store/feeSlice.ts","hooks/useTerraNativeBalances.ts","components/TerraFeeDenomPicker.tsx","components/Transfer/WaitingForWalletMessage.tsx","components/Attest/WaitingForWalletMessage.tsx","components/Attest/Create.tsx","components/ShowTx.tsx","components/Attest/CreatePreview.tsx","hooks/useHandleAttest.tsx","utils/metaplex.ts","hooks/useMetaplexData.ts","hooks/useCopyToClipboard.tsx","utils/pushToClipboard.ts","components/SmartBlock.tsx","components/TransactionProgress.tsx","components/Attest/Send.tsx","components/Attest/SendPreview.tsx","contexts/BetaContext.tsx","components/ChainSelect.tsx","store/helpers.ts","store/transferSlice.ts","hooks/useTransactionFees.tsx","components/LowBalanceWarning.tsx","components/Attest/Source.tsx","components/SmartAddress.tsx","components/Attest/SourcePreview.tsx","components/Attest/Target.tsx","components/Attest/TargetPreview.tsx","components/Attest/index.tsx","components/Footer.tsx","hooks/useEthereumMigratorInformation.tsx","components/NumberTextField.tsx","components/Migration/EvmWorkflow.tsx","components/Migration/index.tsx","components/Migration/EvmQuickMigrate.tsx","store/nftSlice.ts","hooks/useCheckIfWormholeWrapped.ts","hooks/useFetchTargetAsset.ts","hooks/useHandleNFTRedeem.tsx","hooks/useNFTSignedVAA.ts","components/SolanaTPSWarning.tsx","components/StepDescription.tsx","components/NFT/WaitingForWalletMessage.tsx","components/NFT/Redeem.tsx","components/NFT/RedeemPreview.tsx","hooks/useHandleNFTTransfer.tsx","hooks/useNFTTargetAddress.ts","components/NFT/Send.tsx","components/NFT/SendPreview.tsx","icons/acala.svg","icons/arbitrum.svg","icons/aurora.svg","icons/avax.svg","icons/bnb.svg","icons/celo.svg","icons/fantom.svg","icons/karura.svg","icons/klaytn.svg","icons/moonbeam.svg","icons/neon.svg","icons/oasis-network-rose-logo.svg","icons/polygon.svg","icons/aptos.svg","icons/sui.svg","hooks/useAlgoMetadata.ts","hooks/useGetSourceParsedTokenAccounts.ts","store/tokenSlice.ts","hooks/useMarketsMap.ts","utils/balancePretty.ts","icons/bsc.svg","icons/solana.svg","icons/wormhole-network.svg","components/TokenSelectors/NFTViewer.tsx","components/TokenSelectors/TokenPicker.tsx","components/TokenSelectors/AlgoTokenPicker.tsx","components/TokenSelectors/AptosTokenPicker.tsx","utils/ethereum.ts","components/TokenSelectors/EvmTokenPicker.tsx","hooks/useNearMetadata.ts","components/TokenSelectors/NearTokenPicker.tsx","components/TokenSelectors/RefreshButtonWrapper.tsx","hooks/useSolanaTokenMap.ts","utils/sort.ts","components/TokenSelectors/SolanaTokenPicker.tsx","components/TokenSelectors/TerraTokenPicker.tsx","components/TokenSelectors/XplaTokenPicker.tsx","hooks/useXplaNativeBalances.ts","icons/injective.svg","components/TokenSelectors/InjectiveTokenPicker.tsx","hooks/useInjectiveNativeBalances.ts","components/TokenSelectors/SuiTokenPicker.tsx","components/TokenSelectors/SourceTokenSelector.tsx","components/ChainWarningMessage.tsx","components/NFT/Source.tsx","components/NFT/SourcePreview.tsx","hooks/useSyncTargetAddress.ts","components/NFT/Target.tsx","components/NFT/TargetPreview.tsx","components/NFT/index.tsx","components/NFTOriginVerifier.tsx","hooks/useAcalaRelayerInfo.ts","hooks/useRelayersAvailable.ts","utils/getSignedVAAWithRetry.ts","components/RelaySelector.tsx","components/Transfer/PendingVAAWarning.tsx","components/Recovery.tsx","components/Stats/Charts/utils.tsx","components/Stats/Charts/CustomTooltip.tsx","components/Stats/Charts/TVLAreaChart.tsx","hooks/useCumulativeTVL.ts","components/Stats/Charts/TimeFrame.ts","components/Stats/Charts/MultiChainTooltip.tsx","components/Stats/Charts/TVLLineChart.tsx","components/Stats/Charts/TVLBarChart.tsx","utils/coinGecko.ts","hooks/useTVL.ts","components/Stats/tableComponents/TablePaginationActions.jsx","components/Stats/tableComponents/MuiReactTable.jsx","components/Stats/Charts/TVLTable.tsx","components/Stats/TVLStats.tsx","hooks/useNotionalTransferred.ts","components/Stats/Charts/VolumeAreaChart.tsx","components/Stats/Charts/VolumeStackedBarChart.tsx","components/Stats/Charts/VolumeLineChart.tsx","components/Stats/Charts/TransactionsAreaChart.tsx","components/Stats/Charts/TransactionsLineChart.tsx","hooks/useTransactionTotals.ts","components/Stats/VolumeStats.tsx","components/Stats/index.tsx","components/Stats/CustodyAddresses.tsx","hooks/useAptosMetadata.ts","hooks/useEvmMetadata.ts","hooks/useInjectiveMetadata.ts","hooks/useTerraMetadata.ts","hooks/useTerraTokenMap.ts","hooks/useXplaMetadata.ts","hooks/useSuiMetadata.ts","hooks/useMetadata.ts","hooks/useOriginalAsset.ts","components/Transfer/RegisterNowButton.tsx","components/TokenOriginVerifier.tsx","hooks/useTransferSignedVAA.ts","hooks/useGetIsTransferCompleted.ts","utils/ThresholdL2WormholeGateway.ts","hooks/useHandleRedeem.tsx","utils/suiRedeemHotfix.ts","components/SolanaCreateAssociatedAddress.tsx","components/Transfer/AddToMetamask.tsx","components/Transfer/FeaturedMarkets.tsx","components/Transfer/RedeemPreview.tsx","components/Transfer/Redeem.tsx","hooks/useHandleTransfer.tsx","hooks/useTransferTargetAddress.ts","hooks/useGetTargetParsedTokenAccounts.ts","hooks/useRelayerInfo.ts","components/FeeMethodSelector.tsx","components/Transfer/Target.tsx","components/Transfer/TokenWarning.tsx","components/Transfer/SendConfirmationDialog.tsx","components/Transfer/Send.tsx","hooks/useAllowance.ts","components/Transfer/SendPreview.tsx","components/ChainSelectArrow.tsx","components/Transfer/SourceAssetWarning.tsx","hooks/useIsTransferLimited.ts","components/Transfer/TransferLimitedWarning.tsx","components/Transfer/Source.tsx","components/Transfer/SourcePreview.tsx","components/Transfer/TargetPreview.tsx","hooks/useDeepLinkTransferParams.ts","components/Transfer/index.tsx","components/UnwrapNative.tsx","components/WithdrawTokensTerra.tsx","icons/portal_logo_w.svg","components/NewsBar/index.tsx","App.js","ErrorBoundary.js","components/BackgroundImage.tsx","store/index.ts","index.js","../webpack/bootstrap","../webpack/runtime/amd define","../webpack/runtime/amd options","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/create fake namespace object","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/load script","../webpack/runtime/make namespace object","../webpack/runtime/node module decorator","../webpack/runtime/publicPath","../webpack/runtime/jsonp chunk loading","../webpack/startup"],"sourcesContent":["import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Transaction } from \"./transferSlice\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\nexport interface AttestState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  sourceAsset: string;\n  targetChain: ChainId;\n  attestTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isCreating: boolean;\n  createTx: Transaction | undefined;\n}\n\nconst initialState: AttestState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  sourceAsset: \"\",\n  targetChain: CHAIN_ID_ETH,\n  attestTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isCreating: false,\n  createTx: undefined,\n};\n\nexport const attestSlice = createSlice({\n  name: \"attest\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceAsset = \"\";\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceAsset: (state, action: PayloadAction<string>) => {\n      state.sourceAsset = action.payload;\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceAsset = \"\";\n      }\n    },\n    setAttestTx: (state, action: PayloadAction<Transaction>) => {\n      state.attestTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsCreating: (state, action: PayloadAction<boolean>) => {\n      state.isCreating = action.payload;\n    },\n    setCreateTx: (state, action: PayloadAction<Transaction>) => {\n      state.createTx = action.payload;\n      state.isCreating = false;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceAsset,\n  setTargetChain,\n  setAttestTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsCreating,\n  setCreateTx,\n  reset,\n} = attestSlice.actions;\n\nexport default attestSlice.reducer;\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { CHAIN_ID_AURORA } from \"@certusone/wormhole-sdk\";\n\nexport type DisableTransfers = boolean | \"to\" | \"from\";\n\nexport interface WarningMessage {\n  text: string;\n  link?: {\n    url: string;\n    text: string;\n  };\n}\n\nexport interface ChainConfig {\n  disableTransfers?: DisableTransfers;\n  warningMessage?: WarningMessage;\n}\n\nexport type ChainConfigMap = {\n  [key in ChainId]?: ChainConfig;\n};\n\nexport const CHAIN_CONFIG_MAP: ChainConfigMap = {\n  [CHAIN_ID_AURORA]: {\n    disableTransfers: true,\n    warningMessage: {\n      text: \"As a precautionary measure, Dijets Network has paused all transfers on Bridge temporarily\",\n    },\n  } as ChainConfig,\n};\n","var _path, _path2, _path3, _path4, _path5;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgEth(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 1920 1920\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#8A92B2\",\n    d: \"M959.8 80.7 420.1 976.3 959.8 731z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#62688F\",\n    d: \"M959.8 731 420.1 976.3l539.7 319.1zM1499.6 976.3 959.8 80.7V731z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#454A75\",\n    d: \"m959.8 1295.4 539.8-319.1L959.8 731z\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#8A92B2\",\n    d: \"m420.1 1078.7 539.7 760.6v-441.7z\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#62688F\",\n    d: \"M959.8 1397.6v441.7l540.1-760.6z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgEth);\nexport default __webpack_public_path__ + \"static/media/eth.5a5de20bf3808241fc61ed9ad7680ab5.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _g, _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgDijets(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 556,\n    height: 556,\n    viewBox: \"0 0 556 556\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip0_884_328)\"\n  }, /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"mask0_884_328\",\n    style: {\n      maskType: \"luminance\"\n    },\n    maskUnits: \"userSpaceOnUse\",\n    x: 0,\n    y: 0,\n    width: 556,\n    height: 556\n  }, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M556 0H0V556H556V0Z\",\n    fill: \"white\"\n  }))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    mask: \"url(#mask0_884_328)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M474.582 474.582C583.148 366.016 583.148 189.996 474.582 81.4302C366.016 -27.1356 189.996 -27.1356 81.4298 81.4302C-27.1363 189.996 -27.1363 366.016 81.4298 474.582C189.996 583.147 366.016 583.147 474.582 474.582Z\",\n    fill: \"#FEE475\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M469.566 469.564C575.357 363.774 575.357 192.253 469.566 86.4629C363.775 -19.3276 192.254 -19.3276 86.4634 86.4629C-19.3274 192.253 -19.3274 363.774 86.4634 469.564C192.254 575.355 363.775 575.355 469.566 469.564Z\",\n    fill: \"#FED425\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M338.273 215.731C338.631 216.554 338.814 217.451 338.81 218.357V239.63C338.797 246.287 337.329 252.849 334.521 258.796C331.714 264.744 327.645 269.913 322.636 273.895C314.633 280.577 306.449 286.858 298.07 293.169L280.027 306.532C277.66 308.364 274.751 309.226 271.836 308.959C270.331 308.774 268.858 308.365 267.459 307.746C266.211 307.083 265.002 306.339 263.84 305.518C247.465 293.561 231.09 281.612 215.097 269.055C207.858 263.587 200.814 257.912 193.582 252.244C192.63 251.637 191.866 250.816 190.9 250.217C188.229 248.011 186.404 244.843 185.766 241.308C185.598 240.367 185.532 239.409 185.572 238.452V219.178C185.601 218.362 185.535 217.544 185.377 216.744C185.323 216.626 185.296 216.497 185.297 216.366C185.295 216.233 185.323 216.102 185.379 215.984C185.435 215.866 185.517 215.764 185.619 215.688C185.719 215.611 185.833 215.558 185.954 215.531H186.142C186.187 215.872 186.249 216.21 186.329 216.544C186.489 218.531 187.298 220.395 188.615 221.812C189.572 223.096 190.734 224.191 192.047 225.046C211.082 240.244 230.507 255.028 250.119 269.619C254.69 273.067 259.443 276.293 264.014 279.741C265.861 281.116 267.918 282.14 270.093 282.768C272.647 283.417 275.331 283.133 277.714 281.961C278.602 281.539 279.434 280.994 280.188 280.341C292.748 270.818 305.128 261.495 317.723 251.98C320.196 250.152 322.482 248.332 324.747 246.312C330.709 240.616 335.063 233.265 337.322 225.082C337.67 223.687 337.926 222.268 338.086 220.835C338.248 220.035 338.313 219.217 338.28 218.4L338.273 215.731ZM270.489 186.356H275.053C282.459 186.948 289.631 189.375 295.999 193.444C300.309 196.226 304.33 199.485 307.997 203.167C310.441 205.401 312.059 208.488 312.562 211.876C313.074 215.189 312.606 218.589 311.221 221.605C310.839 222.612 310.263 223.426 309.881 224.232C309.695 224.628 309.374 224.933 308.983 225.083C308.593 225.234 308.163 225.218 307.783 225.039C307.595 225.039 307.595 224.839 307.407 224.839C306.067 223.826 304.726 223.019 303.218 221.984C297.766 217.872 291.622 214.915 285.121 213.275C280.951 212.232 276.654 211.89 272.386 212.261C263.674 212.946 255.307 216.171 248.202 221.584C245.521 223.604 242.679 225.225 239.824 227.252C239.636 227.252 239.636 227.452 239.442 227.452C239.3 227.43 239.168 227.36 239.066 227.252L223.067 215.709C222.716 215.489 222.398 215.215 222.122 214.895C221.907 214.75 221.751 214.523 221.686 214.26C221.615 214.001 221.631 213.722 221.733 213.475C221.733 213.275 221.927 213.275 222.122 213.075L222.497 212.661C227.068 209.427 231.445 205.765 236.01 202.317C239.926 199.253 243.993 196.415 248.195 193.815C253.084 190.929 258.344 188.82 263.806 187.555C265.983 186.85 268.235 186.44 270.509 186.334L270.489 186.356ZM262.077 187.99V152.391C262.087 151.722 262.223 151.062 262.475 150.449C262.727 149.837 263.09 149.283 263.545 148.821C264.456 147.89 265.674 147.377 266.936 147.394H276.635C277.893 147.365 279.11 147.868 280.021 148.792C280.931 149.716 281.461 150.987 281.495 152.326V187.305C275.026 186.52 268.485 186.741 262.077 187.962V187.99ZM338.488 275.08C338.856 275.901 339.051 276.797 339.058 277.707V299.386C338.896 308.933 335.839 318.168 330.344 325.713C327.959 328.902 325.21 331.76 322.16 334.222C314.117 340.904 305.772 347.186 297.36 353.496L280.603 365.853C279.167 366.922 277.548 367.681 275.837 368.087C273.554 368.702 271.142 368.486 268.987 367.473C267.436 366.87 265.964 366.054 264.61 365.046C245.95 351.483 227.29 337.699 208.978 323.315C203.267 318.86 197.583 314.406 191.839 309.752C189.011 307.568 187.106 304.284 186.537 300.614C186.368 299.674 186.303 298.715 186.343 297.759V278.121C186.374 277.373 186.311 276.624 186.155 275.894C185.967 275.287 186.343 274.673 186.731 274.673C186.731 275.087 186.919 275.287 186.919 275.694C187.134 277.926 188.084 280.005 189.6 281.562C190.521 282.623 191.543 283.58 192.65 284.417C212.45 300.215 232.826 315.605 253.176 330.603C256.963 333.458 260.79 336.064 264.409 338.705C265.952 339.971 267.693 340.938 269.55 341.561C270.947 342.061 272.423 342.267 273.894 342.167C275.363 342.06 276.798 341.646 278.116 340.947C279.05 340.488 279.947 339.948 280.798 339.333C294.505 328.983 308.218 318.632 321.925 308.138C329.503 302.31 335.059 293.978 337.73 284.438C338.135 282.839 338.453 281.216 338.682 279.577C338.312 278.111 338.248 276.576 338.495 275.08H338.488ZM277.889 410.968H266.494C265.139 410.955 263.843 410.371 262.891 409.344C261.939 408.316 261.408 406.929 261.413 405.486L262.137 363.162C263.125 361.677 264.467 360.499 266.025 359.75L281.877 356.48C282.025 356.481 282.173 356.513 282.31 356.575C282.447 356.636 282.571 356.726 282.676 356.838C282.78 356.951 282.863 357.085 282.919 357.231C282.975 357.378 283.004 357.535 283.003 357.694V405.521C283.001 406.962 282.466 408.343 281.513 409.366C280.561 410.388 279.268 410.969 277.915 410.982L277.889 410.968Z\",\n    fill: \"#F68E00\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M356.912 216.842C357.293 217.668 357.492 218.567 357.494 219.477V240.754C357.477 247.413 355.902 253.976 352.893 259.925C349.884 265.873 345.525 271.044 340.159 275.028C331.592 281.718 322.817 287.994 313.84 294.306L294.509 307.665C291.974 309.494 288.863 310.358 285.741 310.1C284.126 309.913 282.545 309.502 281.045 308.879C279.71 308.215 278.415 307.473 277.167 306.659C259.624 294.699 242.081 282.746 224.947 270.186C217.192 264.717 209.652 259.041 201.896 253.371C200.877 252.764 200.065 251.943 199.024 251.343C196.157 249.137 194.199 245.966 193.516 242.425C193.336 241.484 193.266 240.526 193.308 239.569V220.326C193.338 219.51 193.271 218.692 193.107 217.891C193.047 217.773 193.016 217.642 193.016 217.509C193.016 217.377 193.047 217.246 193.107 217.127C193.166 217.011 193.252 216.911 193.358 216.835C193.466 216.758 193.588 216.704 193.717 216.678H193.918C193.966 217.02 194.035 217.358 194.127 217.691C194.29 219.679 195.158 221.543 196.575 222.954C197.594 224.243 198.837 225.341 200.245 226.195C220.639 241.39 241.449 256.184 262.461 270.772C267.358 274.221 272.449 277.455 277.354 280.897C279.329 282.276 281.531 283.302 283.86 283.931C286.596 284.582 289.473 284.295 292.025 283.117C292.979 282.701 293.871 282.156 294.674 281.497C308.139 271.979 321.395 262.653 334.888 253.128C337.538 251.308 339.986 249.487 342.414 247.459C348.806 241.755 353.471 234.391 355.885 226.195C356.259 224.8 356.532 223.381 356.704 221.947C356.877 221.148 356.947 220.329 356.912 219.512V216.842ZM284.291 187.445H289.181C297.115 188.044 304.798 190.474 311.622 194.543C316.231 197.327 320.53 200.589 324.447 204.275C327.065 206.514 328.8 209.603 329.344 212.993C329.89 216.305 329.388 219.703 327.908 222.718C327.499 223.732 326.881 224.546 326.472 225.353C326.27 225.747 325.927 226.05 325.51 226.203C325.091 226.353 324.631 226.338 324.224 226.16C324.023 226.16 324.023 225.96 323.822 225.96C322.386 224.946 320.95 224.132 319.334 223.104C313.493 218.989 306.91 216.029 299.945 214.386C295.477 213.349 290.874 213.009 286.301 213.379C276.976 214.056 268.016 217.267 260.4 222.661C257.527 224.689 254.483 226.31 251.416 228.33C251.215 228.33 251.215 228.537 251.014 228.537C250.859 228.515 250.715 228.442 250.605 228.33L233.471 216.785C233.092 216.569 232.748 216.297 232.451 215.978C232.223 215.827 232.057 215.601 231.982 215.339C231.907 215.077 231.928 214.797 232.042 214.55C232.042 214.343 232.25 214.343 232.451 214.143L232.854 213.736C237.751 210.501 242.44 206.838 247.33 203.382C251.519 200.326 255.869 197.497 260.364 194.907C265.603 192.023 271.237 189.913 277.088 188.645C279.423 187.947 281.834 187.537 284.269 187.424L284.291 187.445ZM275.279 189.088V153.494C275.314 152.154 275.882 150.883 276.858 149.958C277.833 149.034 279.137 148.531 280.485 148.56H290.847C292.194 148.531 293.499 149.034 294.474 149.958C295.45 150.883 296.017 152.154 296.053 153.494V188.481C289.118 187.684 282.103 187.894 275.228 189.102L275.279 189.088ZM357.142 276.199C357.535 277.023 357.745 277.921 357.759 278.833V300.511C357.575 310.068 354.285 319.308 348.381 326.851C345.824 330.039 342.879 332.898 339.613 335.362C330.996 342.046 322.055 348.329 313.043 354.641L295.091 367.001C293.55 368.064 291.816 368.821 289.985 369.229C287.539 369.842 284.957 369.629 282.646 368.622C280.983 368.017 279.406 367.199 277.957 366.187C257.965 352.62 237.974 338.84 218.391 324.452C212.273 319.997 206.183 315.541 200.029 310.886C197.005 308.697 194.965 305.415 194.349 301.746C194.171 300.805 194.103 299.847 194.148 298.89V279.255C194.176 278.508 194.106 277.762 193.94 277.034C193.739 276.42 194.148 275.813 194.557 275.813C194.557 276.22 194.758 276.42 194.758 276.827C194.989 279.061 196.006 281.143 197.631 282.703C198.622 283.761 199.716 284.718 200.898 285.559C222.111 301.361 243.941 316.755 265.742 331.749C269.8 334.606 273.9 337.219 277.778 339.854C279.429 341.122 281.294 342.089 283.285 342.71C284.78 343.216 286.36 343.424 287.935 343.319C289.51 343.215 291.049 342.802 292.463 342.103C293.463 341.644 294.424 341.104 295.335 340.489C310.02 330.136 324.712 319.782 339.398 309.279C347.514 303.45 353.466 295.12 356.33 285.581C356.764 283.978 357.104 282.352 357.35 280.711C356.934 279.246 356.846 277.708 357.091 276.206L357.142 276.199ZM292.226 412.127H280.018C278.568 412.112 277.183 411.528 276.163 410.503C275.144 409.477 274.573 408.092 274.575 406.65L275.35 364.309C276.413 362.829 277.85 361.654 279.515 360.903L296.498 357.633C296.658 357.633 296.815 357.664 296.962 357.725C297.109 357.787 297.242 357.877 297.353 357.99C297.465 358.103 297.554 358.236 297.615 358.383C297.675 358.53 297.706 358.688 297.705 358.847V406.686C297.701 408.125 297.128 409.505 296.11 410.527C295.091 411.549 293.709 412.132 292.262 412.148L292.226 412.127Z\",\n    fill: \"#FFEA94\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M415.26 417.101C493.619 338.743 495.942 214.024 420.45 138.532C344.958 63.0403 220.238 65.3639 141.88 143.722C63.5219 222.08 61.1982 346.8 136.69 422.291C212.182 497.783 336.902 495.459 415.26 417.101Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    opacity: 0.98,\n    d: \"M417.122 418.838C495.986 339.974 497.275 213.399 420.001 136.126C342.727 58.8519 216.153 60.1411 137.288 139.005C58.4242 217.869 57.135 344.443 134.409 421.717C211.683 498.991 338.258 497.701 417.122 418.838Z\",\n    fill: \"#FFBD00\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M367.422 216.826C367.843 217.74 368.062 218.732 368.064 219.737V243.247C368.046 250.604 366.306 257.856 362.981 264.428C359.657 271.001 354.84 276.714 348.911 281.115C339.446 288.507 329.75 295.442 319.832 302.416L298.473 317.177C295.672 319.197 292.235 320.151 288.786 319.867C287.001 319.66 285.255 319.206 283.597 318.518C282.122 317.783 280.691 316.964 279.312 316.064C259.929 302.85 240.546 289.643 221.615 275.766C213.046 269.723 204.715 263.451 196.146 257.187C195.02 256.517 194.123 255.61 192.973 254.947C189.805 252.509 187.641 249.005 186.887 245.093C186.687 244.054 186.61 242.995 186.657 241.938V220.676C186.69 219.774 186.616 218.871 186.435 217.986C186.368 217.855 186.334 217.711 186.334 217.564C186.334 217.417 186.368 217.273 186.435 217.142C186.5 217.014 186.595 216.903 186.712 216.818C186.831 216.734 186.966 216.675 187.109 216.645H187.331C187.384 217.023 187.46 217.397 187.561 217.765C187.742 219.961 188.701 222.021 190.267 223.579C191.393 225.004 192.766 226.217 194.321 227.161C216.854 243.949 239.848 260.296 263.063 276.413C268.474 280.224 274.1 283.798 279.519 287.6C281.701 289.124 284.134 290.258 286.707 290.953C289.73 291.672 292.909 291.355 295.728 290.054C296.783 289.594 297.768 288.991 298.656 288.263C313.533 277.747 328.179 267.443 343.087 256.919C346.015 254.907 348.721 252.896 351.402 250.655C358.465 244.353 363.62 236.217 366.287 227.161C366.7 225.62 367.002 224.051 367.191 222.467C367.383 221.584 367.46 220.68 367.422 219.777V216.826ZM287.183 184.347H292.586C301.352 185.008 309.842 187.693 317.381 192.188C322.473 195.264 327.223 198.869 331.551 202.941C334.444 205.415 336.361 208.828 336.962 212.574C337.565 216.233 337.011 219.987 335.375 223.319C334.923 224.439 334.241 225.339 333.789 226.23C333.566 226.665 333.186 227.001 332.725 227.169C332.263 227.335 331.755 227.318 331.305 227.122C331.083 227.122 331.083 226.901 330.861 226.901C329.274 225.781 327.687 224.881 325.902 223.745C319.448 219.198 312.175 215.928 304.48 214.112C299.543 212.967 294.457 212.591 289.405 213C279.101 213.748 269.201 217.296 260.786 223.256C257.612 225.497 254.248 227.287 250.86 229.52C250.638 229.52 250.638 229.749 250.416 229.749C250.244 229.724 250.085 229.643 249.964 229.52L231.033 216.763C230.614 216.525 230.234 216.225 229.906 215.872C229.654 215.705 229.47 215.455 229.387 215.166C229.304 214.877 229.328 214.567 229.454 214.294C229.454 214.065 229.684 214.065 229.906 213.844L230.351 213.395C235.762 209.821 240.943 205.774 246.346 201.955C250.973 198.579 255.78 195.453 260.746 192.591C266.535 189.404 272.76 187.073 279.225 185.672C281.804 184.901 284.469 184.447 287.159 184.323L287.183 184.347ZM277.226 186.161V146.834C277.265 145.353 277.892 143.949 278.97 142.928C280.048 141.906 281.489 141.35 282.978 141.382H294.427C295.916 141.35 297.357 141.906 298.435 142.928C299.512 143.949 300.14 145.353 300.179 146.834V185.491C292.517 184.611 284.766 184.842 277.17 186.177L277.226 186.161ZM367.675 282.409C368.109 283.32 368.342 284.312 368.358 285.32V309.272C368.154 319.831 364.519 330.041 357.996 338.375C355.171 341.897 351.917 345.055 348.308 347.779C338.787 355.163 328.909 362.105 318.952 369.08L299.116 382.736C297.413 383.911 295.498 384.747 293.475 385.197C290.772 385.875 287.919 385.639 285.366 384.527C283.528 383.859 281.786 382.954 280.185 381.836C258.096 366.847 236.008 351.621 214.371 335.724C207.611 330.801 200.883 325.878 194.083 320.735C190.742 318.316 188.488 314.69 187.807 310.637C187.61 309.597 187.536 308.538 187.585 307.481V285.786C187.616 284.961 187.538 284.137 187.355 283.332C187.133 282.654 187.585 281.983 188.037 281.983C188.037 282.433 188.26 282.654 188.26 283.103C188.514 285.572 189.638 287.872 191.433 289.596C192.528 290.765 193.737 291.822 195.043 292.752C218.481 310.211 242.601 327.22 266.689 343.787C271.172 346.942 275.702 349.83 279.987 352.741C281.811 354.143 283.872 355.211 286.072 355.897C287.723 356.456 289.469 356.685 291.21 356.57C292.95 356.455 294.65 355.998 296.212 355.226C297.317 354.719 298.379 354.123 299.386 353.443C315.611 342.004 331.845 330.565 348.07 318.96C357.037 312.52 363.614 303.315 366.779 292.775C367.258 291.005 367.634 289.208 367.906 287.395C367.446 285.776 367.349 284.077 367.62 282.417L367.675 282.409ZM295.95 432.595H282.462C280.86 432.579 279.329 431.934 278.203 430.8C277.077 429.667 276.446 428.138 276.448 426.544L277.305 379.761C278.479 378.126 280.067 376.828 281.907 375.998L300.671 372.385C300.847 372.385 301.021 372.42 301.183 372.487C301.346 372.555 301.492 372.654 301.615 372.78C301.74 372.904 301.838 373.052 301.905 373.214C301.971 373.377 302.005 373.551 302.004 373.726V426.584C302 428.174 301.367 429.698 300.242 430.827C299.116 431.957 297.589 432.6 295.99 432.619L295.95 432.595Z\",\n    fill: \"#AC5403\"\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    filter: \"url(#filter0_f_884_328)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M364.422 204.826C364.843 205.74 365.062 206.732 365.064 207.737V231.247C365.046 238.604 363.306 245.856 359.981 252.428C356.657 259.001 351.84 264.714 345.911 269.115C336.446 276.507 326.75 283.442 316.832 290.416L295.473 305.177C292.672 307.197 289.235 308.151 285.786 307.867C284.001 307.66 282.255 307.206 280.597 306.518C279.122 305.783 277.691 304.964 276.312 304.064C256.929 290.85 237.546 277.643 218.615 263.766C210.046 257.723 201.715 251.451 193.146 245.187C192.02 244.517 191.123 243.61 189.973 242.947C186.805 240.509 184.641 237.005 183.887 233.093C183.687 232.054 183.61 230.995 183.657 229.938V208.676C183.69 207.774 183.616 206.871 183.435 205.986C183.368 205.855 183.334 205.711 183.334 205.564C183.334 205.417 183.368 205.273 183.435 205.142C183.5 205.014 183.595 204.903 183.712 204.818C183.831 204.734 183.966 204.675 184.109 204.645H184.331C184.384 205.023 184.46 205.397 184.561 205.765C184.742 207.961 185.701 210.021 187.267 211.579C188.393 213.004 189.766 214.217 191.321 215.161C213.854 231.949 236.848 248.296 260.063 264.413C265.474 268.224 271.1 271.798 276.519 275.6C278.701 277.124 281.134 278.258 283.707 278.953C286.73 279.672 289.909 279.355 292.728 278.054C293.783 277.594 294.768 276.991 295.656 276.263C310.533 265.747 325.179 255.443 340.087 244.919C343.015 242.907 345.721 240.896 348.402 238.655C355.465 232.353 360.62 224.217 363.287 215.161C363.7 213.62 364.002 212.051 364.191 210.467C364.383 209.584 364.46 208.68 364.422 207.777V204.826ZM284.183 172.347H289.586C298.352 173.008 306.842 175.693 314.381 180.188C319.473 183.264 324.223 186.869 328.551 190.941C331.444 193.415 333.361 196.828 333.962 200.574C334.565 204.233 334.011 207.987 332.375 211.319C331.923 212.439 331.241 213.339 330.789 214.23C330.566 214.665 330.186 215.001 329.725 215.169C329.263 215.335 328.755 215.318 328.305 215.122C328.083 215.122 328.083 214.901 327.861 214.901C326.274 213.781 324.687 212.881 322.902 211.745C316.448 207.198 309.175 203.928 301.48 202.112C296.543 200.967 291.457 200.591 286.405 201C276.101 201.748 266.201 205.296 257.786 211.256C254.612 213.497 251.248 215.287 247.86 217.52C247.638 217.52 247.638 217.749 247.416 217.749C247.244 217.724 247.085 217.643 246.964 217.52L228.033 204.763C227.614 204.525 227.234 204.225 226.906 203.872C226.654 203.705 226.47 203.455 226.387 203.166C226.304 202.877 226.328 202.567 226.454 202.294C226.454 202.065 226.684 202.065 226.906 201.844L227.351 201.395C232.762 197.821 237.943 193.774 243.346 189.955C247.973 186.579 252.78 183.453 257.746 180.591C263.535 177.404 269.76 175.073 276.225 173.672C278.804 172.901 281.469 172.447 284.159 172.323L284.183 172.347ZM274.226 174.161V134.834C274.265 133.353 274.892 131.949 275.97 130.928C277.048 129.906 278.489 129.35 279.978 129.382H291.427C292.916 129.35 294.357 129.906 295.435 130.928C296.512 131.949 297.14 133.353 297.179 134.834V173.491C289.517 172.611 281.766 172.842 274.17 174.177L274.226 174.161ZM364.675 270.409C365.109 271.32 365.342 272.312 365.358 273.32V297.272C365.154 307.831 361.519 318.041 354.996 326.375C352.171 329.897 348.917 333.055 345.308 335.779C335.787 343.163 325.909 350.105 315.952 357.08L296.116 370.736C294.413 371.911 292.498 372.747 290.475 373.197C287.772 373.875 284.919 373.639 282.366 372.527C280.528 371.859 278.786 370.954 277.185 369.836C255.096 354.847 233.008 339.621 211.371 323.724C204.611 318.801 197.883 313.878 191.083 308.735C187.742 306.316 185.488 302.69 184.807 298.637C184.61 297.597 184.536 296.538 184.585 295.481V273.786C184.616 272.961 184.538 272.137 184.355 271.332C184.133 270.654 184.585 269.983 185.037 269.983C185.037 270.433 185.26 270.654 185.26 271.103C185.514 273.572 186.638 275.872 188.433 277.596C189.528 278.765 190.737 279.822 192.043 280.752C215.481 298.211 239.601 315.22 263.689 331.787C268.172 334.942 272.702 337.83 276.987 340.741C278.811 342.143 280.872 343.211 283.072 343.897C284.723 344.456 286.469 344.685 288.21 344.57C289.95 344.455 291.65 343.998 293.212 343.226C294.317 342.719 295.379 342.123 296.386 341.443C312.611 330.004 328.845 318.565 345.07 306.96C354.037 300.52 360.614 291.315 363.779 280.775C364.258 279.005 364.634 277.208 364.906 275.395C364.446 273.776 364.349 272.077 364.62 270.417L364.675 270.409ZM292.95 420.595H279.462C277.86 420.579 276.329 419.934 275.203 418.8C274.077 417.667 273.446 416.138 273.448 414.544L274.305 367.761C275.479 366.126 277.067 364.828 278.907 363.998L297.671 360.385C297.847 360.385 298.021 360.42 298.183 360.487C298.346 360.555 298.492 360.654 298.615 360.78C298.74 360.904 298.838 361.052 298.905 361.214C298.971 361.377 299.005 361.551 299.004 361.726V414.584C299 416.174 298.367 417.698 297.242 418.827C296.116 419.957 294.589 420.6 292.99 420.619L292.95 420.595Z\",\n    fill: \"white\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M364.422 204.826C364.843 205.74 365.062 206.732 365.064 207.737V231.247C365.046 238.604 363.306 245.856 359.981 252.428C356.657 259.001 351.84 264.714 345.911 269.115C336.446 276.507 326.75 283.442 316.832 290.416L295.473 305.177C292.672 307.197 289.235 308.151 285.786 307.867C284.001 307.66 282.255 307.206 280.597 306.518C279.122 305.783 277.691 304.964 276.312 304.064C256.929 290.85 237.546 277.643 218.615 263.766C210.046 257.723 201.715 251.451 193.146 245.187C192.02 244.517 191.123 243.61 189.973 242.947C186.805 240.509 184.641 237.005 183.887 233.093C183.687 232.054 183.61 230.995 183.657 229.938V208.676C183.69 207.774 183.616 206.871 183.435 205.986C183.368 205.855 183.334 205.711 183.334 205.564C183.334 205.417 183.368 205.273 183.435 205.142C183.5 205.014 183.595 204.903 183.712 204.818C183.831 204.734 183.966 204.675 184.109 204.645H184.331C184.384 205.023 184.46 205.397 184.561 205.765C184.742 207.961 185.701 210.021 187.267 211.579C188.393 213.004 189.766 214.217 191.321 215.161C213.854 231.949 236.848 248.296 260.063 264.413C265.474 268.224 271.1 271.798 276.519 275.6C278.701 277.124 281.134 278.258 283.707 278.953C286.73 279.672 289.909 279.355 292.728 278.054C293.783 277.594 294.768 276.991 295.656 276.263C310.533 265.747 325.179 255.443 340.087 244.919C343.015 242.907 345.721 240.896 348.402 238.655C355.465 232.353 360.62 224.217 363.287 215.161C363.7 213.62 364.002 212.051 364.191 210.467C364.383 209.584 364.46 208.68 364.422 207.777V204.826ZM284.183 172.347H289.586C298.352 173.008 306.842 175.693 314.381 180.188C319.473 183.264 324.223 186.869 328.551 190.941C331.444 193.415 333.361 196.828 333.962 200.574C334.565 204.233 334.011 207.987 332.375 211.319C331.923 212.439 331.241 213.339 330.789 214.23C330.566 214.665 330.186 215.001 329.725 215.169C329.263 215.335 328.755 215.318 328.305 215.122C328.083 215.122 328.083 214.901 327.861 214.901C326.274 213.781 324.687 212.881 322.902 211.745C316.448 207.198 309.175 203.928 301.48 202.112C296.543 200.967 291.457 200.591 286.405 201C276.101 201.748 266.201 205.296 257.786 211.256C254.612 213.497 251.248 215.287 247.86 217.52C247.638 217.52 247.638 217.749 247.416 217.749C247.244 217.724 247.085 217.643 246.964 217.52L228.033 204.763C227.614 204.525 227.234 204.225 226.906 203.872C226.654 203.705 226.47 203.455 226.387 203.166C226.304 202.877 226.328 202.567 226.454 202.294C226.454 202.065 226.684 202.065 226.906 201.844L227.351 201.395C232.762 197.821 237.943 193.774 243.346 189.955C247.973 186.579 252.78 183.453 257.746 180.591C263.535 177.404 269.76 175.073 276.225 173.672C278.804 172.901 281.469 172.447 284.159 172.323L284.183 172.347ZM274.226 174.161V134.834C274.265 133.353 274.892 131.949 275.97 130.928C277.048 129.906 278.489 129.35 279.978 129.382H291.427C292.916 129.35 294.357 129.906 295.435 130.928C296.512 131.949 297.14 133.353 297.179 134.834V173.491C289.517 172.611 281.766 172.842 274.17 174.177L274.226 174.161ZM364.675 270.409C365.109 271.32 365.342 272.312 365.358 273.32V297.272C365.154 307.831 361.519 318.041 354.996 326.375C352.171 329.897 348.917 333.055 345.308 335.779C335.787 343.163 325.909 350.105 315.952 357.08L296.116 370.736C294.413 371.911 292.498 372.747 290.475 373.197C287.772 373.875 284.919 373.639 282.366 372.527C280.528 371.859 278.786 370.954 277.185 369.836C255.096 354.847 233.008 339.621 211.371 323.724C204.611 318.801 197.883 313.878 191.083 308.735C187.742 306.316 185.488 302.69 184.807 298.637C184.61 297.597 184.536 296.538 184.585 295.481V273.786C184.616 272.961 184.538 272.137 184.355 271.332C184.133 270.654 184.585 269.983 185.037 269.983C185.037 270.433 185.26 270.654 185.26 271.103C185.514 273.572 186.638 275.872 188.433 277.596C189.528 278.765 190.737 279.822 192.043 280.752C215.481 298.211 239.601 315.22 263.689 331.787C268.172 334.942 272.702 337.83 276.987 340.741C278.811 342.143 280.872 343.211 283.072 343.897C284.723 344.456 286.469 344.685 288.21 344.57C289.95 344.455 291.65 343.998 293.212 343.226C294.317 342.719 295.379 342.123 296.386 341.443C312.611 330.004 328.845 318.565 345.07 306.96C354.037 300.52 360.614 291.315 363.779 280.775C364.258 279.005 364.634 277.208 364.906 275.395C364.446 273.776 364.349 272.077 364.62 270.417L364.675 270.409ZM292.95 420.595H279.462C277.86 420.579 276.329 419.934 275.203 418.8C274.077 417.667 273.446 416.138 273.448 414.544L274.305 367.761C275.479 366.126 277.067 364.828 278.907 363.998L297.671 360.385C297.847 360.385 298.021 360.42 298.183 360.487C298.346 360.555 298.492 360.654 298.615 360.78C298.74 360.904 298.838 361.052 298.905 361.214C298.971 361.377 299.005 361.551 299.004 361.726V414.584C299 416.174 298.367 417.698 297.242 418.827C296.116 419.957 294.589 420.6 292.99 420.619L292.95 420.595Z\",\n    fill: \"white\"\n  })))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter0_f_884_328\",\n    x: 177.334,\n    y: 123.381,\n    width: 194.024,\n    height: 303.238,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"BackgroundImageFix\",\n    result: \"shape\"\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 3,\n    result: \"effect1_foregroundBlur_884_328\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip0_884_328\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 556,\n    height: 556,\n    fill: \"white\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgDijets);\nexport default __webpack_public_path__ + \"static/media/dijets.1bf384715e6c9961d3dea9f27b2afa75.svg\";\nexport { ForwardRef as ReactComponent };","import { CHAIN_ID_APTOS } from \"@certusone/wormhole-sdk\";\nimport { AptosWallet } from \"@xlabs-libs/wallet-aggregator-aptos\";\nimport { AptosClient, Types } from \"aptos\";\nimport { hexZeroPad } from \"ethers/lib/utils\";\nimport {\n  APTOS_INDEXER_URL,\n  APTOS_URL,\n  getBridgeAddressForChain,\n} from \"./consts\";\nimport axios from \"axios\";\n\nexport enum AptosNetwork {\n  Testnet = \"Testnet\",\n  Mainnet = \"Mainnet\",\n  Devnet = \"Devnet\",\n  Localhost = \"Localhost\",\n}\n\nexport const getAptosClient = () => new AptosClient(APTOS_URL);\n\nexport const getEmitterAddressAndSequenceFromResult = (\n  result: Types.UserTransaction\n): { emitterAddress: string; sequence: string } => {\n  const data = result.events.find(\n    (e) =>\n      e.type ===\n      `${getBridgeAddressForChain(CHAIN_ID_APTOS)}::state::WormholeMessage`\n  )?.data;\n  const emitterAddress = hexZeroPad(\n    `0x${parseInt(data?.sender).toString(16)}`,\n    32\n  ).substring(2);\n  const sequence = data?.sequence;\n  return {\n    emitterAddress,\n    sequence,\n  };\n};\n\nexport async function waitForSignAndSubmitTransaction(\n  payload: any,\n  wallet: AptosWallet\n): Promise<string> {\n  // The wallets do not handle Uint8Array serialization'\n  if (payload?.arguments) {\n    payload.arguments = payload.arguments.map((a: any) =>\n      a instanceof Uint8Array ? Array.from(a) : a\n    );\n  }\n  try {\n    let hash = \"\";\n    hash = (await wallet.signAndSendTransaction(payload)).id;\n    if (!hash) {\n      throw new Error(\"Invalid hash\");\n    }\n    const client = getAptosClient();\n    await client.waitForTransaction(hash);\n    return hash;\n  } catch (e) {\n    throw e;\n  }\n}\n\nexport interface CurrentTokensResponse {\n  data: { current_token_ownerships: Token[] };\n}\n\nexport interface Token {\n  token_data_id_hash: string;\n  name: string;\n  collection_name: string;\n  property_version: number;\n  creator_address: string;\n  current_token_data: {\n    metadata_uri: string;\n  };\n}\n\nexport async function fetchCurrentTokens(\n  ownerAddress: string,\n  offset: number,\n  limit: number\n) {\n  const response = await axios.post<CurrentTokensResponse>(APTOS_INDEXER_URL, {\n    query: `query CurrentTokens($owner_address: String, $offset: Int, $limit: Int) {\n      current_token_ownerships(\n      where: {owner_address: {_eq: $owner_address}, amount: {_eq: \"1\"}, table_type: {_eq: \"0x3::token::TokenStore\"}}\n      order_by: {last_transaction_version: desc}\n      offset: $offset\n      limit: $limit\n    ) {\n      token_data_id_hash\n      name\n      collection_name\n      property_version\n      creator_address\n      current_token_data {\n        metadata_uri\n      }\n    }\n  }`,\n    variables: { owner_address: ownerAddress, offset, limit },\n  });\n  return response.data;\n}\n","import {\n  ChainId,\n  CHAIN_ID_ACALA,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_ARBITRUM,\n  CHAIN_ID_AURORA,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_BTC,\n  CHAIN_ID_CELO,\n  CHAIN_ID_ETH,\n  CHAIN_ID_FANTOM,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_KARURA,\n  CHAIN_ID_KLAYTN,\n  CHAIN_ID_MOONBEAM,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_NEON,\n  CHAIN_ID_OASIS,\n  CHAIN_ID_OPTIMISM,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_SUI,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_TERRA2,\n  CHAIN_ID_XPLA,\n  CONTRACTS,\n  coalesceChainName,\n  isEVMChain,\n  isTerraChain,\n  TerraChainId,\n  hexToNativeString,\n  ensureHexPrefix,\n  uint8ArrayToHex,\n  hexToNativeAssetString,\n  isCosmWasmChain,\n} from \"@certusone/wormhole-sdk\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { CHAIN_CONFIG_MAP } from \"../config\";\nimport aptosIcon from \"../icons/aptos.svg\";\nimport acalaIcon from \"../icons/acala.svg\";\nimport algorandIcon from \"../icons/algorand.svg\";\nimport arbitrumIcon from \"../icons/arbitrum.svg\";\nimport auroraIcon from \"../icons/aurora.svg\";\nimport avaxIcon from \"../icons/avax.svg\";\nimport bscIcon from \"../icons/bsc.svg\";\nimport celoIcon from \"../icons/celo.svg\";\nimport ethIcon from \"../icons/eth.svg\";\nimport fantomIcon from \"../icons/fantom.svg\";\nimport karuraIcon from \"../icons/karura.svg\";\nimport klaytnIcon from \"../icons/klaytn.svg\";\nimport moonbeamIcon from \"../icons/moonbeam.svg\";\nimport neonIcon from \"../icons/neon.svg\";\nimport oasisIcon from \"../icons/oasis-network-rose-logo.svg\";\nimport optimismIcon from \"../icons/optimism.svg\";\nimport polygonIcon from \"../icons/polygon.svg\";\nimport solanaIcon from \"../icons/dijets.svg\";\nimport suiIcon from \"../icons/sui.svg\";\nimport terraIcon from \"../icons/terra.svg\";\nimport terra2Icon from \"../icons/terra2.svg\";\nimport nearIcon from \"../icons/near.svg\";\nimport xplaIcon from \"../icons/xpla.svg\";\nimport injectiveIcon from \"../icons/injective.svg\";\nimport { ConnectConfig, keyStores } from \"near-api-js\";\nimport { AptosNetwork } from \"./aptos\";\nimport { getNetworkInfo, Network } from \"@injectivelabs/networks\";\nimport { ChainId as InjectiveChainId } from \"@injectivelabs/ts-types\";\nimport {\n  testnetConnection,\n  localnetConnection,\n  Connection,\n} from \"@mysten/sui.js\";\n\nexport type Cluster = \"devnet\" | \"testnet\" | \"mainnet\";\nexport const CLUSTER: Cluster =\n  process.env.REACT_APP_CLUSTER === \"mainnet\"\n    ? \"mainnet\"\n    : process.env.REACT_APP_CLUSTER === \"testnet\"\n    ? \"testnet\"\n    : \"devnet\";\n\nexport interface ChainInfo {\n  id: ChainId;\n  name: string;\n  logo: string;\n}\nexport const CHAINS: ChainInfo[] =\n  CLUSTER === \"mainnet\"\n    ? [\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Dijets\",\n          logo: solanaIcon,\n        },\n      ]\n    : CLUSTER === \"testnet\"\n    ? [\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum Mainnet\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Dijets Utility Chain\",\n          logo: solanaIcon,\n        },\n      ]\n    : [\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum Mainnet\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Dijets Utility Chain\",\n          logo: solanaIcon,\n        },\n      ];\nexport const BETA_CHAINS: ChainId[] = CLUSTER === \"mainnet\" ? [] : [];\nexport const CHAINS_WITH_NFT_SUPPORT = CHAINS.filter(\n  ({ id }) =>\n    id === CHAIN_ID_AVAX ||\n    id === CHAIN_ID_BSC ||\n    id === CHAIN_ID_ETH ||\n    id === CHAIN_ID_POLYGON ||\n    id === CHAIN_ID_OASIS ||\n    id === CHAIN_ID_SOLANA ||\n    id === CHAIN_ID_AURORA ||\n    id === CHAIN_ID_FANTOM ||\n    id === CHAIN_ID_KARURA ||\n    id === CHAIN_ID_ACALA ||\n    id === CHAIN_ID_KLAYTN ||\n    id === CHAIN_ID_CELO ||\n    id === CHAIN_ID_NEON ||\n    id === CHAIN_ID_MOONBEAM ||\n    id === CHAIN_ID_ARBITRUM ||\n    id === CHAIN_ID_OPTIMISM ||\n    id === CHAIN_ID_APTOS\n);\nexport type ChainsById = { [key in ChainId]: ChainInfo };\nexport const CHAINS_BY_ID: ChainsById = CHAINS.reduce((obj, chain) => {\n  obj[chain.id] = chain;\n  return obj;\n}, {} as ChainsById);\n\nexport const THRESHOLD_GATEWAYS: any = {\n  [CHAIN_ID_POLYGON]:\n    CLUSTER === \"mainnet\"\n      ? \"0x09959798B95d00a3183d20FaC298E4594E599eab\"\n      : \"0x91fe7128f74dbd4f031ea3d90fc5ea4dcfd81818\",\n  [CHAIN_ID_OPTIMISM]:\n    CLUSTER === \"mainnet\"\n      ? \"0x1293a54e160D1cd7075487898d65266081A15458\"\n      : \"0x6449F4381f3d63bDfb36B3bDc375724aD3cD4621\",\n  [CHAIN_ID_ARBITRUM]:\n    CLUSTER === \"mainnet\"\n      ? \"0x1293a54e160D1cd7075487898d65266081A15458\"\n      : \"0x31A15e213B59E230b45e8c5c99dAFAc3d1236Ee2\",\n};\n\nexport const THRESHOLD_TBTC_CONTRACTS: any = {\n  [CHAIN_ID_ETH]:\n    CLUSTER === \"mainnet\"\n      ? \"0x18084fbA666a33d37592fA2633fD49a74DD93a88\"\n      : \"0x679874fBE6D4E7Cc54A59e315FF1eB266686a937\",\n  [CHAIN_ID_POLYGON]:\n    CLUSTER === \"mainnet\"\n      ? \"0x236aa50979D5f3De3Bd1Eeb40E81137F22ab794b\"\n      : \"0xBcD7917282E529BAA6f232DdDc75F3901245A492\",\n  [CHAIN_ID_OPTIMISM]:\n    CLUSTER === \"mainnet\"\n      ? \"0x6c84a8f1c29108F47a79964b5Fe888D4f4D0dE40\"\n      : \"0x1a53759DE2eADf73bd0b05c07a4F1F5B7912dA3d\",\n  [CHAIN_ID_ARBITRUM]:\n    CLUSTER === \"mainnet\"\n      ? \"0x6c84a8f1c29108F47a79964b5Fe888D4f4D0dE40\"\n      : \"0x85727F4725A4B2834e00Db1AA8e1b843a188162F\",\n};\n\n// prettier-ignore\nexport const TBTC_ASSET_ADDRESS = THRESHOLD_TBTC_CONTRACTS[CHAIN_ID_ETH].slice(2).padStart(64, \"0\");\nexport const THRESHOLD_ARBITER_FEE = 0;\nexport const THRESHOLD_NONCE = 0;\n\n// TRM screening chain names map with wormhole chain ids\n// https://documentation.trmlabs.com/tag/Supported-Blockchain-List\nexport const getTrmChainName = (chain: ChainId) => {\n  const trm_chain_names: any = {\n    [CHAIN_ID_ALGORAND]: \"algorand\",\n    [CHAIN_ID_BTC]: \"bitcoin\",\n    [CHAIN_ID_SOLANA]: \"solana\",\n    [CHAIN_ID_AVAX]: \"avalanche_c_chain\",\n    [CHAIN_ID_BSC]: \"binance_smart_chain\",\n    [CHAIN_ID_CELO]: \"celo\",\n    [CHAIN_ID_OPTIMISM]: \"optimism\",\n    [CHAIN_ID_POLYGON]: \"polygon\",\n    [CHAIN_ID_ARBITRUM]: \"arbitrum\",\n  };\n\n  if (trm_chain_names[chain]) return trm_chain_names[chain];\n  if (isCosmWasmChain(chain)) return \"cosmos\";\n  if (isEVMChain(chain)) return \"ethereum\";\n\n  return \"\";\n};\n\nexport const COMING_SOON_CHAINS: ChainInfo[] = [];\nexport const getDefaultNativeCurrencySymbol = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? \"SOL\"\n    : chainId === CHAIN_ID_ETH\n    ? \"ETH\"\n    : chainId === CHAIN_ID_BSC\n    ? \"BNB\"\n    : chainId === CHAIN_ID_TERRA\n    ? \"LUNC\"\n    : chainId === CHAIN_ID_TERRA2\n    ? \"LUNA\"\n    : chainId === CHAIN_ID_POLYGON\n    ? \"MATIC\"\n    : chainId === CHAIN_ID_AVAX\n    ? \"AVAX\"\n    : chainId === CHAIN_ID_OASIS\n    ? \"ROSE\"\n    : chainId === CHAIN_ID_OPTIMISM\n    ? \"ETH\"\n    : chainId === CHAIN_ID_ALGORAND\n    ? \"ALGO\"\n    : chainId === CHAIN_ID_AURORA\n    ? \"ETH\"\n    : chainId === CHAIN_ID_FANTOM\n    ? \"FTM\"\n    : chainId === CHAIN_ID_KARURA\n    ? \"KAR\"\n    : chainId === CHAIN_ID_ACALA\n    ? \"ACA\"\n    : chainId === CHAIN_ID_KLAYTN\n    ? \"KLAY\"\n    : chainId === CHAIN_ID_CELO\n    ? \"CELO\"\n    : chainId === CHAIN_ID_XPLA\n    ? \"XPLA\"\n    : chainId === CHAIN_ID_NEON\n    ? \"NEON\"\n    : chainId === CHAIN_ID_MOONBEAM\n    ? \"GLMR\"\n    : chainId === CHAIN_ID_APTOS\n    ? \"APTOS\"\n    : chainId === CHAIN_ID_ARBITRUM\n    ? \"ETH\"\n    : chainId === CHAIN_ID_INJECTIVE\n    ? \"INJ\"\n    : chainId === CHAIN_ID_SUI\n    ? \"SUI\"\n    : \"\";\n\nexport const getDefaultNativeCurrencyAddressEvm = (chainId: ChainId) => {\n  return chainId === CHAIN_ID_ETH\n    ? WETH_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? WBNB_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? WMATIC_ADDRESS\n    : chainId === CHAIN_ID_AVAX\n    ? WAVAX_ADDRESS\n    : chainId === CHAIN_ID_OASIS\n    ? WROSE_ADDRESS\n    : chainId === CHAIN_ID_AURORA\n    ? WETH_AURORA_ADDRESS\n    : chainId === CHAIN_ID_FANTOM\n    ? WFTM_ADDRESS\n    : chainId === CHAIN_ID_KARURA\n    ? KAR_ADDRESS\n    : chainId === CHAIN_ID_ACALA\n    ? ACA_ADDRESS\n    : chainId === CHAIN_ID_KLAYTN\n    ? WKLAY_ADDRESS\n    : chainId === CHAIN_ID_CELO\n    ? CELO_ADDRESS\n    : chainId === CHAIN_ID_NEON\n    ? WNEON_ADDRESS\n    : chainId === CHAIN_ID_MOONBEAM\n    ? WGLMR_ADDRESS\n    : \"\";\n};\n\nexport const getExplorerName = (chainId: ChainId) =>\n  chainId === CHAIN_ID_ETH\n    ? \"Etherscan\"\n    : chainId === CHAIN_ID_BSC\n    ? \"BscScan\"\n    : isTerraChain(chainId)\n    ? \"Finder\"\n    : chainId === CHAIN_ID_POLYGON\n    ? \"Polygonscan\"\n    : chainId === CHAIN_ID_AVAX\n    ? \"Snowtrace\"\n    : chainId === CHAIN_ID_ALGORAND\n    ? \"AlgoExplorer\"\n    : chainId === CHAIN_ID_FANTOM\n    ? \"FTMScan\"\n    : chainId === CHAIN_ID_KLAYTN\n    ? \"Klaytnscope\"\n    : chainId === CHAIN_ID_SOLANA\n    ? \"Solscan\"\n    : chainId === CHAIN_ID_MOONBEAM\n    ? \"Moonscan\"\n    : chainId === CHAIN_ID_XPLA\n    ? \"XPLA Explorer\"\n    : chainId === CHAIN_ID_ARBITRUM\n    ? \"Arbiscan\"\n    : chainId === CHAIN_ID_OPTIMISM\n    ? \"Optimism Explorer\"\n    : \"Explorer\";\nexport const WORMHOLE_RPC_HOSTS =\n  CLUSTER === \"mainnet\"\n    ? [\n        \"https://wormhole-v2-mainnet-api.certus.one\",\n        \"https://wormhole.inotel.ro\",\n        \"https://wormhole-v2-mainnet-api.mcf.rocks\",\n        \"https://wormhole-v2-mainnet-api.chainlayer.network\",\n        \"https://wormhole-v2-mainnet-api.staking.fund\",\n        \"https://wormhole-v2-mainnet.01node.com\",\n      ]\n    : CLUSTER === \"testnet\"\n    ? [\"https://wormhole-v2-testnet-api.certus.one\"]\n    : [\"http://localhost:7071\"];\nexport const ETH_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 1 : CLUSTER === \"testnet\" ? 5 : 1337;\nexport const ROPSTEN_ETH_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 1 : CLUSTER === \"testnet\" ? 3 : 1337;\nexport const BSC_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 56 : CLUSTER === \"testnet\" ? 97 : 1397;\nexport const POLYGON_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 137 : CLUSTER === \"testnet\" ? 80001 : 1381;\nexport const AVAX_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 43114 : CLUSTER === \"testnet\" ? 43113 : 1381;\nexport const OASIS_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 42262 : CLUSTER === \"testnet\" ? 42261 : 1381;\nexport const AURORA_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\"\n    ? 1313161554\n    : CLUSTER === \"testnet\"\n    ? 1313161555\n    : 1381;\nexport const FANTOM_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 250 : CLUSTER === \"testnet\" ? 4002 : 1381;\nexport const KARURA_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 686 : CLUSTER === \"testnet\" ? 596 : 1381;\nexport const ACALA_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 787 : CLUSTER === \"testnet\" ? 597 : 1381;\nexport const KLAYTN_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 8217 : CLUSTER === \"testnet\" ? 1001 : 1381;\nexport const CELO_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 42220 : CLUSTER === \"testnet\" ? 44787 : 1381;\nexport const NEON_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 245022934 : CLUSTER === \"testnet\" ? 245022926 : 1381;\nexport const MOONBEAM_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 1284 : CLUSTER === \"testnet\" ? 1287 : 1381;\nexport const ARBITRUM_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 42161 : CLUSTER === \"testnet\" ? 421613 : 1381;\nexport const OPTIMISM_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 10 : CLUSTER === \"testnet\" ? 420 : 1381;\nexport const getEvmChainId = (chainId: ChainId) =>\n  chainId === CHAIN_ID_ETH\n    ? ETH_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_BSC\n    ? BSC_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_OASIS\n    ? OASIS_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_AURORA\n    ? AURORA_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_FANTOM\n    ? FANTOM_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_KARURA\n    ? KARURA_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_ACALA\n    ? ACALA_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_KLAYTN\n    ? KLAYTN_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_CELO\n    ? CELO_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_NEON\n    ? NEON_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_MOONBEAM\n    ? MOONBEAM_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_ARBITRUM\n    ? ARBITRUM_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_OPTIMISM\n    ? OPTIMISM_NETWORK_CHAIN_ID\n    : undefined;\nexport const SOLANA_HOST = process.env.REACT_APP_SOLANA_API_URL\n  ? process.env.REACT_APP_SOLANA_API_URL\n  : CLUSTER === \"mainnet\"\n  ? clusterApiUrl(\"mainnet-beta\")\n  : CLUSTER === \"testnet\"\n  ? clusterApiUrl(\"devnet\")\n  : \"http://localhost:8899\";\n\nexport const getTerraConfig = (chainId: TerraChainId) => {\n  const isClassic = chainId === CHAIN_ID_TERRA;\n  return CLUSTER === \"mainnet\"\n    ? {\n        URL:\n          chainId === CHAIN_ID_TERRA2\n            ? \"https://phoenix-lcd.terra.dev\"\n            : \"https://terra-classic-lcd.publicnode.com\",\n        chainID: chainId === CHAIN_ID_TERRA2 ? \"phoenix-1\" : \"columbus-5\",\n        name: \"mainnet\",\n        isClassic,\n      }\n    : CLUSTER === \"testnet\"\n    ? {\n        URL:\n          chainId === CHAIN_ID_TERRA2\n            ? \"https://pisco-lcd.terra.dev\"\n            : \"https://bombay-lcd.terra.dev\",\n        chainID: chainId === CHAIN_ID_TERRA2 ? \"pisco-1\" : \"bombay-12\",\n        name: \"testnet\",\n        isClassic,\n      }\n    : {\n        URL:\n          chainId === CHAIN_ID_TERRA2\n            ? \"http://localhost:1318\"\n            : \"http://localhost:1317\",\n        chainID: chainId === CHAIN_ID_TERRA2 ? \"phoenix-1\" : \"columbus-5\",\n        name: \"localterra\",\n        isClassic,\n      };\n};\n\nexport const XPLA_LCD_CLIENT_CONFIG =\n  CLUSTER === \"mainnet\"\n    ? { URL: \"https://dimension-lcd.xpla.dev\", chainID: \"dimension_37-1\" }\n    : { URL: \"https://cube-lcd.xpla.dev\", chainID: \"cube_47-5\" };\n\nexport const XPLA_GAS_PRICES_URL =\n  CLUSTER === \"mainnet\"\n    ? \"https://dimension-fcd.xpla.dev/v1/txs/gas_prices\"\n    : \"https://cube-fcd.xpla.dev/v1/txs/gas_prices\";\n\nexport const APTOS_URL =\n  CLUSTER === \"mainnet\"\n    ? \"https://fullnode.mainnet.aptoslabs.com\"\n    : CLUSTER === \"testnet\"\n    ? \"https://testnet.aptoslabs.com\"\n    : \"http://localhost:8080\";\n\nexport const APTOS_INDEXER_URL =\n  CLUSTER === \"mainnet\"\n    ? \"https://indexer.mainnet.aptoslabs.com/v1/graphql\"\n    : CLUSTER === \"testnet\"\n    ? \"https://indexer-testnet.staging.gcp.aptosdev.com/v1/graphql\"\n    : \"\";\n\nexport const APTOS_NETWORK =\n  CLUSTER === \"mainnet\"\n    ? AptosNetwork.Mainnet\n    : CLUSTER === \"testnet\"\n    ? AptosNetwork.Testnet\n    : AptosNetwork.Localhost;\n\nexport const APTOS_NATIVE_DECIMALS = 8;\nexport const APTOS_NATIVE_TOKEN_KEY = \"0x1::aptos_coin::AptosCoin\";\n\nexport const getInjectiveNetworkName = () => {\n  if (CLUSTER === \"mainnet\") {\n    return Network.MainnetK8s;\n  } else if (CLUSTER === \"testnet\") {\n    return Network.TestnetK8s;\n  }\n  throw Error(\"Unsupported injective network\");\n};\nexport const getInjectiveNetwork = () => {\n  if (CLUSTER === \"mainnet\") {\n    return Network.MainnetK8s;\n  } else if (CLUSTER === \"testnet\") {\n    return Network.TestnetK8s;\n  }\n  throw Error(\"Unsupported injective network\");\n};\n\nexport const getInjectiveNetworkInfo = () => {\n  if (CLUSTER === \"mainnet\") {\n    return getNetworkInfo(Network.MainnetK8s);\n  } else if (CLUSTER === \"testnet\") {\n    return getNetworkInfo(Network.TestnetK8s);\n  }\n  throw Error(\"Unsupported injective network\");\n};\n\nexport const getInjectiveNetworkChainId = () => {\n  if (CLUSTER === \"mainnet\") {\n    return InjectiveChainId.Mainnet;\n  } else if (CLUSTER === \"testnet\") {\n    return InjectiveChainId.Testnet;\n  }\n  throw Error(\"Unsupported injective network\");\n};\n\nexport const SUI_CONNECTION =\n  CLUSTER === \"mainnet\"\n    ? new Connection({ fullnode: \"https://rpc.mainnet.sui.io\" })\n    : CLUSTER === \"testnet\"\n    ? testnetConnection\n    : localnetConnection;\n\nexport const SUI_NATIVE_DECIMALS = 9;\nexport const SUI_NATIVE_TOKEN_KEY = \"0x2::sui::SUI\";\n\nexport const ALGORAND_HOST =\n  CLUSTER === \"mainnet\"\n    ? {\n        algodToken: \"\",\n        algodServer: \"https://mainnet-api.algonode.cloud\",\n        algodPort: \"\",\n      }\n    : CLUSTER === \"testnet\"\n    ? {\n        algodToken: \"\",\n        algodServer: \"https://testnet-api.algonode.cloud\",\n        algodPort: \"\",\n      }\n    : {\n        algodToken:\n          \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n        algodServer: \"http://localhost\",\n        algodPort: \"4001\",\n      };\nexport const KARURA_HOST =\n  CLUSTER === \"mainnet\"\n    ? \"https://eth-rpc-karura.aca-api.network/\"\n    : CLUSTER === \"testnet\"\n    ? \"https://karura-dev.aca-dev.network/eth/http\"\n    : \"\";\nexport const ACALA_HOST =\n  CLUSTER === \"mainnet\"\n    ? \"https://eth-rpc-acala.aca-api.network/\"\n    : CLUSTER === \"testnet\"\n    ? \"https://acala-dev.aca-dev.network/eth/http\"\n    : \"\";\nexport const ETH_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x706abc4E45D419950511e474C7B9Ed348A4a716c\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const ETH_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x6FFd7EdE62328b3Af38FCD61461Bbfc52F5651fE\"\n    : CLUSTER === \"testnet\"\n    ? \"0xD8E4C2DbDd2e2bd8F1336EA691dBFF6952B1a6eB\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const ETH_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x3ee18B2214AFF97000D974cf647E7C347E8fa585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xF890982f9310df57d00f659cf4fd87e65adEd8d7\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const BSC_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x68605AD7b15c732a30b1BbC62BE8F2A509D74b4D\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const BSC_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5a58505a96D1dbf8dF91cB21B54419FC36e93fdE\"\n    : CLUSTER === \"testnet\"\n    ? \"0xcD16E5613EF35599dc82B24Cb45B5A93D779f1EE\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const BSC_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xB6F6D86a8f9879A9c87f643768d9efc38c1Da6E7\"\n    : CLUSTER === \"testnet\"\n    ? \"0x9dcF9D205C9De35334D646BeE44b2D2859712A09\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const POLYGON_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x7A4B5a56256163F07b2C80A7cA55aBE66c4ec4d7\"\n    : CLUSTER === \"testnet\"\n    ? \"0x0CBE91CF822c73C2315FB05100C2F714765d5c20\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const POLYGON_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x90BBd86a6Fe93D3bc3ed6335935447E75fAb7fCf\"\n    : CLUSTER === \"testnet\"\n    ? \"0x51a02d0dcb5e52F5b92bdAA38FA013C91c7309A9\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const POLYGON_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5a58505a96D1dbf8dF91cB21B54419FC36e93fdE\"\n    : CLUSTER === \"testnet\"\n    ? \"0x377D55a7928c046E18eEbb61977e714d2a76472a\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const AVAX_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x54a8e5f9c4CbA08F9943965859F6c34eAF03E26c\"\n    : CLUSTER === \"testnet\"\n    ? \"0x7bbcE28e64B3F8b84d876Ab298393c38ad7aac4C\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const AVAX_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xf7B6737Ca9c4e08aE573F75A97B73D7a813f5De5\"\n    : CLUSTER === \"testnet\"\n    ? \"0xD601BAf2EEE3C028344471684F6b27E789D9075D\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const AVAX_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x0e082F06FF657D94310cB8cE8B0D9a04541d8052\"\n    : CLUSTER === \"testnet\"\n    ? \"0x61E44E506Ca5659E6c0bba9b678586fA2d729756\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const OASIS_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xfE8cD454b4A1CA468B57D79c0cc77Ef5B6f64585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xc1C338397ffA53a2Eb12A7038b4eeb34791F8aCb\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const OASIS_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x04952D522Ff217f40B5Ef3cbF659EcA7b952a6c1\"\n    : CLUSTER === \"testnet\"\n    ? \"0xC5c25B41AB0b797571620F5204Afa116A44c0ebA\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const OASIS_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5848C791e09901b40A9Ef749f2a6735b418d7564\"\n    : CLUSTER === \"testnet\"\n    ? \"0x88d8004A9BdbfD9D28090A02010C19897a29605c\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const AURORA_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xa321448d90d4e5b0A732867c18eA198e75CAC48E\"\n    : CLUSTER === \"testnet\"\n    ? \"0xBd07292de7b505a4E803CEe286184f7Acf908F5e\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const AURORA_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x6dcC0484472523ed9Cdc017F711Bcbf909789284\"\n    : CLUSTER === \"testnet\"\n    ? \"0x8F399607E9BA2405D87F5f3e1B78D950b44b2e24\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const AURORA_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x51b5123a7b0F9b2bA265f9c4C8de7D78D52f510F\"\n    : CLUSTER === \"testnet\"\n    ? \"0xD05eD3ad637b890D68a854d607eEAF11aF456fba\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const FANTOM_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x126783A6Cb203a3E35344528B26ca3a0489a1485\"\n    : CLUSTER === \"testnet\"\n    ? \"0x1BB3B4119b7BA9dfad76B0545fb3F531383c3bB7\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const FANTOM_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xA9c7119aBDa80d4a4E0C06C8F4d8cF5893234535\"\n    : CLUSTER === \"testnet\"\n    ? \"0x63eD9318628D26BdCB15df58B53BB27231D1B227\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const FANTOM_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x7C9Fc5741288cDFdD83CeB07f3ea7e22618D79D2\"\n    : CLUSTER === \"testnet\"\n    ? \"0x599CEa2204B4FaECd584Ab1F2b6aCA137a0afbE8\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const KARURA_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xa321448d90d4e5b0A732867c18eA198e75CAC48E\"\n    : CLUSTER === \"testnet\"\n    ? \"0xE4eacc10990ba3308DdCC72d985f2a27D20c7d03\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const KARURA_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xb91e3638F82A1fACb28690b37e3aAE45d2c33808\"\n    : CLUSTER === \"testnet\"\n    ? \"0x0A693c2D594292B6Eb89Cb50EFe4B0b63Dd2760D\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const KARURA_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xae9d7fe007b3327AA64A32824Aaac52C42a6E624\"\n    : CLUSTER === \"testnet\"\n    ? \"0xd11De1f930eA1F7Dd0290Fe3a2e35b9C91AEFb37\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const ACALA_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? CONTRACTS.MAINNET.acala.core\n    : CLUSTER === \"testnet\"\n    ? \"0x4377B49d559c0a9466477195C6AdC3D433e265c0\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const ACALA_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? CONTRACTS.MAINNET.acala.nft_bridge\n    : CLUSTER === \"testnet\"\n    ? \"0x96f1335e0AcAB3cfd9899B30b2374e25a2148a6E\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const ACALA_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? CONTRACTS.MAINNET.acala.token_bridge\n    : CLUSTER === \"testnet\"\n    ? \"0xebA00cbe08992EdD08ed7793E07ad6063c807004\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const KLAYTN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x0C21603c4f3a6387e241c0091A7EA39E43E90bb7\"\n    : CLUSTER === \"testnet\"\n    ? \"0x1830CC6eE66c84D2F177B94D544967c774E624cA\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const KLAYTN_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x3c3c561757BAa0b78c5C025CdEAa4ee24C1dFfEf\"\n    : CLUSTER === \"testnet\"\n    ? \"0x94c994fC51c13101062958b567e743f1a04432dE\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const KLAYTN_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5b08ac39EAED75c0439FC750d9FE7E1F9dD0193F\"\n    : CLUSTER === \"testnet\"\n    ? \"0xC7A13BE098720840dEa132D860fDfa030884b09A\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const CELO_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xa321448d90d4e5b0A732867c18eA198e75CAC48E\"\n    : CLUSTER === \"testnet\"\n    ? \"0x88505117CA88e7dd2eC6EA1E13f0948db2D50D56\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const CELO_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xA6A377d75ca5c9052c9a77ED1e865Cc25Bd97bf3\"\n    : CLUSTER === \"testnet\"\n    ? \"0xaCD8190F647a31E56A656748bC30F69259f245Db\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const CELO_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x796Dff6D74F3E27060B71255Fe517BFb23C93eed\"\n    : CLUSTER === \"testnet\"\n    ? \"0x05ca6037eC51F8b712eD2E6Fa72219FEaE74E153\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const NEON_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x0000000000000000000000000000000000000000\"\n    : CLUSTER === \"testnet\"\n    ? CONTRACTS.TESTNET.neon.core\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const NEON_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x0000000000000000000000000000000000000000\"\n    : CLUSTER === \"testnet\"\n    ? CONTRACTS.TESTNET.neon.nft_bridge\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const NEON_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x0000000000000000000000000000000000000000\"\n    : CLUSTER === \"testnet\"\n    ? CONTRACTS.TESTNET.neon.token_bridge\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const MOONBEAM_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? CONTRACTS.MAINNET.moonbeam.core\n    : CLUSTER === \"testnet\"\n    ? CONTRACTS.TESTNET.moonbeam.core\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const MOONBEAM_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x453cfBe096C0f8D763E8C5F24B441097d577bdE2\"\n    : CLUSTER === \"testnet\"\n    ? CONTRACTS.TESTNET.moonbeam.nft_bridge\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const MOONBEAM_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xB1731c586ca89a23809861c6103F0b96B3F57D92\"\n    : CLUSTER === \"testnet\"\n    ? CONTRACTS.TESTNET.moonbeam.token_bridge\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const SOL_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth\"\n    : CLUSTER === \"testnet\"\n    ? \"3u8hJUVTA4jH1wYAyUur7FFZVQ8H635K3tSHHF4ssjQ5\"\n    : \"Bridge1p5gheXUvJ6jGWGeCsgPKgnE3YgdGKRVCMY9o\";\nexport const SOL_NFT_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"WnFt12ZrnzZrFZkt2xsNsaNWoQribnuQ5B5FrDbwDhD\"\n    : CLUSTER === \"testnet\"\n    ? \"2rHhojZ7hpu1zA91nvZmT8TqWWvMcKmmNBCr2mKTtMq4\"\n    : \"NFTWqJR8YnRVqPDvTJrYuLrQDitTG5AScqbeghi4zSA\";\nexport const SOL_TOKEN_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"wormDTUJ6AWPNvk59vGQbDvGJmqbDTdgWgAqcLBCgUb\"\n    : CLUSTER === \"testnet\"\n    ? \"DZnkkTmCiFWfYTfT41X3Rd1kDgozqzxWaHqsw6W4x2oe\"\n    : \"B6RHG3mfcckmrYN1UhmJzyS1XX3fZKbkeUcpJe9Sy3FE\";\nexport const ROPSTEN_ETH_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x210c5F5e2AF958B4defFe715Dc621b7a3BA888c5\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const ROPSTEN_ETH_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x6FFd7EdE62328b3Af38FCD61461Bbfc52F5651fE\"\n    : CLUSTER === \"testnet\"\n    ? \"0x2b048Da40f69c8dc386a56705915f8E966fe1eba\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x3ee18B2214AFF97000D974cf647E7C347E8fa585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xF174F9A837536C449321df1Ca093Bb96948D5386\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\n\nexport const SOL_CUSTODY_ADDRESS =\n  \"GugU1tP7doLeTw9hQP51xRJyS8Da1fWxuiy2rVrnMD2m\";\nexport const SOL_NFT_CUSTODY_ADDRESS =\n  \"D63bhHo634eXSj4Jq3xgu2fjB5XKc8DFHzDY9iZk7fv1\";\nexport const TERRA_TEST_TOKEN_ADDRESS =\n  \"terra13nkgqrfymug724h8pprpexqj9h629sa3ncw7sh\";\nexport const TERRA_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5\"\n    : CLUSTER === \"testnet\"\n    ? \"terra1pd65m0q9tl3v8znnz5f5ltsfegyzah7g42cx5v\"\n    : \"terra18vd8fpwxzck93qlwghaj6arh4p7c5n896xzem5\";\nexport const TERRA_TOKEN_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf\"\n    : CLUSTER === \"testnet\"\n    ? \"terra1pseddrv0yfsn76u4zxrjmtf45kdlmalswdv39a\"\n    : \"terra10pyejy66429refv3g35g2t7am0was7ya7kz2a4\";\nexport const TERRA2_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? CONTRACTS.MAINNET.terra2.core\n    : CLUSTER === \"testnet\"\n    ? CONTRACTS.TESTNET.terra2.core\n    : \"terra14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9ssrc8au\";\nexport const TERRA2_TOKEN_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? CONTRACTS.MAINNET.terra2.token_bridge\n    : CLUSTER === \"testnet\"\n    ? CONTRACTS.TESTNET.terra2.token_bridge\n    : \"terra1nc5tatafv6eyq7llkr2gv50ff9e22mnf70qgjlv737ktmt4eswrquka9l6\";\nexport const ALGORAND_BRIDGE_ID = BigInt(\n  CLUSTER === \"mainnet\"\n    ? CONTRACTS.MAINNET.algorand.core\n    : CLUSTER === \"testnet\"\n    ? CONTRACTS.TESTNET.algorand.core\n    : CONTRACTS.DEVNET.algorand.core\n);\nexport const ALGORAND_TOKEN_BRIDGE_ID = BigInt(\n  CLUSTER === \"mainnet\"\n    ? CONTRACTS.MAINNET.algorand.token_bridge\n    : CLUSTER === \"testnet\"\n    ? CONTRACTS.TESTNET.algorand.token_bridge\n    : CONTRACTS.DEVNET.algorand.token_bridge\n);\nexport const ALGORAND_WAIT_FOR_CONFIRMATIONS =\n  CLUSTER === \"mainnet\" ? 4 : CLUSTER === \"testnet\" ? 4 : 1;\n\nexport const NEAR_CORE_BRIDGE_ACCOUNT =\n  CLUSTER === \"mainnet\"\n    ? \"contract.wormhole_crypto.near\"\n    : CLUSTER === \"testnet\"\n    ? \"wormhole.wormhole.testnet\"\n    : \"wormhole.test.near\";\n\nexport const NEAR_TOKEN_BRIDGE_ACCOUNT =\n  CLUSTER === \"mainnet\"\n    ? \"contract.portalbridge.near\"\n    : CLUSTER === \"testnet\"\n    ? \"token.wormhole.testnet\"\n    : \"token.test.near\";\n\nexport const getBridgeAddressForChain = (chainId: ChainId) =>\n  CLUSTER === \"mainnet\" && chainId === CHAIN_ID_SOLANA\n    ? \"0xaeab97f96cf9877fee2883315d459552b2b921edc16d7ceac6eab944dd88919c\"\n     // @ts-ignore\n    : CONTRACTS[\n        CLUSTER === \"mainnet\"\n          ? \"MAINNET\"\n          : CLUSTER === \"testnet\"\n          ? \"TESTNET\"\n          : \"DEVNET\"\n      ][coalesceChainName(chainId)].core || \"\";\nexport const getNFTBridgeAddressForChain = (chainId: ChainId) =>\n // @ts-ignore\n  CONTRACTS[\n    CLUSTER === \"mainnet\"\n      ? \"MAINNET\"\n      : CLUSTER === \"testnet\"\n      ? \"TESTNET\"\n      : \"DEVNET\"\n  ][coalesceChainName(chainId)].nft_bridge || \"\";\nexport const getTokenBridgeAddressForChain = (chainId: ChainId) =>\n  CLUSTER === \"mainnet\" && chainId === CHAIN_ID_SOLANA\n    ? \"0xc57508ee0d4595e5a8728974a4a93a787d38f339757230d441e895422c07aba9\"\n     // @ts-ignore\n    : CONTRACTS[\n        CLUSTER === \"mainnet\"\n          ? \"MAINNET\"\n          : CLUSTER === \"testnet\"\n          ? \"TESTNET\"\n          : \"DEVNET\"\n      ][coalesceChainName(chainId)].token_bridge || \"\";\n\nexport const COVALENT_API_KEY = process.env.REACT_APP_COVALENT_API_KEY\n  ? process.env.REACT_APP_COVALENT_API_KEY\n  : \"\";\n\nexport const COVALENT_ETHEREUM = 1; // Covalent only supports mainnet and Kovan\nexport const COVALENT_BSC = CLUSTER === \"devnet\" ? 56 : BSC_NETWORK_CHAIN_ID;\nexport const COVALENT_POLYGON =\n  CLUSTER === \"devnet\" ? 137 : POLYGON_NETWORK_CHAIN_ID;\nexport const COVALENT_AVAX = CLUSTER === \"devnet\" ? 137 : AVAX_NETWORK_CHAIN_ID;\nexport const COVALENT_FANTOM =\n  CLUSTER === \"devnet\" ? 250 : FANTOM_NETWORK_CHAIN_ID;\nexport const COVALENT_KLAYTN =\n  CLUSTER === \"mainnet\" ? KLAYTN_NETWORK_CHAIN_ID : null; // Covalent only support mainnet\nexport const COVALENT_CELO = CLUSTER === \"devnet\" ? null : null;\nexport const COVALENT_NEON = CLUSTER === \"devnet\" ? null : null;\nexport const COVALENT_MOONBEAM =\n  CLUSTER === \"devnet\" ? null : MOONBEAM_NETWORK_CHAIN_ID; // Covalent only supports mainnet\nexport const COVALENT_ARBITRUM =\n  CLUSTER === \"devnet\" ? null : ARBITRUM_NETWORK_CHAIN_ID; // Covalent only supports mainnet\nexport const COVALENT_OPTIMISM =\n  CLUSTER === \"devnet\" ? null : OPTIMISM_NETWORK_CHAIN_ID; // Covalent only supports mainnet\nexport const COVALENT_GET_TOKENS_URL = (\n  chainId: ChainId,\n  walletAddress: string,\n  nft?: boolean,\n  noNftMetadata?: boolean\n) => {\n  const chainNum =\n    chainId === CHAIN_ID_ETH\n      ? COVALENT_ETHEREUM\n      : chainId === CHAIN_ID_BSC\n      ? COVALENT_BSC\n      : chainId === CHAIN_ID_POLYGON\n      ? COVALENT_POLYGON\n      : chainId === CHAIN_ID_AVAX\n      ? COVALENT_AVAX\n      : chainId === CHAIN_ID_FANTOM\n      ? COVALENT_FANTOM\n      : chainId === CHAIN_ID_KLAYTN\n      ? COVALENT_KLAYTN\n      : chainId === CHAIN_ID_CELO\n      ? COVALENT_CELO\n      : chainId === CHAIN_ID_NEON\n      ? COVALENT_NEON\n      : chainId === CHAIN_ID_MOONBEAM\n      ? COVALENT_MOONBEAM\n      : chainId === CHAIN_ID_ARBITRUM\n      ? COVALENT_ARBITRUM\n      : chainId === CHAIN_ID_OPTIMISM\n      ? COVALENT_OPTIMISM\n      : \"\";\n  // https://www.covalenthq.com/docs/api/#get-/v1/{chain_id}/address/{address}/balances_v2/\n  return chainNum\n    ? `https://api.covalenthq.com/v1/${chainNum}/address/${walletAddress}/balances_v2/?key=${COVALENT_API_KEY}${\n        nft ? \"&nft=true\" : \"\"\n      }${noNftMetadata ? \"&no-nft-fetch=true\" : \"\"}`\n    : \"\";\n};\n\nexport const BLOCKSCOUT_GET_TOKENS_URL = (\n  chainId: ChainId,\n  walletAddress: string\n) => {\n  const baseUrl =\n    chainId === CHAIN_ID_OASIS\n        ? CLUSTER === \"mainnet\"\n        ? \"https://utility-explorer.swedencentral.cloudapp.azure.com\"\n        : CLUSTER === \"testnet\"\n        ? \"https://utility-explorer.swedencentral.cloudapp.azure.com\"\n        : \"\"\n      : chainId === CHAIN_ID_AURORA\n      ? CLUSTER === \"mainnet\"\n        ? \"https://utility-explorer.swedencentral.cloudapp.azure.com\"\n        : CLUSTER === \"testnet\"\n        ? \"https://utility-explorer.swedencentral.cloudapp.azure.com\"\n        : \"\"\n      : chainId === CHAIN_ID_ACALA\n      ? CLUSTER === \"mainnet\"\n        ? \"https://utility-explorer.swedencentral.cloudapp.azure.com\"\n        : CLUSTER === \"testnet\"\n        ? \"https://utility-explorer.swedencentral.cloudapp.azure.com\"\n        : \"\"\n      : chainId === CHAIN_ID_KARURA\n      ? CLUSTER === \"mainnet\"\n        ? \"https://utility-explorer.swedencentral.cloudapp.azure.com\"\n        : CLUSTER === \"testnet\"\n        ? \"https://utility-explorer.swedencentral.cloudapp.azure.com\"\n        : \"\"\n      : chainId === CHAIN_ID_CELO\n      ? CLUSTER === \"mainnet\"\n        ? \"https://utility-explorer.swedencentral.cloudapp.azure.com\"\n        : CLUSTER === \"testnet\"\n        ? \"https://utility-explorer.swedencentral.cloudapp.azure.com\"\n        : \"\"\n      : \"\";\n  return baseUrl\n    ? `${baseUrl}/api?module=account&action=tokenlist&address=${walletAddress}`\n    : \"\";\n};\n\nexport const TVL_URL =\n  \"https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet-notionaltvl\";\nexport const TVL_CUMULATIVE_URL =\n  \"https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet-notionaltvlcumulative?totalsOnly=true\";\nexport const TERRA_SWAPRATE_URL =\n  \"https://fcd.terra.dev/v1/market/swaprate/uusd\";\n\nexport const WETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n    : CLUSTER === \"testnet\"\n    ? \"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WETH_DECIMALS = 18;\n\nexport const WBNB_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\"\n    : CLUSTER === \"testnet\"\n    ? \"0xae13d989dac2f0debff460ac112a837c89baa7cd\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WBNB_DECIMALS = 18;\n\nexport const WMATIC_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\"\n    : CLUSTER === \"testnet\"\n    ? \"0x9c3c9283d3e44854697cd22d3faa240cfb032889\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WMATIC_DECIMALS = 18;\n\nexport const ROPSTEN_WETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n    : CLUSTER === \"testnet\"\n    ? \"0xc778417e063141139fce010982780140aa0cd5ab\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const ROPSTEN_WETH_DECIMALS = 18;\n\nexport const WAVAX_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7\"\n    : CLUSTER === \"testnet\"\n    ? \"0xd00ae08403b9bbb9124bb305c09058e32c39a48c\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WAVAX_DECIMALS = 18;\n\nexport const WROSE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0x21C718C22D52d0F3a789b752D4c2fD5908a8A733\"\n    : CLUSTER === \"testnet\"\n    ? \"0x792296e2a15e6Ceb5f5039DecaE7A1f25b00B0B0\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WROSE_DECIMALS = 18;\n\nexport const WETH_AURORA_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB\"\n    : CLUSTER === \"testnet\"\n    ? \"0x9D29f395524B3C817ed86e2987A14c1897aFF849\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WETH_AURORA_DECIMALS = 18;\n\nexport const WFTM_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83\"\n    : CLUSTER === \"testnet\"\n    ? \"0xf1277d1Ed8AD466beddF92ef448A132661956621\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WFTM_DECIMALS = 18;\n\nexport const KAR_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0x0000000000000000000100000000000000000080\"\n    : CLUSTER === \"testnet\"\n    ? \"0x0000000000000000000100000000000000000080\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const KAR_DECIMALS = 12;\n\nexport const ACA_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0x0000000000000000000100000000000000000000\"\n    : CLUSTER === \"testnet\"\n    ? \"0x0000000000000000000100000000000000000000\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const ACA_DECIMALS = 12;\n\nexport const WKLAY_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xe4f05a66ec68b54a58b17c22107b02e0232cc817\"\n    : CLUSTER === \"testnet\"\n    ? \"0x762ac6e8183db5a8e912a66fcc1a09f5a7ac96a9\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WKLAY_DECIMALS = 18;\n\nexport const CELO_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0x471ece3750da237f93b8e339c536989b8978a438\"\n    : CLUSTER === \"testnet\"\n    ? \"0xF194afDf50B03e69Bd7D057c1Aa9e10c9954E4C9\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const CELO_DECIMALS = 18;\n\nexport const WNEON_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xf8ad328e98f85fccbf09e43b16dcbbda7e84beab\"\n    : CLUSTER === \"testnet\"\n    ? \"0xf8aD328E98f85fccbf09E43B16dcbbda7E84BEAB\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WNEON_DECIMALS = 18;\n\nexport const WGLMR_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xAcc15dC74880C9944775448304B263D191c6077F\"\n    : CLUSTER === \"testnet\"\n    ? \"0xD909178CC99d318e4D46e7E66a972955859670E1\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WGLMR_DECIMALS = 18;\n\nexport const ARBWETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1\"\n    : CLUSTER === \"testnet\"\n    ? \"0x0000000000000000000000000000000000000000\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const ARBWETH_DECIMALS = 18;\n\nexport const ALGO_DECIMALS = 6;\n\nexport const WORMHOLE_V1_ETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xf92cD566Ea4864356C5491c177A430C222d7e678\"\n    : CLUSTER === \"testnet\"\n    ? \"0xdae0Cba01eFc4bfEc1F7Fece73Fe8b8d2Eda65B0\"\n    : \"0xf92cD566Ea4864356C5491c177A430C222d7e678\"; //TODO something that doesn't explode in localhost\nexport const WORMHOLE_V1_SOLANA_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"WormT3McKhFJ2RkiGpdw9GKvNCrB2aB54gb2uV9MfQC\"\n    : CLUSTER === \"testnet\"\n    ? \"BrdgiFmZN3BKkcY3danbPYyxPKwb8RhQzpM2VY5L97ED\"\n    : \"\";\n\nexport const TERRA_TOKEN_METADATA_URL =\n  \"https://assets.terra.money/cw20/tokens.json\";\n\nexport const WORMHOLE_V1_MINT_AUTHORITY =\n  CLUSTER === \"mainnet\"\n    ? \"9zyPU1mjgzaVyQsYwKJJ7AhVz5bgx5uc1NPABvAcUXsT\"\n    : CLUSTER === \"testnet\"\n    ? \"BJa7dq3bRP216zaTdw4cdcV71WkPc1HXvmnGeFVDi5DC\"\n    : \"\";\n\nexport const SOLLET_MINT_AUTHORITY =\n  CLUSTER === \"mainnet\" ? \"6krMGWgeqD4CySfMr94WcfcVbf2TrMzfshAk5DcZ7mbu\" : \"\";\n\n// hardcoded addresses for warnings\nexport const SOLANA_TOKENS_THAT_EXIST_ELSEWHERE = [\n  \"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\", //  SRM\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", // USDC\n  \"kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6\", //  KIN\n  \"CDJWUqTcYTVAKXAVXoQZFes5JUFc7owSeq7eMQcDSbo5\", // renBTC\n  \"8wv2KAykQstNAj2oW6AHANGBiFKVFhvMiyyzzjhkmGvE\", // renLUNA\n  \"G1a6jxYz3m8DVyMqYnuV7s86wD4fvuXYneWSpLJkmsXj\", // renBCH\n  \"FKJvvVJ242tX7zFtzTmzqoA631LqHh4CdgcN8dcfFSju\", // renDGB\n  \"ArUkYE2XDKzqy77PRRGjo4wREWwqk6RXTfM9NeqzPvjU\", // renDOGE\n  \"E99CQ2gFMmbiyK2bwiaFNWUUmwz4r8k2CVEFxwuvQ7ue\", // renZEC\n  \"De2bU64vsXKU9jq4bCjeDxNRGPn8nr3euaTK8jBYmD3J\", // renFIL\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\", // USDT\n];\nexport const ETH_TOKENS_THAT_EXIST_ELSEWHERE = [\n  getAddress(\"0x476c5E26a75bd202a9683ffD34359C0CC15be0fF\"), // SRM\n  getAddress(\"0x818fc6c2ec5986bc6e2cbf00939d90556ab12ce5\"), // KIN\n  getAddress(\"0xeb4c2781e4eba804ce9a9803c67d0893436bb27d\"), // renBTC\n  getAddress(\"0x52d87F22192131636F93c5AB18d0127Ea52CB641\"), // renLUNA\n  getAddress(\"0x459086f2376525bdceba5bdda135e4e9d3fef5bf\"), // renBCH\n  getAddress(\"0xe3cb486f3f5c639e98ccbaf57d95369375687f80\"), // renDGB\n  getAddress(\"0x3832d2F059E55934220881F831bE501D180671A7\"), // renDOGE\n  getAddress(\"0x1c5db575e2ff833e46a2e9864c22f4b22e0b37c2\"), // renZEC\n  getAddress(\"0xD5147bc8e386d91Cc5DBE72099DAC6C9b99276F5\"), // renFIL\n];\nexport const ETH_TOKENS_THAT_CAN_BE_SWAPPED_ON_SOLANA = [\n  getAddress(\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"), // USDC\n  getAddress(\"0xdac17f958d2ee523a2206206994597c13d831ec7\"), // USDT\n];\nexport const BSC_MARKET_WARNINGS = [\n  getAddress(WBNB_ADDRESS),\n  getAddress(\"0xe9e7cea3dedca5984780bafc599bd69add087d56\"), // BUSD\n  getAddress(\"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\"), // USDC\n  getAddress(\"0x55d398326f99059ff775485246999027b3197955\"), // BSC-USD\n];\n\nexport const MIGRATION_PROGRAM_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"whmRZnmyxdr2TkHXcZoFdtvNYRLQ5Jtbkf6ZbGkJjdk\"\n    : CLUSTER === \"testnet\"\n    ? \"\"\n    : \"Ex9bCdVMSfx7EzB3pgSi2R4UHwJAXvTw18rBQm5YQ8gK\";\n\nexport const ETH_MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // LUNA\n          getAddress(\"0xd2877702675e6cEb975b4A1dFf9fb7BAF4C91ea9\"),\n          getAddress(\"0xe76820F1DB773B1d62a3D22F47259705cC5fA4E6\"),\n        ],\n        [\n          // UST\n          getAddress(\"0xa47c8bf37f92aBed4A126BDA807A7b7498661acD\"),\n          getAddress(\"0xF39C29d8f6851d87c40c83b61078EB7384f7Cb51\"),\n        ],\n        [\n          // CELO\n          getAddress(\"0xE452E6Ea2dDeB012e20dB73bf5d3863A3Ac8d77a\"),\n          getAddress(\"0x857acfba0b2c4f4044b1d3a80972db1b3dceb1c4\"),\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? []\n    : [\n        // [\n        //   \"0x2D8BE6BF0baA74e0A907016679CaE9190e80dD0A\",\n        //   \"0xFcCeD5E997E7fb1D0594518D3eD57245bB8ed17E\",\n        // ],\n      ]\n);\n\nexport const BSC_MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // LUNA\n          getAddress(\"0xECCF35F941Ab67FfcAA9A1265C2fF88865caA005\"),\n          getAddress(\"0x355A116ef1Cf566B12Ef3a8e409A64e303c53740\"),\n        ],\n        [\n          // UST\n          getAddress(\"0x23396cF899Ca06c4472205fC903bDB4de249D6fC\"),\n          getAddress(\"0x0F98AB919D04a291838B3b075c57181057D4CF75\"),\n        ],\n        [\n          // ORION\n          getAddress(\"0x5530ec23f4ee1521182bd158c09f4ca7efec1ef0\"),\n          getAddress(\"0x084fa354e65b521e6fb9d1602549cf8693cdb4f8\"),\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? []\n    : [\n        // [\n        //   \"0x2D8BE6BF0baA74e0A907016679CaE9190e80dD0A\",\n        //   \"0xFcCeD5E997E7fb1D0594518D3eD57245bB8ed17E\",\n        // ],\n      ]\n);\n\nexport const CELO_MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          getAddress(\"0x122013fd7dF1C6F636a5bb8f03108E876548b455\"), // WETH,\n          getAddress(\"0xCC76FfF95d772C798eaDc6c7E6fA7E0e8b561F64\"),\n        ],\n      ]\n    : []\n);\n\nexport const getMigrationAssetMap = (chainId: ChainId) => {\n  if (chainId === CHAIN_ID_BSC) {\n    return BSC_MIGRATION_ASSET_MAP;\n  } else if (chainId === CHAIN_ID_ETH) {\n    return ETH_MIGRATION_ASSET_MAP;\n  } else if (chainId === CHAIN_ID_CELO) {\n    return CELO_MIGRATION_ASSET_MAP;\n  } else {\n    return new Map<string, string>();\n  }\n};\n\nexport const SUPPORTED_TERRA_TOKENS = [\"uluna\", \"uusd\"];\nexport const TERRA_DEFAULT_FEE_DENOM = SUPPORTED_TERRA_TOKENS[0];\n\nexport const XPLA_NATIVE_DENOM = \"axpla\";\n\nexport const getTerraFCDBaseUrl = (chainId: TerraChainId) =>\n  CLUSTER === \"mainnet\"\n    ? chainId === CHAIN_ID_TERRA2\n      ? \"https://phoenix-fcd.terra.dev\"\n      : \"https://columbus-fcd.terra.dev\"\n    : CLUSTER === \"testnet\"\n    ? chainId === CHAIN_ID_TERRA2\n      ? \"https://pisco-fcd.terra.dev\"\n      : \"https://bombay-fcd.terra.dev\"\n    : chainId === CHAIN_ID_TERRA2\n    ? \"http://localhost:3061\"\n    : \"http://localhost:3060\";\nexport const getTerraGasPricesUrl = (chainId: TerraChainId) =>\n  `${getTerraFCDBaseUrl(chainId)}/v1/txs/gas_prices`;\n\nexport const nearKeyStore = new keyStores.BrowserLocalStorageKeyStore();\n\nexport const getNearConnectionConfig = (): ConnectConfig =>\n  CLUSTER === \"mainnet\"\n    ? {\n        networkId: \"mainnet\",\n        keyStore: nearKeyStore,\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        walletUrl: \"https://wallet.mainnet.near.org\",\n        helperUrl: \"https://helper.mainnet.near.org\",\n        headers: {},\n      }\n    : CLUSTER === \"testnet\"\n    ? {\n        networkId: \"testnet\",\n        keyStore: nearKeyStore,\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        walletUrl: \"https://wallet.testnet.near.org\",\n        helperUrl: \"https://helper.testnet.near.org\",\n        headers: {},\n      }\n    : {\n        networkId: \"sandbox\",\n        keyStore: nearKeyStore,\n        nodeUrl: \"http://localhost:3030\",\n        helperUrl: \"\",\n        headers: {},\n      };\n\nexport const NATIVE_NEAR_DECIMALS = 24;\nexport const NATIVE_NEAR_PLACEHOLDER = \"near\";\nexport const NATIVE_NEAR_WH_ADDRESS =\n  \"0000000000000000000000000000000000000000000000000000000000000000\";\n\nexport const TOTAL_TRANSACTIONS_WORMHOLE = `https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet-totals?groupBy=address`;\n\nexport const RECENT_TRANSACTIONS_WORMHOLE = `https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet-recent?groupBy=address&numRows=2`;\n\nexport const NOTIONAL_TRANSFERRED_URL =\n  \"https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet-notionaltransferredfrom\";\n\nexport const VAA_EMITTER_ADDRESSES = [\n  `${CHAIN_ID_SOLANA}:ec7372995d5cc8732397fb0ad35c0121e0eaa90d26f828a534cab54391b3a4f5`, //SOLANA TOKEN\n  `${CHAIN_ID_SOLANA}:0def15a24423e1edd1a5ab16f557b9060303ddbab8c803d2ee48f4b78a1cfd6b`, //SOLAN NFT\n  `${CHAIN_ID_ETH}:0000000000000000000000003ee18b2214aff97000d974cf647e7c347e8fa585`, //ETH token\n  `${CHAIN_ID_ETH}:0000000000000000000000006ffd7ede62328b3af38fcd61461bbfc52f5651fe`, //ETH NFT\n  `${CHAIN_ID_TERRA}:0000000000000000000000007cf7b764e38a0a5e967972c1df77d432510564e2`, //terra\n  `${CHAIN_ID_BSC}:000000000000000000000000b6f6d86a8f9879a9c87f643768d9efc38c1da6e7`, //bsc\n  `${CHAIN_ID_BSC}:0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde`, //bsc nft\n  `${CHAIN_ID_POLYGON}:0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde`, //Polygon\n  `${CHAIN_ID_POLYGON}:00000000000000000000000090bbd86a6fe93d3bc3ed6335935447e75fab7fcf`, //Polygon nft\n  `${CHAIN_ID_AVAX}:0000000000000000000000000e082f06ff657d94310cb8ce8b0d9a04541d8052`, //AVAX\n  `${CHAIN_ID_AVAX}:000000000000000000000000f7b6737ca9c4e08ae573f75a97b73d7a813f5de5`, //AVAX nft\n  `${CHAIN_ID_OASIS}:0000000000000000000000005848c791e09901b40a9ef749f2a6735b418d7564`, //Oasis\n  `${CHAIN_ID_OASIS}:00000000000000000000000004952D522Ff217f40B5Ef3cbF659EcA7b952a6c1`, //Oasis nft\n  `${CHAIN_ID_AURORA}:00000000000000000000000051b5123a7b0F9b2bA265f9c4C8de7D78D52f510F`, //Aurora\n  `${CHAIN_ID_AURORA}:0000000000000000000000006dcC0484472523ed9Cdc017F711Bcbf909789284`, //Aurora nft\n  `${CHAIN_ID_FANTOM}:0000000000000000000000007C9Fc5741288cDFdD83CeB07f3ea7e22618D79D2`, //Fantom\n  `${CHAIN_ID_FANTOM}:000000000000000000000000A9c7119aBDa80d4a4E0C06C8F4d8cF5893234535`, //Fantom nft\n  `${CHAIN_ID_KARURA}:000000000000000000000000ae9d7fe007b3327AA64A32824Aaac52C42a6E624`, //Karura\n  `${CHAIN_ID_KARURA}:000000000000000000000000b91e3638F82A1fACb28690b37e3aAE45d2c33808`, //Karura nft\n];\n\nexport const WORMHOLE_EXPLORER_BASE = \"https://wormhole.com/explorer\";\n\nexport type MultiChainInfo = {\n  [key in ChainId]?: { [address: string]: string };\n};\nexport const MULTI_CHAIN_TOKENS: MultiChainInfo =\n  //EVM chains should format the addresses to all lowercase\n  CLUSTER === \"mainnet\"\n    ? ({\n        [CHAIN_ID_SOLANA]: {\n          EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v: \"USDC\",\n          Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB: \"USDT\",\n        },\n        [CHAIN_ID_ETH]: {\n          \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\": \"USDC\",\n          \"0xdac17f958d2ee523a2206206994597c13d831ec7\": \"USDT\",\n        },\n        [CHAIN_ID_TERRA]: {},\n        [CHAIN_ID_BSC]: {\n          \"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\": \"USDC\",\n          \"0x55d398326f99059ff775485246999027b3197955\": \"USDT\",\n        },\n        [CHAIN_ID_POLYGON]: {\n          \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\": \"USDC\",\n          \"0xc2132d05d31c914a87c6611c10748aeb04b58e8f\": \"USDT\",\n        },\n      } as MultiChainInfo)\n    : ({\n        [CHAIN_ID_SOLANA]: {\n          \"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\": \"SOLT\",\n        },\n        [CHAIN_ID_ETH]: {},\n        [CHAIN_ID_TERRA]: {},\n        [CHAIN_ID_BSC]: {},\n        [CHAIN_ID_POLYGON]: {},\n      } as MultiChainInfo);\n\nexport const AVAILABLE_MARKETS_URL =\n  \"https://docs.wormhole.com/wormhole/overview-liquid-markets\";\n\nexport const SOLANA_SYSTEM_PROGRAM_ADDRESS = \"11111111111111111111111111111111\";\nexport const FEATURED_MARKETS_JSON_URL =\n  \"https://raw.githubusercontent.com/certusone/wormhole-token-list/main/src/markets.json\";\n\nexport const logoOverrides = new Map<string, string>([\n  [\n    \"0x727f064a78dc734d33eec18d5370aef32ffd46e4\",\n    \"https://orion.money/assets/ORION-LOGO-2.1-GREEN@256x256.png\",\n  ],\n]);\n\nexport const getHowToAddTokensToWalletUrl = (chainId: ChainId) => {\n  if (isEVMChain(chainId)) {\n    return \"https://docs.wormhole.com/wormhole/video-tutorial-how-to-manually-add-tokens-to-your-wallet#metamask\";\n  } else if (isTerraChain(chainId)) {\n    return \"https://docs.wormhole.com/wormhole/video-tutorial-how-to-manually-add-tokens-to-your-wallet#terra-station\";\n  }\n  return \"\";\n};\n\nexport const getHowToAddToTokenListUrl = (chainId: ChainId) => {\n  if (chainId === CHAIN_ID_SOLANA) {\n    return \"https://github.com/solana-labs/token-list\";\n  } else if (isTerraChain(chainId)) {\n    return \"https://github.com/terra-money/assets\";\n  }\n  return \"\";\n};\n\nexport const SOLANA_TOKEN_METADATA_PROGRAM_URL =\n  \"https://github.com/metaplex-foundation/metaplex-program-library/tree/master/token-metadata/program\";\nexport const MAX_VAA_UPLOAD_RETRIES_SOLANA = 5;\n\nexport const POLYGON_TERRA_WRAPPED_TOKENS = [\n  \"0x692597b009d13c4049a947cab2239b7d6517875f\", // Wrapped UST Token\n  \"0x24834bbec7e39ef42f4a75eaf8e5b6486d3f0e57\", // Wrapped LUNA Token\n];\n\nexport const ETH_POLYGON_WRAPPED_TOKENS = [\n  \"0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\", // Wrapped MATIC Token\n];\n\nexport const JUPITER_SWAP_BASE_URL = \"https://jup.ag/swap\";\n\nexport const getIsTransferDisabled = (\n  chainId: ChainId,\n  isSourceChain: boolean\n) => {\n  const disableTransfers = CHAIN_CONFIG_MAP[chainId]?.disableTransfers;\n  return disableTransfers === \"from\"\n    ? isSourceChain\n    : disableTransfers === \"to\"\n    ? !isSourceChain\n    : !!disableTransfers;\n};\n\nexport const LUNA_ADDRESS = \"uluna\";\nexport const UST_ADDRESS = \"uusd\";\n\nexport type RelayerCompareAsset = {\n  [key in ChainId]: string;\n};\nexport const RELAYER_COMPARE_ASSET: RelayerCompareAsset = {\n  [CHAIN_ID_SOLANA]: \"solana\",\n  [CHAIN_ID_ETH]: \"ethereum\",\n  [CHAIN_ID_TERRA]: \"terra-luna\",\n  [CHAIN_ID_BSC]: \"binancecoin\",\n  [CHAIN_ID_POLYGON]: \"matic-network\",\n  [CHAIN_ID_AVAX]: \"avalanche-2\",\n  [CHAIN_ID_OASIS]: \"oasis-network\",\n  [CHAIN_ID_FANTOM]: \"fantom\",\n  [CHAIN_ID_AURORA]: \"ethereum\", // Aurora uses bridged ether\n  [CHAIN_ID_KLAYTN]: \"klay-token\",\n  [CHAIN_ID_CELO]: \"celo\",\n} as RelayerCompareAsset;\nexport const getCoinGeckoURL = (coinGeckoId: string) =>\n  `https://api.coingecko.com/api/v3/simple/price?ids=${coinGeckoId}&vs_currencies=usd`;\n\nexport const RELAYER_INFO_URL =\n  CLUSTER === \"mainnet\"\n    ? \"https://raw.githubusercontent.com/certusone/wormhole-relayer-list/main/relayer.json\"\n    : CLUSTER === \"testnet\"\n    ? \"\"\n    : \"/relayerExample.json\";\n\nexport const RELAY_URL_EXTENSION = \"/relayvaa/\";\n\n// also for karura\nexport const ACALA_RELAYER_URL =\n  CLUSTER === \"mainnet\"\n    ? \"https://relayer.aca-api.network\"\n    : CLUSTER === \"testnet\"\n    ? \"https://relayer.aca-dev.network\"\n    : // ? \"http://localhost:3111\"\n      \"\";\n\nexport const ACALA_RELAY_URL = `${ACALA_RELAYER_URL}/relay`;\nexport const ACALA_SHOULD_RELAY_URL = `${ACALA_RELAYER_URL}/shouldRelay`;\n\nexport const getChainShortName = (chainId: ChainId) => {\n  return chainId === CHAIN_ID_BSC ? \"BSC\" : CHAINS_BY_ID[chainId]?.name;\n};\n\nexport const COLOR_BY_CHAIN_ID: { [key in ChainId]?: string } = {\n  [CHAIN_ID_SOLANA]: \"#31D7BB\",\n  [CHAIN_ID_ETH]: \"#8A92B2\",\n  [CHAIN_ID_TERRA]: \"#5493F7\",\n  [CHAIN_ID_BSC]: \"#F0B90B\",\n  [CHAIN_ID_POLYGON]: \"#8247E5\",\n  [CHAIN_ID_AVAX]: \"#E84142\",\n  [CHAIN_ID_OASIS]: \"#0092F6\",\n  [CHAIN_ID_AURORA]: \"#23685A\",\n  [CHAIN_ID_FANTOM]: \"#1969FF\",\n  [CHAIN_ID_KARURA]: \"#FF4B3B\",\n  [CHAIN_ID_ACALA]: \"#E00F51\",\n};\n\nexport const DISABLED_TOKEN_TRANSFERS: {\n  [key in ChainId]?: { [address: string]: ChainId[] };\n} = {\n  [CHAIN_ID_ACALA]: {\n    \"0x0000000000000000000100000000000000000001\": [CHAIN_ID_KARURA], // aUSD\n  },\n  [CHAIN_ID_KARURA]: {\n    \"0x0000000000000000000100000000000000000081\": [], // aUSD\n  },\n  [CHAIN_ID_ETH]: {\n    \"0xe28b3B32B6c345A34Ff64674606124Dd5Aceca30\": [], // INJ\n  },\n  [CHAIN_ID_BSC]: {\n    \"0xa2B726B1145A4773F68593CF171187d8EBe4d495\": [], // INJ\n  },\n  [CHAIN_ID_INJECTIVE]: {\n    inj: [], // INJ\n  },\n};\n\nexport const getIsTokenTransferDisabled = (\n  sourceChain: ChainId,\n  targetChain: ChainId,\n  tokenAddress: string\n): boolean => {\n  const disabledTransfers =\n    DISABLED_TOKEN_TRANSFERS[sourceChain]?.[tokenAddress];\n  return disabledTransfers !== undefined\n    ? disabledTransfers.length === 0 || disabledTransfers.includes(targetChain)\n    : false;\n};\n\nexport interface DisabledTokenReasons {\n  text: string;\n  link?: {\n    text: string;\n    url: string;\n  };\n}\n\nexport const DISABLED_TOKEN_REASONS: {\n  [key in ChainId]?: { [address: string]: DisabledTokenReasons };\n} = {\n  [CHAIN_ID_ETH]: {\n    \"0xe28b3B32B6c345A34Ff64674606124Dd5Aceca30\": {\n      text: \"Transfers of INJ token can be made through the Injective Bridge.\",\n      link: {\n        text: \"Click here to go to Injective Bridge\",\n        url: \"https://hub.injective.network/bridge/\",\n      },\n    }, // INJ\n  },\n  [CHAIN_ID_BSC]: {\n    \"0xa2B726B1145A4773F68593CF171187d8EBe4d495\": {\n      text: \"Transfers of INJ token can be made through the Injective Bridge.\",\n      link: {\n        text: \"Click here to go to Injective Bridge\",\n        url: \"https://hub.injective.network/bridge/\",\n      },\n    }, // INJ\n  },\n  [CHAIN_ID_INJECTIVE]: {\n    inj: {\n      text: \"Transfers of INJ token can be made through the Injective Bridge.\",\n      link: {\n        text: \"Click here to go to Injective Bridge\",\n        url: \"https://hub.injective.network/bridge/\",\n      },\n    }, // INJ\n  },\n};\n\nexport const getIsTokenTransferDisabledReasons = (\n  sourceChain: ChainId,\n  tokenAddress: string\n): DisabledTokenReasons | undefined => {\n  return DISABLED_TOKEN_REASONS[sourceChain]?.[tokenAddress];\n};\n\nexport const USD_NUMBER_FORMATTER = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n});\n\nexport const getWalletAddressNative = (\n  hexAddress: string,\n  chainId: ChainId\n) => {\n  if (chainId === CHAIN_ID_APTOS) {\n    return ensureHexPrefix(hexAddress);\n  }\n  return hexToNativeString(hexAddress, chainId);\n};\n\nexport const getAssetAddressNative = (\n  address: Uint8Array,\n  chainId: ChainId\n) => {\n  if (chainId === CHAIN_ID_APTOS) {\n    return uint8ArrayToHex(address);\n  }\n  return hexToNativeAssetString(uint8ArrayToHex(address), chainId);\n};\n","import {\n  CHAIN_ID_ACALA,\n  CHAIN_ID_ETH,\n  CHAIN_ID_KARURA,\n  CHAIN_ID_SOLANA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { RootState } from \".\";\nimport { TBTC_ASSET_ADDRESS } from \"../utils/consts\";\n\n/*\n * Attest\n */\n\nexport const selectAttestActiveStep = (state: RootState) =>\n  state.attest.activeStep;\nexport const selectAttestSourceChain = (state: RootState) =>\n  state.attest.sourceChain;\nexport const selectAttestSourceAsset = (state: RootState) =>\n  state.attest.sourceAsset;\nexport const selectAttestTargetChain = (state: RootState) =>\n  state.attest.targetChain;\nexport const selectAttestAttestTx = (state: RootState) => state.attest.attestTx;\nexport const selectAttestSignedVAAHex = (state: RootState) =>\n  state.attest.signedVAAHex;\nexport const selectAttestIsSending = (state: RootState) =>\n  state.attest.isSending;\nexport const selectAttestIsCreating = (state: RootState) =>\n  state.attest.isCreating;\nexport const selectAttestCreateTx = (state: RootState) => state.attest.createTx;\nexport const selectAttestIsSourceComplete = (state: RootState) =>\n  !!state.attest.sourceChain && !!state.attest.sourceAsset;\n// TODO: check wrapped asset exists or is native attest\nexport const selectAttestIsTargetComplete = (state: RootState) =>\n  selectAttestIsSourceComplete(state) && !!state.attest.targetChain;\nexport const selectAttestIsSendComplete = (state: RootState) =>\n  !!selectAttestSignedVAAHex(state);\nexport const selectAttestIsCreateComplete = (state: RootState) =>\n  !!selectAttestCreateTx(state);\nexport const selectAttestShouldLockFields = (state: RootState) =>\n  selectAttestIsSending(state) || selectAttestIsSendComplete(state);\n\n/*\n * NFT\n */\n\nexport const selectNFTActiveStep = (state: RootState) => state.nft.activeStep;\nexport const selectNFTSourceChain = (state: RootState) => state.nft.sourceChain;\nexport const selectNFTSourceAsset = (state: RootState) => {\n  return state.nft.sourceParsedTokenAccount?.mintKey || undefined;\n};\nexport const selectNFTIsSourceAssetWormholeWrapped = (state: RootState) =>\n  state.nft.isSourceAssetWormholeWrapped;\nexport const selectNFTOriginChain = (state: RootState) => state.nft.originChain;\nexport const selectNFTOriginAsset = (state: RootState) => state.nft.originAsset;\nexport const selectNFTOriginTokenId = (state: RootState) =>\n  state.nft.originTokenId;\nexport const selectNFTSourceWalletAddress = (state: RootState) =>\n  state.nft.sourceWalletAddress;\nexport const selectNFTSourceParsedTokenAccount = (state: RootState) =>\n  state.nft.sourceParsedTokenAccount;\nexport const selectNFTSourceParsedTokenAccounts = (state: RootState) =>\n  state.nft.sourceParsedTokenAccounts;\nexport const selectNFTSourceBalanceString = (state: RootState) =>\n  state.nft.sourceParsedTokenAccount?.uiAmountString || \"\";\nexport const selectNFTTargetChain = (state: RootState) => state.nft.targetChain;\nexport const selectNFTTargetAddressHex = (state: RootState) =>\n  state.nft.targetAddressHex;\nexport const selectNFTTargetAsset = (state: RootState) =>\n  state.nft.targetAsset.data?.address;\nexport const selectNFTTransferTx = (state: RootState) => state.nft.transferTx;\nexport const selectNFTSignedVAAHex = (state: RootState) =>\n  state.nft.signedVAAHex;\nexport const selectNFTIsSending = (state: RootState) => state.nft.isSending;\nexport const selectNFTIsRedeeming = (state: RootState) => state.nft.isRedeeming;\nexport const selectNFTRedeemTx = (state: RootState) => state.nft.redeemTx;\nexport const selectNFTSourceError = (state: RootState): string | undefined => {\n  if (!state.nft.sourceChain) {\n    return \"Select a source chain\";\n  }\n  if (!state.nft.sourceParsedTokenAccount) {\n    return \"Select an NFT\";\n  }\n  if (\n    state.nft.sourceChain === CHAIN_ID_SOLANA &&\n    !state.nft.sourceParsedTokenAccount.publicKey\n  ) {\n    return \"Token account unavailable\";\n  }\n  if (!state.nft.sourceParsedTokenAccount.uiAmountString) {\n    return \"Token amount unavailable\";\n  }\n  if (state.nft.sourceParsedTokenAccount.decimals !== 0) {\n    // TODO: more advanced NFT check - also check supply and uri\n    return \"For non-NFTs, use the Transfer flow\";\n  }\n  if (\n    state.nft.sourceParsedTokenAccount?.uri === null ||\n    state.nft.sourceParsedTokenAccount?.uri === undefined\n  ) {\n    return \"Failed to load NFT Metadata.\";\n  }\n  if (\n    state.nft.sourceParsedTokenAccount?.uri &&\n    state.nft.sourceParsedTokenAccount?.uri.length > 200\n  ) {\n    return \"This NFT has a URL longer than the maximum supported length of 200.\";\n  }\n  try {\n    // these may trigger error: fractional component exceeds decimals\n    if (\n      parseUnits(\n        state.nft.sourceParsedTokenAccount.uiAmountString,\n        state.nft.sourceParsedTokenAccount.decimals\n      ).lte(0)\n    ) {\n      return \"Balance must be greater than zero\";\n    }\n  } catch (e: any) {\n    if (e?.message) {\n      return e.message.substring(0, e.message.indexOf(\"(\"));\n    }\n    return \"Invalid amount\";\n  }\n  return undefined;\n};\nexport const selectNFTIsSourceComplete = (state: RootState) =>\n  !selectNFTSourceError(state);\nexport const selectNFTTargetError = (state: RootState) => {\n  const sourceError = selectNFTSourceError(state);\n  if (sourceError) {\n    return `Error in source: ${sourceError}`;\n  }\n  if (!state.nft.targetChain) {\n    return \"Select a target chain\";\n  }\n  if (state.nft.sourceChain === state.nft.targetChain) {\n    return \"Select a different target and source\";\n  }\n  if (\n    state.nft.targetChain === CHAIN_ID_SOLANA &&\n    !selectNFTTargetAsset(state)\n  ) {\n    // target asset is only required for solana\n    // in the cases of new transfers, target asset will not exist and be created on redeem\n    // Solana requires the derived address to derive the associated token account which is the target on the vaa\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (!state.nft.targetAddressHex) {\n    return \"Target account unavailable\";\n  }\n};\nexport const selectNFTIsTargetComplete = (state: RootState) =>\n  !selectNFTTargetError(state);\nexport const selectNFTIsSendComplete = (state: RootState) =>\n  !!selectNFTSignedVAAHex(state);\nexport const selectNFTIsRedeemComplete = (state: RootState) =>\n  !!selectNFTRedeemTx(state);\nexport const selectNFTShouldLockFields = (state: RootState) =>\n  selectNFTIsSending(state) || selectNFTIsSendComplete(state);\nexport const selectNFTIsRecovery = (state: RootState) => state.nft.isRecovery;\n/*\n * Transfer\n */\n\nexport const selectTransferActiveStep = (state: RootState) =>\n  state.transfer.activeStep;\nexport const selectTransferSourceChain = (state: RootState) =>\n  state.transfer.sourceChain;\nexport const selectTransferSourceAsset = (state: RootState) => {\n  return state.transfer.sourceParsedTokenAccount?.mintKey || undefined;\n};\nexport const selectTransferIsTBTC = (state: RootState) => {\n  return (\n    state.transfer.originChain === CHAIN_ID_ETH &&\n    state.transfer.originAsset?.toLowerCase() ===\n      TBTC_ASSET_ADDRESS?.toLowerCase()\n  );\n};\nexport const selectTransferIsSourceAssetWormholeWrapped = (state: RootState) =>\n  state.transfer.isSourceAssetWormholeWrapped;\nexport const selectTransferOriginChain = (state: RootState) =>\n  state.transfer.originChain;\nexport const selectTransferOriginAsset = (state: RootState) =>\n  state.transfer.originAsset;\nexport const selectSourceWalletAddress = (state: RootState) =>\n  state.transfer.sourceWalletAddress;\nexport const selectTransferSourceParsedTokenAccount = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccount;\nexport const selectTransferSourceParsedTokenAccounts = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccounts;\nexport const selectTransferSourceBalanceString = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccount?.uiAmountString || \"\";\nexport const selectTransferAmount = (state: RootState) => state.transfer.amount;\nexport const selectTransferTargetChain = (state: RootState) =>\n  state.transfer.targetChain;\nexport const selectTransferTargetAddressHex = (state: RootState) =>\n  state.transfer.targetAddressHex;\nexport const selectTransferTargetAssetWrapper = (state: RootState) =>\n  state.transfer.targetAsset;\nexport const selectTransferTargetAsset = (state: RootState) =>\n  state.transfer.targetAsset.data?.address;\nexport const selectTransferTargetParsedTokenAccount = (state: RootState) =>\n  state.transfer.targetParsedTokenAccount;\nexport const selectTransferTargetBalanceString = (state: RootState) =>\n  state.transfer.targetParsedTokenAccount?.uiAmountString || \"\";\nexport const selectTransferTransferTx = (state: RootState) =>\n  state.transfer.transferTx;\nexport const selectTransferSignedVAAHex = (state: RootState) =>\n  state.transfer.signedVAAHex;\nexport const selectTransferIsVAAPending = (state: RootState) =>\n  state.transfer.isVAAPending;\nexport const selectTransferIsSending = (state: RootState) =>\n  state.transfer.isSending;\nexport const selectTransferIsRedeeming = (state: RootState) =>\n  state.transfer.isRedeeming;\nexport const selectTransferRedeemTx = (state: RootState) =>\n  state.transfer.redeemTx;\nexport const selectTransferIsApproving = (state: RootState) =>\n  state.transfer.isApproving;\nexport const selectTransferSourceError = (\n  state: RootState\n): string | undefined => {\n  if (!state.transfer.sourceChain) {\n    return \"Select a source chain\";\n  }\n  if (!state.transfer.sourceParsedTokenAccount) {\n    return \"Select a token\";\n  }\n  if (!state.transfer.amount) {\n    return \"Enter an amount\";\n  }\n  if (\n    state.transfer.sourceChain === CHAIN_ID_SOLANA &&\n    !state.transfer.sourceParsedTokenAccount.publicKey\n  ) {\n    return \"Token account unavailable\";\n  }\n  if (!state.transfer.sourceParsedTokenAccount.uiAmountString) {\n    return \"Token amount unavailable\";\n  }\n  // no NFT check - NFTs should be blocked by all token pickers\n  try {\n    // these may trigger error: fractional component exceeds decimals\n    if (\n      parseUnits(\n        state.transfer.amount,\n        state.transfer.sourceParsedTokenAccount.decimals\n      ).lte(0)\n    ) {\n      return \"Amount must be greater than zero\";\n    }\n    if (\n      parseUnits(\n        state.transfer.amount,\n        state.transfer.sourceParsedTokenAccount.decimals\n      ).gt(\n        parseUnits(\n          state.transfer.sourceParsedTokenAccount.uiAmountString,\n          state.transfer.sourceParsedTokenAccount.decimals\n        )\n      )\n    ) {\n      return \"Amount may not be greater than balance\";\n    }\n  } catch (e: any) {\n    if (e?.message) {\n      return e.message.substring(0, e.message.indexOf(\"(\"));\n    }\n    return \"Invalid amount\";\n  }\n  return undefined;\n};\nexport const selectTransferIsSourceComplete = (state: RootState) =>\n  !selectTransferSourceError(state);\nexport const UNREGISTERED_ERROR_MESSAGE =\n  \"Target asset unavailable. Is the token registered?\";\nexport const selectTransferTargetError = (state: RootState) => {\n  const sourceError = selectTransferSourceError(state);\n  if (sourceError) {\n    return `Error in source: ${sourceError}`;\n  }\n  if (!state.transfer.targetChain) {\n    return \"Select a target chain\";\n  }\n  if (state.transfer.sourceChain === state.transfer.targetChain) {\n    return \"Select a different target and source\";\n  }\n  if (!selectTransferTargetAsset(state)) {\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (\n    isEVMChain(state.transfer.targetChain) &&\n    selectTransferTargetAsset(state) === ethers.constants.AddressZero\n  ) {\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (!state.transfer.targetAddressHex) {\n    return \"Target account unavailable\";\n  }\n  if (\n    state.transfer.useRelayer &&\n    state.transfer.relayerFee === undefined &&\n    // Acala offers relaying without a fee for qualified tokens\n    state.transfer.targetChain !== CHAIN_ID_ACALA &&\n    state.transfer.targetChain !== CHAIN_ID_KARURA\n  ) {\n    return \"Invalid relayer fee.\";\n  }\n  if (\n    state.transfer.useRelayer &&\n    (state.transfer.targetChain === CHAIN_ID_ACALA ||\n      state.transfer.targetChain === CHAIN_ID_KARURA) &&\n    !state.transfer.acalaRelayerInfo.data?.shouldRelay\n  ) {\n    return \"Token is ineligible for relay.\";\n  }\n  if (state.transfer.relayerFee && state.transfer.sourceParsedTokenAccount) {\n    try {\n      // these may trigger error: fractional component exceeds decimals\n      if (\n        parseUnits(\n          state.transfer.amount,\n          state.transfer.sourceParsedTokenAccount.decimals\n        )\n          .add(\n            parseUnits(\n              state.transfer.relayerFee.toString(),\n              state.transfer.sourceParsedTokenAccount.decimals\n            )\n          )\n          .gt(\n            parseUnits(\n              state.transfer.sourceParsedTokenAccount.uiAmountString,\n              state.transfer.sourceParsedTokenAccount.decimals\n            )\n          )\n      ) {\n        return \"The amount being transferred plus fees exceeds the wallet's balance.\";\n      }\n    } catch (e: any) {\n      if (e?.message) {\n        return e.message.substring(0, e.message.indexOf(\"(\"));\n      }\n      return \"Invalid amount\";\n    }\n  }\n};\nexport const selectTransferIsTargetComplete = (state: RootState) =>\n  !selectTransferTargetError(state);\nexport const selectTransferIsSendComplete = (state: RootState) =>\n  !!selectTransferSignedVAAHex(state);\nexport const selectTransferIsRedeemComplete = (state: RootState) =>\n  !!selectTransferRedeemTx(state);\nexport const selectTransferShouldLockFields = (state: RootState) =>\n  selectTransferIsSending(state) || selectTransferIsSendComplete(state);\nexport const selectTransferIsRecovery = (state: RootState) =>\n  state.transfer.isRecovery;\nexport const selectTransferGasPrice = (state: RootState) =>\n  state.transfer.gasPrice;\nexport const selectTransferUseRelayer = (state: RootState) =>\n  state.transfer.useRelayer;\nexport const selectTransferRelayerFee = (state: RootState) =>\n  state.transfer.relayerFee;\nexport const selectAcalaRelayerInfo = (state: RootState) =>\n  state.transfer.acalaRelayerInfo;\nexport const selectSolanaTokenMap = (state: RootState) => {\n  return state.tokens.solanaTokenMap;\n};\n\nexport const selectTerraTokenMap = (state: RootState) => {\n  return state.tokens.terraTokenMap;\n};\n\nexport const selectMarketsMap = (state: RootState) => {\n  return state.tokens.marketsMap;\n};\n\nexport const selectTerraFeeDenom = (state: RootState) => {\n  return state.fee.terraFeeDenom;\n};\n\nexport const selectRelayerTokenInfo = (state: RootState) => {\n  return state.tokens.relayerTokenInfo;\n};\n","import { createTheme, responsiveFontSizes } from \"@material-ui/core\";\nimport SuisseBPIntlBold from \"./fonts/UberMoveTextRegular.woff2\";\nimport SuisseBPIntlBold2 from \"./fonts/metaserifpro-bold-webfont.woff2\";\n\nexport const COLORS = {\n  blue: \"#1975e6\",\n  blueWithTransparency: \"rgba(25, 117, 230, 0.8)\",\n  gray: \"#4e4e54\",\n  green: \"#0ac2af\",\n  greenWithTransparency: \"rgba(10, 194, 175, 0.8)\",\n  lightGreen: \"rgba(51, 242, 223, 1)\",\n  lightBlue: \"#83b9fc\",\n  nearBlack: \"#17153f\",\n  nearBlackWithMinorTransparency: \"rgba(0,0,0,.25)\",\n  red: \"#aa0818\",\n  darkRed: \"#810612\",\n  white: \"#FFFFFF\",\n  whiteWithTransparency: \"rgba(255,255,255,.07)\",\n};\n\nconst suisse = {\n  fontFamily: \"MetaSerifPro-Bold\",\n  fontStyle: \"normal\",\n  fontDisplay: \"swap\",\n  fontWeight: 400,\n  src: `url(${SuisseBPIntlBold2}) format('woff2')`,\n};\nconst suisse2 = {\n  fontFamily: \"Uber Move Text\",\n  fontStyle: \"normal\",\n  fontDisplay: \"swap\",\n  fontWeight: 400,\n  src: `url(${SuisseBPIntlBold}) format('woff2')`,\n};\n\nexport const theme = responsiveFontSizes(\n  createTheme({\n    palette: {\n      type: \"dark\",\n      background: {\n        default: COLORS.nearBlack,\n        paper: COLORS.nearBlack,\n      },\n      divider: COLORS.white,\n      text: {\n        primary: COLORS.white,\n      },\n      primary: {\n        main: COLORS.blueWithTransparency, // #0074FF\n        light: COLORS.lightBlue,\n      },\n      secondary: {\n        main: COLORS.greenWithTransparency, // #00EFD8\n        light: COLORS.lightGreen,\n      },\n      error: {\n        main: COLORS.red,\n      },\n    },\n\n    typography: {\n      \"@font-face\": [suisse2],\n      fontFamily: \"Uber Move Text, sans-serif\",\n      fontSize: 13,\n      h1: {\n        fontFamily: \"MetaSerifPro-Bold, sans-serif\",\n        lineHeight: 0.9,\n        letterSpacing: \"0px\",\n        fontWeight: \"bold\",\n        fontSize: \"28px\",\n      },\n      h2: {\n        fontWeight: \"200\",\n      },\n      h4: {\n        fontWeight: \"600\",\n        fontFamily: \"MetaSerifPro-Bold, sans-serif\",\n        letterSpacing: \"0px\",\n      },\n    },\n    overrides: {\n      MuiCssBaseline: {\n        \"@global\": {\n          \"@font-face\": [suisse],\n          body: {\n            overscrollBehaviorY: \"none\",\n            // backgroundImage: `url(${bg})`,\n            backgroundPosition: \"top center\",\n            backgroundRepeat: \"repeat-y\",\n            backgroundSize: \"120%\",\n          },\n          \"*\": {\n            scrollbarWidth: \"thin\",\n            scrollbarColor: `${COLORS.gray} ${COLORS.nearBlackWithMinorTransparency}`,\n          },\n          \"*::-webkit-scrollbar\": {\n            width: \"8px\",\n            height: \"8px\",\n            backgroundColor: COLORS.nearBlackWithMinorTransparency,\n          },\n          \"*::-webkit-scrollbar-thumb\": {\n            backgroundColor: COLORS.gray,\n            borderRadius: \"4px\",\n          },\n          \"*::-webkit-scrollbar-corner\": {\n            // this hides an annoying white box which appears when both scrollbars are present\n            backgroundColor: \"transparent\",\n          },\n        },\n      },\n      MuiInputLabel: {\n        formControl: {\n          top: \"-4px\",\n        },\n      },\n      MuiOutlinedInput: {\n        input: {\n          padding: \"14px\",\n        },\n      },\n      MuiAccordion: {\n        root: {\n          backgroundColor: COLORS.whiteWithTransparency,\n          \"&:before\": {\n            display: \"none\",\n          },\n        },\n        rounded: {\n          \"&:first-child\": {\n            borderTopLeftRadius: \"8px\",\n            borderTopRightRadius: \"8px\",\n          },\n          \"&:last-child\": {\n            borderBottomLeftRadius: \"8px\",\n            borderBottomRightRadius: \"8px\",\n          },\n        },\n      },\n      MuiAlert: {\n        root: {\n          borderRadius: \"8px\",\n        },\n        outlinedInfo: {\n          color: \"#ffa938\",\n          border: \"1px solid #e38116\",\n          marginTop: \"10px\",\n          marginBottom: \"12px\",\n        },\n        MuiAlert: {\n          Icon: {\n          color: \"#ffa43d\",\n          },\n      },\n    },\n    MuiSvgIcon: {\n      root: {\n        fill: \"#f18e20\",\n      },\n    },\n      MuiTypography: {\n        caption: {\n          lineHeight: \"40px\",\n          fontSize: \"18px\",\n        },\n        colorError: {\n          color: \"#ffffff4a\",\n        },\n        },\n      MuiButton: {\n        root: {\n          borderRadius: \"22px\",\n          letterSpacing: \".1em\",\n        },\n        outlinedSizeSmall: {\n          padding: \"5px 9px\",\n          fontSize: \"0.60rem\",\n          whiteSpace: \"nowrap\",\n          background: \"#44335870\",\n          border: \"1px solid rgb(159 130 255 / 10%)\",\n\n        },\n        \"&.MuiButton-contained\": {\n          height: \"44px\",\n        },\n      },\n      MuiLink: {\n        root: {\n          color: COLORS.lightBlue,\n        },\n      },\n      MuiPaper: {\n        rounded: {\n          borderRadius: \"6px\",\n          backdropFilter: \"blur(4px)\",\n        },\n      },\n      MuiStepper: {\n        root: {\n          backgroundColor: \"transparent\",\n          padding: 0,\n        },\n      },\n      MuiStep: {\n        root: {\n          backgroundColor: COLORS.whiteWithTransparency,\n          backdropFilter: \"blur(4px)\",\n          borderRadius: \"6px\",\n          padding: \"26px 32px 16px\",\n        },\n      },\n      MuiStepConnector: {\n        lineVertical: {\n          borderLeftWidth: 0,\n        },\n      },\n      MuiStepContent: {\n        root: {\n          borderLeftWidth: 0,\n          marginLeft: 0,\n          paddingLeft: 0,\n        },\n      },\n      MuiSelect: {\n        selectMenu: {\n          height: \"18px\",\n          minHeight: \"0px\",\n          background: \"#281e345e\",\n        },\n        },\n      MuiStepLabel: {\n        label: {\n          color: \"#ffffffa3\",\n          textTransform: \"none\",\n          \"&.MuiStepLabel-active\": {\n            color: \"#ffa53d\",\n          },\n          \"&.MuiStepLabel-completed\": {},\n        },\n      },\n      MuiTabs: {\n        root: {\n          borderBottom: \"1px solid #b396f43b\",\n        },\n        flexContainer: {\n          background: \"#f0f8ff0a\",\n        },\n        indicator: {\n          height: \"100%\",\n          background: \"linear-gradient(20deg, #f44b1b 0%, #eeb430 100%);\",\n          zIndex: -1,\n        },\n      },\n      MuiTab: {\n        root: {\n          color: COLORS.white,\n          fontFamily: \"MetaSerifPro-Bold, sans-serif\",\n          fontWeight: \"bold\",\n          fontSize: 18,\n          padding: 12,\n          letterSpacing: \"-0.69px\",\n          textTransform: \"none\",\n        },\n        textColorInherit: {\n          opacity: 1,\n        },\n      },\n      MuiTableCell: {\n        root: {\n          borderBottom: \"none\",\n        },\n      },\n    },\n  })\n);\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { ReactChild } from \"react\";\nimport { COLORS } from \"../muiTheme\";\n\nconst useStyles = makeStyles((theme) => ({\n  centeredContainer: {\n    marginBottom: \"68px\",\n    textAlign: \"center\",\n    width: \"100%\",\n  },\n  linearGradient: {\n    background: `linear-gradient(to left, ${COLORS.blue}, ${COLORS.green});`,\n    WebkitBackgroundClip: \"text\",\n    backgroundClip: \"text\",\n    WebkitTextFillColor: \"transparent\",\n    MozBackgroundClip: \"text\",\n    MozTextFillColor: \"transparent\",\n  },\n  subtitle: {\n    color: \"#ffffff91\",\n    marginTop: theme.spacing(2),\n  },\n}));\n\nexport default function HeaderText({\n  children,\n  white,\n  small,\n  subtitle,\n}: {\n  children: ReactChild;\n  white?: boolean;\n  small?: boolean;\n  subtitle?: ReactChild;\n}) {\n  const classes = useStyles();\n  return (\n    <div className={classes.centeredContainer}>\n      <Typography\n        variant={small ? \"h2\" : \"h1\"}\n        component=\"h1\"\n        className={clsx({ [classes.linearGradient]: !white })}\n      >\n        {children}\n      </Typography>\n      {subtitle ? (\n        <Typography component=\"div\" className={classes.subtitle}>\n          {subtitle}\n        </Typography>\n      ) : null}\n    </div>\n  );\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { ChainId } from \"@xlabs-libs/wallet-aggregator-core\";\nimport { EVMWallet } from \"@xlabs-libs/wallet-aggregator-evm\";\nimport { useWallet } from \"@xlabs-libs/wallet-aggregator-react\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nexport type Provider = ethers.providers.Web3Provider | undefined;\nexport type Signer = ethers.Signer | undefined;\n\ninterface IEthereumContext {\n  provider: Provider;\n  evmChainId: number | undefined;\n  signer: Signer;\n  signerAddress: string | undefined;\n  wallet: EVMWallet | undefined;\n}\n\nexport const useEthereumProvider = (chainId: ChainId): IEthereumContext => {\n  const wallet = useWallet<EVMWallet>(chainId);\n\n  const [signerAddress, setSignerAddress] = useState<string | undefined>();\n  const [evmChainId, setEvmChainId] = useState<number | undefined>();\n  const [signer, setSigner] = useState<ethers.Signer | undefined>();\n  const [provider, setProvider] = useState<\n    ethers.providers.Web3Provider | undefined\n  >();\n\n  useEffect(() => {\n    if (!isEVMChain(chainId)) return () => {};\n\n    setSignerAddress(wallet?.getAddress());\n    setEvmChainId(wallet?.getNetworkInfo()?.chainId);\n    setSigner(wallet?.getSigner());\n    setProvider(wallet?.getProvider());\n\n    const handleNetworkChange = () => {\n      setEvmChainId(wallet?.getNetworkInfo()?.chainId);\n    };\n\n    wallet?.on(\"networkChanged\", handleNetworkChange);\n    return () => {\n      wallet?.off(\"networkChanged\", handleNetworkChange);\n    };\n  }, [wallet, chainId]);\n\n  return useMemo(\n    () => ({\n      provider,\n      evmChainId,\n      signer,\n      signerAddress,\n      wallet,\n    }),\n    [provider, evmChainId, signer, signerAddress, wallet]\n  );\n};\n","import { AlgorandWallet } from \"@xlabs-libs/wallet-aggregator-algorand\";\nimport { CHAIN_ID_ALGORAND } from \"@xlabs-libs/wallet-aggregator-core\";\nimport { useWallet } from \"@xlabs-libs/wallet-aggregator-react\";\nimport { useMemo } from \"react\";\n\nexport const useAlgorandWallet = () => {\n  const wallet = useWallet(CHAIN_ID_ALGORAND);\n  const address = wallet?.getAddress();\n\n  return useMemo(\n    () => ({\n      wallet: wallet as AlgorandWallet,\n      address,\n    }),\n    [wallet, address]\n  );\n};\n","import { setupDefaultWallets } from \"@near-wallet-selector/default-wallets\";\nimport { setupMathWallet } from \"@near-wallet-selector/math-wallet\";\nimport { setupMeteorWallet } from \"@near-wallet-selector/meteor-wallet\";\nimport \"@near-wallet-selector/modal-ui/styles.css\";\nimport { setupMyNearWallet } from \"@near-wallet-selector/my-near-wallet\";\nimport { setupNearWallet } from \"@near-wallet-selector/near-wallet\";\nimport { setupNightly } from \"@near-wallet-selector/nightly\";\nimport { setupSender } from \"@near-wallet-selector/sender\";\nimport { CHAIN_ID_NEAR } from \"@xlabs-libs/wallet-aggregator-core\";\nimport {\n  NearModalSelectorWallet,\n  NearWallet,\n} from \"@xlabs-libs/wallet-aggregator-near\";\nimport { useWallet } from \"@xlabs-libs/wallet-aggregator-react\";\nimport { useMemo } from \"react\";\nimport {\n  getNearConnectionConfig,\n  NEAR_TOKEN_BRIDGE_ACCOUNT,\n} from \"../utils/consts\";\n\ninterface INearWalletContext {\n  wallet?: NearWallet;\n  accountId?: string;\n}\n\nexport const getNearWallets = async () => {\n  return [\n    new NearModalSelectorWallet({\n      config: getNearConnectionConfig(),\n      contractId: NEAR_TOKEN_BRIDGE_ACCOUNT || \"\",\n      modules: [\n        ...(await setupDefaultWallets()),\n        setupNearWallet(),\n        setupMyNearWallet(),\n        setupSender(),\n        setupMathWallet(),\n        setupNightly(),\n        setupMeteorWallet(),\n      ],\n    }),\n  ];\n};\n\nexport function useNearContext(): INearWalletContext {\n  const wallet = useWallet<NearWallet>(CHAIN_ID_NEAR);\n\n  const accountId = useMemo(() => wallet?.getAddress(), [wallet]);\n\n  return useMemo(\n    () => ({\n      wallet,\n      accountId,\n    }),\n    [wallet, accountId]\n  );\n}\n","import { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter,\n  CloverWalletAdapter,\n  Coin98WalletAdapter,\n  SlopeWalletAdapter,\n  SolongWalletAdapter,\n  TorusWalletAdapter,\n  ExodusWalletAdapter,\n  BackpackWalletAdapter,\n  NightlyWalletAdapter,\n  BloctoWalletAdapter,\n  BraveWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\nimport { Connection } from \"@solana/web3.js\";\nimport { CHAIN_ID_SOLANA, Wallet } from \"@xlabs-libs/wallet-aggregator-core\";\nimport { useWallet } from \"@xlabs-libs/wallet-aggregator-react\";\nimport {\n  SolanaAdapter,\n  SolanaWallet,\n} from \"@xlabs-libs/wallet-aggregator-solana\";\nimport { useMemo } from \"react\";\nimport { CLUSTER, SOLANA_HOST } from \"../utils/consts\";\n\nexport const getWrappedWallets = (): Wallet[] => {\n  const wallets: SolanaAdapter[] = [\n    new PhantomWalletAdapter(),\n    new SolflareWalletAdapter(),\n    new BackpackWalletAdapter(),\n    new NightlyWalletAdapter(),\n    new CloverWalletAdapter(),\n    new Coin98WalletAdapter(),\n    new SlopeWalletAdapter(),\n    new SolongWalletAdapter(),\n    new TorusWalletAdapter(),\n    new ExodusWalletAdapter(),\n    new BraveWalletAdapter(),\n  ];\n\n  const network =\n    CLUSTER === \"mainnet\"\n      ? WalletAdapterNetwork.Mainnet\n      : CLUSTER === \"testnet\"\n      ? WalletAdapterNetwork.Devnet\n      : undefined;\n\n  if (network) {\n    wallets.push(new BloctoWalletAdapter({ network }));\n  }\n\n  return wallets.map(\n    (adapter: SolanaAdapter) =>\n      new SolanaWallet(adapter, new Connection(SOLANA_HOST))\n  );\n};\n\ninterface ISolanaContext {\n  publicKey?: string;\n  wallet?: SolanaWallet;\n}\n\nexport const useSolanaWallet = (): ISolanaContext => {\n  const wallet = useWallet<SolanaWallet>(CHAIN_ID_SOLANA);\n\n  //TIP: Replace Solana wallet address here to debug\n  const publicKey = useMemo(() => wallet?.getAddress(), [wallet]);\n\n  return useMemo(\n    () => ({\n      publicKey,\n      wallet,\n    }),\n    [publicKey, wallet]\n  );\n};\n","import { CHAIN_ID_XPLA } from \"@xlabs-libs/wallet-aggregator-core\";\nimport { useWallet } from \"@xlabs-libs/wallet-aggregator-react\";\nimport { getWallets, XplaWallet } from \"@xlabs-libs/wallet-aggregator-xpla\";\nimport { ConnectType } from \"@xpla/wallet-provider\";\n\nexport const getXplaWallets = async () => {\n  let xplaWallets: XplaWallet[] = [];\n\n  try {\n    xplaWallets = await getWallets([ConnectType.READONLY]);\n  } catch (err) {\n    console.error(\"Failed to init xpla chain wallets. Error:\", err);\n  }\n\n  return xplaWallets;\n};\n\nexport const useXplaWallet = () => {\n  return useWallet<XplaWallet>(CHAIN_ID_XPLA);\n};\n","import {\n  AptosSnapAdapter,\n  AptosWalletAdapter,\n  BitkeepWalletAdapter,\n  FewchaWalletAdapter,\n  FletchWalletAdapter,\n  MartianWalletAdapter,\n  NetworkInfo,\n  NightlyWalletAdapter,\n  PontemWalletAdapter,\n  RiseWalletAdapter,\n  SpikaWalletAdapter,\n  TokenPocketWalletAdapter,\n  WalletAdapterNetwork,\n} from \"@manahippo/aptos-wallet-adapter\";\nimport { useMemo } from \"react\";\nimport { CLUSTER } from \"../utils/consts\";\nimport { AptosWallet, AptosAdapter } from \"@xlabs-libs/wallet-aggregator-aptos\";\nimport { CHAIN_ID_APTOS, Wallet } from \"@xlabs-libs/wallet-aggregator-core\";\nimport { useWallet } from \"@xlabs-libs/wallet-aggregator-react\";\n\nexport const getWrappedWallets = (): Wallet[] => {\n  const network =\n    CLUSTER === \"mainnet\"\n      ? WalletAdapterNetwork.Mainnet\n      : CLUSTER === \"testnet\"\n      ? WalletAdapterNetwork.Testnet\n      : WalletAdapterNetwork.Devnet;\n\n  const wallets: AptosAdapter[] = [\n    new AptosWalletAdapter(),\n    new MartianWalletAdapter(),\n    new RiseWalletAdapter(),\n    new NightlyWalletAdapter(),\n    new PontemWalletAdapter(),\n    new FletchWalletAdapter(),\n    new FewchaWalletAdapter(),\n    new SpikaWalletAdapter(),\n    new AptosSnapAdapter({ network }),\n    new BitkeepWalletAdapter(),\n    new TokenPocketWalletAdapter(),\n    // new BloctoWalletAdapter(\n    //   network !== WalletAdapterNetwork.Devnet\n    //     ? {\n    //         network,\n    //       }\n    //     : undefined\n    // ),\n  ];\n\n  return wallets.map((adapter) => new AptosWallet(adapter));\n};\n\ninterface IAptosContext {\n  wallet?: AptosWallet;\n  account?: string;\n  network?: NetworkInfo;\n}\n\nexport const useAptosContext = (): IAptosContext => {\n  const wallet = useWallet<AptosWallet>(CHAIN_ID_APTOS);\n\n  const account = useMemo(() => wallet?.getAddress(), [wallet]);\n  const network = useMemo(() => wallet?.getAdapter().network, [wallet]);\n\n  return useMemo(\n    () => ({\n      wallet,\n      account,\n      network,\n    }),\n    [wallet, account, network]\n  );\n};\n","import { useMemo } from \"react\";\nimport {\n  getInjectiveNetworkChainId,\n  getInjectiveNetworkName,\n} from \"../utils/consts\";\nimport {\n  InjectiveWallet,\n  KeplrWallet,\n} from \"@xlabs-libs/wallet-aggregator-injective\";\nimport { useWallet } from \"@xlabs-libs/wallet-aggregator-react\";\nimport { CHAIN_ID_INJECTIVE } from \"@xlabs-libs/wallet-aggregator-core\";\nimport { getNetworkInfo } from \"@injectivelabs/networks\";\n\nconst INJECTIVE_NETWORKS = [\"mainnet\", \"testnet\"];\n\nexport const getInjectiveWallets = () => {\n  const isValidNetwork = INJECTIVE_NETWORKS.includes(\n    process.env.REACT_APP_CLUSTER || \"\"\n  );\n  if (!isValidNetwork) return [];\n\n  const network = getInjectiveNetworkName();\n  const networkInfo = getNetworkInfo(network);\n\n  const opts = {\n    networkChainId: getInjectiveNetworkChainId(),\n    broadcasterOptions: {\n      network,\n      endpoints: {\n        indexerApi: networkInfo.indexerApi,\n        sentryGrpcApi: networkInfo.sentryGrpcApi,\n        sentryHttpApi: networkInfo.sentryHttpApi,\n      },\n    },\n  };\n\n  return [new KeplrWallet(opts)];\n};\n\nexport interface IInjectiveContext {\n  wallet?: InjectiveWallet;\n  address?: string;\n}\n\nexport const useInjectiveContext = (): IInjectiveContext => {\n  const wallet = useWallet<InjectiveWallet>(CHAIN_ID_INJECTIVE);\n\n  const address = useMemo(() => wallet?.getAddress(), [wallet]);\n\n  return useMemo(\n    () => ({\n      wallet,\n      address,\n    }),\n    [wallet, address]\n  );\n};\n","import { ConnectType } from \"@terra-money/wallet-provider\";\nimport { ChainId, isTerraChain } from \"@xlabs-libs/wallet-aggregator-core\";\nimport { useWallet } from \"@xlabs-libs/wallet-aggregator-react\";\nimport { getWallets, TerraWallet } from \"@xlabs-libs/wallet-aggregator-terra\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nexport interface TerraWalletState {\n  walletAddress?: string;\n  wallet?: TerraWallet;\n}\n\nexport const getTerraWallets = async () => {\n  let wallets: TerraWallet[] = [];\n\n  try {\n    wallets = await getWallets([ConnectType.READONLY]);\n  } catch (err) {\n    console.error(\"Failed to init terra chain wallets. Error:\", err);\n  }\n\n  return wallets;\n};\n\nexport const useTerraWallet = (chainId: ChainId) => {\n  const wallet = useWallet<TerraWallet>(chainId);\n\n  const [walletAddress, setWalletAddress] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (!isTerraChain(chainId)) return () => {};\n\n    const handleNetworkChange = () => {\n      setWalletAddress(wallet?.getAddress());\n    };\n\n    // init\n    handleNetworkChange();\n\n    wallet?.on(\"networkChanged\", handleNetworkChange);\n\n    return () => {\n      wallet?.off(\"networkChanged\", handleNetworkChange);\n    };\n  }, [wallet, chainId]);\n\n  return useMemo(\n    () => ({\n      walletAddress,\n      wallet,\n    }),\n    [walletAddress, wallet]\n  );\n};\n","import { CHAIN_ID_SUI } from \"@certusone/wormhole-sdk\";\nimport { useWallet } from \"@xlabs-libs/wallet-aggregator-react\";\nimport { getWallets, SuiWallet } from \"@xlabs-libs/wallet-aggregator-sui\";\n\nexport const getSuiWallets = async () => {\n  let suiWallets: SuiWallet[] = [];\n\n  try {\n    suiWallets = await getWallets();\n  } catch (err) {\n    console.error(\"Failed to init sui chain wallets. Error:\", err);\n  }\n\n  return suiWallets;\n};\n\nexport const useSuiWallet = () => {\n  return useWallet<SuiWallet>(CHAIN_ID_SUI);\n};\n","import {\n  ChainId,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_XPLA,\n  isEVMChain,\n  isTerraChain,\n  CHAIN_ID_SUI,\n} from \"@certusone/wormhole-sdk\";\nimport { useMemo } from \"react\";\nimport { useAlgorandWallet } from \"../contexts/AlgorandWalletContext\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useNearContext } from \"../contexts/NearWalletContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { APTOS_NETWORK, CLUSTER, getEvmChainId } from \"../utils/consts\";\nimport { useXplaWallet } from \"../contexts/XplaWalletContext\";\nimport { useAptosContext } from \"../contexts/AptosWalletContext\";\nimport { useInjectiveContext } from \"../contexts/InjectiveWalletContext\";\nimport { useTerraWallet } from \"../contexts/TerraWalletContext\";\nimport { useSuiWallet } from \"../contexts/SuiWalletContext\";\n\nconst createWalletStatus = (\n  isReady: boolean,\n  statusMessage: string = \"\",\n  walletAddress?: string\n) => ({\n  isReady,\n  statusMessage,\n  walletAddress,\n});\n\nfunction useIsWalletReady(\n  chainId: ChainId,\n  autoSwitch: boolean = true\n): {\n  isReady: boolean;\n  statusMessage: string;\n  walletAddress?: string;\n} {\n  const { publicKey: solPK } = useSolanaWallet();\n  const terraWallet = useTerraWallet(chainId);\n  const hasTerraWallet = !!terraWallet.wallet;\n  const {\n    provider,\n    signerAddress,\n    evmChainId,\n    wallet: evmWallet,\n  } = useEthereumProvider(chainId);\n  const hasEthInfo = !!provider && !!signerAddress;\n  const correctEvmNetwork = getEvmChainId(chainId);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n  const { address: algoAccount } = useAlgorandWallet();\n  const { accountId: nearPK } = useNearContext();\n  const xplaWallet = useXplaWallet();\n  const hasXplaWallet = !!xplaWallet;\n  const { account: aptosAddress, network: aptosNetwork } = useAptosContext();\n  const hasAptosWallet = !!aptosAddress;\n  // The wallets do not all match on network names and the adapter doesn't seem to normalize this yet.\n  // Petra = \"Testnet\"\n  // Martian = \"Testnet\"\n  // Pontam = \"Aptos testnet\"\n  // Nightly = undefined... error on NightlyWallet.ts\n  const hasCorrectAptosNetwork =\n    aptosNetwork?.name?.toLowerCase().includes(APTOS_NETWORK.toLowerCase()) ||\n    (CLUSTER === \"devnet\" && aptosNetwork?.chainId === \"4\");\n  const { address: injAddress } = useInjectiveContext();\n  const hasInjWallet = !!injAddress;\n  const suiWallet = useSuiWallet();\n  const suiAddress = suiWallet?.getAddress();\n\n  return useMemo(() => {\n    if (isTerraChain(chainId) && hasTerraWallet && terraWallet?.walletAddress) {\n      // TODO: terraWallet does not update on wallet changes\n      return createWalletStatus(true, undefined, terraWallet.walletAddress);\n    }\n    if (chainId === CHAIN_ID_SOLANA && solPK) {\n      return createWalletStatus(true, undefined, solPK);\n    }\n    if (chainId === CHAIN_ID_ALGORAND && algoAccount) {\n      return createWalletStatus(true, undefined, algoAccount);\n    }\n    if (chainId === CHAIN_ID_NEAR && nearPK) {\n      return createWalletStatus(true, undefined, nearPK);\n    }\n    if (\n      chainId === CHAIN_ID_XPLA &&\n      hasXplaWallet &&\n      xplaWallet?.getAddress()\n    ) {\n      return createWalletStatus(true, undefined, xplaWallet.getAddress());\n    }\n    if (chainId === CHAIN_ID_APTOS && hasAptosWallet && aptosAddress) {\n      if (hasCorrectAptosNetwork) {\n        return createWalletStatus(true, undefined, aptosAddress);\n      } else {\n        return createWalletStatus(\n          false,\n          \"Wallet is not connected to Dijets Utility Chain.\",\n          undefined\n        );\n      }\n    }\n    if (chainId === CHAIN_ID_INJECTIVE && hasInjWallet && injAddress) {\n      return createWalletStatus(true, undefined, injAddress);\n    }\n    if (chainId === CHAIN_ID_SUI && suiAddress) {\n      return createWalletStatus(true, undefined, suiAddress);\n    }\n    if (isEVMChain(chainId) && hasEthInfo && signerAddress) {\n      if (hasCorrectEvmNetwork) {\n        return createWalletStatus(true, undefined, signerAddress);\n      } else {\n        if (autoSwitch && evmWallet) {\n          evmWallet.switchChain(correctEvmNetwork!);\n        }\n        return createWalletStatus(\n          false,\n          \"Wallet is not connected to Dijets Utility Chain. Expected Chain ID: 98200\",\n          undefined\n        );\n      }\n    }\n\n    return createWalletStatus(false, \"Use Decypher to connect to Dijets Bridge\", undefined);\n  }, [\n    chainId,\n    hasTerraWallet,\n    solPK,\n    hasEthInfo,\n    evmWallet,\n    autoSwitch,\n    correctEvmNetwork,\n    hasCorrectEvmNetwork,\n    signerAddress,\n    terraWallet,\n    algoAccount,\n    nearPK,\n    xplaWallet,\n    hasXplaWallet,\n    hasAptosWallet,\n    aptosAddress,\n    hasCorrectAptosNetwork,\n    hasInjWallet,\n    injAddress,\n    suiAddress,\n  ]);\n}\n\nexport default useIsWalletReady;\n","import {\n  ChainId,\n  ChainName,\n  CHAIN_ID_NEAR,\n  coalesceChainId,\n  hexToUint8Array,\n  uint8ArrayToHex,\n  WormholeWrappedInfo,\n} from \"@certusone/wormhole-sdk\";\nimport { _parseVAAAlgorand } from \"@certusone/wormhole-sdk/lib/esm/algorand\";\nimport { NearWallet } from \"@xlabs-libs/wallet-aggregator-near\";\nimport BN from \"bn.js\";\nimport { arrayify, sha256, zeroPad } from \"ethers/lib/utils\";\nimport { Account, connect } from \"near-api-js\";\nimport { FunctionCallOptions } from \"near-api-js/lib/account\";\nimport { FinalExecutionOutcome } from \"near-api-js/lib/providers\";\nimport { getNearConnectionConfig } from \"./consts\";\n\nexport const makeNearAccount = async (senderAddr: string) =>\n  await (await connect(getNearConnectionConfig())).account(senderAddr);\n\nexport const signAndSendTransactions = async (\n  account: Account,\n  wallet: NearWallet,\n  messages: FunctionCallOptions[]\n): Promise<FinalExecutionOutcome> => {\n  const nearWallet = await wallet.getWallet();\n  if (!nearWallet) throw new Error(\"Invalid wallet or not connected.\");\n\n  // the browser wallet's signAndSendTransactions call navigates away from the page which is incompatible with the current app design\n  if (nearWallet.type === \"browser\" && account) {\n    let lastReceipt: FinalExecutionOutcome | null = null;\n    for (const message of messages) {\n      lastReceipt = await account.functionCall(message);\n    }\n    if (!lastReceipt) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    return lastReceipt;\n  }\n\n  const { data: receipts } = await wallet.sendTransaction({\n    transactions: messages.map((options) => ({\n      signerId: account.accountId,\n      receiverId: options.contractId,\n      actions: [\n        {\n          type: \"FunctionCall\",\n          params: {\n            methodName: options.methodName,\n            args: options.args,\n            gas: options.gas?.toString() || \"0\",\n            deposit: options.attachedDeposit?.toString() || \"0\",\n          },\n        },\n      ],\n    })),\n  });\n  if (!receipts || receipts.length === 0) {\n    throw new Error(\"An error occurred while fetching the transaction info\");\n  }\n  return receipts[receipts.length - 1];\n};\n\nexport function getIsWrappedAssetNear(\n  tokenBridge: string,\n  asset: string\n): boolean {\n  return asset.endsWith(\".\" + tokenBridge);\n}\n\nexport async function lookupHash(\n  account: Account,\n  tokenBridge: string,\n  hash: string\n): Promise<[boolean, string]> {\n  return await account.viewFunction(tokenBridge, \"hash_lookup\", {\n    hash,\n  });\n}\n\nexport async function getOriginalAssetNear(\n  client: Account,\n  tokenAccount: string,\n  assetAccount: string\n): Promise<WormholeWrappedInfo> {\n  let retVal: WormholeWrappedInfo = {\n    isWrapped: false,\n    chainId: CHAIN_ID_NEAR,\n    assetAddress: new Uint8Array(),\n  };\n  retVal.isWrapped = await getIsWrappedAssetNear(tokenAccount, assetAccount);\n  if (!retVal.isWrapped) {\n    retVal.assetAddress = assetAccount\n      ? arrayify(sha256(Buffer.from(assetAccount)))\n      : zeroPad(arrayify(\"0x\"), 32);\n    return retVal;\n  }\n\n  let buf = await client.viewFunction(tokenAccount, \"get_original_asset\", {\n    token: assetAccount,\n  });\n\n  retVal.chainId = buf[1];\n  retVal.assetAddress = hexToUint8Array(buf[0]);\n\n  return retVal;\n}\n\nexport function getEmitterAddressNear(programAddress: string): string {\n  return uint8ArrayToHex(arrayify(sha256(Buffer.from(programAddress, \"utf8\"))));\n}\n\nexport function parseSequenceFromLogNear(\n  result: FinalExecutionOutcome\n): string {\n  let sequence = \"\";\n  for (const o of result.receipts_outcome) {\n    for (const l of o.outcome.logs) {\n      if (l.startsWith(\"EVENT_JSON:\")) {\n        const body = JSON.parse(l.slice(11));\n        if (body.standard === \"wormhole\" && body.event === \"publish\") {\n          return body.seq;\n        }\n      }\n    }\n  }\n  return sequence;\n}\n\nexport async function getForeignAssetNear(\n  client: Account,\n  tokenAccount: string,\n  chain: ChainId | ChainName,\n  contract: string\n): Promise<string | null> {\n  const chainId = coalesceChainId(chain);\n\n  let ret = await client.viewFunction(tokenAccount, \"get_foreign_asset\", {\n    chain: chainId,\n    address: contract,\n  });\n  if (ret === \"\") return null;\n  else return ret;\n}\n\nexport async function getIsTransferCompletedNear(\n  client: Account,\n  tokenAccount: string,\n  signedVAA: Uint8Array\n): Promise<boolean> {\n  // Could we just pass in the vaa already as hex?\n  let vaa = Buffer.from(signedVAA).toString(\"hex\");\n\n  return (\n    await client.viewFunction(tokenAccount, \"is_transfer_completed\", {\n      vaa: vaa,\n    })\n  )[1];\n}\n\nexport async function transferTokenFromNear(\n  client: Account,\n  coreBridge: string,\n  tokenBridge: string,\n  assetId: string,\n  qty: bigint,\n  receiver: Uint8Array,\n  chain: ChainId | ChainName,\n  fee: bigint,\n  payload: string = \"\"\n): Promise<FunctionCallOptions[]> {\n  let isWrapped = getIsWrappedAssetNear(tokenBridge, assetId);\n\n  let message_fee = await client.viewFunction(coreBridge, \"message_fee\", {});\n\n  if (isWrapped) {\n    return [\n      {\n        contractId: tokenBridge,\n        methodName: \"send_transfer_wormhole_token\",\n        args: {\n          token: assetId,\n          amount: qty.toString(10),\n          receiver: uint8ArrayToHex(receiver),\n          chain: chain,\n          fee: fee.toString(10),\n          payload: payload,\n          message_fee: message_fee,\n        },\n        attachedDeposit: new BN(message_fee + 1),\n        gas: new BN(\"100000000000000\"),\n      },\n    ];\n  } else {\n    const msgs = [];\n    let bal = await client.viewFunction(assetId, \"storage_balance_of\", {\n      account_id: tokenBridge,\n    });\n    if (bal === null) {\n      // Looks like we have to stake some storage for this asset\n      // for the token bridge...\n      msgs.push({\n        contractId: assetId,\n        methodName: \"storage_deposit\",\n        args: { account_id: tokenBridge, registration_only: true },\n        gas: new BN(\"100000000000000\"),\n        attachedDeposit: new BN(\"2000000000000000000000\"), // 0.002 NEAR\n      });\n    }\n\n    if (message_fee > 0) {\n      let bank = await client.viewFunction(tokenBridge, \"bank_balance\", {\n        acct: client.accountId,\n      });\n\n      if (!bank[0]) {\n        msgs.push({\n          contractId: tokenBridge,\n          methodName: \"register_bank\",\n          args: {},\n          gas: new BN(\"100000000000000\"),\n          attachedDeposit: new BN(\"2000000000000000000000\"), // 0.002 NEAR\n        });\n      }\n\n      if (bank[1] < message_fee) {\n        msgs.push({\n          contractId: tokenBridge,\n          methodName: \"fill_bank\",\n          args: {},\n          gas: new BN(\"100000000000000\"),\n          attachedDeposit: new BN(message_fee),\n        });\n      }\n    }\n\n    msgs.push({\n      contractId: assetId,\n      methodName: \"ft_transfer_call\",\n      args: {\n        receiver_id: tokenBridge,\n        amount: qty.toString(10),\n        msg: JSON.stringify({\n          receiver: uint8ArrayToHex(receiver),\n          chain: chain,\n          fee: fee.toString(10),\n          payload: payload,\n          message_fee: message_fee,\n        }),\n      },\n      attachedDeposit: new BN(1),\n      gas: new BN(\"100000000000000\"),\n    });\n    return msgs;\n  }\n}\n\nexport async function transferNearFromNear(\n  client: Account,\n  coreBridge: string,\n  tokenBridge: string,\n  qty: bigint,\n  receiver: Uint8Array,\n  chain: ChainId | ChainName,\n  fee: bigint,\n  payload: string = \"\"\n): Promise<FunctionCallOptions[]> {\n  let message_fee = await client.viewFunction(coreBridge, \"message_fee\", {});\n\n  return [\n    {\n      contractId: tokenBridge,\n      methodName: \"send_transfer_near\",\n      args: {\n        receiver: uint8ArrayToHex(receiver),\n        chain: chain,\n        fee: fee.toString(10),\n        payload: payload,\n        message_fee: message_fee,\n      },\n      attachedDeposit: new BN(qty.toString(10)).add(new BN(message_fee)),\n      gas: new BN(\"100000000000000\"),\n    },\n  ];\n}\n\nexport async function redeemOnNear(\n  client: Account,\n  tokenBridge: string,\n  vaa: Uint8Array\n): Promise<FunctionCallOptions[]> {\n  const msgs = [];\n  let p = _parseVAAAlgorand(vaa);\n\n  if (p.ToChain !== CHAIN_ID_NEAR) {\n    throw new Error(\"Not destined for NEAR\");\n  }\n\n  let user = await client.viewFunction(tokenBridge, \"hash_lookup\", {\n    hash: uint8ArrayToHex(p.ToAddress as Uint8Array),\n  });\n\n  if (!user[0]) {\n    throw new Error(\n      \"Unregistered receiver (receiving account is not registered)\"\n    );\n  }\n\n  user = user[1];\n\n  let token = await getForeignAssetNear(\n    client,\n    tokenBridge,\n    p.FromChain as ChainId,\n    p.Contract as string\n  );\n\n  if (token === \"\") {\n    throw new Error(\"Unregistered token (this been attested yet?)\");\n  }\n\n  if (\n    (p.Contract as string) !==\n    \"0000000000000000000000000000000000000000000000000000000000000000\"\n  ) {\n    let bal = await client.viewFunction(token as string, \"storage_balance_of\", {\n      account_id: user,\n    });\n\n    if (bal === null) {\n      console.log(\"Registering \", user, \" for \", token);\n      msgs.push({\n        contractId: token as string,\n        methodName: \"storage_deposit\",\n        args: { account_id: user, registration_only: true },\n        gas: new BN(\"100000000000000\"),\n        attachedDeposit: new BN(\"2000000000000000000000\"), // 0.002 NEAR\n      });\n    }\n\n    if (\n      p.Fee !== undefined &&\n      Buffer.compare(\n        p.Fee,\n        Buffer.from(\n          \"0000000000000000000000000000000000000000000000000000000000000000\",\n          \"hex\"\n        )\n      ) !== 0\n    ) {\n      let bal = await client.viewFunction(\n        token as string,\n        \"storage_balance_of\",\n        {\n          account_id: client.accountId,\n        }\n      );\n\n      if (bal === null) {\n        console.log(\"Registering \", client.accountId, \" for \", token);\n        msgs.push({\n          contractId: token as string,\n          methodName: \"storage_deposit\",\n          args: { account_id: client.accountId, registration_only: true },\n          gas: new BN(\"100000000000000\"),\n          attachedDeposit: new BN(\"2000000000000000000000\"), // 0.002 NEAR\n        });\n      }\n    }\n  }\n\n  msgs.push({\n    contractId: tokenBridge,\n    methodName: \"submit_vaa\",\n    args: {\n      vaa: uint8ArrayToHex(vaa),\n    },\n    attachedDeposit: new BN(\"100000000000000000000000\"),\n    gas: new BN(\"150000000000000\"),\n  });\n\n  msgs.push({\n    contractId: tokenBridge,\n    methodName: \"submit_vaa\",\n    args: {\n      vaa: uint8ArrayToHex(vaa),\n    },\n    attachedDeposit: new BN(\"100000000000000000000000\"),\n    gas: new BN(\"150000000000000\"),\n  });\n  return msgs;\n}\n\nexport async function createWrappedOnNear(\n  client: Account,\n  tokenBridge: string,\n  attestVAA: Uint8Array\n): Promise<FunctionCallOptions[]> {\n  const msgs = [];\n  let vaa = Buffer.from(attestVAA).toString(\"hex\");\n\n  let res = await client.viewFunction(tokenBridge, \"deposit_estimates\", {});\n\n  msgs.push({\n    contractId: tokenBridge,\n    methodName: \"submit_vaa\",\n    args: { vaa: vaa },\n    attachedDeposit: new BN(res[1]),\n    gas: new BN(\"150000000000000\"),\n  });\n\n  msgs.push({\n    contractId: tokenBridge,\n    methodName: \"submit_vaa\",\n    args: { vaa: vaa },\n    attachedDeposit: new BN(res[1]),\n    gas: new BN(\"150000000000000\"),\n  });\n  return msgs;\n}\n\nexport async function attestTokenFromNear(\n  client: Account,\n  coreBridge: string,\n  tokenBridge: string,\n  asset: string\n): Promise<FunctionCallOptions[]> {\n  const msgs = [];\n  let message_fee = await client.viewFunction(coreBridge, \"message_fee\", {});\n  // Non-signing event\n  if (!getIsWrappedAssetNear(tokenBridge, asset)) {\n    // Non-signing event that hits the RPC\n    let res = await client.viewFunction(tokenBridge, \"hash_account\", {\n      account: asset,\n    });\n\n    // if res[0] == false, the account has not been\n    // registered... The first user to attest a non-wormhole token\n    // is gonna have to pay for the space\n    if (!res[0]) {\n      // Signing event\n      msgs.push({\n        contractId: tokenBridge,\n        methodName: \"register_account\",\n        args: { account: asset },\n        gas: new BN(\"100000000000000\"),\n        attachedDeposit: new BN(\"2000000000000000000000\"), // 0.002 NEAR\n      });\n    }\n  }\n\n  msgs.push({\n    contractId: tokenBridge,\n    methodName: \"attest_token\",\n    args: { token: asset, message_fee: message_fee },\n    attachedDeposit: new BN(\"3000000000000000000000\").add(new BN(message_fee)), // 0.003 NEAR\n    gas: new BN(\"100000000000000\"),\n  });\n  return msgs;\n}\n\nexport async function attestNearFromNear(\n  client: Account,\n  coreBridge: string,\n  tokenBridge: string\n): Promise<FunctionCallOptions[]> {\n  let message_fee =\n    (await client.viewFunction(coreBridge, \"message_fee\", {})) + 1;\n\n  return [\n    {\n      contractId: tokenBridge,\n      methodName: \"attest_near\",\n      args: { message_fee: message_fee },\n      attachedDeposit: new BN(message_fee),\n      gas: new BN(\"100000000000000\"),\n    },\n  ];\n}\n","import { cosmos, isNativeDenomInjective } from \"@certusone/wormhole-sdk\";\nimport {\n  ChainGrpcBankApi,\n  ChainGrpcWasmApi,\n  Msgs,\n  TxGrpcClient,\n} from \"@injectivelabs/sdk-ts\";\nimport { InjectiveWallet } from \"@xlabs-libs/wallet-aggregator-injective\";\nimport { getInjectiveNetworkInfo } from \"./consts\";\n\nexport const NATIVE_INJECTIVE_DECIMALS = 18;\n\nexport const INJECTIVE_NATIVE_DENOM = \"inj\";\n\nexport const getInjectiveWasmClient = () =>\n  new ChainGrpcWasmApi(getInjectiveNetworkInfo().grpc);\n\nexport const getInjectiveBankClient = () =>\n  new ChainGrpcBankApi(getInjectiveNetworkInfo().grpc);\n\nexport const getInjectiveTxClient = () =>\n  new TxGrpcClient(getInjectiveNetworkInfo().grpc);\n\nexport const isValidInjectiveAddress = (address: string) => {\n  if (isNativeDenomInjective(address)) {\n    return true;\n  }\n  try {\n    const startsWithInj = address && address.startsWith(\"inj\");\n    const isParsable = cosmos.canonicalAddress(address);\n    const isLengthOk = isParsable.length === 20;\n    return !!(startsWithInj && isParsable && isLengthOk);\n  } catch (error) {\n    return false;\n  }\n};\n\nexport const formatNativeDenom = (denom: string) =>\n  denom === INJECTIVE_NATIVE_DENOM ? \"INJ\" : \"\";\n\nexport const broadcastInjectiveTx = async (\n  wallet: InjectiveWallet,\n  address: string,\n  msgs: Msgs | Msgs[],\n  memo: string = \"\"\n) => {\n  const client = getInjectiveTxClient();\n  const result = await wallet.sendTransaction({\n    // @ts-ignore\n    msgs,\n    address,\n    memo,\n  });\n  const tx = await client.fetchTxPoll(result.id);\n  if (!tx) {\n    throw new Error(\"Unable to fetch transaction\");\n  }\n  if (tx.code !== 0) {\n    throw new Error(`Transaction failed: ${tx.rawLog}`);\n  }\n  return tx;\n};\n","import { JsonRpcProvider } from \"@mysten/sui.js\";\nimport { SUI_CONNECTION } from \"./consts\";\n\nexport const getSuiProvider = () => new JsonRpcProvider(SUI_CONNECTION);\n","import {\n  buildTokenId,\n  ChainId,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA2,\n  CHAIN_ID_XPLA,\n  getForeignAssetAlgorand,\n  getForeignAssetAptos,\n  getForeignAssetEth,\n  getForeignAssetInjective,\n  getForeignAssetSolana,\n  getForeignAssetTerra,\n  getForeignAssetXpla,\n  hexToUint8Array,\n  isEVMChain,\n  isTerraChain,\n  nativeToHexString,\n  CHAIN_ID_SUI,\n  getForeignAssetSui,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  ALGORAND_HOST,\n  ALGORAND_TOKEN_BRIDGE_ID,\n  getEvmChainId,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  getTerraConfig,\n  NEAR_TOKEN_BRIDGE_ACCOUNT,\n  NATIVE_NEAR_PLACEHOLDER,\n  NATIVE_NEAR_WH_ADDRESS,\n  XPLA_LCD_CLIENT_CONFIG,\n} from \"../utils/consts\";\nimport useIsWalletReady from \"./useIsWalletReady\";\nimport { Algodv2 } from \"algosdk\";\nimport {\n  getEmitterAddressNear,\n  getForeignAssetNear,\n  makeNearAccount,\n} from \"../utils/near\";\nimport { useNearContext } from \"../contexts/NearWalletContext\";\nimport { LCDClient as XplaLCDClient } from \"@xpla/xpla.js\";\nimport { getAptosClient } from \"../utils/aptos\";\nimport { getInjectiveWasmClient } from \"../utils/injective\";\nimport { getSuiProvider } from \"../utils/sui\";\n\nexport type ForeignAssetInfo = {\n  doesExist: boolean;\n  address: string | null;\n};\n\nfunction useFetchForeignAsset(\n  originChain: ChainId,\n  originAsset: string,\n  foreignChain: ChainId\n): DataWrapper<ForeignAssetInfo> {\n  const { provider, evmChainId } = useEthereumProvider(originChain);\n  const { isReady } = useIsWalletReady(foreignChain, false);\n  const correctEvmNetwork = getEvmChainId(foreignChain);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n  const { accountId: nearAccountId } = useNearContext();\n\n  const [assetAddress, setAssetAddress] = useState<string | null>(null);\n  const [doesExist, setDoesExist] = useState<boolean | null>(null);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const originAssetHex = useMemo(() => {\n    try {\n      if (originChain === CHAIN_ID_TERRA2) {\n        return buildTokenId(CHAIN_ID_TERRA2, originAsset);\n      }\n      if (originChain === CHAIN_ID_NEAR) {\n        if (originAsset === NATIVE_NEAR_PLACEHOLDER) {\n          return NATIVE_NEAR_WH_ADDRESS;\n        }\n        return getEmitterAddressNear(originAsset);\n      }\n      return nativeToHexString(originAsset, originChain);\n    } catch (e) {\n      return null;\n    }\n  }, [originAsset, originChain]);\n  const [previousArgs, setPreviousArgs] = useState<{\n    originChain: ChainId;\n    originAsset: string;\n    foreignChain: ChainId;\n  } | null>(null);\n  const argsEqual =\n    !!previousArgs &&\n    previousArgs.originChain === originChain &&\n    previousArgs.originAsset === originAsset &&\n    previousArgs.foreignChain === foreignChain;\n  const setArgs = useCallback(() => {\n    setPreviousArgs({ foreignChain, originChain, originAsset });\n  }, [foreignChain, originChain, originAsset]);\n\n  const argumentError = useMemo(\n    () =>\n      !originChain ||\n      !originAsset ||\n      !foreignChain ||\n      !originAssetHex ||\n      foreignChain === originChain ||\n      (isEVMChain(foreignChain) && !isReady) ||\n      (isEVMChain(foreignChain) && !hasCorrectEvmNetwork) ||\n      argsEqual,\n    [\n      isReady,\n      foreignChain,\n      originAsset,\n      originChain,\n      hasCorrectEvmNetwork,\n      originAssetHex,\n      argsEqual,\n    ]\n  );\n\n  useEffect(() => {\n    if (!argsEqual) {\n      setAssetAddress(null);\n      setError(\"\");\n      setDoesExist(null);\n      setPreviousArgs(null);\n    }\n    if (argumentError || !originAssetHex) {\n      return;\n    }\n\n    let cancelled = false;\n    setIsLoading(true);\n    try {\n      const getterFunc: () => Promise<string | bigint | null> = isEVMChain(\n        foreignChain\n      )\n        ? () =>\n            getForeignAssetEth(\n              getTokenBridgeAddressForChain(foreignChain),\n              provider as any, //why does this typecheck work elsewhere?\n              originChain,\n              hexToUint8Array(originAssetHex)\n            )\n        : isTerraChain(foreignChain)\n        ? () => {\n            const lcd = new LCDClient(getTerraConfig(foreignChain));\n            return getForeignAssetTerra(\n              getTokenBridgeAddressForChain(foreignChain),\n              lcd,\n              originChain,\n              hexToUint8Array(originAssetHex)\n            );\n          }\n        : foreignChain === CHAIN_ID_XPLA\n        ? () => {\n            const lcd = new XplaLCDClient(XPLA_LCD_CLIENT_CONFIG);\n            return getForeignAssetXpla(\n              getTokenBridgeAddressForChain(foreignChain),\n              lcd,\n              originChain,\n              hexToUint8Array(originAssetHex)\n            );\n          }\n        : foreignChain === CHAIN_ID_APTOS\n        ? () => {\n            return getForeignAssetAptos(\n              getAptosClient(),\n              getTokenBridgeAddressForChain(foreignChain),\n              originChain,\n              originAssetHex\n            );\n          }\n        : foreignChain === CHAIN_ID_SOLANA\n        ? () => {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            return getForeignAssetSolana(\n              connection,\n              SOL_TOKEN_BRIDGE_ADDRESS,\n              originChain,\n              hexToUint8Array(originAssetHex)\n            );\n          }\n        : foreignChain === CHAIN_ID_ALGORAND\n        ? () => {\n            const algodClient = new Algodv2(\n              ALGORAND_HOST.algodToken,\n              ALGORAND_HOST.algodServer,\n              ALGORAND_HOST.algodPort\n            );\n            return getForeignAssetAlgorand(\n              algodClient,\n              ALGORAND_TOKEN_BRIDGE_ID,\n              originChain,\n              originAssetHex\n            );\n          }\n        : foreignChain === CHAIN_ID_NEAR && nearAccountId\n        ? () => {\n            return makeNearAccount(nearAccountId)\n              .then((account) =>\n                getForeignAssetNear(\n                  account,\n                  NEAR_TOKEN_BRIDGE_ACCOUNT,\n                  originChain,\n                  originAssetHex\n                )\n              )\n              .catch(() => Promise.reject(\"Failed to make Near account\"));\n          }\n        : foreignChain === CHAIN_ID_INJECTIVE\n        ? () => {\n            const client = getInjectiveWasmClient();\n            return getForeignAssetInjective(\n              getTokenBridgeAddressForChain(foreignChain),\n              client,\n              originChain,\n              hexToUint8Array(originAssetHex)\n            );\n          }\n        : foreignChain === CHAIN_ID_SUI\n        ? () => {\n            return getForeignAssetSui(\n              getSuiProvider(),\n              getTokenBridgeAddressForChain(CHAIN_ID_SUI),\n              originChain,\n              hexToUint8Array(originAssetHex)\n            );\n          }\n        : () => Promise.resolve(null);\n\n      getterFunc()\n        .then((result) => {\n          if (!cancelled) {\n            if (\n              result &&\n              !(\n                isEVMChain(foreignChain) &&\n                result === ethers.constants.AddressZero\n              )\n            ) {\n              setArgs();\n              setDoesExist(true);\n              setIsLoading(false);\n              setAssetAddress(result.toString());\n            } else {\n              setArgs();\n              setDoesExist(false);\n              setIsLoading(false);\n              setAssetAddress(null);\n            }\n          }\n        })\n        .catch((e) => {\n          if (!cancelled) {\n            setError(\"Could not retrieve the foreign asset.\");\n            setIsLoading(false);\n          }\n        });\n    } catch (e) {\n      //This catch mostly just detects poorly formatted addresses\n      if (!cancelled) {\n        setError(\"Could not retrieve the foreign asset.\");\n        setIsLoading(false);\n      }\n    }\n  }, [\n    argumentError,\n    foreignChain,\n    originAssetHex,\n    originChain,\n    provider,\n    setArgs,\n    argsEqual,\n    nearAccountId,\n  ]);\n\n  const compoundError = useMemo(() => {\n    return error ? error : \"\";\n  }, [error]); //now swallows wallet errors\n\n  const output: DataWrapper<ForeignAssetInfo> = useMemo(\n    () => ({\n      error: compoundError,\n      isFetching: isLoading,\n      data:\n        (assetAddress !== null && assetAddress !== undefined) ||\n        (doesExist !== null && doesExist !== undefined)\n          ? { address: assetAddress, doesExist: !!doesExist }\n          : null,\n      receivedAt: null,\n    }),\n    [compoundError, isLoading, assetAddress, doesExist]\n  );\n\n  return output;\n}\n\nexport default useFetchForeignAsset;\n","import { TransactionSignerPair } from \"@certusone/wormhole-sdk/lib/esm/algorand\";\nimport { AlgorandWallet } from \"@xlabs-libs/wallet-aggregator-algorand\";\nimport { Algodv2, assignGroupID, waitForConfirmation } from \"algosdk\";\nimport { ALGORAND_WAIT_FOR_CONFIRMATIONS } from \"./consts\";\n\nexport async function signSendAndConfirmAlgorand(\n  wallet: AlgorandWallet,\n  algodClient: Algodv2,\n  txs: TransactionSignerPair[]\n) {\n  assignGroupID(txs.map((tx) => tx.tx));\n\n  // some wallets like Pera expect the whole group to be present\n  // even though not all of them might be signed\n  const unsignedTxns = txs.map((pair) => ({\n    txn: Buffer.from(pair.tx.toByte()).toString(\"base64\"),\n    signers: pair.signer ? [] : undefined,\n  }));\n\n  const walletSignedTxns = await wallet.signTransaction(unsignedTxns);\n\n  const signedTxns = [];\n  for (let i = 0; i < txs.length; i++) {\n    const signature = walletSignedTxns[i];\n    if (signature) {\n      signedTxns.push(Buffer.from(signature, \"base64\"));\n    } else {\n      const pair = txs[i];\n      if (!pair.signer)\n        throw new Error(\"Got transaction with no signature nor lsig\");\n      signedTxns.push(await pair.signer.signTxn(pair.tx));\n    }\n  }\n\n  await algodClient.sendRawTransaction(signedTxns).do();\n  const result = await waitForConfirmation(\n    algodClient,\n    txs[txs.length - 1].tx.txID(),\n    ALGORAND_WAIT_FOR_CONFIRMATIONS\n  );\n  return result;\n}\n","import axios from \"axios\";\n\nexport async function getKaruraGasParams(rpc: string): Promise<{\n  gasPrice: number;\n  gasLimit: number;\n}> {\n  const gasLimit = 21000000;\n  const storageLimit = 64001;\n  const res = (\n    await axios.post(rpc, {\n      id: 0,\n      jsonrpc: \"2.0\",\n      method: \"eth_getEthGas\",\n      params: [\n        {\n          gasLimit,\n          storageLimit,\n        },\n      ],\n    })\n  ).data.result;\n\n  return {\n    gasLimit: parseInt(res.gasLimit, 16),\n    gasPrice: parseInt(res.gasPrice, 16),\n  };\n}\n","import { LCDClient, isTxError } from \"@xpla/xpla.js\";\nimport { TxResult } from \"@xpla/wallet-provider\";\nimport axios from \"axios\";\nimport {\n  XPLA_GAS_PRICES_URL,\n  XPLA_LCD_CLIENT_CONFIG,\n  XPLA_NATIVE_DENOM,\n} from \"./consts\";\nimport { cosmos, isNativeDenomXpla } from \"@certusone/wormhole-sdk\";\nimport { XplaWallet } from \"@xlabs-libs/wallet-aggregator-xpla\";\n\nexport const NATIVE_XPLA_DECIMALS = 18;\n\nexport async function waitForXplaExecution(transaction: TxResult) {\n  const lcd = new LCDClient(XPLA_LCD_CLIENT_CONFIG);\n  let info;\n  while (!info) {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    try {\n      info = await lcd.tx.txInfo(transaction.result.txhash);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (isTxError(info)) {\n    throw new Error(\n      `Tx ${transaction.result.txhash}: error code ${info.code}: ${info.raw_log}`\n    );\n  }\n  return info;\n}\n\nexport async function postWithFeesXpla(\n  wallet: XplaWallet,\n  msgs: any[],\n  memo: string\n) {\n  // don't try/catch, let errors propagate\n  const lcd = new LCDClient(XPLA_LCD_CLIENT_CONFIG);\n  //Thus, we are going to pull it directly from the current FCD.\n  const gasPrices = await axios\n    .get(XPLA_GAS_PRICES_URL)\n    .then((result) => result.data);\n\n  const account = await lcd.auth.accountInfo(wallet.getAddress()!);\n\n  const feeDenoms = [XPLA_NATIVE_DENOM];\n\n  const feeEstimate = await lcd.tx.estimateFee(\n    [\n      {\n        sequenceNumber: account.getSequenceNumber(),\n        publicKey: account.getPublicKey(),\n      },\n    ],\n    {\n      msgs: [...msgs],\n      memo,\n      feeDenoms,\n      gasPrices,\n    }\n  );\n\n  const result = await wallet.sendTransaction({\n    msgs: [...msgs],\n    memo,\n    feeDenoms,\n    gasPrices,\n    fee: feeEstimate,\n  });\n\n  return result.data!;\n}\n\nexport const isValidXplaAddress = (address: string) => {\n  if (isNativeDenomXpla(address)) {\n    return true;\n  }\n  try {\n    const startsWithXpla = address && address.startsWith(\"xpla\");\n    const isParseable = cosmos.canonicalAddress(address);\n    const isLengthOk = isParseable.length === 32;\n    return !!(startsWithXpla && isParseable && isLengthOk);\n  } catch (error) {\n    return false;\n  }\n};\n\nexport const formatNativeDenom = (denom: string) =>\n  denom === XPLA_NATIVE_DENOM ? \"XPLA\" : \"\";\n\nexport const XPLA_NATIVE_TOKEN_ICON =\n  \"https://assets.xpla.io/icon/svg/XPLA.svg\";\n","const MM_ERR_WITH_INFO_START =\n  \"VM Exception while processing transaction: revert \";\nconst DEFAULT_ERROR_MESSAGE = \"An unknown error occurred\";\n\nconst parseError = (e: any): string => {\n  if (e?.data?.message?.startsWith(MM_ERR_WITH_INFO_START)) {\n    return e.data.message.replace(MM_ERR_WITH_INFO_START, \"\");\n  }\n\n  if (e?.response?.data?.error) {\n    // mostly Terra errors\n    return e.response.data.error;\n  }\n\n  if (e?.message) {\n    return e.message;\n  }\n\n  return DEFAULT_ERROR_MESSAGE;\n};\n\nexport default parseError;\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { MintLayout } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { SolanaWallet } from \"@xlabs-libs/wallet-aggregator-solana\";\n\nexport async function signSendAndConfirm(\n  wallet: SolanaWallet,\n  transaction: Transaction\n) {\n  if (!wallet.signTransaction) {\n    throw new Error(\"wallet.signTransaction is undefined\");\n  }\n  const { id } = await wallet.signAndSendTransaction({\n    transaction,\n    options: {\n      commitment: \"confirmed\",\n      preflightCommitment: \"confirmed\",\n    },\n  });\n  return id;\n}\n\nexport interface ExtractedMintInfo {\n  mintAuthority?: string;\n  supply?: string;\n}\n\nexport function extractMintInfo(\n  account: AccountInfo<Buffer>\n): ExtractedMintInfo {\n  const data = Buffer.from(account.data);\n  const mintInfo = MintLayout.decode(data);\n\n  const uintArray = mintInfo?.mintAuthority;\n  const pubkey = new PublicKey(uintArray);\n  const supply = BigNumber.from(mintInfo?.supply.reverse()).toString();\n  const output = {\n    mintAuthority: pubkey?.toString(),\n    supply: supply.toString(),\n  };\n\n  return output;\n}\n\nexport async function getMultipleAccountsRPC(\n  connection: Connection,\n  pubkeys: PublicKey[]\n): Promise<(AccountInfo<Buffer> | null)[]> {\n  return getMultipleAccounts(connection, pubkeys, \"confirmed\");\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  pubkeys: PublicKey[],\n  commitment: string\n) => {\n  return (\n    await Promise.all(\n      chunks(pubkeys, 99).map((chunk) =>\n        connection.getMultipleAccountsInfo(chunk, commitment)\n      )\n    )\n  ).flat();\n};\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(\n    0,\n    new Array(Math.ceil(array.length / size))\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function shortenAddress(address: string) {\n  return address.length > 10\n    ? `${address.slice(0, 4)}...${address.slice(-4)}`\n    : address;\n}\n","import {\n  cosmos,\n  CHAIN_ID_TERRA2,\n  TerraChainId,\n  terra,\n} from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Coin, Coins, Fee, isTxError, LCDClient } from \"@terra-money/terra.js\";\nimport { TxResult } from \"@terra-money/wallet-provider\";\nimport { TerraWallet } from \"@xlabs-libs/wallet-aggregator-terra\";\nimport axios from \"axios\";\nimport { getTerraConfig, getTerraGasPricesUrl } from \"./consts\";\n\nexport const NATIVE_TERRA_DECIMALS = 6;\nexport const LUNA_SYMBOL = \"LUNA\";\nexport const LUNA_CLASSIC_SYMBOL = \"LUNC\";\n\nexport const getNativeTerraIcon = (symbol: string) =>\n  symbol === LUNA_SYMBOL\n    ? `https://assets.terra.money/icon/svg/LUNA.png`\n    : symbol === LUNA_CLASSIC_SYMBOL\n    ? `https://assets.terra.money/icon/svg/LUNC.svg`\n    : `https://assets.terra.money/icon/60/${symbol.slice(\n        0,\n        symbol.length - 1\n      )}.png`;\n\nexport const formatNativeDenom = (\n  denom: string,\n  chainId: TerraChainId\n): string => {\n  const unit = denom.slice(1).toUpperCase();\n  const isValidTerra = terra.isNativeTerra(denom);\n  return denom === \"uluna\"\n    ? chainId === CHAIN_ID_TERRA2\n      ? LUNA_SYMBOL\n      : LUNA_CLASSIC_SYMBOL\n    : isValidTerra\n    ? unit.slice(0, 2) + \"TC\"\n    : \"\";\n};\n\nexport const formatTerraNativeBalance = (balance = \"\"): string =>\n  formatUnits(balance, 6);\n\nexport async function waitForTerraExecution(\n  transaction: TxResult,\n  chainId: TerraChainId\n) {\n  const lcd = new LCDClient(getTerraConfig(chainId));\n  let info;\n  while (!info) {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    try {\n      info = await lcd.tx.txInfo(transaction.result.txhash);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (isTxError(info)) {\n    throw new Error(\n      `Tx ${transaction.result.txhash}: error code ${info.code}: ${info.raw_log}`\n    );\n  }\n  return info;\n}\n\nexport const isValidTerraAddress = (address: string, chainId: TerraChainId) => {\n  if (terra.isNativeDenom(address)) {\n    return true;\n  }\n  try {\n    const startsWithTerra = address && address.startsWith(\"terra\");\n    const isParseable = cosmos.canonicalAddress(address);\n    const isLengthOk =\n      isParseable.length === (chainId === CHAIN_ID_TERRA2 ? 32 : 20);\n    return !!(startsWithTerra && isParseable && isLengthOk);\n  } catch (error) {\n    return false;\n  }\n};\n\nexport async function postWithFees(\n  wallet: TerraWallet,\n  msgs: any[],\n  memo: string,\n  feeDenoms: string[],\n  chainId: TerraChainId\n) {\n  // don't try/catch, let errors propagate\n  const lcd = new LCDClient(getTerraConfig(chainId));\n  //Thus, we are going to pull it directly from the current FCD.\n  const gasPrices = await axios\n    .get(getTerraGasPricesUrl(chainId))\n    .then((result) => result.data);\n\n  const account = await lcd.auth.accountInfo(wallet.getAddress()!);\n\n  const feeEstimate = await lcd.tx.estimateFee(\n    [\n      {\n        sequenceNumber: account.getSequenceNumber(),\n        publicKey: account.getPublicKey(),\n      },\n    ],\n    {\n      msgs: [...msgs],\n      memo,\n      feeDenoms,\n      gasPrices,\n    }\n  );\n\n  // handle 1.2% \"stability fee\"\n  let stabilityFee = new Coins();\n  msgs.forEach((msg) => {\n    // coins doesn't support forEach or reduce\n    msg?.coins?.map((coin: Coin) => {\n      stabilityFee = stabilityFee.add(coin);\n      return undefined;\n    });\n  });\n  // this leaves the amount as a Dec - no bueno - convert that to Int, otherwise we'll get math/big: cannot unmarshal\n  stabilityFee = stabilityFee.mul(0.012).toIntCeilCoins();\n\n  const result = await wallet.sendTransaction({\n    msgs: [...msgs],\n    memo,\n    feeDenoms,\n    gasPrices,\n    fee: new Fee(feeEstimate.gas_limit, feeEstimate.amount.add(stabilityFee)),\n    // @ts-ignore, https://github.com/terra-money/terra.js/pull/295 (adding isClassic property)\n    isClassic: lcd.config.isClassic,\n  });\n\n  return result.data!;\n}\n","export function sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import {\n  getOriginalPackageId,\n  getPackageId,\n} from \"@certusone/wormhole-sdk/lib/cjs/sui\";\nimport { SuiBuildOutput } from \"@certusone/wormhole-sdk/lib/cjs/sui/types\";\nimport {\n  fromB64,\n  JsonRpcProvider,\n  normalizeSuiObjectId,\n  TransactionBlock,\n} from \"@mysten/sui.js\";\n\n// TODO: replace with SDK method once updated\n// the SDK has an outdated bytecode with a version that doesn't match\nexport async function createWrappedOnSuiPrepare(\n  provider: JsonRpcProvider,\n  coreBridgeStateObjectId: string,\n  tokenBridgeStateObjectId: string,\n  decimals: number,\n  signerAddress: string\n): Promise<TransactionBlock> {\n  return publishCoin(\n    provider,\n    coreBridgeStateObjectId,\n    tokenBridgeStateObjectId,\n    decimals,\n    signerAddress\n  );\n}\n\nexport const publishCoin = async (\n  provider: JsonRpcProvider,\n  coreBridgeStateObjectId: string,\n  tokenBridgeStateObjectId: string,\n  decimals: number,\n  signerAddress: string\n) => {\n  const coreBridgePackageId = await getPackageId(\n    provider,\n    coreBridgeStateObjectId\n  );\n  const tokenBridgePackageId = await getPackageId(\n    provider,\n    tokenBridgeStateObjectId\n  );\n  const build = await getCoinBuildOutput(\n    provider,\n    coreBridgePackageId,\n    tokenBridgePackageId,\n    tokenBridgeStateObjectId,\n    decimals\n  );\n  return publishPackage(build, signerAddress);\n};\n\nexport const getCoinBuildOutput = async (\n  provider: JsonRpcProvider,\n  coreBridgePackageId: string,\n  tokenBridgePackageId: string,\n  tokenBridgeStateObjectId: string,\n  decimals: number\n): Promise<SuiBuildOutput> => {\n  // Decimals is capped at 8\n  decimals = Math.min(decimals, 8);\n\n  // Construct bytecode, parametrized by token bridge package ID and decimals\n  const strippedTokenBridgePackageId = (\n    await getOriginalPackageId(provider, tokenBridgeStateObjectId)\n  )?.replace(\"0x\", \"\");\n  if (!strippedTokenBridgePackageId) {\n    throw new Error(\n      `Original token bridge package ID not found for object ID ${tokenBridgeStateObjectId}`\n    );\n  }\n\n  const bytecodeHex =\n    \"a11ceb0b060000000901000a020a14031e1704350405392d07669f01088502600ae502050cea02160004010b010c0205020d000002000201020003030c020001000104020700000700010001090801010c020a050600030803040202000302010702080007080100020800080303090002070801010b020209000901010608010105010b0202080008030209000504434f494e095478436f6e7465787408565f5f305f325f3011577261707065644173736574536574757004636f696e0e6372656174655f777261707065640b64756d6d795f6669656c6404696e697414707265706172655f726567697374726174696f6e0f7075626c69635f7472616e736665720673656e646572087472616e736665720a74785f636f6e746578740f76657273696f6e5f636f6e74726f6c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002\" +\n    strippedTokenBridgePackageId +\n    \"00020106010000000001090b0031\" +\n    decimals.toString(16).padStart(2, \"0\") +\n    \"0a0138000b012e110238010200\";\n  const bytecode = Buffer.from(bytecodeHex, \"hex\").toString(\"base64\");\n  return {\n    modules: [bytecode],\n    dependencies: [\"0x1\", \"0x2\", tokenBridgePackageId, coreBridgePackageId].map(\n      (d) => normalizeSuiObjectId(d)\n    ),\n  };\n};\n\nexport const publishPackage = async (\n  buildOutput: SuiBuildOutput,\n  signerAddress: string\n): Promise<TransactionBlock> => {\n  // Publish contracts\n  const tx = new TransactionBlock();\n  const [upgradeCap] = tx.publish({\n    modules: buildOutput.modules.map((m) => Array.from(fromB64(m))),\n    dependencies: buildOutput.dependencies.map((d) => normalizeSuiObjectId(d)),\n  });\n\n  // Transfer upgrade capability to recipient\n  tx.transferObjects([upgradeCap], tx.pure(signerAddress));\n  return tx;\n};\n","import {\n  ChainId,\n  CHAIN_ID_ACALA,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_KARURA,\n  CHAIN_ID_KLAYTN,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_XPLA,\n  createWrappedOnAlgorand,\n  createWrappedOnAptos,\n  createWrappedOnEth,\n  createWrappedOnInjective,\n  createWrappedOnSolana,\n  createWrappedOnTerra,\n  createWrappedOnXpla,\n  createWrappedTypeOnAptos,\n  isEVMChain,\n  isTerraChain,\n  postVaaSolanaWithRetry,\n  TerraChainId,\n  updateWrappedOnEth,\n  updateWrappedOnInjective,\n  updateWrappedOnSolana,\n  updateWrappedOnTerra,\n  updateWrappedOnXpla,\n  CHAIN_ID_SUI,\n  parseAttestMetaVaa,\n  createWrappedOnSui,\n} from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport algosdk from \"algosdk\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useAlgorandWallet } from \"../contexts/AlgorandWalletContext\";\nimport { useAptosContext } from \"../contexts/AptosWalletContext\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useNearContext } from \"../contexts/NearWalletContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { setCreateTx, setIsCreating } from \"../store/attestSlice\";\nimport {\n  selectAttestIsCreating,\n  selectAttestTargetChain,\n  selectTerraFeeDenom,\n} from \"../store/selectors\";\nimport { signSendAndConfirmAlgorand } from \"../utils/algorand\";\nimport { waitForSignAndSubmitTransaction } from \"../utils/aptos\";\nimport {\n  ACALA_HOST,\n  ALGORAND_BRIDGE_ID,\n  ALGORAND_HOST,\n  ALGORAND_TOKEN_BRIDGE_ID,\n  getTokenBridgeAddressForChain,\n  KARURA_HOST,\n  MAX_VAA_UPLOAD_RETRIES_SOLANA,\n  NEAR_TOKEN_BRIDGE_ACCOUNT,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  getBridgeAddressForChain,\n} from \"../utils/consts\";\nimport { getKaruraGasParams } from \"../utils/karura\";\nimport {\n  createWrappedOnNear,\n  makeNearAccount,\n  signAndSendTransactions,\n} from \"../utils/near\";\nimport { postWithFeesXpla } from \"../utils/xpla\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { postWithFees } from \"../utils/terra\";\nimport useAttestSignedVAA from \"./useAttestSignedVAA\";\nimport { broadcastInjectiveTx } from \"../utils/injective\";\nimport { useInjectiveContext } from \"../contexts/InjectiveWalletContext\";\nimport { AlgorandWallet } from \"@xlabs-libs/wallet-aggregator-algorand\";\nimport { SolanaWallet } from \"@xlabs-libs/wallet-aggregator-solana\";\nimport { AptosWallet } from \"@xlabs-libs/wallet-aggregator-aptos\";\nimport { InjectiveWallet } from \"@xlabs-libs/wallet-aggregator-injective\";\nimport { NearWallet } from \"@xlabs-libs/wallet-aggregator-near\";\nimport { useTerraWallet } from \"../contexts/TerraWalletContext\";\nimport { TerraWallet } from \"@xlabs-libs/wallet-aggregator-terra\";\nimport { XplaWallet } from \"@xlabs-libs/wallet-aggregator-xpla\";\nimport { useXplaWallet } from \"../contexts/XplaWalletContext\";\nimport {\n  JsonRpcProvider,\n  SUI_CLOCK_OBJECT_ID,\n  TransactionBlock,\n  getPublishedObjectChanges,\n} from \"@mysten/sui.js\";\nimport {\n  getPackageId,\n  getWrappedCoinType,\n} from \"@certusone/wormhole-sdk/lib/cjs/sui\";\nimport { getSuiProvider } from \"../utils/sui\";\nimport { sleep } from \"../utils/sleep\";\nimport { useSuiWallet } from \"../contexts/SuiWalletContext\";\nimport { SuiWallet } from \"@xlabs-libs/wallet-aggregator-sui\";\nimport { createWrappedOnSuiPrepare } from \"../utils/suiPublishHotfix\";\n\n// TODO: replace with SDK method -\nexport async function updateWrappedOnSui(\n  provider: JsonRpcProvider,\n  coreBridgeStateObjectId: string,\n  tokenBridgeStateObjectId: string,\n  coinPackageId: string,\n  attestVAA: Uint8Array\n): Promise<TransactionBlock> {\n  const coreBridgePackageId = await getPackageId(\n    provider,\n    coreBridgeStateObjectId\n  );\n  const tokenBridgePackageId = await getPackageId(\n    provider,\n    tokenBridgeStateObjectId\n  );\n\n  // Get coin metadata\n  const coinType = getWrappedCoinType(coinPackageId);\n  const coinMetadataObjectId = (await provider.getCoinMetadata({ coinType }))\n    ?.id;\n  if (!coinMetadataObjectId) {\n    throw new Error(\n      `Coin metadata object not found for coin type ${coinType}.`\n    );\n  }\n\n  // Get TokenBridgeMessage\n  const tx = new TransactionBlock();\n  const [vaa] = tx.moveCall({\n    target: `${coreBridgePackageId}::vaa::parse_and_verify`,\n    arguments: [\n      tx.object(coreBridgeStateObjectId),\n      tx.pure([...attestVAA]),\n      tx.object(SUI_CLOCK_OBJECT_ID),\n    ],\n  });\n  const [message] = tx.moveCall({\n    target: `${tokenBridgePackageId}::vaa::verify_only_once`,\n    arguments: [tx.object(tokenBridgeStateObjectId), vaa],\n  });\n\n  // Construct complete registration payload\n  tx.moveCall({\n    target: `${tokenBridgePackageId}::create_wrapped::update_attestation`,\n    arguments: [\n      tx.object(tokenBridgeStateObjectId),\n      tx.object(coinMetadataObjectId),\n      message,\n    ],\n    typeArguments: [coinType],\n  });\n  return tx;\n}\n\nasync function algo(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: AlgorandWallet,\n  signedVAA: Uint8Array\n) {\n  dispatch(setIsCreating(true));\n  try {\n    const algodClient = new algosdk.Algodv2(\n      ALGORAND_HOST.algodToken,\n      ALGORAND_HOST.algodServer,\n      ALGORAND_HOST.algodPort\n    );\n    const txs = await createWrappedOnAlgorand(\n      algodClient,\n      ALGORAND_TOKEN_BRIDGE_ID,\n      ALGORAND_BRIDGE_ID,\n      wallet.getAddress()!,\n      signedVAA\n    );\n    const result = await signSendAndConfirmAlgorand(wallet, algodClient, txs);\n    dispatch(\n      setCreateTx({\n        id: txs[txs.length - 1].tx.txID(),\n        block: result[\"confirmed-round\"],\n      })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function aptos(\n  dispatch: any,\n  enqueueSnackbar: any,\n  senderAddr: string,\n  signedVAA: Uint8Array,\n  shouldUpdate: boolean,\n  wallet: AptosWallet\n) {\n  dispatch(setIsCreating(true));\n  const tokenBridgeAddress = getTokenBridgeAddressForChain(CHAIN_ID_APTOS);\n  // const client = getAptosClient();\n  try {\n    // create coin type (it's possible this was already done)\n    // TODO: can this be detected? otherwise the user has to click cancel twice\n    try {\n      const createWrappedCoinTypePayload = createWrappedTypeOnAptos(\n        tokenBridgeAddress,\n        signedVAA\n      );\n      await waitForSignAndSubmitTransaction(\n        createWrappedCoinTypePayload,\n        wallet\n      );\n    } catch (e) {}\n    // create coin\n    const createWrappedCoinPayload = createWrappedOnAptos(\n      tokenBridgeAddress,\n      signedVAA\n    );\n    const result = await waitForSignAndSubmitTransaction(\n      createWrappedCoinPayload,\n      wallet\n    );\n    dispatch(setCreateTx({ id: result, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  chainId: ChainId,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  try {\n    // Karura and Acala need gas params for contract deploys\n    // Klaytn requires specifying gasPrice\n    const overrides =\n      chainId === CHAIN_ID_KARURA\n        ? await getKaruraGasParams(KARURA_HOST)\n        : chainId === CHAIN_ID_ACALA\n        ? await getKaruraGasParams(ACALA_HOST)\n        : chainId === CHAIN_ID_KLAYTN\n        ? { gasPrice: (await signer.getGasPrice()).toString() }\n        : {};\n    const receipt = shouldUpdate\n      ? await updateWrappedOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA,\n          overrides\n        )\n      : await createWrappedOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA,\n          overrides\n        );\n    dispatch(\n      setCreateTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function near(\n  dispatch: any,\n  enqueueSnackbar: any,\n  senderAddr: string,\n  signedVAA: Uint8Array,\n  wallet: NearWallet\n) {\n  dispatch(setIsCreating(true));\n  try {\n    const account = await makeNearAccount(senderAddr);\n    const msgs = await createWrappedOnNear(\n      account,\n      NEAR_TOKEN_BRIDGE_ACCOUNT,\n      signedVAA\n    );\n    const receipt = await signAndSendTransactions(account, wallet, msgs);\n    dispatch(\n      setCreateTx({\n        id: receipt.transaction_outcome.id,\n        block: 0,\n      })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function xpla(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: XplaWallet,\n  signedVAA: Uint8Array,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  const tokenBridgeAddress = getTokenBridgeAddressForChain(CHAIN_ID_XPLA);\n  try {\n    const msg = shouldUpdate\n      ? await updateWrappedOnXpla(\n          tokenBridgeAddress,\n          wallet.getAddress()!,\n          signedVAA\n        )\n      : await createWrappedOnXpla(\n          tokenBridgeAddress,\n          wallet.getAddress()!,\n          signedVAA\n        );\n    const result = await postWithFeesXpla(\n      wallet,\n      [msg],\n      \"Wormhole - Create Wrapped\"\n    );\n    dispatch(\n      setCreateTx({ id: result.result.txhash, block: result.result.height })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: SolanaWallet,\n  payerAddress: string, // TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    await postVaaSolanaWithRetry(\n      connection,\n      wallet.signTransaction.bind(wallet),\n      SOL_BRIDGE_ADDRESS,\n      payerAddress,\n      Buffer.from(signedVAA),\n      MAX_VAA_UPLOAD_RETRIES_SOLANA\n    );\n    const transaction = shouldUpdate\n      ? await updateWrappedOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        )\n      : await createWrappedOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n    const txid = await signSendAndConfirm(wallet, transaction);\n    // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    dispatch(setCreateTx({ id: txid, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: TerraWallet,\n  signedVAA: Uint8Array,\n  shouldUpdate: boolean,\n  feeDenom: string,\n  chainId: TerraChainId\n) {\n  dispatch(setIsCreating(true));\n  const tokenBridgeAddress = getTokenBridgeAddressForChain(chainId);\n  try {\n    const msg = shouldUpdate\n      ? await updateWrappedOnTerra(\n          tokenBridgeAddress,\n          wallet.getAddress()!,\n          signedVAA\n        )\n      : await createWrappedOnTerra(\n          tokenBridgeAddress,\n          wallet.getAddress()!,\n          signedVAA\n        );\n    const result = await postWithFees(\n      wallet,\n      [msg],\n      \"Wormhole - Create Wrapped\",\n      [feeDenom],\n      chainId\n    );\n    dispatch(\n      setCreateTx({ id: result.result.txhash, block: result.result.height })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function injective(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: InjectiveWallet,\n  walletAddress: string,\n  signedVAA: Uint8Array,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  const tokenBridgeAddress = getTokenBridgeAddressForChain(CHAIN_ID_INJECTIVE);\n  try {\n    const msg = shouldUpdate\n      ? await updateWrappedOnInjective(\n          tokenBridgeAddress,\n          walletAddress,\n          signedVAA\n        )\n      : await createWrappedOnInjective(\n          tokenBridgeAddress,\n          walletAddress,\n          signedVAA\n        );\n    const tx = await broadcastInjectiveTx(\n      wallet,\n      walletAddress,\n      msg,\n      \"Wormhole - Create Wrapped\"\n    );\n    dispatch(setCreateTx({ id: tx.txHash, block: tx.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function sui(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: SuiWallet,\n  signedVAA: Uint8Array,\n  foreignAddress: string | null | undefined\n) {\n  dispatch(setIsCreating(true));\n  try {\n    const address = wallet.getAddress();\n    if (!address) {\n      throw new Error(\"No wallet address\");\n    }\n    const provider = getSuiProvider();\n    let response: any;\n    if (foreignAddress) {\n      const suiUpdateWrappedTxPayload = await updateWrappedOnSui(\n        provider,\n        getBridgeAddressForChain(CHAIN_ID_SUI),\n        getTokenBridgeAddressForChain(CHAIN_ID_SUI),\n        foreignAddress.split(\"::\")[0],\n        signedVAA\n      );\n      response = await wallet.signAndSendTransaction({\n        transactionBlock: suiUpdateWrappedTxPayload,\n        options: {\n          showEvents: true,\n        },\n      });\n      if (!response) {\n        throw new Error(\"Error parsing transaction results\");\n      }\n    } else {\n      const suiPrepareRegistrationTxPayload = await createWrappedOnSuiPrepare(\n        provider,\n        getBridgeAddressForChain(CHAIN_ID_SUI),\n        getTokenBridgeAddressForChain(CHAIN_ID_SUI),\n        parseAttestMetaVaa(signedVAA).decimals,\n        address\n      );\n      const suiPrepareRegistrationTxRes = (\n        await wallet.signAndSendTransaction({\n          transactionBlock: suiPrepareRegistrationTxPayload,\n          options: {\n            showObjectChanges: true,\n          },\n        })\n      ).data;\n      if (!suiPrepareRegistrationTxRes) {\n        throw new Error(\"Error parsing transaction results\");\n      }\n      const wrappedAssetSetupEvent =\n        suiPrepareRegistrationTxRes.objectChanges?.find(\n          (oc) =>\n            oc.type === \"created\" && oc.objectType.includes(\"WrappedAssetSetup\")\n        );\n      const wrappedAssetSetupType =\n        (wrappedAssetSetupEvent?.type === \"created\" &&\n          wrappedAssetSetupEvent.objectType) ||\n        undefined;\n      if (!wrappedAssetSetupType) {\n        throw new Error(\"Error parsing wrappedAssetSetupType\");\n      }\n      const publishEvents = getPublishedObjectChanges(\n        suiPrepareRegistrationTxRes\n      );\n      if (publishEvents.length < 1) {\n        throw new Error(\"Error parsing publishEvents\");\n      }\n      const coinPackageId = publishEvents[0].packageId;\n      let attempts = 0;\n      let suiCompleteRegistrationTxPayload: TransactionBlock | null = null;\n      while (!suiCompleteRegistrationTxPayload) {\n        try {\n          suiCompleteRegistrationTxPayload = await createWrappedOnSui(\n            provider,\n            getBridgeAddressForChain(CHAIN_ID_SUI),\n            getTokenBridgeAddressForChain(CHAIN_ID_SUI),\n            address,\n            coinPackageId,\n            wrappedAssetSetupType,\n            signedVAA\n          );\n        } catch (e) {\n          console.error(`Error on attempt ${++attempts}`);\n          console.error(e);\n          if (attempts > 15) {\n            throw e;\n          } else {\n            await sleep(2000);\n          }\n        }\n      }\n\n      response = (\n        await wallet.signAndSendTransaction({\n          transactionBlock: suiCompleteRegistrationTxPayload,\n          options: {\n            showObjectChanges: true,\n          },\n        })\n      ).data;\n      if (!response) {\n        throw new Error(\"Error parsing transaction results\");\n      }\n    }\n\n    dispatch(\n      setCreateTx({\n        id: response.digest,\n        block: Number(response.checkpoint || 0),\n      })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nexport function useHandleCreateWrapped(\n  shouldUpdate: boolean,\n  foreignAddress: string | null | undefined\n) {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const { publicKey: solPK, wallet: solanaWallet } = useSolanaWallet();\n  const signedVAA = useAttestSignedVAA();\n  const isCreating = useSelector(selectAttestIsCreating);\n  const { signer } = useEthereumProvider(targetChain);\n  const terraWallet = useTerraWallet(targetChain);\n  const terraFeeDenom = useSelector(selectTerraFeeDenom);\n  const xplaWallet = useXplaWallet();\n  const { address: algoAccount, wallet: algoWallet } = useAlgorandWallet();\n  const { account: aptosAddress, wallet: aptosWallet } = useAptosContext();\n  const { wallet: injWallet, address: injAddress } = useInjectiveContext();\n  const { accountId: nearAccountId, wallet } = useNearContext();\n  const suiWallet = useSuiWallet();\n  const handleCreateClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && !!signedVAA) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        signedVAA,\n        targetChain,\n        shouldUpdate\n      );\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK,\n        signedVAA,\n        shouldUpdate\n      );\n    } else if (\n      isTerraChain(targetChain) &&\n      !!terraWallet.walletAddress &&\n      !!terraWallet.wallet &&\n      !!signedVAA\n    ) {\n      terra(\n        dispatch,\n        enqueueSnackbar,\n        terraWallet.wallet,\n        signedVAA,\n        shouldUpdate,\n        terraFeeDenom,\n        targetChain\n      );\n    } else if (targetChain === CHAIN_ID_XPLA && !!xplaWallet && !!signedVAA) {\n      xpla(dispatch, enqueueSnackbar, xplaWallet, signedVAA, shouldUpdate);\n    } else if (\n      targetChain === CHAIN_ID_APTOS &&\n      !!aptosAddress &&\n      !!signedVAA\n    ) {\n      aptos(\n        dispatch,\n        enqueueSnackbar,\n        aptosAddress,\n        signedVAA,\n        shouldUpdate,\n        aptosWallet!\n      );\n    } else if (\n      targetChain === CHAIN_ID_ALGORAND &&\n      algoAccount &&\n      !!signedVAA\n    ) {\n      algo(dispatch, enqueueSnackbar, algoWallet, signedVAA);\n    } else if (\n      targetChain === CHAIN_ID_NEAR &&\n      nearAccountId &&\n      wallet &&\n      !!signedVAA\n    ) {\n      near(dispatch, enqueueSnackbar, nearAccountId, signedVAA, wallet);\n    } else if (\n      targetChain === CHAIN_ID_INJECTIVE &&\n      injWallet &&\n      injAddress &&\n      !!signedVAA\n    ) {\n      injective(\n        dispatch,\n        enqueueSnackbar,\n        injWallet,\n        injAddress,\n        signedVAA,\n        shouldUpdate\n      );\n    } else if (\n      targetChain === CHAIN_ID_SUI &&\n      suiWallet &&\n      suiWallet.isConnected() &&\n      suiWallet.getAddress() &&\n      !!signedVAA\n    ) {\n      sui(dispatch, enqueueSnackbar, suiWallet, signedVAA, foreignAddress);\n    } else {\n      // enqueueSnackbar(\n      //   \"Creating wrapped tokens on this chain is not yet supported\",\n      //   {\n      //     variant: \"error\",\n      //   }\n      // );\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    signedVAA,\n    signer,\n    shouldUpdate,\n    terraFeeDenom,\n    algoAccount,\n    algoWallet,\n    nearAccountId,\n    wallet,\n    xplaWallet,\n    aptosAddress,\n    aptosWallet,\n    injWallet,\n    injAddress,\n    foreignAddress,\n    suiWallet,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleCreateClick,\n      disabled: !!isCreating,\n      showLoader: !!isCreating,\n    }),\n    [handleCreateClick, isCreating]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectAttestSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useAttestSignedVAA() {\n  const signedVAAHex = useSelector(selectAttestSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import {\n  Button,\n  CircularProgress,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { ReactChild } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"relative\",\n  },\n  button: {\n    marginTop: theme.spacing(2),\n    height: \"44px\",\n    borderRadius: \"6px\",\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  loader: {\n    position: \"absolute\",\n    bottom: 0,\n    left: \"50%\",\n    marginLeft: -12,\n    marginBottom: 6,\n  },\n  error: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function ButtonWithLoader({\n  disabled,\n  onClick,\n  showLoader,\n  error,\n  children,\n}: {\n  disabled?: boolean;\n  onClick: () => void;\n  showLoader?: boolean;\n  error?: string;\n  children: ReactChild;\n}) {\n  const classes = useStyles();\n  return (\n    <>\n      <div className={classes.root}>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          className={classes.button}\n          disabled={disabled}\n          onClick={onClick}\n        >\n          {children}\n        </Button>\n        {showLoader ? (\n          <CircularProgress\n            size={24}\n            color=\"inherit\"\n            className={classes.loader}\n          />\n        ) : null}\n      </div>\n      {error ? (\n        <Typography variant=\"body2\" color=\"error\" className={classes.error}>\n          {error}\n        </Typography>\n      ) : null}\n    </>\n  );\n}\n","import {\n  Dialog,\n  DialogTitle,\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { Wallet, WalletState } from \"@xlabs-libs/wallet-aggregator-core\";\nimport { useCallback, useMemo } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  flexTitle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    \"& > div\": {\n      flexGrow: 1,\n      marginRight: theme.spacing(4),\n    },\n    \"& > button\": {\n      marginRight: theme.spacing(-1),\n    },\n  },\n  icon: {\n    height: 24,\n    width: 24,\n  },\n}));\n\nconst WalletOptionContent = ({\n  text,\n  icon,\n}: {\n  text: string;\n  icon: string;\n}) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <ListItemIcon>\n        <img src={icon} alt={text} className={classes.icon} />\n      </ListItemIcon>\n      <ListItemText>{text}</ListItemText>\n    </>\n  );\n};\n\nconst WalletOption = ({\n  wallet,\n  onSelect,\n  onClose,\n}: {\n  wallet: Wallet;\n  onSelect: (w: Wallet) => Promise<void>;\n  onClose: () => void;\n}) => {\n  const handleClick = useCallback(() => {\n    onSelect(wallet).then(onClose);\n  }, [wallet, onClose, onSelect]);\n\n  return (\n    <ListItem button onClick={handleClick}>\n      <WalletOptionContent icon={wallet.getIcon()} text={wallet.getName()} />\n    </ListItem>\n  );\n};\n\nconst ConnectWalletDialog = ({\n  isOpen,\n  onSelect,\n  onClose,\n  wallets,\n}: {\n  isOpen: boolean;\n  onSelect: (w: Wallet) => Promise<void>;\n  onClose: () => void;\n  wallets: Wallet[];\n}) => {\n  const classes = useStyles();\n\n  const [detected, undetected] = useMemo(() => {\n    const detected: Wallet[] = [];\n    const undetected: Wallet[] = [];\n    for (const wallet of wallets) {\n      if (\n        wallet.getWalletState() === WalletState.Installed ||\n        wallet.getWalletState() === WalletState.Loadable\n      ) {\n        detected.push(wallet);\n      } else if (wallet.getWalletState() === WalletState.NotDetected) {\n        undetected.push(wallet);\n      }\n    }\n    return [detected, undetected];\n  }, [wallets]);\n\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      <DialogTitle>\n        <div className={classes.flexTitle}>\n          <div>Select your wallet</div>\n          <IconButton onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n      <List>\n        {detected.map((wallet) => (\n          <WalletOption\n            wallet={wallet}\n            onSelect={onSelect}\n            onClose={onClose}\n            key={wallet.getName()}\n          />\n        ))}\n        {!!detected.length && !!undetected.length ? (\n          <Divider variant=\"middle\" />\n        ) : (\n          <></>\n        )}\n        {undetected.map((wallet) => (\n          <ListItem\n            button\n            onClick={onClose}\n            component=\"a\"\n            key={wallet.getName()}\n            href={wallet.getUrl()}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <WalletOptionContent\n              icon={wallet.getIcon()}\n              text={\"Install \" + wallet.getName()}\n            />\n          </ListItem>\n        ))}\n      </List>\n    </Dialog>\n  );\n};\n\nexport default ConnectWalletDialog;\n","import { Button, makeStyles, Tooltip } from \"@material-ui/core\";\nimport { LinkOff } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    display: \"none\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n  },\n  icon: {\n    height: 24,\n    width: 24,\n  },\n}));\n\nconst ToggleConnectedButton = ({\n  connect,\n  disconnect,\n  connected,\n  pk,\n  walletIcon,\n}: {\n  connect(): any;\n  disconnect(): any;\n  connected: boolean;\n  pk: string;\n  walletIcon?: string;\n}) => {\n  const classes = useStyles();\n  const is0x = pk.startsWith(\"0x\");\n  return connected ? (\n    <Tooltip title={pk}>\n      <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"small\"\n        onClick={disconnect}\n        className={classes.button}\n        startIcon={\n          walletIcon ? (\n            <img className={classes.icon} src={walletIcon} alt=\"Wallet\" />\n          ) : (\n            <LinkOff />\n          )\n        }\n      >\n        Disconnect {pk.substring(0, is0x ? 6 : 3)}...\n        {pk.substr(pk.length - (is0x ? 4 : 3))}\n      </Button>\n    </Tooltip>\n  ) : (\n    <Button\n      color=\"primary\"\n      variant=\"contained\"\n      size=\"small\"\n      onClick={connect}\n      className={classes.button}\n    >\n      Connect\n    </Button>\n  );\n};\n\nexport default ToggleConnectedButton;\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { Cluster, getTrmChainName } from \"./consts\";\n\ninterface SanctionResponse {\n  accountExternalId: string;\n  address: string;\n  addressRiskIndicators: {\n    category: string;\n    categoryRiskScoreLevel: number;\n    riskType: string;\n  }[];\n  entities: {\n    category: string;\n    riskScoreLevel: number;\n    entity: string;\n  }[];\n  trmAppUrl: string;\n}\n\nexport const getIsSanctioned = async (\n  chainId: ChainId,\n  CLUSTER: Cluster,\n  addr?: string\n) => {\n  if (!addr) return;\n\n  const trmChain = getTrmChainName(chainId);\n  const localStorageKey = `${trmChain}-${addr}`;\n  const rightNow = new Date();\n\n  let storedResult = \"\";\n  const storedValue = localStorage.getItem(localStorageKey);\n\n  if (storedValue) {\n    const stored = JSON.parse(storedValue);\n\n    if (new Date(stored.expires) < rightNow) {\n      localStorage.removeItem(localStorageKey);\n    } else {\n      storedResult = stored.isSanctioned;\n    }\n  }\n\n  if (storedResult !== \"\") return storedResult;\n\n  if (trmChain && CLUSTER === \"mainnet\") {\n    let isSanctioned = false;\n\n    const resp = await fetch(\n      \"https://hjukqn406c.execute-api.us-east-2.amazonaws.com/addresses\",\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify([\n          {\n            // address: \"149w62rY42aZBox8fGcmqNsXUzSStKeq8C\", // sanctioned address example\n            // chain: \"bitcoin\", // sanctioned address example\n            address: addr,\n            chain: trmChain,\n            accountExternalId: \"PortalBridge\",\n          },\n        ]),\n      }\n    );\n\n    const data = await resp.json();\n    const screeningData = data[0] as SanctionResponse;\n\n    screeningData.addressRiskIndicators.forEach((risk) => {\n      if (risk.categoryRiskScoreLevel >= 10) {\n        isSanctioned = true;\n      }\n    });\n\n    screeningData.entities.forEach((entity) => {\n      if (entity.riskScoreLevel >= 10) {\n        isSanctioned = true;\n      }\n    });\n\n    // store result on localStorage for one week\n    localStorage.setItem(\n      localStorageKey,\n      JSON.stringify({\n        expires: new Date(rightNow.getTime() + 7 * 24 * 60 * 60 * 1000),\n        isSanctioned: isSanctioned,\n      })\n    );\n\n    return isSanctioned;\n  }\n  return false;\n};\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { useCallback, useState } from \"react\";\nimport { Wallet } from \"@xlabs-libs/wallet-aggregator-core\";\nimport {\n  useChangeWallet,\n  useUnsetWalletFromChain,\n  useWallet,\n  useWalletsForChain,\n} from \"@xlabs-libs/wallet-aggregator-react\";\nimport ConnectWalletDialog from \"./ConnectWalletDialog\";\nimport ToggleConnectedButton from \"./ToggleConnectedButton\";\nimport { Typography } from \"@material-ui/core\";\nimport { CLUSTER } from \"../utils/consts\";\nimport { getIsSanctioned } from \"../utils/sanctions\";\n\nconst ConnectWalletButton = ({ chainId }: { chainId: ChainId }) => {\n  const wallet = useWallet(chainId);\n  const changeWallet = useChangeWallet();\n  const unsetWalletFromChain = useUnsetWalletFromChain();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [error, setError] = useState<Error | undefined>();\n  const availableWallets = useWalletsForChain(chainId);\n\n  const pk = wallet?.getAddress();\n\n  const connect = useCallback(\n    async (w: Wallet) => {\n      try {\n        await w.connect();\n\n        const wAddress = w.getAddress();\n        const isSanctioned = await getIsSanctioned(chainId, CLUSTER, wAddress);\n\n        if (isSanctioned) {\n          console.error(\"sanctioned wallet detected\", wAddress);\n          setError(\n            new Error(\"You need a valid Dijets Utility Chain address to to use the Bridge\")\n          );\n        } else {\n          changeWallet(w);\n          setError(undefined);\n        }\n      } catch (err: any) {\n        console.error(err);\n        setError(err);\n      }\n    },\n    [chainId, changeWallet]\n  );\n\n  const disconnect = useCallback(async () => {\n    try {\n      if (!wallet) return;\n      await wallet.disconnect();\n      unsetWalletFromChain(chainId);\n      setError(undefined);\n    } catch (err: any) {\n      console.error(err);\n      setError(err);\n    }\n  }, [unsetWalletFromChain, wallet, chainId]);\n\n  const openDialog = useCallback(() => {\n    setIsDialogOpen(true);\n  }, [setIsDialogOpen]);\n\n  const closeDialog = useCallback(() => {\n    setIsDialogOpen(false);\n  }, [setIsDialogOpen]);\n\n  const handleConnect = useCallback(() => {\n    if (availableWallets.length === 0)\n      throw new Error(`No wallets found for chain id ${chainId}`);\n\n    return availableWallets.length > 1\n      ? openDialog()\n      : connect(availableWallets[0]);\n  }, [openDialog, availableWallets, connect, chainId]);\n\n  return (\n    <>\n      <ToggleConnectedButton\n        connect={handleConnect}\n        disconnect={disconnect}\n        connected={!!pk}\n        pk={pk || \"\"}\n      />\n      <ConnectWalletDialog\n        isOpen={isDialogOpen}\n        onSelect={connect}\n        onClose={closeDialog}\n        wallets={availableWallets}\n      />\n      {error && (\n        <Typography\n          style={{ textAlign: \"center\", display: \"none\" }}\n          variant=\"body2\"\n          color=\"error\"\n        >\n          {error.message}\n        </Typography>\n      )}\n    </>\n  );\n};\n\nexport default ConnectWalletButton;\n","import {\n  ChainId,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_XPLA,\n  isEVMChain,\n  isTerraChain,\n  CHAIN_ID_SUI,\n} from \"@certusone/wormhole-sdk\";\nimport ConnectWalletButton from \"./ConnectWalletButton\";\n\nfunction isChainAllowed(chainId: ChainId) {\n  return (\n    isEVMChain(chainId) ||\n    chainId === CHAIN_ID_SOLANA ||\n    isTerraChain(chainId) ||\n    chainId === CHAIN_ID_ALGORAND ||\n    chainId === CHAIN_ID_NEAR ||\n    chainId === CHAIN_ID_XPLA ||\n    chainId === CHAIN_ID_APTOS ||\n    chainId === CHAIN_ID_INJECTIVE ||\n    chainId === CHAIN_ID_SUI\n  );\n}\n\nfunction KeyAndBalance({ chainId }: { chainId: ChainId }) {\n  if (isChainAllowed(chainId)) {\n    return <ConnectWalletButton chainId={chainId} />;\n  }\n\n  return null;\n}\n\nexport default KeyAndBalance;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TERRA_DEFAULT_FEE_DENOM } from \"../utils/consts\";\n\nexport interface FeeSliceState {\n  terraFeeDenom: string;\n}\n\nconst initialState: FeeSliceState = {\n  terraFeeDenom: TERRA_DEFAULT_FEE_DENOM,\n};\n\nexport const feeSlice = createSlice({\n  name: \"fee\",\n  initialState,\n  reducers: {\n    setTerraFeeDenom: (state, action: PayloadAction<string>) => {\n      state.terraFeeDenom = action.payload;\n    },\n    reset: () => initialState,\n  },\n});\n\nexport const { setTerraFeeDenom, reset } = feeSlice.actions;\n\nexport default feeSlice.reducer;\n","import { TerraChainId } from \"@certusone/wormhole-sdk\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { MutableRefObject, useEffect, useMemo, useState } from \"react\";\nimport { getTerraConfig } from \"../utils/consts\";\n\nexport interface TerraNativeBalances {\n  [index: string]: string;\n}\n\nexport default function useTerraNativeBalances(\n  chainId: TerraChainId,\n  walletAddress?: string,\n  refreshRef?: MutableRefObject<() => void>\n) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [balances, setBalances] = useState<TerraNativeBalances | undefined>({});\n  const [refresh, setRefresh] = useState(false);\n  useEffect(() => {\n    if (refreshRef) {\n      refreshRef.current = () => {\n        setRefresh(true);\n      };\n    }\n  }, [refreshRef]);\n  useEffect(() => {\n    setRefresh(false);\n    if (walletAddress) {\n      setIsLoading(true);\n      setBalances(undefined);\n      const lcd = new LCDClient(getTerraConfig(chainId));\n      lcd.bank\n        .balance(walletAddress)\n        .then(([coins]) => {\n          // coins doesn't support reduce\n          const balancePairs = coins.map(({ amount, denom }) => [\n            denom,\n            amount,\n          ]);\n          const balance = balancePairs.reduce((obj, current) => {\n            obj[current[0].toString()] = current[1].toString();\n            return obj;\n          }, {} as TerraNativeBalances);\n          setIsLoading(false);\n          setBalances(balance);\n        })\n        .catch((e) => {\n          setIsLoading(false);\n          setBalances(undefined);\n        });\n    } else {\n      setIsLoading(false);\n      setBalances(undefined);\n    }\n  }, [walletAddress, refresh, chainId]);\n  const value = useMemo(() => ({ isLoading, balances }), [isLoading, balances]);\n  return value;\n}\n","import {\n  MenuItem,\n  makeStyles,\n  TextField,\n  Typography,\n  ListItemIcon,\n} from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setTerraFeeDenom } from \"../store/feeSlice\";\nimport { selectTerraFeeDenom } from \"../store/selectors\";\nimport useTerraNativeBalances from \"../hooks/useTerraNativeBalances\";\nimport { formatNativeDenom, getNativeTerraIcon } from \"../utils/terra\";\nimport { TerraChainId } from \"@certusone/wormhole-sdk\";\nimport { useTerraWallet } from \"../contexts/TerraWalletContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  feePickerContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin: `${theme.spacing(1)}px auto`,\n    maxWidth: 200,\n    width: \"100%\",\n  },\n  select: {\n    \"& .MuiSelect-root\": {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  },\n  listItemIcon: {\n    minWidth: 40,\n  },\n  icon: {\n    height: 24,\n    maxWidth: 24,\n  },\n}));\n\ntype TerraFeeDenomPickerProps = {\n  disabled: boolean;\n  chainId: TerraChainId;\n};\n\nexport default function TerraFeeDenomPicker(props: TerraFeeDenomPickerProps) {\n  const terraFeeDenom = useSelector(selectTerraFeeDenom);\n  const { walletAddress } = useTerraWallet(props.chainId);\n  const { balances } = useTerraNativeBalances(props.chainId, walletAddress);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const feeDenomItems = useMemo(() => {\n    const items = [];\n    if (balances) {\n      for (const [denom, amount] of Object.entries(balances)) {\n        if (amount === \"0\") continue;\n        const symbol = formatNativeDenom(denom, props.chainId);\n        if (symbol) {\n          items.push({\n            denom,\n            symbol,\n            icon: getNativeTerraIcon(symbol),\n          });\n        }\n      }\n    }\n    // prevent an out-of-range value from being selected\n    if (!items.find((item) => item.denom === terraFeeDenom)) {\n      const symbol = formatNativeDenom(terraFeeDenom, props.chainId);\n      items.push({\n        denom: terraFeeDenom,\n        symbol,\n        icon: getNativeTerraIcon(symbol),\n      });\n    }\n    return items;\n  }, [balances, terraFeeDenom, props.chainId]);\n\n  return (\n    <div className={classes.feePickerContainer}>\n      <Typography variant=\"caption\">Fee Denomination</Typography>\n      <TextField\n        variant=\"outlined\"\n        size=\"small\"\n        select\n        fullWidth\n        value={terraFeeDenom}\n        onChange={(event) => dispatch(setTerraFeeDenom(event.target.value))}\n        disabled={props.disabled}\n        className={classes.select}\n      >\n        {feeDenomItems.map((item) => {\n          return (\n            <MenuItem key={item.denom} value={item.denom}>\n              <ListItemIcon>\n                <img\n                  src={item.icon}\n                  alt={item.symbol}\n                  className={classes.icon}\n                />\n              </ListItemIcon>\n              {item.symbol}\n            </MenuItem>\n          );\n        })}\n      </TextField>\n    </div>\n  );\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferIsApproving,\n  selectTransferIsRedeeming,\n  selectTransferIsSending,\n  selectTransferRedeemTx,\n  selectTransferTargetChain,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport const WAITING_FOR_WALLET_AND_CONF =\n  \"Waiting for wallet approval (likely in a popup) and confirmation...\";\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const isApproving = useSelector(selectTransferIsApproving);\n  const isSending = useSelector(selectTransferIsSending);\n  const transferTx = useSelector(selectTransferTransferTx);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const redeemTx = useSelector(selectTransferRedeemTx);\n  const showWarning =\n    isApproving || (isSending && !transferTx) || (isRedeeming && !redeemTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isRedeeming\n        ? \"Note: there will be several transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestAttestTx,\n  selectAttestCreateTx,\n  selectAttestIsCreating,\n  selectAttestIsSending,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { WAITING_FOR_WALLET_AND_CONF } from \"../Transfer/WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const isSending = useSelector(selectAttestIsSending);\n  const attestTx = useSelector(selectAttestAttestTx);\n  const targetChain = useSelector(selectAttestTargetChain);\n  const isCreating = useSelector(selectAttestIsCreating);\n  const createTx = useSelector(selectAttestCreateTx);\n  const showWarning = (isSending && !attestTx) || (isCreating && !createTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isCreating\n        ? \"Note: there will be several transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { isTerraChain } from \"@certusone/wormhole-sdk\";\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport useFetchForeignAsset from \"../../hooks/useFetchForeignAsset\";\nimport { useHandleCreateWrapped } from \"../../hooks/useHandleCreateWrapped\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n    textAlign: \"center\",\n  },\n  spacer: {\n    height: theme.spacing(2),\n  },\n}));\n\nfunction Create() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const originAsset = useSelector(selectAttestSourceAsset);\n  const originChain = useSelector(selectAttestSourceChain);\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  const foreignAssetInfo = useFetchForeignAsset(\n    originChain,\n    originAsset,\n    targetChain\n  );\n  const shouldUpdate = foreignAssetInfo.data?.doesExist;\n  const foreignAddress = foreignAssetInfo.data?.address;\n  const error = foreignAssetInfo.error || statusMessage;\n  const { handleClick, disabled, showLoader } = useHandleCreateWrapped(\n    shouldUpdate || false,\n    foreignAddress\n  );\n\n  return (\n    <>\n      <KeyAndBalance chainId={targetChain} />\n      {isTerraChain(targetChain) && (\n        <TerraFeeDenomPicker disabled={disabled} chainId={targetChain} />\n      )}\n      {foreignAssetInfo.isFetching ? (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={classes.alignCenter} />\n        </>\n      ) : (\n        <>\n          <ButtonWithLoader\n            disabled={!isReady || disabled}\n            onClick={handleClick}\n            showLoader={showLoader}\n            error={error}\n          >\n            {shouldUpdate ? \"Update\" : \"Create\"}\n          </ButtonWithLoader>\n          <WaitingForWalletMessage />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Create;\n","import {\n  ChainId,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_AURORA,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_CELO,\n  CHAIN_ID_ETH,\n  CHAIN_ID_FANTOM,\n  CHAIN_ID_KLAYTN,\n  CHAIN_ID_KARURA,\n  CHAIN_ID_OASIS,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_ACALA,\n  isTerraChain,\n  CHAIN_ID_TERRA2,\n  CHAIN_ID_MOONBEAM,\n  CHAIN_ID_XPLA,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_ARBITRUM,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_OPTIMISM,\n  CHAIN_ID_SUI,\n} from \"@certusone/wormhole-sdk\";\nimport { CHAIN_ID_NEAR } from \"@certusone/wormhole-sdk/lib/esm\";\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { Transaction } from \"../store/transferSlice\";\nimport { CLUSTER, getExplorerName } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function ShowTx({\n  chainId,\n  tx,\n}: {\n  chainId: ChainId;\n  tx: Transaction;\n}) {\n  const classes = useStyles();\n  const showExplorerLink =\n    CLUSTER === \"testnet\" ||\n    CLUSTER === \"mainnet\" ||\n    (CLUSTER === \"devnet\" &&\n      (chainId === CHAIN_ID_SOLANA ||\n        isTerraChain(chainId) ||\n        chainId === CHAIN_ID_APTOS));\n  const explorerAddress =\n    chainId === CHAIN_ID_ETH\n      ? `https://${CLUSTER === \"testnet\" ? \"goerli.\" : \"\"}etherscan.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_BSC\n      ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}bscscan.com/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_POLYGON\n      ? `https://${CLUSTER === \"testnet\" ? \"mumbai.\" : \"\"}polygonscan.com/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_AVAX\n      ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}snowtrace.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_OASIS\n      ? `https://${\n          CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n        }explorer.emerald.oasis.dev/tx/${tx?.id}`\n      : chainId === CHAIN_ID_AURORA\n      ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}aurorascan.dev/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_FANTOM\n      ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}ftmscan.com/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_KLAYTN\n      ? `https://${CLUSTER === \"testnet\" ? \"baobab.\" : \"\"}scope.klaytn.com/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_CELO\n      ? `https://${\n          CLUSTER === \"testnet\" ? \"alfajores.celoscan.io\" : \"explorer.celo.org\"\n        }/tx/${tx?.id}`\n      : chainId === CHAIN_ID_KARURA\n      ? `https://${\n          CLUSTER === \"testnet\"\n            ? \"blockscout.karura-dev.aca-dev.network\"\n            : \"blockscout.karura.network\"\n        }/tx/${tx?.id}`\n      : chainId === CHAIN_ID_ACALA\n      ? `https://${\n          CLUSTER === \"testnet\"\n            ? \"blockscout.acala-dev.aca-dev.network\"\n            : \"blockscout.acala.network\"\n        }/tx/${tx?.id}`\n      : chainId === CHAIN_ID_SOLANA\n      ? `https://solscan.io/tx/${tx?.id}${\n          CLUSTER === \"testnet\"\n            ? \"?cluster=devnet\"\n            : CLUSTER === \"devnet\"\n            ? \"?cluster=custom&customUrl=http%3A%2F%2Flocalhost%3A8899\"\n            : \"\"\n        }`\n      : chainId === CHAIN_ID_TERRA\n      ? CLUSTER === \"mainnet\"\n        ? `https://finder.terra.money/columbus-5/tx/${tx?.id}`\n        : undefined\n      : chainId === CHAIN_ID_TERRA2\n      ? `https://finder.terra.money/${\n          CLUSTER === \"devnet\"\n            ? \"localterra\"\n            : CLUSTER === \"testnet\"\n            ? \"pisco-1\"\n            : \"phoenix-1\"\n        }/tx/${tx?.id}`\n      : chainId === CHAIN_ID_ALGORAND\n      ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}algoexplorer.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_NEAR\n      ? `https://explorer.${\n          CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n        }near.org/transactions/${tx?.id}`\n      : chainId === CHAIN_ID_MOONBEAM\n      ? `https://${CLUSTER === \"testnet\" ? \"moonbase.\" : \"\"}moonscan.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_XPLA\n      ? `https://explorer.xpla.io/${\n          CLUSTER === \"testnet\" ? \"testnet\" : \"mainnet\"\n        }/tx/${tx?.id}`\n      : chainId === CHAIN_ID_APTOS\n      ? `https://explorer.aptoslabs.com/txn/${tx?.id}${\n          CLUSTER === \"testnet\"\n            ? \"?network=testnet\"\n            : CLUSTER === \"devnet\"\n            ? \"?network=local\"\n            : \"\"\n        }`\n      : chainId === CHAIN_ID_ARBITRUM\n      ? `https://${CLUSTER === \"testnet\" ? \"goerli.\" : \"\"}arbiscan.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_INJECTIVE\n      ? `https://${\n          CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n        }explorer.injective.network/transaction/${tx.id}`\n      : chainId === CHAIN_ID_OPTIMISM\n      ? `https://${\n          CLUSTER === \"testnet\" ? \"goerli-optimism.\" : \"optimistic.\"\n        }etherscan.io/tx/${tx?.id}`\n      : chainId === CHAIN_ID_SUI\n      ? `https://explorer.sui.io/txblock/${tx?.id}${\n          CLUSTER === \"testnet\"\n            ? \"?network=testnet\"\n            : CLUSTER === \"devnet\"\n            ? \"?network=local\"\n            : \"?network=https%3A%2F%2Frpc.mainnet.sui.io\"\n        }`\n      : undefined;\n  const explorerName = getExplorerName(chainId);\n\n  return (\n    <div className={classes.tx}>\n      <Typography noWrap component=\"div\" variant=\"body2\">\n        {tx.id}\n      </Typography>\n      {showExplorerLink && explorerAddress ? (\n        <Button\n          href={explorerAddress}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          size=\"small\"\n          variant=\"outlined\"\n          className={classes.viewButton}\n        >\n          View on {explorerName}\n        </Button>\n      ) : null}\n    </div>\n  );\n}\n","import { Link, makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectAttestCreateTx,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/attestSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\nimport { useHistory } from \"react-router\";\nimport { getHowToAddToTokenListUrl } from \"../../utils/consts\";\nimport { Alert } from \"@material-ui/lab\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function CreatePreview() {\n  const { push } = useHistory();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const createTx = useSelector(selectAttestCreateTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n  const handleReturnClick = useCallback(() => {\n    dispatch(reset());\n    push(\"/transfer\");\n  }, [dispatch, push]);\n\n  const explainerString =\n    \"Success! The create wrapped transaction was submitted.\";\n  const howToAddToTokenListUrl = getHowToAddToTokenListUrl(targetChain);\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {createTx ? <ShowTx chainId={targetChain} tx={createTx} /> : null}\n      {howToAddToTokenListUrl ? (\n        <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n          Remember to add the token to the{\" \"}\n          <Link\n            href={howToAddToTokenListUrl}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            token list\n          </Link>\n          {\".\"}\n        </Alert>\n      ) : null}\n      <ButtonWithLoader onClick={handleResetClick}>\n        Attest Another Token!\n      </ButtonWithLoader>\n      <ButtonWithLoader onClick={handleReturnClick}>\n        Return to Transfer\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  attestFromAlgorand,\n  attestFromAptos,\n  attestFromEth,\n  attestFromInjective,\n  attestFromSolana,\n  attestFromTerra,\n  attestFromXpla,\n  ChainId,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_KLAYTN,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_XPLA,\n  getEmitterAddressAlgorand,\n  getEmitterAddressEth,\n  getEmitterAddressInjective,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  getEmitterAddressXpla,\n  getSignedVAAWithRetry,\n  isEVMChain,\n  isTerraChain,\n  parseSequenceFromLogAlgorand,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogInjective,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  parseSequenceFromLogXpla,\n  TerraChainId,\n  uint8ArrayToHex,\n  attestFromSui,\n  CHAIN_ID_SUI,\n} from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport algosdk from \"algosdk\";\nimport { Types } from \"aptos\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useAlgorandWallet } from \"../contexts/AlgorandWalletContext\";\nimport { useAptosContext } from \"../contexts/AptosWalletContext\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useNearContext } from \"../contexts/NearWalletContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  setAttestTx,\n  setIsSending,\n  setSignedVAAHex,\n} from \"../store/attestSlice\";\nimport {\n  selectAttestIsSendComplete,\n  selectAttestIsSending,\n  selectAttestIsTargetComplete,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n  selectTerraFeeDenom,\n} from \"../store/selectors\";\nimport { signSendAndConfirmAlgorand } from \"../utils/algorand\";\nimport {\n  getAptosClient,\n  getEmitterAddressAndSequenceFromResult,\n  waitForSignAndSubmitTransaction,\n} from \"../utils/aptos\";\nimport {\n  ALGORAND_BRIDGE_ID,\n  ALGORAND_HOST,\n  ALGORAND_TOKEN_BRIDGE_ID,\n  getBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  NATIVE_NEAR_PLACEHOLDER,\n  NEAR_CORE_BRIDGE_ACCOUNT,\n  NEAR_TOKEN_BRIDGE_ACCOUNT,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  WORMHOLE_RPC_HOSTS,\n} from \"../utils/consts\";\nimport {\n  attestNearFromNear,\n  attestTokenFromNear,\n  // attestTokenFromNear,\n  getEmitterAddressNear,\n  makeNearAccount,\n  parseSequenceFromLogNear,\n  signAndSendTransactions,\n} from \"../utils/near\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\nimport { postWithFeesXpla, waitForXplaExecution } from \"../utils/xpla\";\nimport { useInjectiveContext } from \"../contexts/InjectiveWalletContext\";\nimport { broadcastInjectiveTx } from \"../utils/injective\";\nimport { AlgorandWallet } from \"@xlabs-libs/wallet-aggregator-algorand\";\nimport { SolanaWallet } from \"@xlabs-libs/wallet-aggregator-solana\";\nimport { AptosWallet } from \"@xlabs-libs/wallet-aggregator-aptos\";\nimport { InjectiveWallet } from \"@xlabs-libs/wallet-aggregator-injective\";\nimport { NearWallet } from \"@xlabs-libs/wallet-aggregator-near\";\nimport { useTerraWallet } from \"../contexts/TerraWalletContext\";\nimport { TerraWallet } from \"@xlabs-libs/wallet-aggregator-terra\";\nimport { XplaWallet } from \"@xlabs-libs/wallet-aggregator-xpla\";\nimport { useXplaWallet } from \"../contexts/XplaWalletContext\";\nimport { SuiWallet } from \"@xlabs-libs/wallet-aggregator-sui\";\nimport { getSuiProvider } from \"../utils/sui\";\nimport {\n  getEmitterAddressAndSequenceFromResponseSui,\n  getOriginalPackageId,\n} from \"@certusone/wormhole-sdk/lib/cjs/sui\";\nimport { useSuiWallet } from \"../contexts/SuiWalletContext\";\n\nasync function algo(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: AlgorandWallet,\n  sourceAsset: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const algodClient = new algosdk.Algodv2(\n      ALGORAND_HOST.algodToken,\n      ALGORAND_HOST.algodServer,\n      ALGORAND_HOST.algodPort\n    );\n    const txs = await attestFromAlgorand(\n      algodClient,\n      ALGORAND_TOKEN_BRIDGE_ID,\n      ALGORAND_BRIDGE_ID,\n      wallet.getAddress()!,\n      BigInt(sourceAsset)\n    );\n    const result = await signSendAndConfirmAlgorand(wallet, algodClient, txs);\n    const sequence = parseSequenceFromLogAlgorand(result);\n    // TODO: fill these out correctly\n    dispatch(\n      setAttestTx({\n        id: txs[txs.length - 1].tx.txID(),\n        block: result[\"confirmed-round\"],\n      })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const emitterAddress = getEmitterAddressAlgorand(ALGORAND_TOKEN_BRIDGE_ID);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      WORMHOLE_RPC_HOSTS,\n      CHAIN_ID_ALGORAND,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function aptos(\n  dispatch: any,\n  enqueueSnackbar: any,\n  sourceAsset: string,\n  wallet: AptosWallet\n) {\n  dispatch(setIsSending(true));\n  const tokenBridgeAddress = getTokenBridgeAddressForChain(CHAIN_ID_APTOS);\n  try {\n    const attestPayload = attestFromAptos(\n      tokenBridgeAddress,\n      CHAIN_ID_APTOS,\n      sourceAsset\n    );\n    const hash = await waitForSignAndSubmitTransaction(attestPayload, wallet);\n    dispatch(setAttestTx({ id: hash, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const result = (await getAptosClient().waitForTransactionWithResult(\n      hash\n    )) as Types.UserTransaction;\n    const { emitterAddress, sequence } =\n      getEmitterAddressAndSequenceFromResult(result);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      WORMHOLE_RPC_HOSTS,\n      CHAIN_ID_APTOS,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  sourceAsset: string,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    // Klaytn requires specifying gasPrice\n    const overrides =\n      chainId === CHAIN_ID_KLAYTN\n        ? { gasPrice: (await signer.getGasPrice()).toString() }\n        : {};\n    const receipt = await attestFromEth(\n      getTokenBridgeAddressForChain(chainId),\n      signer,\n      sourceAsset,\n      overrides\n    );\n    dispatch(\n      setAttestTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getTokenBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      WORMHOLE_RPC_HOSTS,\n      chainId,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function near(\n  dispatch: any,\n  enqueueSnackbar: any,\n  senderAddr: string,\n  sourceAsset: string,\n  wallet: NearWallet\n) {\n  dispatch(setIsSending(true));\n  try {\n    const account = await makeNearAccount(senderAddr);\n    const msgs =\n      sourceAsset === NATIVE_NEAR_PLACEHOLDER\n        ? await attestNearFromNear(\n            account,\n            NEAR_CORE_BRIDGE_ACCOUNT,\n            NEAR_TOKEN_BRIDGE_ACCOUNT\n          )\n        : await attestTokenFromNear(\n            account,\n            NEAR_CORE_BRIDGE_ACCOUNT,\n            NEAR_TOKEN_BRIDGE_ACCOUNT,\n            sourceAsset\n          );\n    const receipt = await signAndSendTransactions(account, wallet, msgs);\n    const sequence = parseSequenceFromLogNear(receipt);\n    dispatch(\n      setAttestTx({\n        id: receipt.transaction_outcome.id,\n        block: 0,\n      })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const emitterAddress = getEmitterAddressNear(NEAR_TOKEN_BRIDGE_ACCOUNT);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      WORMHOLE_RPC_HOSTS,\n      CHAIN_ID_NEAR,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function xpla(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: XplaWallet,\n  asset: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const tokenBridgeAddress = getTokenBridgeAddressForChain(CHAIN_ID_XPLA);\n    const msg = attestFromXpla(tokenBridgeAddress, wallet.getAddress()!, asset);\n    const result = await postWithFeesXpla(wallet, [msg], \"Create Wrapped\");\n    const info = await waitForXplaExecution(result);\n    dispatch(setAttestTx({ id: info.txhash, block: info.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogXpla(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressXpla(tokenBridgeAddress);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      WORMHOLE_RPC_HOSTS,\n      CHAIN_ID_XPLA,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  solPK: PublicKey,\n  sourceAsset: string,\n  wallet: SolanaWallet\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const transaction = await attestFromSolana(\n      connection,\n      SOL_BRIDGE_ADDRESS,\n      SOL_TOKEN_BRIDGE_ADDRESS,\n      solPK,\n      sourceAsset\n    );\n    const txid = await signSendAndConfirm(wallet, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      // TODO: error state\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setAttestTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      WORMHOLE_RPC_HOSTS,\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: TerraWallet,\n  asset: string,\n  feeDenom: string,\n  chainId: TerraChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const tokenBridgeAddress = getTokenBridgeAddressForChain(chainId);\n    const msg = await attestFromTerra(\n      tokenBridgeAddress,\n      wallet.getAddress()!,\n      asset\n    );\n    const result = await postWithFees(\n      wallet,\n      [msg],\n      \"Create Wrapped\",\n      [feeDenom],\n      chainId\n    );\n    const info = await waitForTerraExecution(result, chainId);\n    dispatch(setAttestTx({ id: info.txhash, block: info.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(tokenBridgeAddress);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      WORMHOLE_RPC_HOSTS,\n      chainId,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function injective(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: InjectiveWallet,\n  walletAddress: string,\n  asset: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const tokenBridgeAddress =\n      getTokenBridgeAddressForChain(CHAIN_ID_INJECTIVE);\n    const msg = await attestFromInjective(\n      tokenBridgeAddress,\n      walletAddress,\n      asset\n    );\n    const tx = await broadcastInjectiveTx(\n      wallet,\n      walletAddress,\n      msg,\n      \"Attest Token\"\n    );\n    dispatch(setAttestTx({ id: tx.txHash, block: tx.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogInjective(tx);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressInjective(tokenBridgeAddress);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      WORMHOLE_RPC_HOSTS,\n      CHAIN_ID_INJECTIVE,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function sui(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: SuiWallet,\n  asset: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const provider = getSuiProvider();\n    const tx = await attestFromSui(\n      provider,\n      getBridgeAddressForChain(CHAIN_ID_SUI),\n      getTokenBridgeAddressForChain(CHAIN_ID_SUI),\n      asset\n    );\n    const response = (\n      await wallet.signAndSendTransaction({\n        transactionBlock: tx,\n        options: {\n          showEvents: true,\n        },\n      })\n    ).data;\n    if (!response) {\n      throw new Error(\"Error parsing transaction results\");\n    }\n    dispatch(\n      setAttestTx({\n        id: response.digest,\n        block: Number(response.checkpoint || 0),\n      })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const coreBridgePackageId = await getOriginalPackageId(\n      provider,\n      getBridgeAddressForChain(CHAIN_ID_SUI)\n    );\n    if (!coreBridgePackageId)\n      throw new Error(\"Unable to retrieve original package id\");\n    const { sequence, emitterAddress } =\n      getEmitterAddressAndSequenceFromResponseSui(\n        coreBridgePackageId,\n        response\n      );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      WORMHOLE_RPC_HOSTS,\n      CHAIN_ID_SUI,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleAttest() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const isTargetComplete = useSelector(selectAttestIsTargetComplete);\n  const isSending = useSelector(selectAttestIsSending);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const { signer } = useEthereumProvider(sourceChain);\n  const { publicKey: solPK, wallet: solanaWallet } = useSolanaWallet();\n  const { walletAddress: terraAddress, wallet: terraWallet } =\n    useTerraWallet(sourceChain);\n  const terraFeeDenom = useSelector(selectTerraFeeDenom);\n  const xplaWallet = useXplaWallet();\n  const { address: algoAccount, wallet: algoWallet } = useAlgorandWallet();\n  const { account: aptosAddress, wallet: aptosWallet } = useAptosContext();\n  const { accountId: nearAccountId, wallet } = useNearContext();\n  const { wallet: injWallet, address: injAddress } = useInjectiveContext();\n  const suiWallet = useSuiWallet();\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleAttestClick = useCallback(() => {\n    if (isEVMChain(sourceChain) && !!signer) {\n      evm(dispatch, enqueueSnackbar, signer, sourceAsset, sourceChain);\n    } else if (sourceChain === CHAIN_ID_SOLANA && !!solanaWallet && !!solPK) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        new PublicKey(solPK),\n        sourceAsset,\n        solanaWallet\n      );\n    } else if (isTerraChain(sourceChain) && !!terraAddress && terraWallet) {\n      terra(\n        dispatch,\n        enqueueSnackbar,\n        terraWallet,\n        sourceAsset,\n        terraFeeDenom,\n        sourceChain\n      );\n    } else if (sourceChain === CHAIN_ID_XPLA && !!xplaWallet) {\n      xpla(dispatch, enqueueSnackbar, xplaWallet, sourceAsset);\n    } else if (sourceChain === CHAIN_ID_ALGORAND && algoAccount) {\n      algo(dispatch, enqueueSnackbar, algoWallet, sourceAsset);\n    } else if (sourceChain === CHAIN_ID_APTOS && aptosAddress) {\n      aptos(dispatch, enqueueSnackbar, sourceAsset, aptosWallet!);\n    } else if (sourceChain === CHAIN_ID_NEAR && nearAccountId && wallet) {\n      near(dispatch, enqueueSnackbar, nearAccountId, sourceAsset, wallet);\n    } else if (sourceChain === CHAIN_ID_INJECTIVE && injWallet && injAddress) {\n      injective(dispatch, enqueueSnackbar, injWallet, injAddress, sourceAsset);\n    } else if (\n      sourceChain === CHAIN_ID_SUI &&\n      suiWallet?.isConnected() &&\n      suiWallet.getAddress()\n    ) {\n      sui(dispatch, enqueueSnackbar, suiWallet, sourceAsset);\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    sourceAsset,\n    terraFeeDenom,\n    algoAccount,\n    algoWallet,\n    nearAccountId,\n    wallet,\n    xplaWallet,\n    aptosAddress,\n    aptosWallet,\n    injWallet,\n    injAddress,\n    terraAddress,\n    suiWallet,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleAttestClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleAttestClick, disabled, isSending]\n  );\n}\n","import { PublicKey, AccountInfo } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { deserializeUnchecked } from \"borsh\";\nimport { BinaryReader, BinaryWriter } from \"borsh\";\nconst base58: any = require(\"bs58\");\n\n// eslint-disable-next-line\nexport const METADATA_REPLACE = new RegExp(\"\\u0000\", \"g\");\nexport const EDITION_MARKER_BIT_SIZE = 248;\nexport const METADATA_PREFIX = \"metadata\";\nexport const EDITION = \"edition\";\n\nexport class LazyAccountInfoProxy<T> {\n  executable: boolean = false;\n  owner: StringPublicKey = \"\";\n  lamports: number = 0;\n\n  get data() {\n    return undefined as unknown as T;\n  }\n}\n\nexport interface LazyAccountInfo {\n  executable: boolean;\n  owner: StringPublicKey;\n  lamports: number;\n  data: [string, string];\n}\n\nconst PubKeysInternedMap = new Map<string, PublicKey>();\n\nexport const toPublicKey = (key: string | PublicKey) => {\n  if (typeof key !== \"string\") {\n    return key;\n  }\n\n  let result = PubKeysInternedMap.get(key);\n  if (!result) {\n    result = new PublicKey(key);\n    PubKeysInternedMap.set(key, result);\n  }\n\n  return result;\n};\n\nexport interface PublicKeyStringAndAccount<T> {\n  pubkey: string;\n  account: AccountInfo<T>;\n}\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nexport const BPF_UPGRADE_LOADER_ID = new PublicKey(\n  \"BPFLoaderUpgradeab1e11111111111111111111111\"\n);\n\nexport const MEMO_ID = new PublicKey(\n  \"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"\n);\n\nexport const METADATA_PROGRAM_ID =\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\" as StringPublicKey;\n\nexport const VAULT_ID =\n  \"vau1zxA2LbssAUEF7Gpw91zMM1LvXrvpzJtmZ58rPsn\" as StringPublicKey;\n\nexport const AUCTION_ID =\n  \"auctxRXPeJoc4817jDhf4HbjnhEcr1cCXenosMhK5R8\" as StringPublicKey;\n\nexport const METAPLEX_ID =\n  \"p1exdMJcjVao65QdewkaZRUnU6VPSXhus9n2GzWfh98\" as StringPublicKey;\n\nexport const SYSTEM = new PublicKey(\"11111111111111111111111111111111\");\n\nexport const getStoreID = async (storeOwnerAddress?: string) => {\n  if (!storeOwnerAddress) {\n    return undefined;\n  }\n\n  const programs = await findProgramAddress(\n    [\n      Buffer.from(\"metaplex\"),\n      toPublicKey(METAPLEX_ID).toBuffer(),\n      toPublicKey(storeOwnerAddress).toBuffer(),\n    ],\n    toPublicKey(METAPLEX_ID)\n  );\n  const storeAddress = programs[0];\n\n  return storeAddress;\n};\n\nexport const setProgramIds = async (store?: string) => {\n  STORE = store ? toPublicKey(store) : undefined;\n};\n\nlet STORE: PublicKey | undefined;\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    associatedToken: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    bpf_upgrade_loader: BPF_UPGRADE_LOADER_ID,\n    system: SYSTEM,\n    metadata: METADATA_PROGRAM_ID,\n    memo: MEMO_ID,\n    vault: VAULT_ID,\n    auction: AUCTION_ID,\n    metaplex: METAPLEX_ID,\n    store: STORE,\n  };\n};\n\nexport const findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey\n) => {\n  const key =\n    \"pda-\" +\n    seeds.reduce((agg, item) => agg + item.toString(\"hex\"), \"\") +\n    programId.toString();\n  let cached = localStorage.getItem(key);\n  if (cached) {\n    const value = JSON.parse(cached);\n\n    return [value.key, parseInt(value.nonce)] as [string, number];\n  }\n\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  try {\n    localStorage.setItem(\n      key,\n      JSON.stringify({\n        key: result[0].toBase58(),\n        nonce: result[1],\n      })\n    );\n  } catch {\n    // ignore\n  }\n\n  return [result[0].toBase58(), result[1]] as [string, number];\n};\n\nexport type StringPublicKey = string;\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\n\nexport async function getEdition(\n  tokenMint: StringPublicKey\n): Promise<StringPublicKey> {\n  const PROGRAM_IDS = programIds();\n\n  return (\n    await findProgramAddress(\n      [\n        Buffer.from(METADATA_PREFIX),\n        toPublicKey(PROGRAM_IDS.metadata).toBuffer(),\n        toPublicKey(tokenMint).toBuffer(),\n        Buffer.from(EDITION),\n      ],\n      toPublicKey(PROGRAM_IDS.metadata)\n    )\n  )[0];\n}\n\nclass CreateMetadataArgs {\n  instruction: number = 0;\n  data: Data;\n  isMutable: boolean;\n\n  constructor(args: { data: Data; isMutable: boolean }) {\n    this.data = args.data;\n    this.isMutable = args.isMutable;\n  }\n}\nclass UpdateMetadataArgs {\n  instruction: number = 1;\n  data: Data | null;\n  // Not used by this app, just required for instruction\n  updateAuthority: StringPublicKey | null;\n  primarySaleHappened: boolean | null;\n  constructor(args: {\n    data?: Data;\n    updateAuthority?: string;\n    primarySaleHappened: boolean | null;\n  }) {\n    this.data = args.data ? args.data : null;\n    this.updateAuthority = args.updateAuthority ? args.updateAuthority : null;\n    this.primarySaleHappened = args.primarySaleHappened;\n  }\n}\n\nexport class Creator {\n  address: StringPublicKey;\n  verified: boolean;\n  share: number;\n\n  constructor(args: {\n    address: StringPublicKey;\n    verified: boolean;\n    share: number;\n  }) {\n    this.address = args.address;\n    this.verified = args.verified;\n    this.share = args.share;\n  }\n}\n\nexport class Data {\n  name: string;\n  symbol: string;\n  uri: string;\n  uriMetadata: URIMetadata;\n  sellerFeeBasisPoints: number;\n  creators: Creator[] | null;\n  constructor(args: {\n    name: string;\n    symbol: string;\n    uri: string;\n    sellerFeeBasisPoints: number;\n    creators: Creator[] | null;\n  }) {\n    this.name = args.name;\n    this.symbol = args.symbol;\n    this.uri = args.uri;\n    this.uriMetadata = {} as URIMetadata;\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n    this.creators = args.creators;\n  }\n}\n\nexport class URIMetadata {\n  image!: string;\n  constructor(args: Partial<URIMetadata>) {\n    Object.assign(this, args);\n  }\n}\n\nexport class Metadata {\n  key: MetadataKey;\n  updateAuthority: StringPublicKey;\n  mint: StringPublicKey;\n  data: Data;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n  editionNonce: number | null;\n\n  // set lazy\n  masterEdition?: StringPublicKey;\n  edition?: StringPublicKey;\n\n  constructor(args: {\n    updateAuthority: StringPublicKey;\n    mint: StringPublicKey;\n    data: Data;\n    primarySaleHappened: boolean;\n    isMutable: boolean;\n    editionNonce: number | null;\n  }) {\n    this.key = MetadataKey.MetadataV1;\n    this.updateAuthority = args.updateAuthority;\n    this.mint = args.mint;\n    this.data = args.data;\n    this.primarySaleHappened = args.primarySaleHappened;\n    this.isMutable = args.isMutable;\n    this.editionNonce = args.editionNonce;\n  }\n\n  public async init() {\n    const edition = await getEdition(this.mint);\n    this.edition = edition;\n    this.masterEdition = edition;\n  }\n}\n\nexport class Edition {\n  key: MetadataKey;\n  /// Points at MasterEdition struct\n  parent: StringPublicKey;\n  /// Starting at 0 for master record, this is incremented for each edition minted.\n  edition: BN;\n\n  constructor(args: {\n    key: MetadataKey;\n    parent: StringPublicKey;\n    edition: BN;\n  }) {\n    this.key = MetadataKey.EditionV1;\n    this.parent = args.parent;\n    this.edition = args.edition;\n  }\n}\n\nexport class MasterEditionV1 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n  /// Can be used to mint tokens that give one-time permission to mint a single limited edition.\n  printingMint: StringPublicKey;\n  /// If you don't know how many printing tokens you are going to need, but you do know\n  /// you are going to need some amount in the future, you can use a token from this mint.\n  /// Coming back to token metadata with one of these tokens allows you to mint (one time)\n  /// any number of printing tokens you want. This is used for instance by Auction Manager\n  /// with participation NFTs, where we dont know how many people will bid and need participation\n  /// printing tokens to redeem, so we give it ONE of these tokens to use after the auction is over,\n  /// because when the auction begins we just dont know how many printing tokens we will need,\n  /// but at the end we will. At the end it then burns this token with token-metadata to\n  /// get the printing tokens it needs to give to bidders. Each bidder then redeems a printing token\n  /// to get their limited editions.\n  oneTimePrintingAuthorizationMint: StringPublicKey;\n\n  constructor(args: {\n    key: MetadataKey;\n    supply: BN;\n    maxSupply?: BN;\n    printingMint: StringPublicKey;\n    oneTimePrintingAuthorizationMint: StringPublicKey;\n  }) {\n    this.key = MetadataKey.MasterEditionV1;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n    this.printingMint = args.printingMint;\n    this.oneTimePrintingAuthorizationMint =\n      args.oneTimePrintingAuthorizationMint;\n  }\n}\n\nexport class MasterEditionV2 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n\n  constructor(args: { key: MetadataKey; supply: BN; maxSupply?: BN }) {\n    this.key = MetadataKey.MasterEditionV2;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nclass CreateMasterEditionArgs {\n  instruction: number = 10;\n  maxSupply: BN | null;\n  constructor(args: { maxSupply: BN | null }) {\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nclass MintPrintingTokensArgs {\n  instruction: number = 9;\n  supply: BN;\n\n  constructor(args: { supply: BN }) {\n    this.supply = args.supply;\n  }\n}\n\nexport class EditionMarker {\n  key: MetadataKey;\n  ledger: number[];\n\n  constructor(args: { key: MetadataKey; ledger: number[] }) {\n    this.key = MetadataKey.EditionMarker;\n    this.ledger = args.ledger;\n  }\n\n  editionTaken(edition: number) {\n    const editionOffset = edition % EDITION_MARKER_BIT_SIZE;\n    const indexOffset = Math.floor(editionOffset / 8);\n\n    if (indexOffset > 30) {\n      throw Error(\"bad index for edition\");\n    }\n\n    const positionInBitsetFromRight = 7 - (editionOffset % 8);\n\n    const mask = Math.pow(2, positionInBitsetFromRight);\n\n    const appliedMask = this.ledger[indexOffset] & mask;\n\n    // eslint-disable-next-line\n    return appliedMask != 0;\n  }\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n  [\n    CreateMetadataArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"data\", Data],\n        [\"isMutable\", \"u8\"], // bool\n      ],\n    },\n  ],\n  [\n    UpdateMetadataArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"data\", { kind: \"option\", type: Data }],\n        [\"updateAuthority\", { kind: \"option\", type: \"pubkeyAsString\" }],\n        [\"primarySaleHappened\", { kind: \"option\", type: \"u8\" }],\n      ],\n    },\n  ],\n\n  [\n    CreateMasterEditionArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n      ],\n    },\n  ],\n  [\n    MintPrintingTokensArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"supply\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    MasterEditionV1,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n        [\"printingMint\", \"pubkeyAsString\"],\n        [\"oneTimePrintingAuthorizationMint\", \"pubkeyAsString\"],\n      ],\n    },\n  ],\n  [\n    MasterEditionV2,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n      ],\n    },\n  ],\n  [\n    Edition,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"parent\", \"pubkeyAsString\"],\n        [\"edition\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    Data,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"name\", \"string\"],\n        [\"symbol\", \"string\"],\n        [\"uri\", \"string\"],\n        [\"sellerFeeBasisPoints\", \"u16\"],\n        [\"creators\", { kind: \"option\", type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"address\", \"pubkeyAsString\"],\n        [\"verified\", \"u8\"],\n        [\"share\", \"u8\"],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"updateAuthority\", \"pubkeyAsString\"],\n        [\"mint\", \"pubkeyAsString\"],\n        [\"data\", Data],\n        [\"primarySaleHappened\", \"u8\"], // bool\n        [\"isMutable\", \"u8\"], // bool\n      ],\n    },\n  ],\n  [\n    EditionMarker,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"ledger\", [31]],\n      ],\n    },\n  ],\n]);\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();\n\nexport const decodeMetadata = (buffer: Buffer): Metadata => {\n  const metadata = deserializeUnchecked(\n    METADATA_SCHEMA,\n    Metadata,\n    buffer\n  ) as Metadata;\n  metadata.data.name = metadata.data.name.replace(METADATA_REPLACE, \"\");\n  metadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, \"\");\n  metadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, \"\");\n  return metadata;\n};\n\nexport const getMetadataAddress = async (\n  mintKey: string\n): Promise<[PublicKey, number]> => {\n  const seeds = [\n    Buffer.from(\"metadata\"),\n    new PublicKey(METADATA_PROGRAM_ID).toBuffer(),\n    new PublicKey(mintKey).toBuffer(),\n  ];\n  return PublicKey.findProgramAddress(\n    seeds,\n    new PublicKey(METADATA_PROGRAM_ID)\n  );\n};\n","import { Connection } from \"@solana/web3.js\";\nimport { useLayoutEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { SOLANA_HOST } from \"../utils/consts\";\nimport {\n  decodeMetadata,\n  getMetadataAddress,\n  Metadata,\n  URIMetadata,\n} from \"../utils/metaplex\";\nimport { getMultipleAccountsRPC } from \"../utils/solana\";\n\nexport const getMetaplexData = async (mintAddresses: string[]) => {\n  const promises = [];\n  for (const address of mintAddresses) {\n    promises.push(getMetadataAddress(address));\n  }\n  const metaAddresses = await Promise.all(promises);\n  const connection = new Connection(SOLANA_HOST, \"confirmed\");\n  const results = await getMultipleAccountsRPC(\n    connection,\n    metaAddresses.map((pair) => pair && pair[0])\n  );\n\n  const output = results.map(async (account) => {\n    if (account === null) {\n      return undefined;\n    } else {\n      if (account.data) {\n        try {\n          const metadataParsed = decodeMetadata(account.data);\n          try {\n            const response = await fetch(metadataParsed?.data?.uri, {\n              redirect: \"follow\",\n            });\n            const payload = await response.json();\n            if (!response.headers.get(\"content-type\")?.startsWith(\"image/\")) {\n              metadataParsed.data.uriMetadata = new URIMetadata(\n                payload as URIMetadata\n              );\n            }\n          } catch (e) {\n            console.error(\"Error fetching metadata\", e);\n          }\n          return metadataParsed;\n        } catch (e) {\n          console.error(e);\n          return undefined;\n        }\n      } else {\n        return undefined;\n      }\n    }\n  });\n\n  return Promise.all(output);\n};\n\nconst createResultMap = (\n  addresses: string[],\n  metadatas: (Metadata | undefined)[]\n) => {\n  const output = new Map<string, Metadata | undefined>();\n\n  addresses.forEach((address) => {\n    const metadata = metadatas.find((x) => x?.mint === address);\n    if (metadata) {\n      output.set(address, metadata);\n    } else {\n      output.set(address, undefined);\n    }\n  });\n\n  return output;\n};\n\nconst useMetaplexData = (\n  addresses: string[]\n): DataWrapper<Map<string, Metadata | undefined> | undefined> => {\n  const [results, setResults] = useState<\n    Map<string, Metadata | undefined> | undefined\n  >(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [receivedAt, setReceivedAt] = useState<string | null>(null);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    setIsLoading(true);\n    getMetaplexData(addresses).then(\n      (results) => {\n        if (!cancelled) {\n          setResults(createResultMap(addresses, results));\n          setIsLoading(false);\n          setError(\"\");\n          setReceivedAt(new Date().toISOString());\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setResults(undefined);\n          setIsLoading(false);\n          setError(\"Failed to fetch Metaplex data.\");\n          setReceivedAt(new Date().toISOString());\n        }\n      }\n    );\n\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses, setResults, setIsLoading, setError]);\n\n  const output = useMemo(\n    () => ({\n      data: results,\n      isFetching: isLoading,\n      error,\n      receivedAt,\n    }),\n    [results, isLoading, error, receivedAt]\n  );\n  return output;\n};\n\nexport default useMetaplexData;\n","import { Alert } from \"@material-ui/lab\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback } from \"react\";\nimport pushToClipboard from \"../utils/pushToClipboard\";\n\nexport default function useCopyToClipboard(content: string) {\n  const { enqueueSnackbar } = useSnackbar();\n  return useCallback(() => {\n    pushToClipboard(content)?.then(() => {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"success\">Copied.</Alert>,\n      });\n    });\n  }, [content, enqueueSnackbar]);\n}\n","export default function pushToClipboard(content: any) {\n  if (!navigator.clipboard) {\n    // Clipboard API not available\n    return;\n  }\n  return navigator.clipboard.writeText(content);\n}\n","import { ChainId, CHAIN_ID_ETH } from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles, Tooltip, Typography } from \"@material-ui/core\";\nimport { FileCopy, OpenInNew } from \"@material-ui/icons\";\nimport { withStyles } from \"@material-ui/styles\";\nimport useCopyToClipboard from \"../hooks/useCopyToClipboard\";\nimport { CLUSTER, getExplorerName } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainTypog: {\n    display: \"inline-block\",\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    textDecoration: \"underline\",\n    textUnderlineOffset: \"2px\",\n  },\n  buttons: {\n    marginLeft: \".5rem\",\n    marginRight: \".5rem\",\n  },\n}));\n\nconst tooltipStyles = {\n  tooltip: {\n    minWidth: \"max-content\",\n    textAlign: \"center\",\n    \"& > *\": {\n      margin: \".25rem\",\n    },\n  },\n};\n\n// @ts-ignore\nconst StyledTooltip = withStyles(tooltipStyles)(Tooltip);\n\nexport default function SmartBlock({\n  chainId,\n  blockNumber,\n}: {\n  chainId: ChainId;\n  blockNumber: number;\n}) {\n  const classes = useStyles();\n  const explorerAddress =\n    chainId === CHAIN_ID_ETH\n      ? `https://${\n          CLUSTER === \"testnet\" ? \"goerli.\" : \"\"\n        }etherscan.io/block/${blockNumber}`\n      : undefined;\n  const explorerName = getExplorerName(chainId);\n\n  const copyToClipboard = useCopyToClipboard(blockNumber.toString());\n\n  const explorerButton = !explorerAddress ? null : (\n    <Button\n      size=\"small\"\n      variant=\"outlined\"\n      startIcon={<OpenInNew />}\n      className={classes.buttons}\n      href={explorerAddress}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {\"View on \" + explorerName}\n    </Button>\n  );\n  const copyButton = (\n    <Button\n      size=\"small\"\n      variant=\"outlined\"\n      startIcon={<FileCopy />}\n      onClick={copyToClipboard}\n      className={classes.buttons}\n    >\n      Copy\n    </Button>\n  );\n\n  const tooltipContent = (\n    <div>\n      {explorerButton}\n      {copyButton}\n    </div>\n  );\n\n  return (\n    <StyledTooltip\n      title={tooltipContent}\n      interactive={true}\n      className={classes.mainTypog}\n    >\n      <Typography\n        variant={\"body1\"}\n        className={classes.mainTypog}\n        component=\"div\"\n      >\n        {blockNumber}\n      </Typography>\n    </StyledTooltip>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_ACALA,\n  CHAIN_ID_ARBITRUM,\n  CHAIN_ID_AURORA,\n  CHAIN_ID_CELO,\n  CHAIN_ID_ETH,\n  CHAIN_ID_FANTOM,\n  CHAIN_ID_KARURA,\n  CHAIN_ID_KLAYTN,\n  CHAIN_ID_MOONBEAM,\n  CHAIN_ID_OASIS,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_OPTIMISM,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { LinearProgress, makeStyles, Typography } from \"@material-ui/core\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { Transaction } from \"../store/transferSlice\";\nimport { CHAINS_BY_ID, CLUSTER, SOLANA_HOST } from \"../utils/consts\";\nimport SmartBlock from \"./SmartBlock\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(2),\n    textAlign: \"center\",\n  },\n  message: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function TransactionProgress({\n  chainId,\n  tx,\n  isSendComplete,\n}: {\n  chainId: ChainId;\n  tx: Transaction | undefined;\n  isSendComplete: boolean;\n}) {\n  const classes = useStyles();\n  const { provider } = useEthereumProvider(chainId);\n  const [currentBlock, setCurrentBlock] = useState(0);\n  useEffect(() => {\n    if (isSendComplete || !tx) return;\n    if (isEVMChain(chainId) && provider) {\n      let cancelled = false;\n      (async () => {\n        while (!cancelled) {\n          await new Promise((resolve) => setTimeout(resolve, 500));\n          try {\n            const newBlock =\n              chainId === CHAIN_ID_ETH\n                ? (await provider.getBlock(\"finalized\")).number\n                : await provider.getBlockNumber();\n            if (!cancelled) {\n              setCurrentBlock(newBlock);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      })();\n      return () => {\n        cancelled = true;\n      };\n    }\n    if (chainId === CHAIN_ID_SOLANA) {\n      let cancelled = false;\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const sub = connection.onSlotChange((slotInfo) => {\n        if (!cancelled) {\n          setCurrentBlock(slotInfo.slot);\n        }\n      });\n      return () => {\n        cancelled = true;\n        connection.removeSlotChangeListener(sub);\n      };\n    }\n  }, [isSendComplete, chainId, provider, tx]);\n  if (chainId === CHAIN_ID_ETH) {\n    if (!isSendComplete && tx && tx.block && currentBlock) {\n      const isFinalized = currentBlock >= tx.block;\n      return (\n        <div className={classes.root}>\n          <Typography variant=\"body2\" className={classes.message}>\n            {!isFinalized\n              ? `Waiting for finality on ${CHAINS_BY_ID[chainId].name} which may take up to 15 minutes.`\n              : `Waiting for Wormhole Network consensus...`}\n          </Typography>\n          {!isFinalized ? (\n            <>\n              <span>Last finalized block number</span>\n              <SmartBlock chainId={chainId} blockNumber={currentBlock} />\n              <span>This transaction's block number</span>\n              <SmartBlock chainId={chainId} blockNumber={tx.block} />\n            </>\n          ) : null}\n        </div>\n      );\n    }\n  } else {\n    const blockDiff =\n      tx && tx.block && currentBlock ? currentBlock - tx.block : undefined;\n    const expectedBlocks = // minimum confirmations enforced by guardians or specified by the contract\n      chainId === CHAIN_ID_POLYGON\n        ? CLUSTER === \"testnet\"\n          ? 64\n          : 512\n        : chainId === CHAIN_ID_OASIS ||\n          chainId === CHAIN_ID_AURORA ||\n          chainId === CHAIN_ID_FANTOM ||\n          chainId === CHAIN_ID_KARURA ||\n          chainId === CHAIN_ID_ACALA ||\n          chainId === CHAIN_ID_KLAYTN ||\n          chainId === CHAIN_ID_CELO ||\n          chainId === CHAIN_ID_MOONBEAM ||\n          chainId === CHAIN_ID_OPTIMISM\n        ? 1 // these chains only require 1 conf\n        : chainId === CHAIN_ID_SOLANA\n        ? 32\n        : chainId === CHAIN_ID_ARBITRUM\n        ? 64\n        : isEVMChain(chainId)\n        ? 15\n        : 1;\n    if (\n      !isSendComplete &&\n      (chainId === CHAIN_ID_SOLANA || isEVMChain(chainId)) &&\n      blockDiff !== undefined\n    ) {\n      return (\n        <div className={classes.root}>\n          <LinearProgress\n            value={\n              blockDiff < expectedBlocks\n                ? (blockDiff / expectedBlocks) * 75\n                : 75\n            }\n            variant=\"determinate\"\n          />\n          <Typography variant=\"body2\" className={classes.message}>\n            {chainId === CHAIN_ID_ARBITRUM\n              ? `Waiting for Ethereum finality on Arbitrum block ${tx?.block}` //TODO: more advanced finality checking for Arbitrum\n              : chainId === CHAIN_ID_OPTIMISM\n              ? `Waiting for Ethereum finality on Optimism block ${tx?.block}`\n              : blockDiff < expectedBlocks\n              ? `Waiting for ${blockDiff} / ${expectedBlocks} confirmations on ${CHAINS_BY_ID[chainId].name}...`\n              : chainId === CHAIN_ID_POLYGON\n              ? `Waiting for finality on ${CHAINS_BY_ID[chainId].name} which may take between 30 minutes to 3 hours to complete.`\n              : `Waiting for Wormhole Network consensus...`}\n          </Typography>\n        </div>\n      );\n    }\n  }\n  return null;\n}\n","import { CHAIN_ID_SOLANA, isTerraChain } from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Link, makeStyles } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useHandleAttest } from \"../../hooks/useHandleAttest\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useMetaplexData from \"../../hooks/useMetaplexData\";\nimport {\n  selectAttestAttestTx,\n  selectAttestIsSendComplete,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\nimport { SOLANA_TOKEN_METADATA_PROGRAM_URL } from \"../../utils/consts\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nconst SolanaTokenMetadataWarning = () => {\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const sourceAssetArrayed = useMemo(() => {\n    return [sourceAsset];\n  }, [sourceAsset]);\n  const metaplexData = useMetaplexData(sourceAssetArrayed);\n  const classes = useStyles();\n\n  if (metaplexData.isFetching || metaplexData.error) {\n    return null;\n  }\n\n  return !metaplexData.data?.get(sourceAsset) ? (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      This token is missing on-chain (Metaplex) metadata. Without it, the\n      wrapped token's name and symbol will be empty. See the{\" \"}\n      <Link\n        href={SOLANA_TOKEN_METADATA_PROGRAM_URL}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        metaplex repository\n      </Link>{\" \"}\n      for details.\n    </Alert>\n  ) : null;\n};\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleAttest();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const attestTx = useSelector(selectAttestAttestTx);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n\n  return (\n    <>\n      <KeyAndBalance chainId={sourceChain} />\n      {isTerraChain(sourceChain) && (\n        <TerraFeeDenomPicker disabled={disabled} chainId={sourceChain} />\n      )}\n      <ButtonWithLoader\n        disabled={!isReady || disabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={statusMessage}\n      >\n        Attest\n      </ButtonWithLoader>\n      {sourceChain === CHAIN_ID_SOLANA && <SolanaTokenMetadataWarning />}\n      <WaitingForWalletMessage />\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={attestTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestSourceChain,\n  selectAttestAttestTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const attestTx = useSelector(selectAttestAttestTx);\n\n  const explainerString = \"The token has been attested!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {attestTx ? <ShowTx chainId={sourceChain} tx={attestTx} /> : null}\n    </>\n  );\n}\n","import React, { ReactChildren, useContext, useEffect, useState } from \"react\";\n\nconst BetaContext = React.createContext<boolean>(false);\n\nexport const BetaContextProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  const [isBetaEnabled, setIsBetaEnabled] = useState(false);\n\n  useEffect(() => {\n    let userEntered = [];\n    const secretSequence = [\n      \"38\",\n      \"38\",\n      \"40\",\n      \"40\",\n      \"37\",\n      \"39\",\n      \"37\",\n      \"39\",\n      \"66\",\n      \"65\",\n    ];\n    const secretListener = (event: KeyboardEvent) => {\n      const k = event.keyCode.toString();\n      if (k === secretSequence[userEntered.length]) {\n        userEntered.push(k);\n        if (userEntered.length === secretSequence.length) {\n          userEntered = [];\n          setIsBetaEnabled((prev) => !prev);\n        }\n      } else {\n        userEntered = [];\n      }\n    };\n    window.addEventListener(\"keydown\", secretListener);\n    return () => {\n      window.removeEventListener(\"keydown\", secretListener);\n    };\n  }, []);\n\n  return (\n    <BetaContext.Provider value={isBetaEnabled}>\n      {children}\n    </BetaContext.Provider>\n  );\n};\n\nexport const useBetaContext = () => {\n  return useContext(BetaContext);\n};\n","import {\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n  MenuItem,\n  OutlinedTextFieldProps,\n  TextField,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { useMemo } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport { BETA_CHAINS, ChainInfo } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  select: {\n    \"& .MuiSelect-root\": {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  },\n  listItemIcon: {\n    minWidth: 40,\n  },\n  icon: {\n    height: 24,\n    maxWidth: 24,\n  },\n}));\n\nconst createChainMenuItem = ({ id, name, logo }: ChainInfo, classes: any) => (\n  <MenuItem key={id} value={id}>\n    <ListItemIcon className={classes.listItemIcon}>\n      <img src={logo} alt={name} className={classes.icon} />\n    </ListItemIcon>\n    <ListItemText>{name}</ListItemText>\n  </MenuItem>\n);\n\ninterface ChainSelectProps extends OutlinedTextFieldProps {\n  chains: ChainInfo[];\n}\n\nexport default function ChainSelect({ chains, ...rest }: ChainSelectProps) {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const filteredChains = useMemo(\n    () =>\n      chains.filter(({ id }) => (isBeta ? true : !BETA_CHAINS.includes(id))),\n    [chains, isBeta]\n  );\n  return (\n    <TextField {...rest} className={clsx(classes.select, rest.className)}>\n      {filteredChains.map((chain) => createChainMenuItem(chain, classes))}\n    </TextField>\n  );\n}\n","export type DataWrapper<T> = {\n  data: T | null;\n  error: any | null;\n  isFetching: boolean;\n  receivedAt: string | null;\n  //possibly invalidate\n};\n\nexport function getEmptyDataWrapper() {\n  return {\n    data: null,\n    error: null,\n    isFetching: false,\n    receivedAt: null,\n  };\n}\n\nexport function receiveDataWrapper<T>(data: T): DataWrapper<T> {\n  return {\n    data,\n    error: null,\n    isFetching: false,\n    receivedAt: new Date().toISOString(),\n  };\n}\n\nexport function errorDataWrapper<T>(error: string): DataWrapper<T> {\n  return {\n    data: null,\n    error,\n    isFetching: false,\n    receivedAt: null,\n  };\n}\n\nexport function fetchDataWrapper() {\n  return {\n    data: null,\n    error: null,\n    isFetching: true,\n    receivedAt: null,\n  };\n}\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { StateSafeWormholeWrappedInfo } from \"../hooks/useCheckIfWormholeWrapped\";\nimport { ForeignAssetInfo } from \"../hooks/useFetchForeignAsset\";\nimport { AcalaRelayerInfo } from \"../hooks/useAcalaRelayerInfo\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\nexport interface ParsedTokenAccount {\n  publicKey: string;\n  mintKey: string;\n  amount: string;\n  decimals: number;\n  uiAmount: number;\n  uiAmountString: string;\n  symbol?: string;\n  name?: string;\n  logo?: string;\n  isNativeAsset?: boolean;\n}\n\nexport interface Transaction {\n  id: string;\n  block: number;\n}\n\nexport interface TransferState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  isSourceAssetWormholeWrapped: boolean | undefined;\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  sourceWalletAddress: string | undefined;\n  sourceParsedTokenAccount: ParsedTokenAccount | undefined;\n  sourceParsedTokenAccounts: DataWrapper<ParsedTokenAccount[]>;\n  amount: string;\n  targetChain: ChainId;\n  targetAddressHex: string | undefined;\n  targetAsset: DataWrapper<ForeignAssetInfo>;\n  targetParsedTokenAccount: ParsedTokenAccount | undefined;\n  transferTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isVAAPending: boolean;\n  isRedeeming: boolean;\n  redeemTx: Transaction | undefined;\n  isApproving: boolean;\n  isRecovery: boolean;\n  gasPrice: number | undefined;\n  useRelayer: boolean;\n  relayerFee: string | undefined;\n  acalaRelayerInfo: DataWrapper<AcalaRelayerInfo>;\n}\n\nconst initialState: TransferState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  isSourceAssetWormholeWrapped: false,\n  sourceWalletAddress: undefined,\n  sourceParsedTokenAccount: undefined,\n  sourceParsedTokenAccounts: getEmptyDataWrapper(),\n  originChain: undefined,\n  originAsset: undefined,\n  amount: \"\",\n  targetChain: CHAIN_ID_ETH,\n  targetAddressHex: undefined,\n  targetAsset: getEmptyDataWrapper(),\n  targetParsedTokenAccount: undefined,\n  transferTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isVAAPending: false,\n  isRedeeming: false,\n  redeemTx: undefined,\n  isApproving: false,\n  isRecovery: false,\n  gasPrice: undefined,\n  useRelayer: false,\n  relayerFee: undefined,\n  acalaRelayerInfo: getEmptyDataWrapper(),\n};\n\nexport const transferSlice = createSlice({\n  name: \"transfer\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceWormholeWrappedInfo: (\n      state,\n      action: PayloadAction<StateSafeWormholeWrappedInfo>\n    ) => {\n      state.isSourceAssetWormholeWrapped = action.payload.isWrapped;\n      state.originChain = action.payload.chainId;\n      state.originAsset = action.payload.assetAddress;\n    },\n    setSourceWalletAddress: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceWalletAddress = action.payload;\n    },\n    setSourceParsedTokenAccount: (\n      state,\n      action: PayloadAction<ParsedTokenAccount | undefined>\n    ) => {\n      state.sourceParsedTokenAccount = action.payload;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n    },\n    setSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<ParsedTokenAccount[] | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = action.payload\n        ? receiveDataWrapper(action.payload)\n        : getEmptyDataWrapper();\n    },\n    fetchSourceParsedTokenAccounts: (state) => {\n      state.sourceParsedTokenAccounts = fetchDataWrapper();\n    },\n    errorSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = errorDataWrapper(\n        action.payload || \"An unknown error occurred.\"\n      );\n    },\n    receiveSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<ParsedTokenAccount[]>\n    ) => {\n      state.sourceParsedTokenAccounts = receiveDataWrapper(action.payload);\n    },\n    setAmount: (state, action: PayloadAction<string>) => {\n      state.amount = action.payload;\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      state.targetAddressHex = undefined;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceParsedTokenAccount = undefined;\n        state.isSourceAssetWormholeWrapped = undefined;\n        state.originChain = undefined;\n        state.originAsset = undefined;\n        state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      }\n    },\n    setTargetAddressHex: (state, action: PayloadAction<string | undefined>) => {\n      state.targetAddressHex = action.payload;\n    },\n    setTargetAsset: (\n      state,\n      action: PayloadAction<DataWrapper<ForeignAssetInfo>>\n    ) => {\n      state.targetAsset = action.payload;\n      state.targetParsedTokenAccount = undefined;\n    },\n    setTargetParsedTokenAccount: (\n      state,\n      action: PayloadAction<ParsedTokenAccount | undefined>\n    ) => {\n      state.targetParsedTokenAccount = action.payload;\n    },\n    setTransferTx: (state, action: PayloadAction<Transaction>) => {\n      state.transferTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.isVAAPending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsVAAPending: (state, action: PayloadAction<boolean>) => {\n      state.isVAAPending = action.payload;\n    },\n    setIsRedeeming: (state, action: PayloadAction<boolean>) => {\n      state.isRedeeming = action.payload;\n    },\n    setRedeemTx: (state, action: PayloadAction<Transaction>) => {\n      state.redeemTx = action.payload;\n      state.isRedeeming = false;\n    },\n    setIsApproving: (state, action: PayloadAction<boolean>) => {\n      state.isApproving = action.payload;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n    setRecoveryVaa: (\n      state,\n      action: PayloadAction<{\n        vaa: any;\n        useRelayer: boolean;\n        parsedPayload: {\n          targetChain: ChainId;\n          targetAddress: string;\n          originChain: ChainId;\n          originAddress: string;\n          amount: string;\n        };\n      }>\n    ) => {\n      const prevTargetChain = state.targetChain;\n      state.signedVAAHex = action.payload.vaa;\n      state.targetChain = action.payload.parsedPayload.targetChain;\n      if (state.sourceChain === action.payload.parsedPayload.targetChain) {\n        state.sourceChain = prevTargetChain;\n      }\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.targetAddressHex = action.payload.parsedPayload.targetAddress;\n      state.originChain = action.payload.parsedPayload.originChain;\n      state.originAsset = action.payload.parsedPayload.originAddress;\n      state.amount = action.payload.parsedPayload.amount;\n      state.activeStep = 3;\n      state.isRecovery = true;\n      state.useRelayer = action.payload.useRelayer;\n    },\n    setGasPrice: (state, action: PayloadAction<number | undefined>) => {\n      state.gasPrice = action.payload;\n    },\n    setUseRelayer: (state, action: PayloadAction<boolean | undefined>) => {\n      state.useRelayer = !!action.payload;\n    },\n    setRelayerFee: (state, action: PayloadAction<string | undefined>) => {\n      state.relayerFee = action.payload;\n    },\n    setAcalaRelayerInfo: (\n      state,\n      action: PayloadAction<AcalaRelayerInfo | undefined>\n    ) => {\n      state.acalaRelayerInfo = action.payload\n        ? receiveDataWrapper(action.payload)\n        : getEmptyDataWrapper();\n    },\n    fetchAcalaRelayerInfo: (state) => {\n      state.acalaRelayerInfo = fetchDataWrapper();\n    },\n    errorAcalaRelayerInfo: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.acalaRelayerInfo = errorDataWrapper(\n        action.payload || \"An unknown error occurred.\"\n      );\n    },\n    receiveAcalaRelayerInfo: (\n      state,\n      action: PayloadAction<AcalaRelayerInfo>\n    ) => {\n      state.acalaRelayerInfo = receiveDataWrapper(action.payload);\n    },\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceWormholeWrappedInfo,\n  setSourceWalletAddress,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  receiveSourceParsedTokenAccounts,\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  setAmount,\n  setTargetChain,\n  setTargetAddressHex,\n  setTargetAsset,\n  setTargetParsedTokenAccount,\n  setTransferTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsVAAPending,\n  setIsRedeeming,\n  setRedeemTx,\n  setIsApproving,\n  reset,\n  setRecoveryVaa,\n  setGasPrice,\n  setUseRelayer,\n  setRelayerFee,\n  setAcalaRelayerInfo,\n  fetchAcalaRelayerInfo,\n  errorAcalaRelayerInfo,\n  receiveAcalaRelayerInfo,\n} = transferSlice.actions;\n\nexport default transferSlice.reducer;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  isTerraChain,\n  TerraChainId,\n} from \"@certusone/wormhole-sdk\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Typography } from \"@material-ui/core\";\nimport { LocalGasStation } from \"@material-ui/icons\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport {\n  getDefaultNativeCurrencySymbol,\n  SOLANA_HOST,\n  getTerraConfig,\n} from \"../utils/consts\";\nimport { getMultipleAccountsRPC } from \"../utils/solana\";\nimport { NATIVE_TERRA_DECIMALS } from \"../utils/terra\";\nimport useIsWalletReady from \"./useIsWalletReady\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { setGasPrice } from \"../store/transferSlice\";\nimport { useDispatch } from \"react-redux\";\n\nexport type GasEstimate = {\n  currentGasPrice: string;\n  lowEstimate: string;\n  highEstimate: string;\n};\n\nexport type MethodType = \"nft\" | \"createWrapped\" | \"transfer\";\n\n//It's difficult to project how many fees the user will accrue during the\n//workflow, as a variable number of transactions can be sent, and different\n//execution paths can be hit in the smart contracts, altering gas used.\n//As such, for the moment it is best to just check for a reasonable 'low balance' threshold.\n//Still it would be good to calculate a reasonable value at runtime based off current gas prices,\n//rather than a hardcoded value.\nconst SOLANA_THRESHOLD_LAMPORTS: bigint = BigInt(300000);\nconst ETHEREUM_THRESHOLD_WEI: bigint = BigInt(35000000000000000);\nconst TERRA_THRESHOLD_ULUNA: bigint = BigInt(100000);\nconst TERRA_THRESHOLD_UUSD: bigint = BigInt(10000000);\n\nconst isSufficientBalance = (\n  chainId: ChainId,\n  balance: bigint | undefined,\n  terraFeeDenom?: string\n) => {\n  if (balance === undefined || !chainId) {\n    return true;\n  }\n  if (CHAIN_ID_SOLANA === chainId) {\n    return balance > SOLANA_THRESHOLD_LAMPORTS;\n  }\n  if (isEVMChain(chainId)) {\n    return balance > ETHEREUM_THRESHOLD_WEI;\n  }\n  if (terraFeeDenom === \"uluna\") {\n    return balance > TERRA_THRESHOLD_ULUNA;\n  }\n  if (terraFeeDenom === \"uusd\") {\n    return balance > TERRA_THRESHOLD_UUSD;\n  }\n\n  return true;\n};\n\ntype TerraBalance = {\n  denom: string;\n  balance: bigint;\n};\n\nconst isSufficientBalanceTerra = (balances: TerraBalance[]) => {\n  return balances.some(({ denom, balance }) => {\n    if (denom === \"uluna\") {\n      return balance > TERRA_THRESHOLD_ULUNA;\n    }\n    if (denom === \"uusd\") {\n      return balance > TERRA_THRESHOLD_UUSD;\n    }\n    return false;\n  });\n};\n\n//TODO move to more generic location\nconst getBalanceSolana = async (walletAddress: string) => {\n  const connection = new Connection(SOLANA_HOST);\n  return getMultipleAccountsRPC(connection, [\n    new PublicKey(walletAddress),\n  ]).then(\n    (results) => {\n      if (results.length && results[0]) {\n        return BigInt(results[0].lamports);\n      }\n    },\n    (error) => {\n      return BigInt(0);\n    }\n  );\n};\n\nconst getBalanceEvm = async (walletAddress: string, provider: Provider) => {\n  return provider.getBalance(walletAddress).then((result) => result.toBigInt());\n};\n\nconst getBalancesTerra = async (\n  walletAddress: string,\n  chainId: TerraChainId\n) => {\n  // TODO: need to change for terra2?\n  const TARGET_DENOMS = [\"uluna\", \"uusd\"];\n\n  const lcd = new LCDClient(getTerraConfig(chainId));\n  return lcd.bank\n    .balance(walletAddress)\n    .then(([coins]) => {\n      const balances = coins\n        .filter(({ denom }) => {\n          return TARGET_DENOMS.includes(denom);\n        })\n        .map(({ amount, denom }) => {\n          return {\n            denom,\n            balance: BigInt(amount.toString()),\n          };\n        });\n      if (balances) {\n        return balances;\n      } else {\n        return Promise.reject();\n      }\n    })\n    .catch((e) => {\n      return Promise.reject();\n    });\n};\n\nconst toBalanceString = (balance: bigint | undefined, chainId: ChainId) => {\n  if (!chainId || balance === undefined) {\n    return \"\";\n  }\n  if (isEVMChain(chainId)) {\n    return formatUnits(balance, 18); //wei decimals\n  } else if (chainId === CHAIN_ID_SOLANA) {\n    return formatUnits(balance, 9); //lamports to sol decimals\n  } else if (isTerraChain(chainId)) {\n    return formatUnits(balance, NATIVE_TERRA_DECIMALS);\n  }\n};\n\nexport default function useTransactionFees(chainId: ChainId) {\n  const { walletAddress, isReady } = useIsWalletReady(chainId);\n  const { provider } = useEthereumProvider(chainId);\n  const [balance, setBalance] = useState<bigint | undefined>(undefined);\n  const [terraBalances, setTerraBalances] = useState<TerraBalance[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const loadStart = useCallback(() => {\n    setBalance(undefined);\n    setIsLoading(true);\n    setError(\"\");\n  }, []);\n\n  useEffect(() => {\n    if (chainId === CHAIN_ID_SOLANA && isReady && walletAddress) {\n      loadStart();\n      getBalanceSolana(walletAddress).then(\n        (result) => {\n          const adjustedresult =\n            result === undefined || result === null ? BigInt(0) : result;\n          setIsLoading(false);\n          setBalance(adjustedresult);\n        },\n        (error) => {\n          setIsLoading(false);\n          setError(\"Cannot load wallet balance\");\n        }\n      );\n    } else if (isEVMChain(chainId) && isReady && walletAddress) {\n      if (provider) {\n        loadStart();\n        getBalanceEvm(walletAddress, provider).then(\n          (result) => {\n            const adjustedresult =\n              result === undefined || result === null ? BigInt(0) : result;\n            setIsLoading(false);\n            setBalance(adjustedresult);\n          },\n          (error) => {\n            setIsLoading(false);\n            setError(\"Cannot load wallet balance\");\n          }\n        );\n      }\n    } else if (isTerraChain(chainId) && isReady && walletAddress) {\n      loadStart();\n      getBalancesTerra(walletAddress, chainId).then(\n        (results) => {\n          const adjustedResults = results.map(({ denom, balance }) => {\n            return {\n              denom,\n              balance:\n                balance === undefined || balance === null ? BigInt(0) : balance,\n            };\n          });\n          setIsLoading(false);\n          setTerraBalances(adjustedResults);\n        },\n        (error) => {\n          setIsLoading(false);\n          setError(\"Cannot load wallet balance\");\n        }\n      );\n    }\n  }, [provider, walletAddress, isReady, chainId, loadStart]);\n\n  const results = useMemo(() => {\n    return {\n      isSufficientBalance: isTerraChain(chainId)\n        ? isSufficientBalanceTerra(terraBalances)\n        : isSufficientBalance(chainId, balance),\n      balance,\n      balanceString: toBalanceString(balance, chainId),\n      isLoading,\n      error,\n    };\n  }, [balance, terraBalances, chainId, isLoading, error]);\n\n  return results;\n}\n\nexport function useEthereumGasPrice(contract: MethodType, chainId: ChainId) {\n  const { provider } = useEthereumProvider(chainId);\n  const { isReady } = useIsWalletReady(chainId);\n  const [estimateResults, setEstimateResults] = useState<GasEstimate | null>(\n    null\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (provider && isReady && !estimateResults) {\n      getGasEstimates(provider, contract).then(\n        (results) => {\n          setEstimateResults(results);\n          if (results?.currentGasPrice) {\n            const gasPrice =\n              (results?.currentGasPrice &&\n                parseFloat(results.currentGasPrice)) ||\n              undefined;\n            dispatch(setGasPrice(gasPrice)); //This is so the relayer hook can pull this from the state rather than remount this hook.\n          }\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n    }\n  }, [provider, isReady, estimateResults, contract, dispatch]);\n\n  const results = useMemo(() => estimateResults, [estimateResults]);\n  return results;\n}\n\nfunction EthGasEstimateSummary({\n  methodType,\n  chainId,\n  priceQuote,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n  priceQuote?: number;\n}) {\n  const estimate = useEthereumGasPrice(methodType, chainId);\n  if (!estimate) {\n    return null;\n  }\n  const lowUsd = priceQuote\n    ? (priceQuote * parseFloat(estimate.lowEstimate)).toFixed(2)\n    : null;\n  const highUsd = priceQuote\n    ? (priceQuote * parseFloat(estimate.highEstimate)).toFixed(2)\n    : null;\n\n  return (\n    <Typography\n      component=\"div\"\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        marginTop: 8,\n        flexWrap: \"wrap\",\n      }}\n    >\n      <div style={{ display: \"flex\", alignItems: \"center\", marginRight: 32 }}>\n        <LocalGasStation fontSize=\"inherit\" />\n        &nbsp;{estimate.currentGasPrice}\n      </div>\n      <div>\n        Est. Fees: {estimate.lowEstimate} - {estimate.highEstimate}{\" \"}\n        {getDefaultNativeCurrencySymbol(chainId)}\n        {priceQuote ? <div>{`($${lowUsd} - $${highUsd})`}</div> : null}\n      </div>\n    </Typography>\n  );\n}\n\nconst terraEstimatesByContract = {\n  transfer: {\n    lowGasEstimate: BigInt(400000),\n    highGasEstimate: BigInt(700000),\n  },\n};\n\nexport const evmEstimatesByContract = {\n  transfer: {\n    lowGasEstimate: BigInt(250000),\n    highGasEstimate: BigInt(280000),\n  },\n  nft: {\n    lowGasEstimate: BigInt(350000),\n    highGasEstimate: BigInt(500000),\n  },\n  createWrapped: {\n    lowGasEstimate: BigInt(450000),\n    highGasEstimate: BigInt(700000),\n  },\n};\n\nexport async function getGasEstimates(\n  provider: Provider,\n  contract: MethodType\n): Promise<GasEstimate | null> {\n  const lowEstimateGasAmount = evmEstimatesByContract[contract].lowGasEstimate;\n  const highEstimateGasAmount =\n    evmEstimatesByContract[contract].highGasEstimate;\n\n  let lowEstimate;\n  let highEstimate;\n  let currentGasPrice;\n  if (provider) {\n    const priceInWei = await provider.getGasPrice();\n    if (priceInWei) {\n      lowEstimate = parseFloat(\n        formatUnits(lowEstimateGasAmount * priceInWei.toBigInt(), \"ether\")\n      ).toFixed(4);\n      highEstimate = parseFloat(\n        formatUnits(highEstimateGasAmount * priceInWei.toBigInt(), \"ether\")\n      ).toFixed(4);\n      const gasPriceNum = parseFloat(formatUnits(priceInWei, \"gwei\"));\n      currentGasPrice = gasPriceNum.toFixed(0);\n    }\n  }\n\n  const output =\n    currentGasPrice && highEstimate && lowEstimate\n      ? {\n          currentGasPrice,\n          lowEstimate,\n          highEstimate,\n        }\n      : null;\n\n  return output;\n}\n\n// TODO: terra 2 support\nfunction TerraGasEstimateSummary({ methodType }: { methodType: MethodType }) {\n  if (methodType === \"transfer\") {\n    const lowEstimate = formatUnits(\n      terraEstimatesByContract.transfer.lowGasEstimate,\n      NATIVE_TERRA_DECIMALS\n    );\n    const highEstimate = formatUnits(\n      terraEstimatesByContract.transfer.highGasEstimate,\n      NATIVE_TERRA_DECIMALS\n    );\n    return (\n      <Typography\n        component=\"div\"\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          marginTop: 8,\n          flexWrap: \"wrap\",\n        }}\n      >\n        <div>\n          Est. Fees: {lowEstimate} - {highEstimate}\n          {\" UST\"}\n        </div>\n      </Typography>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport function GasEstimateSummary({\n  methodType,\n  chainId,\n  priceQuote, //this is a hack, should refactor to unify the fee selector and this file\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n  priceQuote?: number;\n}) {\n  if (isEVMChain(chainId)) {\n    return (\n      <EthGasEstimateSummary\n        chainId={chainId}\n        methodType={methodType}\n        priceQuote={priceQuote}\n      />\n    );\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return <TerraGasEstimateSummary methodType={methodType} />;\n  } else {\n    return null;\n  }\n}\n","import { ChainId, isTerraChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useSelector } from \"react-redux\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useTransactionFees from \"../hooks/useTransactionFees\";\nimport { selectTransferUseRelayer } from \"../store/selectors\";\nimport { getDefaultNativeCurrencySymbol } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction LowBalanceWarning({ chainId }: { chainId: ChainId }) {\n  const classes = useStyles();\n  const { isReady } = useIsWalletReady(chainId);\n  const transactionFeeWarning = useTransactionFees(chainId);\n  const relayerSelected = !!useSelector(selectTransferUseRelayer);\n  const terraChain = isTerraChain(chainId);\n\n  const displayWarning =\n    isReady &&\n    !relayerSelected &&\n    (terraChain || transactionFeeWarning.balanceString) &&\n    transactionFeeWarning.isSufficientBalance === false;\n\n  const warningMessage = terraChain\n    ? \"This wallet may not have sufficient funds to pay for the upcoming transaction fees.\"\n    : `This wallet has a very low ${getDefaultNativeCurrencySymbol(\n        chainId\n      )} balance and may not be able to pay for the upcoming transaction fees.`;\n\n  const content = (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography variant=\"body1\">{warningMessage}</Typography>\n      {!terraChain ? (\n        <Typography variant=\"body1\">\n          {\"Current balance: \" + transactionFeeWarning.balanceString}\n        </Typography>\n      ) : null}\n    </Alert>\n  );\n\n  return displayWarning ? content : null;\n}\n\nexport default LowBalanceWarning;\n","import { makeStyles, TextField } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  incrementStep,\n  setSourceAsset,\n  setSourceChain,\n} from \"../../store/attestSlice\";\nimport {\n  selectAttestIsSourceComplete,\n  selectAttestShouldLockFields,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport { CHAINS } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const isSourceComplete = useSelector(selectAttestIsSourceComplete);\n  const shouldLockFields = useSelector(selectAttestShouldLockFields);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleAssetChange = useCallback(\n    (event) => {\n      dispatch(setSourceAsset(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <ChainSelect\n        select\n        variant=\"outlined\"\n        fullWidth\n        value={sourceChain}\n        onChange={handleSourceChange}\n        disabled={shouldLockFields}\n        chains={CHAINS}\n      />\n      <KeyAndBalance chainId={sourceChain} />\n      <TextField\n        label=\"Asset\"\n        variant=\"outlined\"\n        fullWidth\n        className={classes.transferField}\n        value={sourceAsset}\n        onChange={handleAssetChange}\n        disabled={shouldLockFields}\n      />\n      <LowBalanceWarning chainId={sourceChain} />\n      <ButtonWithLoader\n        disabled={!isSourceComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Source;\n","import {\n  ChainId,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_AURORA,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_CELO,\n  CHAIN_ID_ETH,\n  CHAIN_ID_FANTOM,\n  CHAIN_ID_KLAYTN,\n  CHAIN_ID_KARURA,\n  CHAIN_ID_OASIS,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_ACALA,\n  isTerraChain,\n  CHAIN_ID_TERRA2,\n  TerraChainId,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_MOONBEAM,\n  CHAIN_ID_XPLA,\n  CHAIN_ID_APTOS,\n  isValidAptosType,\n  CHAIN_ID_ARBITRUM,\n  CHAIN_ID_INJECTIVE,\n  terra,\n  CHAIN_ID_OPTIMISM,\n  CHAIN_ID_SUI,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles, Tooltip, Typography } from \"@material-ui/core\";\nimport { FileCopy, OpenInNew } from \"@material-ui/icons\";\nimport { withStyles } from \"@material-ui/styles\";\nimport clsx from \"clsx\";\nimport { ReactChild } from \"react\";\nimport useCopyToClipboard from \"../hooks/useCopyToClipboard\";\nimport { ParsedTokenAccount } from \"../store/transferSlice\";\nimport { CLUSTER, getExplorerName } from \"../utils/consts\";\nimport { shortenAddress } from \"../utils/solana\";\nimport { formatNativeDenom } from \"../utils/terra\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainTypog: {\n    display: \"inline-block\",\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    textDecoration: \"underline\",\n    textUnderlineOffset: \"2px\",\n  },\n  noGutter: {\n    marginLeft: 0,\n    marginRight: 0,\n  },\n  noUnderline: {\n    textDecoration: \"none\",\n  },\n  buttons: {\n    marginLeft: \".5rem\",\n    marginRight: \".5rem\",\n  },\n}));\n\nconst tooltipStyles = {\n  tooltip: {\n    minWidth: \"max-content\",\n    textAlign: \"center\",\n    \"& > *\": {\n      margin: \".25rem\",\n    },\n  },\n};\n\n// @ts-ignore\nconst StyledTooltip = withStyles(tooltipStyles)(Tooltip);\n\nexport default function SmartAddress({\n  chainId,\n  parsedTokenAccount,\n  address,\n  symbol,\n  tokenName,\n  variant,\n  noGutter,\n  noUnderline,\n  extraContent,\n  isAsset,\n  propertyVersion,\n}: {\n  chainId: ChainId;\n  parsedTokenAccount?: ParsedTokenAccount;\n  address?: string;\n  logo?: string;\n  tokenName?: string;\n  symbol?: string;\n  variant?: any;\n  noGutter?: boolean;\n  noUnderline?: boolean;\n  extraContent?: ReactChild;\n  isAsset?: boolean;\n  propertyVersion?: string;\n}) {\n  const classes = useStyles();\n  const isNativeTerra = isTerraChain(chainId) && terra.isNativeDenom(address);\n  const useableAddress = parsedTokenAccount?.mintKey || address || \"\";\n  const useableSymbol = isNativeTerra\n    ? formatNativeDenom(address || \"\", chainId as TerraChainId)\n    : parsedTokenAccount?.symbol || symbol || \"\";\n  // const useableLogo = logo || isNativeTerra ? getNativeTerraIcon(useableSymbol) : null\n  const isNative = parsedTokenAccount?.isNativeAsset || isNativeTerra || false;\n  const addressShort = shortenAddress(useableAddress) || \"\";\n\n  const useableName = isNative\n    ? \"Native Currency\"\n    : parsedTokenAccount?.name\n    ? parsedTokenAccount.name\n    : tokenName\n    ? tokenName\n    : \"\";\n  const explorerAddress = isNative\n    ? null\n    : chainId === CHAIN_ID_ETH\n    ? `https://${CLUSTER === \"testnet\" ? \"goerli.\" : \"\"}etherscan.io/${\n        isAsset ? \"token\" : \"address\"\n      }/${useableAddress}`\n    : chainId === CHAIN_ID_BSC\n    ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}bscscan.com/${\n        isAsset ? \"token\" : \"address\"\n      }/${useableAddress}`\n    : chainId === CHAIN_ID_POLYGON\n    ? `https://${CLUSTER === \"testnet\" ? \"mumbai.\" : \"\"}polygonscan.com/${\n        isAsset ? \"token\" : \"address\"\n      }/${useableAddress}`\n    : chainId === CHAIN_ID_AVAX\n    ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}snowtrace.io/${\n        isAsset ? \"token\" : \"address\"\n      }/${useableAddress}`\n    : chainId === CHAIN_ID_OASIS\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n      }explorer.emerald.oasis.dev/${\n        isAsset ? \"token\" : \"address\"\n      }/${useableAddress}`\n    : chainId === CHAIN_ID_AURORA\n    ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}aurorascan.dev/${\n        isAsset ? \"token\" : \"address\"\n      }/${useableAddress}`\n    : chainId === CHAIN_ID_FANTOM\n    ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}ftmscan.com/${\n        isAsset ? \"token\" : \"address\"\n      }/${useableAddress}`\n    : chainId === CHAIN_ID_KLAYTN\n    ? `https://${CLUSTER === \"testnet\" ? \"baobab.\" : \"\"}scope.klaytn.com/${\n        isAsset ? \"token\" : \"address\"\n      }/${useableAddress}`\n    : chainId === CHAIN_ID_CELO\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"alfajores.celoscan.io\" : \"explorer.celo.org\"\n      }/address/${useableAddress}`\n    : chainId === CHAIN_ID_KARURA\n    ? `https://${\n        CLUSTER === \"testnet\"\n          ? \"blockscout.karura-dev.aca-dev.network\"\n          : \"blockscout.karura.network\"\n      }/${isAsset ? \"token\" : \"address\"}/${useableAddress}`\n    : chainId === CHAIN_ID_ACALA\n    ? `https://${\n        CLUSTER === \"testnet\"\n          ? \"blockscout.acala-dev.aca-dev.network\"\n          : \"blockscout.acala.network\"\n      }/${isAsset ? \"token\" : \"address\"}/${useableAddress}`\n    : chainId === CHAIN_ID_SOLANA\n    ? `https://solscan.io/address/${useableAddress}${\n        CLUSTER === \"testnet\"\n          ? \"?cluster=devnet\"\n          : CLUSTER === \"devnet\"\n          ? \"?cluster=custom&customUrl=http%3A%2F%2Flocalhost%3A8899\"\n          : \"\"\n      }`\n    : chainId === CHAIN_ID_TERRA\n    ? CLUSTER === \"mainnet\"\n      ? `https://finder.terra.money/columbus-5/address/${useableAddress}`\n      : undefined\n    : chainId === CHAIN_ID_TERRA2\n    ? `https://finder.terra.money/${\n        CLUSTER === \"devnet\"\n          ? \"localterra\"\n          : CLUSTER === \"testnet\"\n          ? \"pisco-1\"\n          : \"phoenix-1\"\n      }/address/${useableAddress}`\n    : chainId === CHAIN_ID_ALGORAND\n    ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}algoexplorer.io/${\n        isAsset ? \"asset\" : \"address\"\n      }/${useableAddress}`\n    : chainId === CHAIN_ID_NEAR\n    ? `https://explorer.${\n        CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n      }near.org/accounts/${useableAddress}`\n    : chainId === CHAIN_ID_MOONBEAM\n    ? `https://${CLUSTER === \"testnet\" ? \"moonbase.\" : \"\"}moonscan.io/${\n        isAsset ? \"token\" : \"address\"\n      }/${useableAddress}`\n    : chainId === CHAIN_ID_XPLA\n    ? `https://explorer.xpla.io/${\n        CLUSTER === \"testnet\" ? \"testnet\" : \"mainnet\"\n      }/address/${useableAddress}`\n    : chainId === CHAIN_ID_APTOS\n    ? propertyVersion !== undefined // NFT\n      ? `https://explorer.aptoslabs.com/token/${useableAddress}/${propertyVersion}${\n          CLUSTER === \"testnet\"\n            ? \"?network=testnet\"\n            : CLUSTER === \"devnet\"\n            ? \"?network=local\"\n            : \"\"\n        }`\n      : `https://explorer.aptoslabs.com/account/${\n          isValidAptosType(useableAddress)\n            ? useableAddress.split(\"::\")[0]\n            : useableAddress\n        }${\n          CLUSTER === \"testnet\"\n            ? \"?network=testnet\"\n            : CLUSTER === \"devnet\"\n            ? \"?network=local\"\n            : \"\"\n        }`\n    : chainId === CHAIN_ID_ARBITRUM\n    ? `https://${CLUSTER === \"testnet\" ? \"goerli.\" : \"\"}arbiscan.io/${\n        isAsset ? \"token\" : \"address\"\n      }/${useableAddress}`\n    : chainId === CHAIN_ID_INJECTIVE\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n      }explorer.injective.network/${\n        isAsset\n          ? `asset/?tokenType=${isNative ? \"native\" : \"cw20\"}&tokenIdentifier=`\n          : \"account/\"\n      }${useableAddress}`\n    : chainId === CHAIN_ID_OPTIMISM\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"goerli-optimism.\" : \"optimistic.\"\n      }etherscan.io/${isAsset ? \"token\" : \"address\"}/${useableAddress}`\n    : chainId === CHAIN_ID_SUI // TODO: might need to change for assets / tokens?\n    ? `https://explorer.sui.io/address/${useableAddress}${\n        CLUSTER === \"testnet\"\n          ? \"?network=testnet\"\n          : CLUSTER === \"devnet\"\n          ? \"?network=local\"\n          : \"?network=https%3A%2F%2Frpc.mainnet.sui.io\"\n      }`\n    : undefined;\n  const explorerName = getExplorerName(chainId);\n\n  const copyToClipboard = useCopyToClipboard(useableAddress);\n\n  const explorerButton = !explorerAddress ? null : (\n    <Button\n      size=\"small\"\n      variant=\"outlined\"\n      startIcon={<OpenInNew />}\n      className={classes.buttons}\n      href={explorerAddress}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {\"View on \" + explorerName}\n    </Button>\n  );\n  //TODO add icon here\n  const copyButton = isNative ? null : (\n    <Button\n      size=\"small\"\n      variant=\"outlined\"\n      startIcon={<FileCopy />}\n      onClick={copyToClipboard}\n      className={classes.buttons}\n    >\n      Copy\n    </Button>\n  );\n\n  const tooltipContent = (\n    <>\n      {useableName && <Typography>{useableName}</Typography>}\n      {useableSymbol && !isNative && (\n        <Typography noWrap variant=\"body2\">\n          {addressShort}\n        </Typography>\n      )}\n      <div>\n        {explorerButton}\n        {copyButton}\n      </div>\n      {extraContent ? extraContent : null}\n    </>\n  );\n\n  return (\n    <StyledTooltip\n      title={tooltipContent}\n      interactive={true}\n      className={classes.mainTypog}\n    >\n      <Typography\n        variant={variant || \"body1\"}\n        className={clsx(classes.mainTypog, {\n          [classes.noGutter]: noGutter,\n          [classes.noUnderline]: noUnderline,\n        })}\n        component=\"div\"\n      >\n        {useableSymbol || addressShort}\n      </Typography>\n    </StyledTooltip>\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n\n  const explainerContent =\n    sourceChain && sourceAsset ? (\n      <>\n        <span>You will attest</span>\n        <SmartAddress chainId={sourceChain} address={sourceAsset} isAsset />\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport { incrementStep, setTargetChain } from \"../../store/attestSlice\";\nimport {\n  selectAttestIsTargetComplete,\n  selectAttestShouldLockFields,\n  selectAttestSourceChain,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { CHAINS, CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Target() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const chains = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const targetChain = useSelector(selectAttestTargetChain);\n  const isTargetComplete = useSelector(selectAttestIsTargetComplete);\n  const shouldLockFields = useSelector(selectAttestShouldLockFields);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <ChainSelect\n        select\n        variant=\"outlined\"\n        fullWidth\n        value={targetChain}\n        onChange={handleTargetChange}\n        disabled={shouldLockFields}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to attest this token.{\" \"}\n        </Typography>\n        {isEVMChain(targetChain) && (\n          <GasEstimateSummary\n            methodType=\"createWrapped\"\n            chainId={targetChain}\n          />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isTargetComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Target;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { selectAttestTargetChain } from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectAttestTargetChain);\n\n  const explainerString = `to ${CHAINS_BY_ID[targetChain].name}`;\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerString}\n    </Typography>\n  );\n}\n","import {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setStep } from \"../../store/attestSlice\";\nimport {\n  selectAttestActiveStep,\n  selectAttestIsCreateComplete,\n  selectAttestIsCreating,\n  selectAttestIsSendComplete,\n  selectAttestIsSending,\n} from \"../../store/selectors\";\nimport HeaderText from \"../HeaderText\";\nimport Create from \"./Create\";\nimport CreatePreview from \"./CreatePreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction Attest() {\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectAttestActiveStep);\n  const isSending = useSelector(selectAttestIsSending);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const isCreating = useSelector(selectAttestIsCreating);\n  const isCreateComplete = useSelector(selectAttestIsCreateComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isCreating) && !isCreateComplete;\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText white>Token Registration</HeaderText>\n      <Alert severity=\"info\">\n        This form allows you to register a token on a new foreign chain. Tokens\n        must be registered before they can be transferred.\n      </Alert>\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isCreateComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))} icon={null}>\n            1. Source\n          </StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isCreateComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(1))} icon={null}>\n            2. Target\n          </StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton onClick={() => dispatch(setStep(2))} icon={null}>\n            3. Send attestation\n          </StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete}\n            icon={null}\n          >\n            4. Create wrapped token\n          </StepButton>\n          <StepContent>\n            {isCreateComplete ? <CreatePreview /> : <Create />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default Attest;\n","import { makeStyles, Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    position: \"relative\",\n  },\n  container: {\n    maxWidth: 1100,\n    margin: \"0px auto\",\n    paddingTop: theme.spacing(11),\n    paddingBottom: theme.spacing(6.5),\n    [theme.breakpoints.up(\"md\")]: {\n      paddingBottom: theme.spacing(12),\n    },\n  },\n  flex: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    marginLeft: theme.spacing(3.5),\n    marginRight: theme.spacing(3.5),\n    borderTop: \"1px solid #585587\",\n    paddingTop: theme.spacing(7),\n    [theme.breakpoints.up(\"md\")]: {\n      flexWrap: \"wrap\",\n      flexDirection: \"row\",\n      color: \"#ffffff8a\",\n      alignItems: \"unset\",\n    },\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  linkStyle: {\n    color: \"white\",\n    display: \"block\",\n    marginRight: theme.spacing(0),\n    marginBottom: theme.spacing(1.5),\n    fontSize: 14,\n    textUnderlineOffset: \"6px\",\n    [theme.breakpoints.up(\"md\")]: {\n      marginRight: theme.spacing(7.5),\n    },\n  },\n  linkActiveStyle: { textDecoration: \"underline\" },\n  wormholeIcon: {\n    height: 68,\n    marginTop: -24,\n  },\n}));\n\nexport default function Footer() {\n  const classes = useStyles();\n  return (\n    <footer className={classes.footer}>\n      <div className={classes.container}>\n        <div className={classes.flex}>\n          <Typography variant=\"body2\">\n          © Dijets Inc. 2023\n          </Typography>\n          <div className={classes.spacer} />\n          <Typography variant=\"body2\">\n            Bridge v1.0.0\n          </Typography>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","import { ethers_contracts } from \"@certusone/wormhole-sdk\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nexport type EthMigrationInfo = {\n  isLoading: boolean;\n  error: string;\n  data: RequisiteData | null;\n};\n\nexport type RequisiteData = {\n  poolAddress: string;\n  fromAddress: string;\n  toAddress: string;\n  fromToken: ethers_contracts.TokenImplementation;\n  toToken: ethers_contracts.TokenImplementation;\n  migrator: ethers_contracts.Migrator;\n  fromSymbol: string;\n  toSymbol: string;\n  fromDecimals: number;\n  toDecimals: number;\n  sharesDecimals: number;\n  fromWalletBalance: string;\n  toWalletBalance: string;\n  fromPoolBalance: string;\n  toPoolBalance: string;\n  walletSharesBalance: string;\n};\n\nconst getRequisiteData = async (\n  migrator: ethers_contracts.Migrator,\n  signer: Signer,\n  signerAddress: string\n): Promise<RequisiteData> => {\n  try {\n    const poolAddress = migrator.address;\n    const fromAddress = await migrator.fromAsset();\n    const toAddress = await migrator.toAsset();\n\n    const fromToken = ethers_contracts.TokenImplementation__factory.connect(\n      fromAddress,\n      signer\n    );\n    const toToken = ethers_contracts.TokenImplementation__factory.connect(\n      toAddress,\n      signer\n    );\n\n    const fromSymbol = await fromToken.symbol();\n    const toSymbol = await toToken.symbol();\n\n    const fromDecimals = await (await migrator.fromDecimals()).toNumber();\n    const toDecimals = await (await migrator.toDecimals()).toNumber();\n    const sharesDecimals = await migrator.decimals();\n\n    const fromWalletBalance = formatUnits(\n      await fromToken.balanceOf(signerAddress),\n      fromDecimals\n    );\n    const toWalletBalance = formatUnits(\n      await toToken.balanceOf(signerAddress),\n      toDecimals\n    );\n\n    const fromPoolBalance = formatUnits(\n      await fromToken.balanceOf(poolAddress),\n      fromDecimals\n    );\n    const toPoolBalance = formatUnits(\n      await toToken.balanceOf(poolAddress),\n      toDecimals\n    );\n\n    const walletSharesBalance = formatUnits(\n      await migrator.balanceOf(signerAddress),\n      sharesDecimals\n    );\n\n    return {\n      poolAddress,\n      fromAddress,\n      toAddress,\n      fromToken,\n      toToken,\n      migrator,\n      fromSymbol,\n      toSymbol,\n      fromDecimals,\n      toDecimals,\n      fromWalletBalance,\n      toWalletBalance,\n      fromPoolBalance,\n      toPoolBalance,\n      walletSharesBalance,\n      sharesDecimals,\n    };\n  } catch (e) {\n    return Promise.reject(\"Failed to retrieve required data.\");\n  }\n};\n\nfunction useEthereumMigratorInformation(\n  migratorAddress: string | undefined,\n  signer: Signer | undefined,\n  signerAddress: string | undefined,\n  toggleRefresh: boolean\n): EthMigrationInfo {\n  const migrator = useMemo(\n    () =>\n      migratorAddress &&\n      signer &&\n      ethers_contracts.Migrator__factory.connect(migratorAddress, signer),\n    [migratorAddress, signer]\n  );\n  const [data, setData] = useState<any | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (!signer || !migrator || !signerAddress) {\n      return;\n    }\n    let cancelled = false;\n    setIsLoading(true);\n    getRequisiteData(migrator, signer, signerAddress).then(\n      (result) => {\n        if (!cancelled) {\n          setData(result);\n          setIsLoading(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setError(\"Failed to retrieve necessary data.\");\n        }\n      }\n    );\n\n    return () => {\n      cancelled = true;\n      return;\n    };\n  }, [migrator, signer, signerAddress, toggleRefresh]);\n\n  return useMemo(() => {\n    if (!migratorAddress || !signer || !signerAddress) {\n      return {\n        isLoading: false,\n        error:\n          !signer || !signerAddress\n            ? \"Dijets Bridge is not live yet!\"\n            : !migratorAddress\n            ? \"No contract address\"\n            : \"Error\",\n        data: null,\n      };\n    } else {\n      return {\n        isLoading,\n        error,\n        data,\n      };\n    }\n  }, [isLoading, error, data, migratorAddress, signer, signerAddress]);\n}\n\nexport default useEthereumMigratorInformation;\n","import {\n  Button,\n  InputAdornment,\n  TextField,\n  TextFieldProps,\n} from \"@material-ui/core\";\n\nexport default function NumberTextField({\n  onMaxClick,\n  ...props\n}: TextFieldProps & { onMaxClick?: () => void }) {\n  return (\n    <TextField\n      type=\"number\"\n      {...props}\n      InputProps={{\n        endAdornment: onMaxClick ? (\n          <InputAdornment position=\"end\">\n            <Button\n              onClick={onMaxClick}\n              disabled={props.disabled}\n              variant=\"outlined\"\n            >\n              Max\n            </Button>\n          </InputAdornment>\n        ) : undefined,\n        ...(props?.InputProps || {}),\n      }}\n    ></TextField>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { CircularProgress, makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useState } from \"react\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useEthereumMigratorInformation from \"../../hooks/useEthereumMigratorInformation\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ConnectWalletButton from \"../ConnectWalletButton\";\nimport NumberTextField from \"../NumberTextField\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n}));\n\nexport default function EvmWorkflow({\n  chainId,\n  migratorAddress,\n}: {\n  chainId: ChainId;\n  migratorAddress: string;\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { signer, signerAddress } = useEthereumProvider(chainId);\n  const { isReady } = useIsWalletReady(chainId);\n  const [toggleRefresh, setToggleRefresh] = useState(false);\n  const forceRefresh = useCallback(\n    () => setToggleRefresh((prevState) => !prevState),\n    []\n  );\n  const poolInfo = useEthereumMigratorInformation(\n    migratorAddress,\n    signer,\n    signerAddress,\n    toggleRefresh\n  );\n  const fromWalletBalance = poolInfo.data?.fromWalletBalance;\n\n  const [migrationAmount, setMigrationAmount] = useState(\"\");\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [transaction, setTransaction] = useState<string | null>(null);\n\n  const fromParse = (amount: string) => {\n    try {\n      if (!poolInfo.data?.fromDecimals || !migrationAmount) {\n        return BigInt(0);\n      }\n      return parseUnits(amount, poolInfo.data.fromDecimals).toBigInt();\n    } catch (e) {\n      return BigInt(0);\n    }\n  };\n\n  const hasRequisiteData = poolInfo.data;\n  const amountGreaterThanZero = fromParse(migrationAmount) > BigInt(0);\n  const sufficientFromTokens =\n    fromWalletBalance &&\n    migrationAmount &&\n    fromParse(migrationAmount) <= fromParse(fromWalletBalance);\n  const sufficientPoolBalance =\n    poolInfo.data?.toPoolBalance &&\n    migrationAmount &&\n    parseFloat(migrationAmount) <= parseFloat(poolInfo.data.toPoolBalance);\n\n  const isReadyToTransfer =\n    isReady &&\n    amountGreaterThanZero &&\n    sufficientFromTokens &&\n    sufficientPoolBalance &&\n    hasRequisiteData;\n\n  const getNotReadyCause = () => {\n    if (!isReady) {\n      return \"Connect your wallet to proceed.\";\n    } else if (poolInfo.error) {\n      return \"Unable to retrieve necessary information. This asset may not be supported.\";\n    } else if (!migrationAmount) {\n      return \"Enter an amount to transfer.\";\n    } else if (!amountGreaterThanZero) {\n      return \"The transfer amount must be greater than zero.\";\n    } else if (!sufficientFromTokens) {\n      return \"There are not sufficient funds in your wallet for this transfer.\";\n    } else if (!sufficientPoolBalance) {\n      return \"There are not sufficient funds in the pool for this transfer.\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const handleAmountChange = useCallback(\n    (event) => setMigrationAmount(event.target.value),\n    [setMigrationAmount]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (fromWalletBalance) {\n      setMigrationAmount(fromWalletBalance);\n    }\n  }, [fromWalletBalance]);\n\n  const migrateTokens = useCallback(async () => {\n    if (!poolInfo.data) {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      }); //Should never be hit\n      return;\n    }\n    try {\n      setMigrationIsProcessing(true);\n      setError(\"\");\n      await poolInfo.data.fromToken.approve(\n        poolInfo.data.migrator.address,\n        parseUnits(migrationAmount, poolInfo.data.fromDecimals)\n      );\n      const transaction = await poolInfo.data.migrator.migrate(\n        parseUnits(migrationAmount, poolInfo.data.fromDecimals)\n      );\n      await transaction.wait();\n      setTransaction(transaction.hash);\n      forceRefresh();\n      enqueueSnackbar(null, {\n        content: (\n          <Alert severity=\"success\">Successfully migrated the tokens.</Alert>\n        ),\n      });\n      setMigrationIsProcessing(false);\n    } catch (e) {\n      console.error(e);\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      });\n      setMigrationIsProcessing(false);\n      setError(\"Failed to send the transaction.\");\n    }\n  }, [poolInfo.data, migrationAmount, enqueueSnackbar, forceRefresh]);\n\n  //TODO tokenName\n  const toTokenPretty = (\n    <SmartAddress\n      chainId={chainId}\n      address={poolInfo.data?.toAddress}\n      symbol={poolInfo.data?.toSymbol}\n      isAsset\n    />\n  );\n  const fromTokenPretty = (\n    <SmartAddress\n      chainId={chainId}\n      address={poolInfo.data?.fromAddress}\n      symbol={poolInfo.data?.fromSymbol}\n      isAsset\n    />\n  );\n  const poolPretty = (\n    <SmartAddress chainId={chainId} address={poolInfo.data?.poolAddress} />\n  );\n\n  const fatalError = poolInfo.error\n    ? \"Unable to retrieve necessary information. This asset may not be supported.\"\n    : null;\n\n  const explainerContent = (\n    <div>\n      <Typography>This action will convert</Typography>\n      <Typography variant=\"h6\">\n        {fromTokenPretty} {`(Balance: ${fromWalletBalance || \"\"})`}\n      </Typography>\n      <div className={classes.spacer} />\n      <Typography>to</Typography>\n      <Typography variant=\"h6\">\n        {toTokenPretty} {`(Balance: ${poolInfo.data?.toWalletBalance || \"\"})`}\n      </Typography>\n      <div className={classes.spacer} />\n      <Typography>Utilizing this pool</Typography>\n      <Typography variant=\"h6\">\n        {poolPretty} {`(Balance: ${poolInfo.data?.toPoolBalance || \"\"})`}\n      </Typography>\n    </div>\n  );\n\n  const mainWorkflow = (\n    <>\n      {explainerContent}\n      <div className={classes.spacer} />\n      <NumberTextField\n        variant=\"outlined\"\n        value={migrationAmount}\n        onChange={handleAmountChange}\n        label={\"Amount\"}\n        disabled={!!migrationIsProcessing || !!transaction}\n        onMaxClick={fromWalletBalance ? handleMaxClick : undefined}\n      />\n\n      {!transaction && (\n        <ButtonWithLoader\n          disabled={!isReadyToTransfer || migrationIsProcessing}\n          showLoader={migrationIsProcessing}\n          onClick={migrateTokens}\n        >\n          {migrationAmount && isReadyToTransfer\n            ? \"Migrate \" + migrationAmount + \" Tokens\"\n            : \"Migrate\"}\n        </ButtonWithLoader>\n      )}\n\n      {(error || !isReadyToTransfer) && (\n        <Typography color=\"error\">{error || getNotReadyCause()}</Typography>\n      )}\n      {transaction ? (\n        <>\n          <Typography>\n            Successfully migrated your tokens! They will be available once this\n            transaction confirms.\n          </Typography>\n          <ShowTx tx={{ id: transaction, block: 1 }} chainId={chainId} />\n        </>\n      ) : null}\n    </>\n  );\n\n  return (\n    <div className={classes.containerDiv}>\n      <ConnectWalletButton chainId={chainId} />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : poolInfo.isLoading ? (\n        <CircularProgress />\n      ) : fatalError ? (\n        <Typography variant=\"h6\">{fatalError}</Typography>\n      ) : (\n        mainWorkflow\n      )}\n    </div>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_BSC,\n  CHAIN_ID_CELO,\n  CHAIN_ID_ETH,\n} from \"@certusone/wormhole-sdk\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { Container, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport { withRouter } from \"react-router\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { COLORS } from \"../../muiTheme\";\nimport { getMigrationAssetMap } from \"../../utils/consts\";\nimport HeaderText from \"../HeaderText\";\nimport EvmWorkflow from \"./EvmWorkflow\";\n\nconst useStyles = makeStyles(() => ({\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  spacer: {\n    height: \"2rem\",\n  },\n}));\n\ninterface RouteParams {\n  legacyAsset: string;\n  fromTokenAccount: string;\n}\n\ninterface Migration extends RouteComponentProps<RouteParams> {\n  chainId: ChainId;\n}\n\nconst EthereumRoot: React.FC<Migration> = (props) => {\n  const legacyAsset: string = props.match.params.legacyAsset;\n  const assetMap = getMigrationAssetMap(props.chainId);\n  const targetPool = assetMap.get(getAddress(legacyAsset));\n\n  let content = null;\n  if (!legacyAsset || !targetPool) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        This asset is not eligible for migration.\n      </Typography>\n    );\n  } else {\n    content = (\n      <EvmWorkflow migratorAddress={targetPool} chainId={props.chainId} />\n    );\n  }\n\n  return content;\n};\n\nconst MigrationRoot: React.FC<Migration> = (props) => {\n  const classes = useStyles();\n  let content = null;\n\n  if (\n    props.chainId === CHAIN_ID_ETH ||\n    props.chainId === CHAIN_ID_BSC ||\n    props.chainId === CHAIN_ID_CELO\n  ) {\n    content = <EthereumRoot {...props} />;\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText\n        white\n        subtitle=\"Convert assets from other bridges to Wormhole V2 tokens\"\n      >\n        Migrate Assets\n      </HeaderText>\n      <Paper className={classes.mainPaper}>{content}</Paper>\n    </Container>\n  );\n};\n\nexport default withRouter(MigrationRoot);\n","import { ChainId, ethers_contracts } from \"@certusone/wormhole-sdk\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport { Alert } from \"@material-ui/lab\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useEthereumMigratorInformation from \"../../hooks/useEthereumMigratorInformation\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { COLORS } from \"../../muiTheme\";\nimport { CHAINS_BY_ID, getMigrationAssetMap } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ConnectWalletButton from \"../ConnectWalletButton\";\nimport HeaderText from \"../HeaderText\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n  lineItem: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    \"& > *\": {\n      alignSelf: \"flex-start\",\n      width: \"max-content\",\n    },\n  },\n  flexGrow: {\n    flewGrow: 1,\n  },\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  hidden: {\n    display: \"none\",\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  balance: {\n    display: \"inline-block\",\n  },\n  convertButton: {\n    alignSelf: \"flex-end\",\n  },\n}));\n\n//TODO move elsewhere\nexport const compareWithDecimalOffset = (\n  valueA: string,\n  decimalsA: number,\n  valueB: string,\n  decimalsB: number\n) => {\n  //find which is larger, and offset by that amount\n  const decimalsBasis = decimalsA > decimalsB ? decimalsA : decimalsB;\n  const normalizedA = parseUnits(valueA, decimalsBasis).toBigInt();\n  const normalizedB = parseUnits(valueB, decimalsBasis).toBigInt();\n\n  if (normalizedA < normalizedB) {\n    return -1;\n  } else if (normalizedA === normalizedB) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\nfunction EvmMigrationLineItem({\n  chainId,\n  migratorAddress,\n  onLoadComplete,\n}: {\n  chainId: ChainId;\n  migratorAddress: string;\n  onLoadComplete: () => void;\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { signer, signerAddress } = useEthereumProvider(chainId);\n  const poolInfo = useEthereumMigratorInformation(\n    migratorAddress,\n    signer,\n    signerAddress,\n    false\n  );\n  const [loaded, setLoaded] = useState(false);\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [transaction, setTransaction] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const fromSymbol = poolInfo?.data?.fromSymbol;\n  const toSymbol = poolInfo?.data?.toSymbol;\n\n  const sufficientPoolBalance =\n    poolInfo.data &&\n    compareWithDecimalOffset(\n      poolInfo.data.fromWalletBalance,\n      poolInfo.data.fromDecimals,\n      poolInfo.data.toPoolBalance,\n      poolInfo.data.toDecimals\n    ) !== 1;\n\n  useEffect(() => {\n    if (!loaded && (poolInfo.data || poolInfo.error)) {\n      onLoadComplete();\n      setLoaded(true);\n    }\n  }, [loaded, poolInfo, onLoadComplete]);\n\n  //TODO use transaction loader\n  const migrateTokens = useCallback(async () => {\n    if (!poolInfo.data) {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      }); //Should never be hit\n      return;\n    }\n    try {\n      const migrationAmountAbs = parseUnits(\n        poolInfo.data.fromWalletBalance,\n        poolInfo.data.fromDecimals\n      );\n      setMigrationIsProcessing(true);\n      await poolInfo.data.fromToken.approve(\n        poolInfo.data.migrator.address,\n        migrationAmountAbs\n      );\n      const transaction = await poolInfo.data.migrator.migrate(\n        migrationAmountAbs\n      );\n      await transaction.wait();\n      setTransaction(transaction.hash);\n      enqueueSnackbar(null, {\n        content: (\n          <Alert severity=\"success\">Successfully migrated the tokens.</Alert>\n        ),\n      });\n      setMigrationIsProcessing(false);\n    } catch (e) {\n      console.error(e);\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      });\n      setMigrationIsProcessing(false);\n      setError(\"Failed to send the transaction.\");\n    }\n  }, [poolInfo.data, enqueueSnackbar]);\n\n  if (!poolInfo.data) {\n    return null;\n  } else if (transaction) {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Successfully migrated your tokens. They will become available once\n            this transaction confirms.\n          </Typography>\n          <ShowTx chainId={chainId} tx={{ id: transaction, block: 1 }} />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Current Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromWalletBalance}\n          </Typography>\n          <SmartAddress\n            chainId={chainId}\n            address={poolInfo.data.fromAddress}\n            symbol={fromSymbol || undefined}\n            isAsset\n          />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            will become\n          </Typography>\n          <ArrowRightAltIcon fontSize=\"large\" />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Wormhole Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromWalletBalance}\n          </Typography>\n          <SmartAddress\n            chainId={chainId}\n            address={poolInfo.data.toAddress}\n            symbol={toSymbol || undefined}\n            isAsset\n          />\n        </div>\n        <div className={classes.convertButton}>\n          <ButtonWithLoader\n            showLoader={migrationIsProcessing}\n            onClick={migrateTokens}\n            error={\n              error\n                ? error\n                : !sufficientPoolBalance\n                ? \"The swap pool has insufficient funds.\"\n                : \"\"\n            }\n            disabled={!sufficientPoolBalance || migrationIsProcessing}\n          >\n            Convert\n          </ButtonWithLoader>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getAddressBalances = async (\n  signer: Signer,\n  signerAddress: string,\n  addresses: string[]\n): Promise<Map<string, BigNumber | null>> => {\n  try {\n    const promises: Promise<any>[] = [];\n    const output = new Map<string, BigNumber | null>();\n    addresses.forEach((address) => {\n      const factory = ethers_contracts.TokenImplementation__factory.connect(\n        address,\n        signer\n      );\n      promises.push(\n        factory.balanceOf(signerAddress).then(\n          (result) => {\n            output.set(address, result);\n          },\n          (error) => {\n            output.set(address, null);\n          }\n        )\n      );\n    });\n    await Promise.all(promises);\n    return output;\n  } catch (e) {\n    return Promise.reject(\"Unable to retrieve token balances.\");\n  }\n};\n\nexport default function EvmQuickMigrate({ chainId }: { chainId: ChainId }) {\n  const classes = useStyles();\n  const { signer, signerAddress } = useEthereumProvider(chainId);\n  const { isReady } = useIsWalletReady(chainId);\n  const migrationMap = useMemo(() => getMigrationAssetMap(chainId), [chainId]);\n  const eligibleTokens = useMemo(\n    () => Array.from(migrationMap.keys()),\n    [migrationMap]\n  );\n  const [migrators, setMigrators] = useState<string[] | null>(null);\n  const [migratorsError, setMigratorsError] = useState(\"\");\n  const [migratorsLoading, setMigratorsLoading] = useState(false);\n\n  //This is for a callback into the line items, so a loader can be displayed while\n  //they are loading\n  //TODO don't just swallow loading errors.\n  const [migratorsFinishedLoading, setMigratorsFinishedLoading] = useState(0);\n  const reportLoadComplete = useCallback(() => {\n    setMigratorsFinishedLoading((prevState) => prevState + 1);\n  }, []);\n  const isLoading =\n    migratorsLoading ||\n    (migrators &&\n      migrators.length &&\n      migratorsFinishedLoading < migrators.length);\n\n  useEffect(() => {\n    if (isReady && signer && signerAddress) {\n      let cancelled = false;\n      setMigratorsLoading(true);\n      setMigratorsError(\"\");\n      getAddressBalances(signer, signerAddress, eligibleTokens).then(\n        (result) => {\n          if (!cancelled) {\n            const migratorAddresses = [];\n            for (const tokenAddress of result.keys()) {\n              if (result.get(tokenAddress) && result.get(tokenAddress)?.gt(0)) {\n                const migratorAddress = migrationMap.get(\n                  getAddress(tokenAddress)\n                );\n                if (migratorAddress) {\n                  migratorAddresses.push(migratorAddress);\n                }\n              }\n            }\n            setMigratorsFinishedLoading(0);\n            setMigrators(migratorAddresses);\n            setMigratorsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setMigratorsLoading(false);\n            setMigratorsError(\n              \"Failed to retrieve available token information.\"\n            );\n          }\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [isReady, signer, signerAddress, eligibleTokens, migrationMap]);\n\n  const hasEligibleAssets = migrators && migrators.length > 0;\n  const chainName = CHAINS_BY_ID[chainId]?.name;\n\n  const content = (\n    <div className={classes.containerDiv}>\n      <Typography variant=\"h5\">\n        {`This page allows you to convert certain wrapped tokens ${\n          chainName ? \"on \" + chainName : \"\"\n        } into\n        Wormhole V2 tokens.`}\n      </Typography>\n      <ConnectWalletButton chainId={chainId} />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : migratorsError ? (\n        <Typography variant=\"h6\">{migratorsError}</Typography>\n      ) : (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={isLoading ? \"\" : classes.hidden} />\n          <div className={!isLoading ? \"\" : classes.hidden}>\n            <Typography>\n              {hasEligibleAssets\n                ? \"You have some assets that are eligible for migration! Click the 'Convert' button to swap them for Wormhole tokens.\"\n                : \"You don't have any assets eligible for migration.\"}\n            </Typography>\n            <div className={classes.spacer} />\n            {migrators?.map((address) => {\n              return (\n                <EvmMigrationLineItem\n                  key={address}\n                  chainId={chainId}\n                  migratorAddress={address}\n                  onLoadComplete={reportLoadComplete}\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText\n        white\n        subtitle=\"Convert assets from other bridges to Wormhole V2 tokens\"\n      >\n        Migrate Assets\n      </HeaderText>\n      <Paper className={classes.mainPaper}>{content}</Paper>\n    </Container>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { StateSafeWormholeWrappedInfo } from \"../hooks/useCheckIfWormholeWrapped\";\nimport { ForeignAssetInfo } from \"../hooks/useFetchForeignAsset\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\nimport { ParsedTokenAccount, Transaction } from \"./transferSlice\";\nimport { TokenTypes } from \"aptos\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\n// these all are optional so NFT could share TokenSelectors\nexport interface NFTParsedTokenAccount extends ParsedTokenAccount {\n  tokenId?: string;\n  uri?: string;\n  animation_url?: string | null;\n  external_url?: string | null;\n  image?: string;\n  image_256?: string;\n  nftName?: string;\n  description?: string;\n  aptosTokenId?: TokenTypes.TokenId;\n}\n\nexport interface NFTState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  isSourceAssetWormholeWrapped: boolean | undefined;\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  originTokenId: string | undefined;\n  sourceWalletAddress: string | undefined;\n  sourceParsedTokenAccount: NFTParsedTokenAccount | undefined;\n  sourceParsedTokenAccounts: DataWrapper<NFTParsedTokenAccount[]>;\n  targetChain: ChainId;\n  targetAddressHex: string | undefined;\n  targetAsset: DataWrapper<ForeignAssetInfo>;\n  transferTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isRedeeming: boolean;\n  redeemTx: Transaction | undefined;\n  isRecovery: boolean;\n}\n\nconst initialState: NFTState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  isSourceAssetWormholeWrapped: false,\n  sourceWalletAddress: undefined,\n  sourceParsedTokenAccount: undefined,\n  sourceParsedTokenAccounts: getEmptyDataWrapper(),\n  originChain: undefined,\n  originAsset: undefined,\n  originTokenId: undefined,\n  targetChain: CHAIN_ID_ETH,\n  targetAddressHex: undefined,\n  targetAsset: getEmptyDataWrapper(),\n  transferTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isRedeeming: false,\n  redeemTx: undefined,\n  isRecovery: false,\n};\n\nexport const nftSlice = createSlice({\n  name: \"nft\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      state.originTokenId = undefined;\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceWormholeWrappedInfo: (\n      state,\n      action: PayloadAction<StateSafeWormholeWrappedInfo>\n    ) => {\n      state.isSourceAssetWormholeWrapped = action.payload.isWrapped;\n      state.originChain = action.payload.chainId;\n      state.originAsset = action.payload.assetAddress;\n      state.originTokenId = action.payload.tokenId;\n    },\n    setSourceWalletAddress: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceWalletAddress = action.payload;\n    },\n    setSourceParsedTokenAccount: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount | undefined>\n    ) => {\n      state.sourceParsedTokenAccount = action.payload;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      state.originTokenId = undefined;\n    },\n    setSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount[] | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = action.payload\n        ? receiveDataWrapper(action.payload)\n        : getEmptyDataWrapper();\n    },\n    fetchSourceParsedTokenAccounts: (state) => {\n      state.sourceParsedTokenAccounts = fetchDataWrapper();\n    },\n    errorSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = errorDataWrapper(\n        action.payload || \"An unknown error occurred.\"\n      );\n    },\n    receiveSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount[]>\n    ) => {\n      state.sourceParsedTokenAccounts = receiveDataWrapper(action.payload);\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      state.targetAddressHex = undefined;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceParsedTokenAccount = undefined;\n        state.isSourceAssetWormholeWrapped = undefined;\n        state.originChain = undefined;\n        state.originAsset = undefined;\n        state.originTokenId = undefined;\n        state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      }\n    },\n    setTargetAddressHex: (state, action: PayloadAction<string | undefined>) => {\n      state.targetAddressHex = action.payload;\n    },\n    setTargetAsset: (\n      state,\n      action: PayloadAction<DataWrapper<ForeignAssetInfo>>\n    ) => {\n      state.targetAsset = action.payload;\n    },\n    setTransferTx: (state, action: PayloadAction<Transaction>) => {\n      state.transferTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsRedeeming: (state, action: PayloadAction<boolean>) => {\n      state.isRedeeming = action.payload;\n    },\n    setRedeemTx: (state, action: PayloadAction<Transaction>) => {\n      state.redeemTx = action.payload;\n      state.isRedeeming = false;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n    setRecoveryVaa: (\n      state,\n      action: PayloadAction<{\n        vaa: any;\n        parsedPayload: {\n          targetChain: ChainId;\n          targetAddress: string;\n          originChain: ChainId;\n          originAddress: string; //TODO maximum amount of fields\n        };\n      }>\n    ) => {\n      const prevTargetChain = state.targetChain;\n      state.signedVAAHex = action.payload.vaa;\n      state.targetChain = action.payload.parsedPayload.targetChain;\n      if (state.sourceChain === action.payload.parsedPayload.targetChain) {\n        state.sourceChain = prevTargetChain;\n      }\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      state.targetAsset = getEmptyDataWrapper();\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.targetAddressHex = action.payload.parsedPayload.targetAddress;\n      state.originChain = action.payload.parsedPayload.originChain;\n      state.originAsset = action.payload.parsedPayload.originAddress;\n      state.originTokenId = undefined;\n      state.activeStep = 3;\n      state.isRecovery = true;\n    },\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceWormholeWrappedInfo,\n  setSourceWalletAddress,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  receiveSourceParsedTokenAccounts,\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  setTargetChain,\n  setTargetAddressHex,\n  setTargetAsset,\n  setTransferTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsRedeeming,\n  setRedeemTx,\n  reset,\n  setRecoveryVaa,\n} = nftSlice.actions;\n\nexport default nftSlice.reducer;\n","import {\n  ChainId,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_XPLA,\n  getOriginalAssetAptos,\n  getOriginalAssetAlgorand,\n  getOriginalAssetCosmWasm,\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  isEVMChain,\n  isTerraChain,\n  uint8ArrayToHex,\n  WormholeWrappedInfo,\n  CHAIN_ID_INJECTIVE,\n  getOriginalAssetInjective,\n  CHAIN_ID_SUI,\n  getOriginalAssetSui,\n  CHAIN_ID_ETH,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth as getOriginalAssetEthNFT,\n  getOriginalAssetSol as getOriginalAssetSolNFT,\n  getOriginalAssetAptos as getOriginalAssetAptosNFT,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { Algodv2 } from \"algosdk\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useNearContext } from \"../contexts/NearWalletContext\";\nimport { setSourceWormholeWrappedInfo as setNFTSourceWormholeWrappedInfo } from \"../store/nftSlice\";\nimport {\n  selectNFTIsRecovery,\n  selectNFTSourceAsset,\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectTransferIsRecovery,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n} from \"../store/selectors\";\nimport { setSourceWormholeWrappedInfo as setTransferSourceWormholeWrappedInfo } from \"../store/transferSlice\";\nimport {\n  ALGORAND_HOST,\n  ALGORAND_TOKEN_BRIDGE_ID,\n  getNFTBridgeAddressForChain,\n  getTerraConfig,\n  getTokenBridgeAddressForChain,\n  NATIVE_NEAR_PLACEHOLDER,\n  NEAR_TOKEN_BRIDGE_ACCOUNT,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  XPLA_LCD_CLIENT_CONFIG,\n  THRESHOLD_TBTC_CONTRACTS,\n  TBTC_ASSET_ADDRESS,\n} from \"../utils/consts\";\nimport { getOriginalAssetNear, makeNearAccount } from \"../utils/near\";\nimport { LCDClient as XplaLCDClient } from \"@xpla/xpla.js\";\nimport { getAptosClient } from \"../utils/aptos\";\nimport { getInjectiveWasmClient } from \"../utils/injective\";\nimport { getSuiProvider } from \"../utils/sui\";\n\nexport interface StateSafeWormholeWrappedInfo {\n  isWrapped: boolean;\n  chainId: ChainId;\n  assetAddress: string;\n  tokenId?: string;\n}\n\nconst makeStateSafe = (\n  info: WormholeWrappedInfo\n): StateSafeWormholeWrappedInfo => ({\n  ...info,\n  assetAddress: uint8ArrayToHex(info.assetAddress),\n});\n\n// Check if the tokens in the configured source chain/address are wrapped\n// tokens. Wrapped tokens are tokens that are non-native, I.E, are locked up on\n// a different chain than this one.\nfunction useCheckIfWormholeWrapped(nft?: boolean) {\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const sourceAsset = useSelector(\n    nft ? selectNFTSourceAsset : selectTransferSourceAsset\n  );\n  const nftSourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const tokenId = nftSourceParsedTokenAccount?.tokenId || \"\"; // this should exist by this step for NFT transfers\n  const aptosTokenId = nftSourceParsedTokenAccount?.aptosTokenId; // this should exist by this step for Aptos NFT transfers\n  const setSourceWormholeWrappedInfo = nft\n    ? setNFTSourceWormholeWrappedInfo\n    : setTransferSourceWormholeWrappedInfo;\n  const { provider } = useEthereumProvider(sourceChain);\n  const { accountId: nearAccountId } = useNearContext();\n  const isRecovery = useSelector(\n    nft ? selectNFTIsRecovery : selectTransferIsRecovery\n  );\n  useEffect(() => {\n    if (isRecovery) {\n      return;\n    }\n    // TODO: loading state, error state\n    let cancelled = false;\n    (async () => {\n      if (isEVMChain(sourceChain) && provider && sourceAsset) {\n        const wrappedInfo = makeStateSafe(\n          await (nft\n            ? getOriginalAssetEthNFT(\n                getNFTBridgeAddressForChain(sourceChain),\n                provider,\n                sourceAsset,\n                tokenId,\n                sourceChain\n              )\n            : getOriginalAssetEth(\n                getTokenBridgeAddressForChain(sourceChain),\n                provider,\n                sourceAsset,\n                sourceChain\n              ))\n        );\n\n        // check for tBTC on canonical chains, make their origin be eth-wrapped-tbtc\n        if (\n          !cancelled &&\n          sourceChain !== CHAIN_ID_ETH &&\n          THRESHOLD_TBTC_CONTRACTS[sourceChain]?.toLowerCase() ===\n            sourceAsset?.toLowerCase()\n        ) {\n          console.log(\"selected tBTC on canonical chain\");\n          dispatch(\n            setSourceWormholeWrappedInfo({\n              isWrapped: true,\n              chainId: CHAIN_ID_ETH,\n              assetAddress: TBTC_ASSET_ADDRESS,\n            })\n          );\n          return;\n        }\n\n        if (!cancelled) {\n          dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n        }\n      }\n      if (sourceChain === CHAIN_ID_SOLANA && sourceAsset) {\n        try {\n          const connection = new Connection(SOLANA_HOST, \"confirmed\");\n          const wrappedInfo = makeStateSafe(\n            await (nft\n              ? getOriginalAssetSolNFT(\n                  connection,\n                  SOL_NFT_BRIDGE_ADDRESS,\n                  sourceAsset\n                )\n              : getOriginalAssetSol(\n                  connection,\n                  SOL_TOKEN_BRIDGE_ADDRESS,\n                  sourceAsset\n                ))\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n      if (isTerraChain(sourceChain) && sourceAsset) {\n        try {\n          const lcd = new LCDClient(getTerraConfig(sourceChain));\n          const wrappedInfo = makeStateSafe(\n            await getOriginalAssetCosmWasm(lcd, sourceAsset, sourceChain)\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n      if (sourceChain === CHAIN_ID_XPLA && sourceAsset) {\n        try {\n          const lcd = new XplaLCDClient(XPLA_LCD_CLIENT_CONFIG);\n          const wrappedInfo = makeStateSafe(\n            await getOriginalAssetCosmWasm(lcd, sourceAsset, sourceChain)\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n      if (sourceChain === CHAIN_ID_APTOS && !nft && sourceAsset) {\n        try {\n          const wrappedInfo = makeStateSafe(\n            await getOriginalAssetAptos(\n              getAptosClient(),\n              getTokenBridgeAddressForChain(CHAIN_ID_APTOS),\n              sourceAsset\n            )\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {\n          console.error(e);\n        }\n      }\n      if (sourceChain === CHAIN_ID_APTOS && nft && aptosTokenId) {\n        try {\n          const wrappedInfo = makeStateSafe(\n            await getOriginalAssetAptosNFT(\n              getAptosClient(),\n              getNFTBridgeAddressForChain(CHAIN_ID_APTOS),\n              aptosTokenId\n            )\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {\n          console.error(e);\n        }\n      }\n      if (sourceChain === CHAIN_ID_ALGORAND && sourceAsset) {\n        try {\n          const algodClient = new Algodv2(\n            ALGORAND_HOST.algodToken,\n            ALGORAND_HOST.algodServer,\n            ALGORAND_HOST.algodPort\n          );\n          const wrappedInfo = makeStateSafe(\n            await getOriginalAssetAlgorand(\n              algodClient,\n              ALGORAND_TOKEN_BRIDGE_ID,\n              BigInt(sourceAsset)\n            )\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n      if (\n        sourceChain === CHAIN_ID_NEAR &&\n        nearAccountId &&\n        sourceAsset !== undefined\n      ) {\n        try {\n          const account = await makeNearAccount(nearAccountId);\n          const wrappedInfo = makeStateSafe(\n            await getOriginalAssetNear(\n              account,\n              NEAR_TOKEN_BRIDGE_ACCOUNT,\n              sourceAsset === NATIVE_NEAR_PLACEHOLDER ? \"\" : sourceAsset\n            )\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n      if (sourceChain === CHAIN_ID_INJECTIVE && sourceAsset) {\n        try {\n          const client = getInjectiveWasmClient();\n          const wrappedInfo = makeStateSafe(\n            await getOriginalAssetInjective(sourceAsset, client)\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n      if (sourceChain === CHAIN_ID_SUI && sourceAsset) {\n        try {\n          const wrappedInfo = makeStateSafe(\n            await getOriginalAssetSui(\n              getSuiProvider(),\n              getTokenBridgeAddressForChain(CHAIN_ID_SUI),\n              sourceAsset\n            )\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    isRecovery,\n    sourceChain,\n    sourceAsset,\n    provider,\n    nft,\n    setSourceWormholeWrappedInfo,\n    tokenId,\n    nearAccountId,\n    aptosTokenId,\n  ]);\n}\n\nexport default useCheckIfWormholeWrapped;\n","import {\n  ChainId,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA2,\n  CHAIN_ID_XPLA,\n  ensureHexPrefix,\n  getForeignAssetAlgorand,\n  getForeignAssetAptos,\n  getForeignAssetEth,\n  getForeignAssetInjective,\n  getForeignAssetSolana,\n  getForeignAssetTerra,\n  getForeignAssetXpla,\n  getTypeFromExternalAddress,\n  hexToNativeAssetString,\n  hexToUint8Array,\n  isEVMChain,\n  isTerraChain,\n  queryExternalId,\n  queryExternalIdInjective,\n  CHAIN_ID_SUI,\n  getForeignAssetSui,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getForeignAssetEth as getForeignAssetEthNFT,\n  getForeignAssetSol as getForeignAssetSolNFT,\n  getForeignAssetAptos as getForeignAssetAptosNFT,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport algosdk from \"algosdk\";\nimport { ethers } from \"ethers\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useNearContext } from \"../contexts/NearWalletContext\";\nimport {\n  errorDataWrapper,\n  fetchDataWrapper,\n  receiveDataWrapper,\n} from \"../store/helpers\";\nimport { setTargetAsset as setNFTTargetAsset } from \"../store/nftSlice\";\nimport {\n  selectNFTIsSourceAssetWormholeWrapped,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTTargetChain,\n  selectTransferActiveStep,\n  selectTransferIsSourceAssetWormholeWrapped,\n  selectTransferIsTBTC,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setTargetAsset as setTransferTargetAsset } from \"../store/transferSlice\";\nimport {\n  ALGORAND_HOST,\n  ALGORAND_TOKEN_BRIDGE_ID,\n  getEvmChainId,\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  getTerraConfig,\n  NEAR_TOKEN_BRIDGE_ACCOUNT,\n  NATIVE_NEAR_WH_ADDRESS,\n  NATIVE_NEAR_PLACEHOLDER,\n  XPLA_LCD_CLIENT_CONFIG,\n  THRESHOLD_TBTC_CONTRACTS,\n  THRESHOLD_GATEWAYS,\n} from \"../utils/consts\";\nimport {\n  getForeignAssetNear,\n  lookupHash,\n  makeNearAccount,\n} from \"../utils/near\";\nimport { LCDClient as XplaLCDClient } from \"@xpla/xpla.js\";\nimport { getAptosClient } from \"../utils/aptos\";\nimport { getInjectiveWasmClient } from \"../utils/injective\";\nimport { getSuiProvider } from \"../utils/sui\";\n\nfunction useFetchTargetAsset(nft?: boolean) {\n  const dispatch = useDispatch();\n  const isSourceAssetWormholeWrapped = useSelector(\n    nft\n      ? selectNFTIsSourceAssetWormholeWrapped\n      : selectTransferIsSourceAssetWormholeWrapped\n  );\n  const originChain = useSelector(\n    nft ? selectNFTOriginChain : selectTransferOriginChain\n  );\n  const originAsset = useSelector(\n    nft ? selectNFTOriginAsset : selectTransferOriginAsset\n  );\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  const tokenId = originTokenId || \"\"; // this should exist by this step for NFT transfers\n  const targetChain = useSelector(\n    nft ? selectNFTTargetChain : selectTransferTargetChain\n  );\n  const isTBTC = useSelector(selectTransferIsTBTC);\n  const activeStep = useSelector(selectTransferActiveStep);\n  const setTargetAsset = nft ? setNFTTargetAsset : setTransferTargetAsset;\n  const { provider, evmChainId } = useEthereumProvider(targetChain);\n  const correctEvmNetwork = getEvmChainId(targetChain);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n  const { accountId: nearAccountId } = useNearContext();\n  const [lastSuccessfulArgs, setLastSuccessfulArgs] = useState<{\n    isSourceAssetWormholeWrapped: boolean | undefined;\n    originChain: ChainId | undefined;\n    originAsset: string | undefined;\n    targetChain: ChainId;\n    nft?: boolean;\n    tokenId?: string;\n  } | null>(null);\n  const argsMatchLastSuccess =\n    !!lastSuccessfulArgs &&\n    lastSuccessfulArgs.isSourceAssetWormholeWrapped ===\n      isSourceAssetWormholeWrapped &&\n    lastSuccessfulArgs.originChain === originChain &&\n    lastSuccessfulArgs.originAsset === originAsset &&\n    lastSuccessfulArgs.targetChain === targetChain &&\n    lastSuccessfulArgs.nft === nft &&\n    lastSuccessfulArgs.tokenId === tokenId;\n  const setArgs = useCallback(\n    () =>\n      setLastSuccessfulArgs({\n        isSourceAssetWormholeWrapped,\n        originChain,\n        originAsset,\n        targetChain,\n        nft,\n        tokenId,\n      }),\n    [\n      isSourceAssetWormholeWrapped,\n      originChain,\n      originAsset,\n      targetChain,\n      nft,\n      tokenId,\n    ]\n  );\n  useEffect(() => {\n    if (argsMatchLastSuccess) {\n      return;\n    }\n    setLastSuccessfulArgs(null);\n    let cancelled = false;\n    (async () => {\n      if (isSourceAssetWormholeWrapped && originChain === targetChain) {\n        if (originChain === CHAIN_ID_TERRA2) {\n          const lcd = new LCDClient(getTerraConfig(CHAIN_ID_TERRA2));\n          const tokenBridgeAddress =\n            getTokenBridgeAddressForChain(CHAIN_ID_TERRA2);\n          const tokenId = await queryExternalId(\n            lcd,\n            tokenBridgeAddress,\n            originAsset || \"\"\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: true,\n                  address: tokenId || null,\n                })\n              )\n            );\n          }\n        } else if (originChain === CHAIN_ID_XPLA) {\n          const lcd = new XplaLCDClient(XPLA_LCD_CLIENT_CONFIG);\n          const tokenBridgeAddress =\n            getTokenBridgeAddressForChain(CHAIN_ID_XPLA);\n          const tokenId = await queryExternalId(\n            lcd,\n            tokenBridgeAddress,\n            originAsset || \"\"\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: true,\n                  address: tokenId || null,\n                })\n              )\n            );\n          }\n        } else if (originChain === CHAIN_ID_APTOS && !nft) {\n          const tokenId = await getTypeFromExternalAddress(\n            getAptosClient(),\n            getTokenBridgeAddressForChain(CHAIN_ID_APTOS),\n            originAsset || \"\"\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: true,\n                  address: tokenId || null,\n                })\n              )\n            );\n          }\n        } else if (originChain === CHAIN_ID_APTOS && nft) {\n          const aptosTokenId = await getForeignAssetAptosNFT(\n            getAptosClient(),\n            getNFTBridgeAddressForChain(CHAIN_ID_APTOS),\n            CHAIN_ID_APTOS,\n            hexToUint8Array(originAsset || \"\"),\n            arrayify(BigNumber.from(tokenId))\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: true,\n                  address: aptosTokenId\n                    ? `${aptosTokenId.token_data_id.collection} ${aptosTokenId.token_data_id.name}`\n                    : null,\n                })\n              )\n            );\n          }\n        } else if (originChain === CHAIN_ID_NEAR && nearAccountId) {\n          if (originAsset === NATIVE_NEAR_WH_ADDRESS) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: true,\n                  address: NATIVE_NEAR_PLACEHOLDER,\n                })\n              )\n            );\n          } else {\n            const account = await makeNearAccount(nearAccountId);\n            const tokenAccount = await lookupHash(\n              account,\n              NEAR_TOKEN_BRIDGE_ACCOUNT,\n              originAsset || \"\"\n            );\n            if (!cancelled) {\n              dispatch(\n                setTargetAsset(\n                  receiveDataWrapper({\n                    doesExist: true,\n                    address: tokenAccount[1] || null,\n                  })\n                )\n              );\n            }\n          }\n        } else if (originChain === CHAIN_ID_INJECTIVE) {\n          const client = getInjectiveWasmClient();\n          const tokenBridgeAddress =\n            getTokenBridgeAddressForChain(CHAIN_ID_INJECTIVE);\n          const tokenId = await queryExternalIdInjective(\n            client,\n            tokenBridgeAddress,\n            originAsset || \"\"\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: true,\n                  address: tokenId,\n                })\n              )\n            );\n          }\n        } else if (originChain === CHAIN_ID_SUI) {\n          const coinType = await getForeignAssetSui(\n            getSuiProvider(),\n            getTokenBridgeAddressForChain(CHAIN_ID_SUI),\n            CHAIN_ID_SUI,\n            hexToUint8Array(originAsset || \"\")\n          );\n          console.log(\"target coin type\", coinType);\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: true,\n                  address: coinType || null,\n                })\n              )\n            );\n          }\n        } else {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: true,\n                  address:\n                    hexToNativeAssetString(originAsset, originChain) || null,\n                })\n              )\n            );\n          }\n        }\n        if (!cancelled) {\n          setArgs();\n        }\n        return;\n      }\n      if (isTBTC && THRESHOLD_GATEWAYS[targetChain] && !cancelled) {\n        dispatch(\n          setTargetAsset(\n            receiveDataWrapper({\n              doesExist: true,\n              address: THRESHOLD_TBTC_CONTRACTS[targetChain],\n            })\n          )\n        );\n        setArgs();\n        return;\n      }\n      if (\n        isEVMChain(targetChain) &&\n        provider &&\n        hasCorrectEvmNetwork &&\n        originChain &&\n        originAsset\n      ) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const asset = await (nft\n            ? getForeignAssetEthNFT(\n                getNFTBridgeAddressForChain(targetChain),\n                provider,\n                originChain,\n                hexToUint8Array(originAsset)\n              )\n            : getForeignAssetEth(\n                getTokenBridgeAddressForChain(targetChain),\n                provider,\n                originChain,\n                hexToUint8Array(originAsset)\n              ));\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: asset !== ethers.constants.AddressZero,\n                  address: asset,\n                })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_SOLANA && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const connection = new Connection(SOLANA_HOST, \"confirmed\");\n          const asset = await (nft\n            ? getForeignAssetSolNFT(\n                SOL_NFT_BRIDGE_ADDRESS,\n                originChain,\n                hexToUint8Array(originAsset),\n                arrayify(BigNumber.from(tokenId || \"0\"))\n              )\n            : getForeignAssetSolana(\n                connection,\n                SOL_TOKEN_BRIDGE_ADDRESS,\n                originChain,\n                hexToUint8Array(originAsset)\n              ));\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({ doesExist: !!asset, address: asset })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (isTerraChain(targetChain) && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const lcd = new LCDClient(getTerraConfig(targetChain));\n          const asset = await getForeignAssetTerra(\n            getTokenBridgeAddressForChain(targetChain),\n            lcd,\n            originChain,\n            hexToUint8Array(originAsset)\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({ doesExist: !!asset, address: asset })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_XPLA && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const lcd = new XplaLCDClient(XPLA_LCD_CLIENT_CONFIG);\n          const asset = await getForeignAssetXpla(\n            getTokenBridgeAddressForChain(targetChain),\n            lcd,\n            originChain,\n            hexToUint8Array(originAsset)\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({ doesExist: !!asset, address: asset })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_APTOS && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          let address: string | null = null;\n          const aptosClient = getAptosClient();\n          if (nft) {\n            const aptosTokenId = await getForeignAssetAptosNFT(\n              aptosClient,\n              getNFTBridgeAddressForChain(targetChain),\n              originChain,\n              hexToUint8Array(originAsset),\n              arrayify(BigNumber.from(tokenId))\n            );\n            address = aptosTokenId\n              ? `${aptosTokenId.token_data_id.collection} ${aptosTokenId.token_data_id.creator}`\n              : null;\n          } else {\n            const asset = await getForeignAssetAptos(\n              aptosClient,\n              getTokenBridgeAddressForChain(targetChain),\n              originChain,\n              originAsset\n            );\n            address = asset ? `${ensureHexPrefix(asset)}` : null;\n          }\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: !!address,\n                  address,\n                })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          console.error(e);\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_ALGORAND && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const algodClient = new algosdk.Algodv2(\n            ALGORAND_HOST.algodToken,\n            ALGORAND_HOST.algodServer,\n            ALGORAND_HOST.algodPort\n          );\n          const asset = await getForeignAssetAlgorand(\n            algodClient,\n            ALGORAND_TOKEN_BRIDGE_ID,\n            originChain,\n            originAsset\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: !!asset,\n                  address: asset === null ? asset : asset.toString(),\n                })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          console.error(e);\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (\n        targetChain === CHAIN_ID_NEAR &&\n        originChain &&\n        originAsset &&\n        nearAccountId\n      ) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const account = await makeNearAccount(nearAccountId);\n          const asset = await getForeignAssetNear(\n            account,\n            NEAR_TOKEN_BRIDGE_ACCOUNT,\n            originChain,\n            originAsset\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: !!asset,\n                  address: asset === null ? asset : asset.toString(),\n                })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          console.error(e);\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_INJECTIVE && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const client = getInjectiveWasmClient();\n          const asset = await getForeignAssetInjective(\n            getTokenBridgeAddressForChain(targetChain),\n            client,\n            originChain,\n            hexToUint8Array(originAsset)\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({ doesExist: !!asset, address: asset })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_SUI && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const asset = await getForeignAssetSui(\n            getSuiProvider(),\n            getTokenBridgeAddressForChain(CHAIN_ID_SUI),\n            originChain,\n            hexToUint8Array(originAsset)\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: !!asset,\n                  address: asset === null ? asset : asset.toString(),\n                })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          console.error(e);\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    isSourceAssetWormholeWrapped,\n    originChain,\n    originAsset,\n    targetChain,\n    provider,\n    nft,\n    setTargetAsset,\n    tokenId,\n    hasCorrectEvmNetwork,\n    argsMatchLastSuccess,\n    setArgs,\n    nearAccountId,\n    isTBTC,\n    activeStep,\n  ]);\n}\n\nexport default useFetchTargetAsset;\n","import {\n  ChainId,\n  CHAIN_ID_ACALA,\n  CHAIN_ID_KARURA,\n  CHAIN_ID_KLAYTN,\n  CHAIN_ID_SOLANA,\n  getClaimAddressSolana,\n  hexToUint8Array,\n  isEVMChain,\n  parseNFTPayload,\n  parseVaa,\n  postVaaSolanaWithRetry,\n  CHAIN_ID_APTOS,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  createMetaOnSolana,\n  getForeignAssetSol,\n  isNFTVAASolanaNative,\n  redeemOnAptos,\n  redeemOnEth,\n  redeemOnSolana,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport { SolanaWallet } from \"@xlabs-libs/wallet-aggregator-solana\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { setIsRedeeming, setRedeemTx } from \"../store/nftSlice\";\nimport { selectNFTIsRedeeming, selectNFTTargetChain } from \"../store/selectors\";\nimport {\n  ACALA_HOST,\n  getNFTBridgeAddressForChain,\n  KARURA_HOST,\n  MAX_VAA_UPLOAD_RETRIES_SOLANA,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getKaruraGasParams } from \"../utils/karura\";\nimport { getMetadataAddress } from \"../utils/metaplex\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport useNFTSignedVAA from \"./useNFTSignedVAA\";\nimport { waitForSignAndSubmitTransaction } from \"../utils/aptos\";\nimport { useAptosContext } from \"../contexts/AptosWalletContext\";\nimport { AptosWallet } from \"@xlabs-libs/wallet-aggregator-aptos\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  chainId: ChainId\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const overrides =\n      // Karura and Acala need gas params for NFT minting\n      chainId === CHAIN_ID_KARURA\n        ? await getKaruraGasParams(KARURA_HOST)\n        : chainId === CHAIN_ID_ACALA\n        ? await getKaruraGasParams(ACALA_HOST)\n        : // Klaytn requires specifying gasPrice\n        chainId === CHAIN_ID_KLAYTN\n        ? { gasPrice: (await signer.getGasPrice()).toString() }\n        : {};\n    const receipt = await redeemOnEth(\n      getNFTBridgeAddressForChain(chainId),\n      signer,\n      signedVAA,\n      overrides\n    );\n    dispatch(\n      setRedeemTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: SolanaWallet,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const claimAddress = await getClaimAddressSolana(\n      SOL_NFT_BRIDGE_ADDRESS,\n      signedVAA\n    );\n    const claimInfo = await connection.getAccountInfo(claimAddress);\n    let txid;\n    if (!claimInfo) {\n      await postVaaSolanaWithRetry(\n        connection,\n        wallet.signTransaction.bind(wallet),\n        SOL_BRIDGE_ADDRESS,\n        payerAddress,\n        Buffer.from(signedVAA),\n        MAX_VAA_UPLOAD_RETRIES_SOLANA\n      );\n      // TODO: how do we retry in between these steps\n      const transaction = await redeemOnSolana(\n        connection,\n        SOL_BRIDGE_ADDRESS,\n        SOL_NFT_BRIDGE_ADDRESS,\n        payerAddress,\n        signedVAA\n      );\n      txid = await signSendAndConfirm(wallet, transaction);\n      // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    }\n    const isNative = await isNFTVAASolanaNative(signedVAA);\n    if (!isNative) {\n      const parsedVAA = parseVaa(signedVAA);\n      const { originChain, originAddress, tokenId } = parseNFTPayload(\n        Buffer.from(new Uint8Array(parsedVAA.payload))\n      );\n      const mintAddress = await getForeignAssetSol(\n        SOL_NFT_BRIDGE_ADDRESS,\n        originChain as ChainId,\n        hexToUint8Array(originAddress),\n        arrayify(tokenId)\n      );\n      const [metadataAddress] = await getMetadataAddress(mintAddress);\n      const metadata = await connection.getAccountInfo(metadataAddress);\n      if (!metadata) {\n        const transaction = await createMetaOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_NFT_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n        txid = await signSendAndConfirm(wallet, transaction);\n      }\n    }\n    dispatch(setRedeemTx({ id: txid || \"\", block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function aptos(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signedVAA: Uint8Array,\n  aptosWallet: AptosWallet\n) {\n  dispatch(setIsRedeeming(true));\n  const nftBridgeAddress = getNFTBridgeAddressForChain(CHAIN_ID_APTOS);\n  try {\n    const msg = await redeemOnAptos(nftBridgeAddress, signedVAA);\n    const result = await waitForSignAndSubmitTransaction(msg, aptosWallet);\n    dispatch(setRedeemTx({ id: result, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nexport function useHandleNFTRedeem() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const { publicKey: solPK, wallet: solanaWallet } = useSolanaWallet();\n  const { signer } = useEthereumProvider(targetChain);\n  const { account: aptosAccount, wallet: aptosWallet } = useAptosContext();\n  const signedVAA = useNFTSignedVAA();\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const handleRedeemClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(dispatch, enqueueSnackbar, solanaWallet, solPK, signedVAA);\n    } else if (\n      targetChain === CHAIN_ID_APTOS &&\n      !!aptosAccount &&\n      !!aptosWallet &&\n      signedVAA\n    ) {\n      aptos(dispatch, enqueueSnackbar, signedVAA, aptosWallet);\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n    aptosAccount,\n    aptosWallet,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleRedeemClick,\n      disabled: !!isRedeeming,\n      showLoader: !!isRedeeming,\n    }),\n    [handleRedeemClick, isRedeeming]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectNFTSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useNFTSignedVAA() {\n  const signedVAAHex = useSelector(selectNFTSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import { makeStyles } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport numeral from \"numeral\";\nimport { useEffect, useState } from \"react\";\nimport { SOLANA_HOST } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport default function SolanaTPSWarning() {\n  const classes = useStyles();\n  const [tps, setTps] = useState<number | null>(null);\n  useEffect(() => {\n    let cancelled = false;\n    let interval = setInterval(() => {\n      (async () => {\n        try {\n          const connection = new Connection(SOLANA_HOST);\n          const samples = await connection.getRecentPerformanceSamples(1);\n          if (samples.length >= 1) {\n            let short = samples\n              .filter((sample) => sample.numTransactions !== 0)\n              .map(\n                (sample) => sample.numTransactions / sample.samplePeriodSecs\n              );\n            const avgTps = short[0];\n            if (!cancelled) {\n              setTps(avgTps);\n            }\n          }\n        } catch (e) {}\n      })();\n    }, 5000);\n    return () => {\n      cancelled = true;\n      clearInterval(interval);\n    };\n  }, []);\n  return tps !== null && tps < 1500 ? (\n    <Alert\n      variant=\"outlined\"\n      severity=\"warning\"\n      className={classes.alert}\n    >{`WARNING! The Solana Transactions Per Second (TPS) is below 1500. This is a sign of network congestion. Proceed with caution as you may have difficulty submitting transactions and the guardians may have difficulty witnessing them (this could lead to processing delays). Current TPS: ${numeral(\n      tps\n    ).format(\"0,0\")}`}</Alert>\n  ) : null;\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { ReactChild } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    marginBottom: theme.spacing(4),\n  },\n}));\n\nexport default function StepDescription({\n  children,\n}: {\n  children: ReactChild;\n}) {\n  const classes = useStyles();\n  return (\n    <Typography component=\"div\" variant=\"body2\" className={classes.description}>\n      {children}\n    </Typography>\n  );\n}\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTIsRedeeming,\n  selectNFTIsSending,\n  selectNFTRedeemTx,\n  selectNFTSourceChain,\n  selectNFTTargetChain,\n  selectNFTTransferTx,\n} from \"../../store/selectors\";\nimport { WAITING_FOR_WALLET_AND_CONF } from \"../Transfer/WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const isSending = useSelector(selectNFTIsSending);\n  const transferTx = useSelector(selectNFTTransferTx);\n  const targetChain = useSelector(selectNFTTargetChain);\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const redeemTx = useSelector(selectNFTRedeemTx);\n  const showWarning = (isSending && !transferTx) || (isRedeeming && !redeemTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isRedeeming\n        ? \"Note: there will be several transactions\"\n        : isEVMChain(sourceChain) && isSending\n        ? \"Note: there will be two transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { CHAIN_ID_SOLANA, isTerraChain } from \"@certusone/wormhole-sdk\";\nimport { useSelector } from \"react-redux\";\nimport { useHandleNFTRedeem } from \"../../hooks/useHandleNFTRedeem\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { selectNFTTargetChain } from \"../../store/selectors\";\nimport { CLUSTER } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Redeem() {\n  const { handleClick, disabled, showLoader } = useHandleNFTRedeem();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  return (\n    <>\n      <StepDescription>Receive the NFT on the target chain</StepDescription>\n      <KeyAndBalance chainId={targetChain} />\n      {isTerraChain(targetChain) && (\n        <TerraFeeDenomPicker disabled={disabled} chainId={targetChain} />\n      )}\n      {targetChain === CHAIN_ID_SOLANA && CLUSTER === \"mainnet\" && (\n        <SolanaTPSWarning />\n      )}\n      <ButtonWithLoader\n        disabled={!isReady || disabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={statusMessage}\n      >\n        Redeem\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n    </>\n  );\n}\n\nexport default Redeem;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectNFTRedeemTx, selectNFTTargetChain } from \"../../store/selectors\";\nimport { reset } from \"../../store/nftSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function RedeemPreview() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const redeemTx = useSelector(selectNFTRedeemTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n\n  const explainerString =\n    \"Success! The redeem transaction was submitted. The NFT will become available once the transaction confirms.\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {redeemTx ? <ShowTx chainId={targetChain} tx={redeemTx} /> : null}\n      <ButtonWithLoader onClick={handleResetClick}>\n        Transfer Another NFT!\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_KLAYTN,\n  CHAIN_ID_SOLANA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getSignedVAAWithRetry,\n  hexToUint8Array,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  uint8ArrayToHex,\n  CHAIN_ID_APTOS,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  transferFromEth,\n  transferFromSolana,\n  transferFromAptos,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport { SolanaWallet } from \"@xlabs-libs/wallet-aggregator-solana\";\nimport { BigNumber, Signer } from \"ethers\";\nimport { arrayify, zeroPad } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  setIsSending,\n  setSignedVAAHex,\n  setTransferTx,\n} from \"../store/nftSlice\";\nimport {\n  selectNFTIsSendComplete,\n  selectNFTIsSending,\n  selectNFTIsTargetComplete,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTSourceAsset,\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectNFTTargetChain,\n} from \"../store/selectors\";\nimport {\n  getBridgeAddressForChain,\n  getNFTBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n  WORMHOLE_RPC_HOSTS,\n} from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport useNFTTargetAddressHex from \"./useNFTTargetAddress\";\nimport { TokenTypes, Types } from \"aptos\";\nimport {\n  getAptosClient,\n  getEmitterAddressAndSequenceFromResult,\n  waitForSignAndSubmitTransaction,\n} from \"../utils/aptos\";\nimport { useAptosContext } from \"../contexts/AptosWalletContext\";\nimport { AptosWallet } from \"@xlabs-libs/wallet-aggregator-aptos\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  tokenAddress: string,\n  tokenId: string,\n  recipientChain: ChainId,\n  recipientAddress: Uint8Array,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    // Klaytn requires specifying gasPrice\n    const overrides =\n      chainId === CHAIN_ID_KLAYTN\n        ? { gasPrice: (await signer.getGasPrice()).toString() }\n        : {};\n    const receipt = await transferFromEth(\n      getNFTBridgeAddressForChain(chainId),\n      signer,\n      tokenAddress,\n      tokenId,\n      recipientChain,\n      recipientAddress,\n      overrides\n    );\n    dispatch(\n      setTransferTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getNFTBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      WORMHOLE_RPC_HOSTS,\n      chainId,\n      emitterAddress,\n      sequence.toString()\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: SolanaWallet,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  fromAddress: string,\n  mintAddress: string,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  originAddressStr?: string,\n  originChain?: ChainId,\n  originTokenId?: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const originAddress = originAddressStr\n      ? zeroPad(hexToUint8Array(originAddressStr), 32)\n      : undefined;\n    const transaction = await transferFromSolana(\n      connection,\n      SOL_BRIDGE_ADDRESS,\n      SOL_NFT_BRIDGE_ADDRESS,\n      payerAddress,\n      fromAddress,\n      mintAddress,\n      targetAddress,\n      targetChain,\n      originAddress,\n      originChain,\n      arrayify(BigNumber.from(originTokenId || \"0\"))\n    );\n    const txid = await signSendAndConfirm(wallet, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setTransferTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_NFT_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      WORMHOLE_RPC_HOSTS,\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function aptos(\n  dispatch: any,\n  enqueueSnackbar: any,\n  aptosTokenId: TokenTypes.TokenId,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  aptosWallet: AptosWallet\n) {\n  dispatch(setIsSending(true));\n  const nftBridgeAddress = getNFTBridgeAddressForChain(CHAIN_ID_APTOS);\n  try {\n    const { creator, collection, name } = aptosTokenId.token_data_id;\n    const transferPayload = transferFromAptos(\n      nftBridgeAddress,\n      creator,\n      collection,\n      name,\n      Number(aptosTokenId.property_version),\n      targetChain,\n      targetAddress\n    );\n    const hash = await waitForSignAndSubmitTransaction(\n      transferPayload,\n      aptosWallet\n    );\n    dispatch(setTransferTx({ id: hash, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const result = (await getAptosClient().waitForTransactionWithResult(\n      hash\n    )) as Types.UserTransaction;\n    const { emitterAddress, sequence } =\n      getEmitterAddressAndSequenceFromResult(result);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      WORMHOLE_RPC_HOSTS,\n      CHAIN_ID_APTOS,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleNFTTransfer() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const sourceAsset = useSelector(selectNFTSourceAsset);\n  const nftSourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const sourceTokenId = nftSourceParsedTokenAccount?.tokenId || \"\"; // this should exist by this step for NFT transfers\n  const aptosTokenId = nftSourceParsedTokenAccount?.aptosTokenId;\n  const originChain = useSelector(selectNFTOriginChain);\n  const originAsset = useSelector(selectNFTOriginAsset);\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddress = useNFTTargetAddressHex();\n  const isTargetComplete = useSelector(selectNFTIsTargetComplete);\n  const isSending = useSelector(selectNFTIsSending);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  const { signer } = useEthereumProvider(sourceChain);\n  const { publicKey: solPK, wallet: solanaWallet } = useSolanaWallet();\n  const { account: aptosAccount, wallet: aptosWallet } = useAptosContext();\n  const sourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const sourceTokenPublicKey = sourceParsedTokenAccount?.publicKey;\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleTransferClick = useCallback(() => {\n    // TODO: we should separate state for transaction vs fetching vaa\n    if (\n      isEVMChain(sourceChain) &&\n      !!signer &&\n      !!sourceAsset &&\n      !!sourceTokenId &&\n      !!targetAddress\n    ) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        sourceAsset,\n        sourceTokenId,\n        targetChain,\n        targetAddress,\n        sourceChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!sourceAsset &&\n      !!sourceTokenPublicKey &&\n      !!targetAddress\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK,\n        sourceTokenPublicKey,\n        sourceAsset,\n        targetChain,\n        targetAddress,\n        originAsset,\n        originChain,\n        originTokenId\n      );\n    } else if (\n      sourceChain === CHAIN_ID_APTOS &&\n      !!aptosAccount &&\n      !!aptosWallet &&\n      !!targetAddress &&\n      !!aptosTokenId\n    ) {\n      aptos(\n        dispatch,\n        enqueueSnackbar,\n        aptosTokenId,\n        targetChain,\n        targetAddress,\n        aptosWallet\n      );\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    sourceTokenPublicKey,\n    sourceAsset,\n    sourceTokenId,\n    targetChain,\n    targetAddress,\n    originAsset,\n    originChain,\n    originTokenId,\n    aptosAccount,\n    aptosWallet,\n    aptosTokenId,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleTransferClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleTransferClick, disabled, isSending]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectNFTTargetAddressHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useNFTTargetAddressHex() {\n  const targetAddressHex = useSelector(selectNFTTargetAddressHex);\n  const targetAddress = useMemo(\n    () => (targetAddressHex ? hexToUint8Array(targetAddressHex) : undefined),\n    [targetAddressHex]\n  );\n  return targetAddress;\n}\n","import { CHAIN_ID_SOLANA, isTerraChain } from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useSelector } from \"react-redux\";\nimport { useHandleNFTTransfer } from \"../../hooks/useHandleNFTTransfer\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectNFTSourceWalletAddress,\n  selectNFTSourceChain,\n  selectNFTTargetError,\n  selectNFTTransferTx,\n  selectNFTIsSendComplete,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID, CLUSTER } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport ShowTx from \"../ShowTx\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleNFTTransfer();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const error = useSelector(selectNFTTargetError);\n  const { isReady, statusMessage, walletAddress } =\n    useIsWalletReady(sourceChain);\n  const sourceWalletAddress = useSelector(selectNFTSourceWalletAddress);\n  const transferTx = useSelector(selectNFTTransferTx);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  //The chain ID compare is handled implicitly, as the isWalletReady hook should report !isReady if the wallet is on the wrong chain.\n  const isWrongWallet =\n    sourceWalletAddress &&\n    walletAddress &&\n    sourceWalletAddress !== walletAddress;\n  const isDisabled = !isReady || isWrongWallet || disabled;\n  const errorMessage = isWrongWallet\n    ? \"A different wallet is connected than in Step 1.\"\n    : statusMessage || error || undefined;\n  return (\n    <>\n      <StepDescription>\n        Transfer the NFT to the Wormhole Token Bridge.\n      </StepDescription>\n      <KeyAndBalance chainId={sourceChain} />\n      {isTerraChain(sourceChain) && (\n        <TerraFeeDenomPicker disabled={disabled} chainId={sourceChain} />\n      )}\n      <Alert severity=\"info\" variant=\"outlined\">\n        This will initiate the transfer on {CHAINS_BY_ID[sourceChain].name} and\n        wait for finalization. If you navigate away from this page before\n        completing Step 4, you will have to perform the recovery workflow to\n        complete the transfer.\n      </Alert>\n      {sourceChain === CHAIN_ID_SOLANA && CLUSTER === \"mainnet\" && (\n        <SolanaTPSWarning />\n      )}\n      <ButtonWithLoader\n        disabled={isDisabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={errorMessage}\n      >\n        Transfer\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={transferTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTSourceChain,\n  selectNFTTransferTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const transferTx = useSelector(selectNFTTransferTx);\n\n  const explainerString = \"The NFT has been sent!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n    </>\n  );\n}\n","var _path, _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgAcala(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"none\",\n    viewBox: \"0 0 490 490\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M245 490c135.31 0 245-109.69 245-245S380.31 0 245 0 0 109.69 0 245s109.69 245 245 245zm1-23c122.61 0 222-99.393 222-222S368.607 23 246 23 24 122.393 24 245s99.393 222 222 222zm-1-17c113.22 0 205-91.782 205-205S358.218 40 245 40 40 131.782 40 245s91.782 205 205 205zm.5-25c99.687 0 180.5-80.813 180.5-180.5S345.187 64 245.5 64 65 144.813 65 244.5 145.813 425 245.5 425zM235.313 98.66l130.68 226.7 14.012-24.31-116.66-202.39zm-125.31 201.98 111.84-194.03.231.4.22-.382 132.54 229.93h-28.025l-33.484-58.088c-15.215-4.81-31.414-7.404-48.22-7.404-8.663 0-17.117.605-25.336 1.812l16.14-27.956c3.047-.149 6.113-.224 9.196-.224 10.267 0 20.339.831 30.154 2.43l-53.195-92.284-98.05 170.1zm76.035-2.949 50.256-87.186-14.012-24.309-86.676 150.37h28.025l.266-.462c24.037-14.472 51.619-21.787 81.737-21.787 19.232 0 37.67 3.397 54.747 9.625l-18.775-32.52a187.14 187.14 0 0 0-35.972-3.472c-20.842 0-40.885 3.425-59.596 9.744z\",\n    clipRule: \"evenodd\",\n    fill: \"url(#a)\",\n    fillRule: \"evenodd\"\n  })), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"a\",\n    x1: 462.5,\n    x2: 101,\n    y1: 490,\n    y2: 43.5,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#5A81FF\",\n    offset: 0\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#E40C5B\",\n    offset: 0.524\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#FF4C3B\",\n    offset: 1\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgAcala);\nexport default __webpack_public_path__ + \"static/media/acala.dad6d76736ec87722300c598c51c3d4f.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _polygon, _path2, _path3, _polygon2, _path4;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgArbitrum(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    enableBackground: \"new 0 0 470.287 514.251\",\n    viewBox: \"0 0 470.29 514.25\",\n    xmlSpace: \"preserve\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m291.13 237.47 35.654-60.5 96.103 149.68 0.046 28.727-0.313-197.67c-0.228-4.832-2.794-9.252-6.887-11.859l-173.02-99.525c-4.045-1.99-9.18-1.967-13.22 0.063-0.546 0.272-1.06 0.57-1.548 0.895l-0.604 0.379-167.94 97.322-0.651 0.296c-0.838 0.385-1.686 0.875-2.48 1.444-3.185 2.283-5.299 5.66-5.983 9.448-0.103 0.574-0.179 1.158-0.214 1.749l0.264 161.08 89.515-138.74c11.271-18.397 35.825-24.323 58.62-24.001l26.753 0.706-157.64 252.8 18.582 10.697 159.52-263.24 70.51-0.256-159.11 269.88 66.306 38.138 7.922 4.556c3.351 1.362 7.302 1.431 10.681 0.21l175.45-101.68-33.544 19.438-92.775-150.04zm13.602 195.93-66.969-105.11 40.881-69.371 87.952 138.63-61.864 35.851z\",\n    fill: \"#2D374B\"\n  })), _polygon || (_polygon = /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"237.77 328.29 304.74 433.4 366.6 397.54 278.65 258.92\",\n    fill: \"#28A0F0\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m422.94 355.38-0.046-28.727-96.103-149.68-35.654 60.5 92.774 150.04 33.544-19.438c3.29-2.673 5.281-6.594 5.49-10.825l-5e-3 -1.869z\",\n    fill: \"#28A0F0\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m20.219 382.47 47.369 27.296 157.63-252.8-26.753-0.706c-22.795-0.322-47.35 5.604-58.62 24.001l-89.515 138.74-30.115 46.271v17.194z\",\n    fill: \"#fff\"\n  })), _polygon2 || (_polygon2 = /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"316.2 156.96 245.69 157.22 86.17 420.46 141.93 452.56 157.09 426.85\",\n    fill: \"#fff\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m452.65 156.6c-0.59-14.746-8.574-28.245-21.08-36.104l-175.29-100.8c-12.371-6.229-27.825-6.237-40.218-4e-3 -1.465 0.739-170.46 98.752-170.46 98.752-2.339 1.122-4.592 2.458-6.711 3.975-11.164 8.001-17.969 20.435-18.668 34.095v208.76l30.115-46.271-0.263-161.08c0.035-0.589 0.109-1.169 0.214-1.741 0.681-3.79 2.797-7.171 5.983-9.456 0.795-0.569 172.68-100.06 173.23-100.34 4.04-2.029 9.175-2.053 13.22-0.063l173.02 99.523c4.093 2.607 6.659 7.027 6.887 11.859v199.54c-0.209 4.231-1.882 8.152-5.172 10.825l-33.544 19.438-17.308 10.031-61.864 35.852-62.737 36.357c-3.379 1.221-7.33 1.152-10.681-0.21l-74.228-42.693-15.163 25.717 66.706 38.406c2.206 1.255 4.171 2.367 5.784 3.272 2.497 1.4 4.199 2.337 4.8 2.629 4.741 2.303 11.563 3.643 17.71 3.643 5.636 0 11.132-1.035 16.332-3.072l182.22-105.53c10.459-8.104 16.612-20.325 17.166-33.564v-201.75z\",\n    fill: \"#96BEDC\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgArbitrum);\nexport default __webpack_public_path__ + \"static/media/arbitrum.c9ada05fe5facf49a5f1ef9ba1c1578c.svg\";\nexport { ForwardRef as ReactComponent };","var _style, _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgAurora(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    enableBackground: \"new 0 0 288 288\",\n    viewBox: \"0 0 288 288\",\n    xmlSpace: \"preserve\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\n\\t.st0{fill:#70D44B;}\\n\\t.st1{fill:#FFFFFF;}\\n\")), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"m144 0c79.5 0 144 64.5 144 144s-64.5 144-144 144-144-64.5-144-144 64.5-144 144-144z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"m144 58.8c7.6 0 14.5 4.3 17.9 11.1l56.2 112.5c4.9 9.9 0.9 21.9-9 26.8-2.8 1.4-5.8 2.1-8.9 2.1h-112.4c-11 0-20-9-20-20 0-3.1 0.7-6.2 2.1-8.9l56.2-112.5c3.4-6.9 10.3-11.2 17.9-11.1m0-13.8c-12.8 0-24.5 7.2-30.2 18.7l-56.2 112.5c-8.3 16.7-1.6 36.9 15.1 45.3 4.7 2.3 9.9 3.6 15.1 3.6h112.5c18.6 0 33.8-15.1 33.8-33.7 0-5.2-1.2-10.4-3.6-15.1l-56.3-112.6c-5.7-11.5-17.4-18.7-30.2-18.7z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgAurora);\nexport default __webpack_public_path__ + \"static/media/aurora.4367c8904ada068be8b2993caab6f0e3.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgAvax(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 254 254\",\n    style: {\n      enableBackground: \"new 0 0 254 254\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 127,\n    cy: 127,\n    r: 127,\n    style: {\n      fillRule: \"evenodd\",\n      clipRule: \"evenodd\",\n      fill: \"#e84142\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M171.8 130.3c4.4-7.6 11.5-7.6 15.9 0l27.4 48.1c4.4 7.6.8 13.8-8 13.8h-55.2c-8.7 0-12.3-6.2-8-13.8l27.9-48.1zm-53-92.6c4.4-7.6 11.4-7.6 15.8 0l6.1 11L155.1 74c3.5 7.2 3.5 15.7 0 22.9l-48.3 83.7c-4.4 6.8-11.7 11.1-19.8 11.6H46.9c-8.8 0-12.4-6.1-8-13.8l79.9-140.7z\",\n    style: {\n      fill: \"#fff\"\n    }\n  }));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgAvax);\nexport default __webpack_public_path__ + \"static/media/avax.1e98fe3597e8eaf3f1fbacc3013f2d2f.svg\";\nexport { ForwardRef as ReactComponent };","var _defs, _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgBnb(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 2500.01 2500\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", null, \".cls-1{fill:#f3ba2f}\"))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_2\",\n    \"data-name\": \"Layer 2\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_1-2\",\n    \"data-name\": \"Layer 1\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"cls-1\",\n    d: \"M764.48 1050.52 1250 565l485.75 485.73 282.5-282.5L1250 0 482 768l282.49 282.5M0 1250l282.51-282.55L565 1249.94l-282.51 282.51Zm764.48 199.51L1250 1935l485.74-485.72 282.65 282.35-.14.15L1250 2500l-768-768-.4-.4 282.91-282.12M1935 1250.12l282.51-282.51L2500 1250.1l-282.5 282.51Z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"cls-1\",\n    d: \"M1536.52 1249.85h.12L1250 963.19 1038.13 1175l-24.34 24.35-50.2 50.21-.4.39.4.41L1250 1536.81l286.66-286.66.14-.16-.26-.14\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgBnb);\nexport default __webpack_public_path__ + \"static/media/bnb.24513546440ec02f65084d000be7af0c.svg\";\nexport { ForwardRef as ReactComponent };","var _style, _path, _path2, _path3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCelo(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Celo_Rings\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 950 950\",\n    style: {\n      enableBackground: \"new 0 0 950 950\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), _style || (_style = /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\n\\t.st0{fill:#FBCC5C;}\\n\\t.st1{fill:#35D07F;}\\n\\t.st2{fill:#5EA33B;}\\n\")), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Artboard 1\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Bottom_Ring\",\n    className: \"st0\",\n    d: \"M375,850c151.9,0,275-123.1,275-275S526.9,300,375,300S100,423.1,100,575S223.1,850,375,850z  M375,950C167.9,950,0,782.1,0,575s167.9-375,375-375s375,167.9,375,375S582.1,950,375,950z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Top_Ring\",\n    className: \"st1\",\n    d: \"M575,650c151.9,0,275-123.1,275-275S726.9,100,575,100S300,223.1,300,375S423.1,650,575,650z  M575,750c-207.1,0-375-167.9-375-375S367.9,0,575,0s375,167.9,375,375S782.1,750,575,750z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Rings_Overlap\",\n    className: \"st2\",\n    d: \"M587.4,750c26-31.5,44.6-68.4,54.5-108.1c39.6-9.9,76.5-28.5,108.1-54.5 c-1.4,45.9-11.3,91.1-29.2,133.5C678.5,738.7,633.3,748.6,587.4,750z M308.1,308.1c-39.6,9.9-76.5,28.5-108.1,54.5 c1.4-45.9,11.3-91.1,29.2-133.4c42.3-17.8,87.6-27.7,133.4-29.2C336.6,231.5,318,268.4,308.1,308.1z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCelo);\nexport default __webpack_public_path__ + \"static/media/celo.4c9aaaf49dc42d67179ebd8cbc6bf21a.svg\";\nexport { ForwardRef as ReactComponent };","var _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgFantom(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", null, \".cls-1{fill:#fff;fill-rule:evenodd}\"), /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"mask\",\n    x: 10,\n    y: 6,\n    width: 93.1,\n    height: 20,\n    maskUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"cls-1\",\n    d: \"M10 6h93.1v20H10Z\",\n    id: \"a\"\n  })))), /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_2\",\n    \"data-name\": \"Layer 2\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_1-2\",\n    \"data-name\": \"Layer 1\"\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 16,\n    cy: 16,\n    r: 16,\n    style: {\n      fill: \"#13b5ec\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"cls-1\",\n    d: \"m17.2 12.9 3.6-2.1V15Zm3.6 9L16 24.7l-4.8-2.8V17l4.8 2.8 4.8-2.8Zm-9.6-11.1 3.6 2.1-3.6 2.1Zm5.4 3.1 3.6 2.1-3.6 2.1Zm-1.2 4.2L11.8 16l3.6-2.1Zm4.8-8.3L16 12.2l-4.2-2.4L16 7.3ZM10 9.4v13.1l6 3.4 6-3.4V9.4L16 6Z\",\n    style: {\n      mask: \"url(#mask)\"\n    }\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgFantom);\nexport default __webpack_public_path__ + \"static/media/fantom.9248a2ffc8ffd648deb33b2ae9f8a95a.svg\";\nexport { ForwardRef as ReactComponent };","var _style, _linearGradient, _path, _linearGradient2, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgKarura(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 32 32\",\n    xmlSpace: \"preserve\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", null, \".st0{fill:url(#path9_00000183207226421243246130000000649871513633350020_)}.st1{fill:url(#path11_00000111907511177103573740000007277726760468908191_)}\")), _linearGradient || (_linearGradient = /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"a\",\n    x1: 30.603,\n    x2: 9.067,\n    y1: 3.118,\n    y2: 26.527,\n    gradientTransform: \"matrix(1 0 0 -1 0 34)\",\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#E40C5B\",\n    offset: 0\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#FF4C3B\",\n    offset: 1\n  }))), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m22.1 2-8.6 7.8c-.9.8-2.1 1.3-3.3 1.3H7.6V2H3v26h2.5c1.4 0 2.7-.8 3.4-2 .5-.8.7-2.5.6-3.6-.1-2.5-.5-3.2-.5-3.2 0 1.8-1.8 1.9-1.8 1.9 1.3-1.2.6-2.2.6-2.2-2.3 1.6-2.9-.1-2.9-.3.1.1.7.6 2-1.1 1.3-1.8 3.1-4.8 4.2-5.6s2.2-.7 2.2-.7.6-.8 2.2-1.5 2.6.3 2.6.3c-1.6 1.3-3.9 3.5-4 6.6-.1 2.5 5.4 6.9 4.4 13.3.6-1.5.8-2.9.6-4.7-.2-1.5-1.1-4.5-1.1-4.5l5.2 7.2H29L17.7 12.4 29 2h-6.9z\",\n    fill: \"url(#a)\"\n  })), _linearGradient2 || (_linearGradient2 = /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"b\",\n    x1: 12.414,\n    x2: 10.889,\n    y1: 20.185,\n    y2: 21.855,\n    gradientTransform: \"matrix(1 0 0 -1 0 34)\",\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#E40C5B\",\n    offset: 0\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#FF4C3B\",\n    offset: 1\n  }))), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10.9 12.8c-.4.7-.4.9-.4.9s1.5-.2 1.9-2c-.1 0-1 .3-1.5 1.1z\",\n    fill: \"url(#b)\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgKarura);\nexport default __webpack_public_path__ + \"static/media/karura.0bf5aee4c43aaa67489224bedb70609b.svg\";\nexport { ForwardRef as ReactComponent };","var _style, _path, _path2, _path3, _path4;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgKlaytn(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"CIRCLE_OUTLINE_BLACK\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 512 512\",\n    style: {\n      enableBackground: \"new 0 0 512 512\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\n\\t.st0{fill:#BD072F;}\\n\\t.st1{fill:#FA4212;}\\n\\t.st2{fill:#FF8000;}\\n\\t.st3{fill:#B70C02;}\\n\")), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M254.8,288.1c53.9,53.8,107,106.8,160,159.7c-87.9,75.2-225.9,78.4-319.7-1.2 C148.5,393.7,201.7,340.9,254.8,288.1z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"M291.5,255.9c35.2-36.2,70.9-73.2,107-109.9c15-15.3,30.5-29.9,46.1-44.6c1.2-1.1,5.2-1.3,5.9-0.4 c27.4,36,47.8,75.3,53.2,120.8c8.2,69.4-7.7,132.6-51.3,188.1c-1.2,1.5-2.3,3.2-2.9,4.1C396.3,360.7,343.1,307.6,291.5,255.9z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st2\",\n    d: \"M139.1,337.8c5.9-15.6,11.9-31.2,17.8-46.8c24.5-64.5,49-129,73.5-193.4c7.7-20,16.4-39.7,24.3-59.7 c3-7.7,5.3-15.7,7.7-23.6c1.8-5.9,5.4-8.1,11.6-7.5c24.4,2.4,48.4,6.2,70.9,16.5c13,6,26.3,11.4,38.7,18.5 c10.1,5.8,18.9,13.7,30.1,22L140.7,339L139.1,337.8z\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st3\",\n    d: \"M200.2,47.7c-45.9,121.5-91.7,242.9-138.5,366.9c-8.8-13.4-17-24.7-23.9-36.7c-15.8-27.5-25.9-57.9-29.9-89.4 c-1.9-15-1.5-30.4-1.6-45.6c0-2.4,2.2-5.3,4.1-7.2C69.5,176.4,128.8,117.3,188,58.2c3.6-3.6,7.1-7.4,10.7-11.2L200.2,47.7z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgKlaytn);\nexport default __webpack_public_path__ + \"static/media/klaytn.5c570c72fc1acba8b9c7bf49e4b838c0.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgMoonbeam(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 200,\n    height: 200,\n    viewBox: \"0 0 200 200\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"logo-symbol\",\n    transform: \"translate(-83 -294)\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"Rectangle_37\",\n    \"data-name\": \"Rectangle 37\",\n    width: 200,\n    height: 200,\n    transform: \"translate(83 294)\",\n    fill: \"none\"\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    id: \"symbol\",\n    transform: \"translate(-224.332 64.165)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_185\",\n    \"data-name\": \"Path 185\",\n    d: \"M808.276,400.23A61.3,61.3,0,0,0,747,461.543h0c0,.043,0,.084,0,.128l0,.1a3.016,3.016,0,0,0,3.017,2.845H866.534a3.015,3.015,0,0,0,3.016-2.845l.005-.1c0-.044,0-.085,0-.128h0A61.3,61.3,0,0,0,808.276,400.23Z\",\n    transform: \"translate(-382.261 -154.395)\",\n    fill: \"#53cbc8\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_186\",\n    \"data-name\": \"Path 186\",\n    d: \"M673.015,617.7a3.729,3.729,0,1,1-3.73-3.732A3.73,3.73,0,0,1,673.015,617.7Z\",\n    transform: \"translate(-348.846 -242.095)\",\n    fill: \"#e1147b\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_187\",\n    \"data-name\": \"Path 187\",\n    d: \"M853.29,585.287H728.267a3.677,3.677,0,0,0-3.231,5.423c.02.039.041.078.062.116a3.668,3.668,0,0,0,3.232,1.924h124.9a3.669,3.669,0,0,0,3.232-1.924l.062-.116A3.678,3.678,0,0,0,853.29,585.287Z\",\n    transform: \"translate(-373.07 -230.326)\",\n    fill: \"#e1147b\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_188\",\n    \"data-name\": \"Path 188\",\n    d: \"M869.9,527.924H728.262a3.681,3.681,0,0,0-3.666,3.887c0,.039,0,.078.006.117a3.665,3.665,0,0,0,3.667,3.459H869.9a3.666,3.666,0,0,0,3.667-3.459c0-.039,0-.078.006-.117A3.681,3.681,0,0,0,869.9,527.924Z\",\n    transform: \"translate(-373.068 -206.789)\",\n    fill: \"#e1147b\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_189\",\n    \"data-name\": \"Path 189\",\n    d: \"M833.6,671.331H769.767a3.675,3.675,0,0,0-1.638,6.964l.234.117a3.657,3.657,0,0,0,1.637.382h63.364a3.662,3.662,0,0,0,1.638-.382l.233-.117A3.675,3.675,0,0,0,833.6,671.331Z\",\n    transform: \"translate(-390.097 -265.632)\",\n    fill: \"#e1147b\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_190\",\n    \"data-name\": \"Path 190\",\n    d: \"M899.737,642.649H835.906a3.676,3.676,0,0,0-1.637,6.964l.233.117a3.668,3.668,0,0,0,1.638.381H899.5a3.665,3.665,0,0,0,1.638-.381l.233-.117A3.676,3.676,0,0,0,899.737,642.649Z\",\n    transform: \"translate(-417.236 -253.863)\",\n    fill: \"#e1147b\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_191\",\n    \"data-name\": \"Path 191\",\n    d: \"M798.341,620.256l-.108-.116a3.674,3.674,0,0,1,2.694-6.173h103.6a3.674,3.674,0,0,1,2.694,6.173l-.108.116a3.7,3.7,0,0,1-2.693,1.174H801.034A3.7,3.7,0,0,1,798.341,620.256Z\",\n    transform: \"translate(-402.878 -242.095)\",\n    fill: \"#e1147b\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_192\",\n    \"data-name\": \"Path 192\",\n    d: \"M691.913,613.968h49.472a3.676,3.676,0,0,1,1.637,6.964l-.233.117a3.657,3.657,0,0,1-1.637.382h-49a3.658,3.658,0,0,1-1.638-.382l-.233-.117A3.676,3.676,0,0,1,691.913,613.968Z\",\n    transform: \"translate(-358.154 -242.095)\",\n    fill: \"#e1147b\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_193\",\n    \"data-name\": \"Path 193\",\n    d: \"M709.367,531.655a3.729,3.729,0,1,1-3.73-3.731A3.73,3.73,0,0,1,709.367,531.655Z\",\n    transform: \"translate(-363.763 -206.789)\",\n    fill: \"#e1147b\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_194\",\n    \"data-name\": \"Path 194\",\n    d: \"M786.534,561.345c.01-.038.02-.078.031-.116a3.672,3.672,0,0,0-3.549-4.622H679.4a3.671,3.671,0,0,0-3.549,4.622c.01.038.021.078.032.116a3.681,3.681,0,0,0,3.547,2.724H782.986a3.683,3.683,0,0,0,3.548-2.724\",\n    transform: \"translate(-353.019 -218.558)\",\n    fill: \"#e1147b\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_195\",\n    \"data-name\": \"Path 195\",\n    d: \"M660.5,560.337a3.729,3.729,0,1,1-3.729-3.731A3.731,3.731,0,0,1,660.5,560.337Z\",\n    transform: \"translate(-343.711 -218.558)\",\n    fill: \"#e1147b\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_196\",\n    \"data-name\": \"Path 196\",\n    d: \"M709.367,589.018a3.729,3.729,0,1,1-3.73-3.731A3.731,3.731,0,0,1,709.367,589.018Z\",\n    transform: \"translate(-363.763 -230.326)\",\n    fill: \"#e1147b\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_197\",\n    \"data-name\": \"Path 197\",\n    d: \"M817.008,646.381a3.729,3.729,0,1,1-3.73-3.731A3.73,3.73,0,0,1,817.008,646.381Z\",\n    transform: \"translate(-407.928 -253.863)\",\n    fill: \"#e1147b\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_198\",\n    \"data-name\": \"Path 198\",\n    d: \"M750.868,675.063a3.729,3.729,0,1,1-3.729-3.731A3.73,3.73,0,0,1,750.868,675.063Z\",\n    transform: \"translate(-380.79 -265.632)\",\n    fill: \"#e1147b\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgMoonbeam);\nexport default __webpack_public_path__ + \"static/media/moonbeam.d537e3282e2645ee2f1df9f7c3711f5a.svg\";\nexport { ForwardRef as ReactComponent };","var _style, _defs, _mask, _g, _defs2, _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgNeon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 30 30\",\n    style: {\n      enableBackground: \"new 0 0 30 30\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\n\\t.st0{fill:none;filter:url(#Adobe_OpacityMaskFilter);}\\n\\t.st1{mask:url(#mask0_768_1596_00000153695393871286289990000009587312287868146357_);}\\n\\t.st2{fill:#FFFFFF;}\\n\\t.st3{clip-path:url(#SVGID_00000161633858957043497690000011628612737190378161_);}\\n\\t.st4{fill:#FF86FF;}\\n\\t.st5{fill:#E200F1;}\\n\\t.st6{fill:#FF59FF;}\\n\\t.st7{fill:#F41AFA;}\\n\\t.st8{fill:#BC00DE;}\\n\\t.st9{fill:#9900CC;}\\n\")), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"Adobe_OpacityMaskFilter\",\n    filterUnits: \"userSpaceOnUse\",\n    x: -0.4,\n    y: 0,\n    width: 30.4,\n    height: 29.8\n  }, /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"\n  })))), _mask || (_mask = /*#__PURE__*/React.createElement(\"mask\", {\n    maskUnits: \"userSpaceOnUse\",\n    x: -0.4,\n    y: 0,\n    width: 30.4,\n    height: 29.8,\n    id: \"mask0_768_1596_00000153695393871286289990000009587312287868146357_\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M30,0H0v30h30V0z\"\n  }))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    className: \"st1\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    x: -0.4,\n    y: 0,\n    className: \"st2\",\n    width: 30.4,\n    height: 29.8\n  }))), /*#__PURE__*/React.createElement(\"g\", null, _defs2 || (_defs2 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"SVGID_1_\",\n    width: 30,\n    height: 30\n  }))), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"SVGID_00000096760210609691170410000007317984451683689893_\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#SVGID_1_\",\n    style: {\n      overflow: \"visible\"\n    }\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    style: {\n      clipPath: \"url(#SVGID_00000096760210609691170410000007317984451683689893_)\"\n    }\n  }, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st4\",\n    d: \"M12.8,14.1l-11-11v11H12.8z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st4\",\n    d: \"M1.5,0.3l14.1,14.1c0.2,0.2,0.3,0.4,0.3,0.6c0,0.2-0.1,0.5-0.3,0.6c-0.1,0.1-0.2,0.2-0.3,0.2 c-0.1,0-0.2,0.1-0.4,0.1H0.9c-0.1,0-0.2,0-0.3-0.1c-0.1,0-0.2-0.1-0.3-0.2c-0.1-0.1-0.2-0.2-0.2-0.3C0,15.2,0,15.1,0,15V0.9 c0-0.2,0.1-0.4,0.2-0.5c0.1-0.1,0.2-0.3,0.4-0.3C0.7,0,0.9,0,1.1,0C1.3,0.1,1.4,0.1,1.5,0.3z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st5\",\n    d: \"M17.2,15.9l11,11v-11H17.2z\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st5\",\n    d: \"M28.5,29.7L14.4,15.6c-0.2-0.2-0.3-0.4-0.3-0.6c0-0.2,0.1-0.5,0.3-0.6c0.1-0.1,0.2-0.2,0.3-0.2 c0.1,0,0.2-0.1,0.4-0.1h14.1c0.2,0,0.5,0.1,0.6,0.3c0.2,0.2,0.3,0.4,0.3,0.6v14.1c0,0.1,0,0.2-0.1,0.3c0,0.1-0.1,0.2-0.2,0.3 c-0.1,0.1-0.2,0.2-0.3,0.2c-0.1,0-0.2,0.1-0.3,0.1c-0.1,0-0.2,0-0.4-0.1C28.7,29.9,28.6,29.8,28.5,29.7\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st6\",\n    d: \"M15.6,15.6L1.5,29.7c-0.1,0.1-0.2,0.2-0.3,0.2C1.1,30,1,30,0.9,30c-0.1,0-0.2,0-0.3-0.1s-0.2-0.1-0.3-0.2 c-0.1-0.1-0.2-0.2-0.2-0.3C0,29.3,0,29.2,0,29.1V15c0-0.1,0-0.2,0.1-0.3c0-0.1,0.1-0.2,0.2-0.3c0.1-0.1,0.2-0.1,0.3-0.2 c0.1,0,0.2-0.1,0.3-0.1H15c0.2,0,0.4,0,0.5,0.1c0.2,0.1,0.3,0.2,0.3,0.4c0.1,0.2,0.1,0.3,0.1,0.5C15.9,15.3,15.8,15.5,15.6,15.6\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st6\",\n    d: \"M1.8,26.9l11-11h-11V26.9z\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st7\",\n    d: \"M0.3,28.5l14.1-14.1c0.1-0.1,0.2-0.2,0.3-0.2c0.1,0,0.2-0.1,0.4-0.1c0.2,0,0.5,0.1,0.6,0.3 c0.2,0.2,0.3,0.4,0.3,0.6v14.1c0,0.1,0,0.2-0.1,0.3c0,0.1-0.1,0.2-0.2,0.3c-0.1,0.1-0.2,0.2-0.3,0.2C15.3,30,15.1,30,15,30H0.9 c-0.1,0-0.2,0-0.3-0.1c-0.1,0-0.2-0.1-0.3-0.2c-0.1-0.1-0.2-0.2-0.2-0.3C0,29.3,0,29.2,0,29.1c0-0.1,0-0.2,0.1-0.3 C0.1,28.6,0.2,28.5,0.3,28.5z\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st7\",\n    d: \"M14.1,17.2l-11,11h11V17.2z\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st8\",\n    d: \"M14.4,14.4L28.5,0.3c0.1-0.1,0.2-0.2,0.3-0.2C28.9,0,29,0,29.1,0c0.1,0,0.2,0,0.3,0.1c0.1,0,0.2,0.1,0.3,0.2 s0.1,0.2,0.2,0.3S30,0.8,30,0.9V15c0,0.1,0,0.2-0.1,0.3s-0.1,0.2-0.2,0.3c-0.1,0.1-0.2,0.2-0.3,0.2s-0.2,0.1-0.3,0.1H15 c-0.2,0-0.4,0-0.5-0.1c-0.2-0.1-0.3-0.2-0.3-0.4c-0.1-0.2-0.1-0.3-0.1-0.5C14.1,14.7,14.2,14.5,14.4,14.4\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st8\",\n    d: \"M28.2,3.1l-11,11h11V3.1z\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st9\",\n    d: \"M29.7,1.5L15.6,15.6c-0.1,0.1-0.2,0.2-0.3,0.2c-0.1,0-0.2,0.1-0.4,0.1c-0.1,0-0.2,0-0.3-0.1 c-0.1,0-0.2-0.1-0.3-0.2c-0.1-0.1-0.2-0.2-0.2-0.3c0-0.1-0.1-0.2-0.1-0.3V0.9c0-0.1,0-0.2,0.1-0.3c0-0.1,0.1-0.2,0.2-0.3 c0.1-0.1,0.2-0.1,0.3-0.2C14.7,0,14.9,0,15,0h14.1c0.1,0,0.2,0,0.4,0.1c0.1,0,0.2,0.1,0.3,0.2C29.9,0.4,30,0.7,30,0.9 C30,1.1,29.9,1.4,29.7,1.5\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st9\",\n    d: \"M15.9,12.8l11-11h-11V12.8z\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgNeon);\nexport default __webpack_public_path__ + \"static/media/neon.c3f3c0c2eeecc7d724bfcce581d1b4bf.svg\";\nexport { ForwardRef as ReactComponent };","var _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgOasisNetworkRoseLogo(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 128 128\",\n    style: {\n      enableBackground: \"new 0 0 128 128\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"a\",\n    d: \"M0 0h128v128H0z\"\n  }))), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"b\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#a\",\n    style: {\n      overflow: \"visible\"\n    }\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    style: {\n      clipPath: \"url(#b)\"\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M115 25.4C105.3 13 91.1 5.1 75.4 5.1 45 5.1 22.7 33.4 22.7 64c0 21.3 14.2 37.3 29.9 37.3 1.5 0 2.9-.1 4.4-.4C46.4 93.2 39.7 79.2 39.7 64c0-24.2 16.4-43.1 35.7-43.1 21.1 0 35.7 20.9 35.7 43.1-.1 16.4-5.9 32.7-16.2 44.7-9 10.5-20.6 17.1-33.4 19.2 0 0 1.1.1 2.5.1 35.3 0 64-28.7 64-64 0-14.5-4.8-27.9-13-38.6zM105.3 64c0-21.3-14.2-37.3-29.9-37.3-1.5 0-2.9.1-4.4.4C81.6 34.8 88.3 48.8 88.3 64c0 24.2-16.4 43.1-35.7 43.1-21.1 0-35.7-20.9-35.7-43.1.1-16.4 5.9-32.7 16.2-44.7C42.1 8.8 53.7 2.2 66.5.1c0 0-1.1-.1-2.5-.1C28.7 0 0 28.7 0 64c0 14.5 4.8 27.9 13 38.6 9.7 12.4 23.9 20.2 39.6 20.2 30.4.1 52.7-28.2 52.7-58.8z\",\n    style: {\n      fillRule: \"evenodd\",\n      clipRule: \"evenodd\",\n      fill: \"#0089db\"\n    }\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgOasisNetworkRoseLogo);\nexport default __webpack_public_path__ + \"static/media/oasis-network-rose-logo.8f04dadd5b02ff48b835e789ad1c6dea.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgPolygon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 38.4 33.5\",\n    style: {\n      enableBackground: \"new 0 0 38.4 33.5\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M29 10.2c-.7-.4-1.6-.4-2.4 0L21 13.5l-3.8 2.1-5.5 3.3c-.7.4-1.6.4-2.4 0L5 16.3c-.7-.4-1.2-1.2-1.2-2.1v-5c0-.8.4-1.6 1.2-2.1l4.3-2.5c.7-.4 1.6-.4 2.4 0L16 7.2c.7.4 1.2 1.2 1.2 2.1v3.3l3.8-2.2V7c0-.8-.4-1.6-1.2-2.1l-8-4.7c-.7-.4-1.6-.4-2.4 0L1.2 5C.4 5.4 0 6.2 0 7v9.4c0 .8.4 1.6 1.2 2.1l8.1 4.7c.7.4 1.6.4 2.4 0l5.5-3.2 3.8-2.2 5.5-3.2c.7-.4 1.6-.4 2.4 0l4.3 2.5c.7.4 1.2 1.2 1.2 2.1v5c0 .8-.4 1.6-1.2 2.1L29 28.8c-.7.4-1.6.4-2.4 0l-4.3-2.5c-.7-.4-1.2-1.2-1.2-2.1V21l-3.8 2.2v3.3c0 .8.4 1.6 1.2 2.1l8.1 4.7c.7.4 1.6.4 2.4 0l8.1-4.7c.7-.4 1.2-1.2 1.2-2.1V17c0-.8-.4-1.6-1.2-2.1L29 10.2z\",\n    style: {\n      fill: \"#8247e5\"\n    }\n  }));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPolygon);\nexport default __webpack_public_path__ + \"static/media/polygon.49c728fd68de61ac611a454a5c6ceb2d.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgAptos(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"100%\",\n    height: \"100%\",\n    baseProfile: \"tiny\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 112 112\",\n    overflow: \"visible\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"white\",\n    d: \"M86.6 37.4h-9.9c-1.1 0-2.2-.5-3-1.3l-4-4.5c-1.2-1.3-3.1-1.4-4.5-.3l-.3.3-3.4 3.9c-1.1 1.3-2.8 2-4.5 2H2.9C1.4 41.9.4 46.6 0 51.3h51.2c.9 0 1.8-.4 2.4-1l4.8-5c.6-.6 1.4-1 2.3-1h.2c.9 0 1.8.4 2.4 1.1l4 4.5c.8.9 1.9 1.4 3 1.4H112c-.4-4.7-1.4-9.4-2.9-13.8H86.6zM53.8 65l-4-4.5c-1.2-1.3-3.1-1.4-4.5-.3l-.3.3-3.5 3.9c-1.1 1.3-2.7 2-4.4 2H.8c.9 4.8 2.5 9.5 4.6 14h25.5c.9 0 1.7-.4 2.4-1l4.8-5c.6-.6 1.4-1 2.3-1h.2c.9 0 1.8.4 2.4 1.1l4 4.5c.8.9 1.9 1.4 3 1.4h56.6c2.1-4.4 3.7-9.1 4.6-14H56.8c-1.2 0-2.3-.5-3-1.4zm19.6-43.6 4.8-5c.6-.6 1.4-1 2.3-1h.2c.9 0 1.8.4 2.4 1l4 4.5c.8.9 1.9 1.3 3 1.3h10.8c-18.8-24.8-54.1-29.7-79-11-4.1 3.1-7.8 6.8-11 11H71c1 .2 1.8-.2 2.4-.8zM34.7 94.2c-1.2 0-2.3-.5-3-1.3l-4-4.5c-1.2-1.3-3.2-1.4-4.5-.2l-.2.2-3.5 3.9c-1.1 1.3-2.7 2-4.4 2h-.2C36 116.9 71.7 118 94.4 96.7c.9-.8 1.7-1.7 2.6-2.6H34.7z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgAptos);\nexport default __webpack_public_path__ + \"static/media/aptos.19d0eda7068d07106473e6218dc2ae3e.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgSui(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 160,\n    height: 160,\n    viewBox: \"0 0 110 160\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M7.44427 132.216C17.37 149.615 35.1486 160 55 160C74.8514 160 92.6267 149.615 102.556 132.216C112.481 114.822 112.481 94.0509 102.556 76.6528L60.7295 3.34723C58.183 -1.11575 51.817 -1.11574 49.2705 3.34724L7.44427 76.6528C-2.48142 94.0475 -2.48142 114.818 7.44427 132.216ZM43.2175 38.2219L52.1352 22.592C53.4085 20.3604 56.5916 20.3604 57.8648 22.592L92.172 82.7217C98.4749 93.7681 99.658 106.553 95.7213 118.253C95.3113 116.344 94.7385 114.391 93.9661 112.418C89.2273 100.317 78.5124 90.979 62.113 84.6613C50.8379 80.3336 43.641 73.9686 40.7166 65.7422C36.9499 55.1391 40.8841 43.5766 43.2175 38.2219ZM28.0112 64.8737L17.828 82.7217C10.0686 96.3208 10.0686 112.555 17.828 126.154C25.5873 139.754 39.4813 147.869 55 147.869C65.3072 147.869 74.9003 144.286 82.4542 137.894C83.4394 135.385 86.4901 126.198 82.7212 116.729C79.2401 107.986 70.8627 101.006 57.8203 95.979C43.0776 90.3201 33.4995 81.4856 29.3577 69.7287C28.7872 68.11 28.344 66.4879 28.0112 64.8737Z\",\n    fill: \"#6FBCF0\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSui);\nexport default __webpack_public_path__ + \"static/media/sui.62d8b0c8e433d8317e0cbf12a08e04b7.svg\";\nexport { ForwardRef as ReactComponent };","import { Algodv2 } from \"algosdk\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { ALGORAND_HOST, ALGO_DECIMALS } from \"../utils/consts\";\n\nexport type AlgoMetadata = {\n  symbol?: string;\n  tokenName?: string;\n  decimals: number;\n};\n\nexport const fetchSingleMetadata = async (\n  address: string,\n  algodClient: Algodv2\n): Promise<AlgoMetadata> => {\n  const assetId = parseInt(address);\n  if (assetId === 0) {\n    return {\n      tokenName: \"Algo\",\n      symbol: \"ALGO\",\n      decimals: ALGO_DECIMALS,\n    };\n  }\n  const assetInfo = await algodClient.getAssetByID(assetId).do();\n  return {\n    tokenName: assetInfo.params.name,\n    symbol: assetInfo.params[\"unit-name\"],\n    decimals: assetInfo.params.decimals,\n  };\n};\n\nconst fetchAlgoMetadata = async (addresses: string[]) => {\n  const algodClient = new Algodv2(\n    ALGORAND_HOST.algodToken,\n    ALGORAND_HOST.algodServer,\n    ALGORAND_HOST.algodPort\n  );\n  const promises: Promise<AlgoMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, algodClient));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, AlgoMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nfunction useAlgoMetadata(\n  addresses: string[]\n): DataWrapper<Map<string, AlgoMetadata>> {\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, AlgoMetadata> | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (addresses.length) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchAlgoMetadata(addresses).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n}\n\nexport default useAlgoMetadata;\n","import {\n  ChainId,\n  CHAIN_ID_ACALA,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_AURORA,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_CELO,\n  CHAIN_ID_ETH,\n  CHAIN_ID_FANTOM,\n  CHAIN_ID_KARURA,\n  CHAIN_ID_KLAYTN,\n  CHAIN_ID_MOONBEAM,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_NEON,\n  CHAIN_ID_OASIS,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_XPLA,\n  isEVMChain,\n  isTerraChain,\n  ethers_contracts,\n  WSOL_ADDRESS,\n  WSOL_DECIMALS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_SUI,\n  CHAIN_ID_ARBITRUM,\n} from \"@certusone/wormhole-sdk\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { Algodv2 } from \"algosdk\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useAlgorandWallet } from \"../contexts/AlgorandWalletContext\";\nimport { useAptosContext } from \"../contexts/AptosWalletContext\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { useNearContext } from \"../contexts/NearWalletContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport acalaIcon from \"../icons/acala.svg\";\nimport arbitrumIcon from \"../icons/arbitrum.svg\";\nimport auroraIcon from \"../icons/aurora.svg\";\nimport avaxIcon from \"../icons/avax.svg\";\nimport bnbIcon from \"../icons/bnb.svg\";\nimport celoIcon from \"../icons/celo.svg\";\nimport ethIcon from \"../icons/eth.svg\";\nimport fantomIcon from \"../icons/fantom.svg\";\nimport karuraIcon from \"../icons/karura.svg\";\nimport klaytnIcon from \"../icons/klaytn.svg\";\nimport moonbeamIcon from \"../icons/moonbeam.svg\";\nimport neonIcon from \"../icons/neon.svg\";\nimport oasisIcon from \"../icons/oasis-network-rose-logo.svg\";\nimport polygonIcon from \"../icons/polygon.svg\";\nimport aptosIcon from \"../icons/aptos.svg\";\nimport suiIcon from \"../icons/sui.svg\";\nimport {\n  errorSourceParsedTokenAccounts as errorSourceParsedTokenAccountsNFT,\n  fetchSourceParsedTokenAccounts as fetchSourceParsedTokenAccountsNFT,\n  NFTParsedTokenAccount,\n  receiveSourceParsedTokenAccounts as receiveSourceParsedTokenAccountsNFT,\n  setSourceParsedTokenAccount as setSourceParsedTokenAccountNFT,\n  setSourceParsedTokenAccounts as setSourceParsedTokenAccountsNFT,\n  setSourceWalletAddress as setSourceWalletAddressNFT,\n} from \"../store/nftSlice\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccounts,\n  selectNFTSourceWalletAddress,\n  selectSourceWalletAddress,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccounts,\n} from \"../store/selectors\";\nimport {\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  ParsedTokenAccount,\n  receiveSourceParsedTokenAccounts,\n  setAmount,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  setSourceWalletAddress,\n} from \"../store/transferSlice\";\nimport { fetchCurrentTokens, getAptosClient } from \"../utils/aptos\";\nimport {\n  ACA_ADDRESS,\n  ACA_DECIMALS,\n  ALGORAND_HOST,\n  ALGO_DECIMALS,\n  APTOS_NATIVE_TOKEN_KEY,\n  BLOCKSCOUT_GET_TOKENS_URL,\n  CELO_ADDRESS,\n  CELO_DECIMALS,\n  COVALENT_GET_TOKENS_URL,\n  getDefaultNativeCurrencyAddressEvm,\n  KAR_ADDRESS,\n  KAR_DECIMALS,\n  logoOverrides,\n  NATIVE_NEAR_DECIMALS,\n  NATIVE_NEAR_PLACEHOLDER,\n  SOLANA_HOST,\n  WAVAX_ADDRESS,\n  WAVAX_DECIMALS,\n  WBNB_ADDRESS,\n  WBNB_DECIMALS,\n  WETH_ADDRESS,\n  WETH_AURORA_ADDRESS,\n  WETH_AURORA_DECIMALS,\n  WETH_DECIMALS,\n  WFTM_ADDRESS,\n  WFTM_DECIMALS,\n  WGLMR_ADDRESS,\n  WGLMR_DECIMALS,\n  WKLAY_ADDRESS,\n  WKLAY_DECIMALS,\n  WMATIC_ADDRESS,\n  WMATIC_DECIMALS,\n  WNEON_ADDRESS,\n  WNEON_DECIMALS,\n  WROSE_ADDRESS,\n  WROSE_DECIMALS,\n  CLUSTER,\n  SUI_NATIVE_TOKEN_KEY,\n  ARBWETH_ADDRESS,\n  ARBWETH_DECIMALS,\n} from \"../utils/consts\";\nimport { makeNearAccount } from \"../utils/near\";\nimport {\n  ExtractedMintInfo,\n  extractMintInfo,\n  getMultipleAccountsRPC,\n} from \"../utils/solana\";\nimport { fetchSingleMetadata as fetchSingleMetadataAlgo } from \"./useAlgoMetadata\";\nimport { AptosCoinResourceReturn } from \"./useAptosMetadata\";\nimport { TokenClient, TokenTypes } from \"aptos\";\nimport { getSuiProvider } from \"../utils/sui\";\nimport { useSuiWallet } from \"../contexts/SuiWalletContext\";\n\nexport function createParsedTokenAccount(\n  publicKey: string,\n  mintKey: string,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n  uiAmountString: string,\n  symbol?: string,\n  name?: string,\n  logo?: string,\n  isNativeAsset?: boolean\n): ParsedTokenAccount {\n  return {\n    publicKey: publicKey,\n    mintKey: mintKey,\n    amount,\n    decimals,\n    uiAmount,\n    uiAmountString,\n    symbol,\n    name,\n    logo,\n    isNativeAsset,\n  };\n}\n\nexport function createNFTParsedTokenAccount(\n  publicKey: string,\n  mintKey: string,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n  uiAmountString: string,\n  tokenId: string,\n  symbol?: string,\n  name?: string,\n  uri?: string,\n  animation_url?: string,\n  external_url?: string,\n  image?: string,\n  image_256?: string,\n  nftName?: string,\n  aptosTokenId?: TokenTypes.TokenId\n): NFTParsedTokenAccount {\n  return {\n    publicKey,\n    mintKey,\n    amount,\n    decimals,\n    uiAmount,\n    uiAmountString,\n    tokenId,\n    uri,\n    animation_url,\n    external_url,\n    image,\n    image_256,\n    symbol,\n    name,\n    nftName,\n    aptosTokenId,\n  };\n}\n\nconst createParsedTokenAccountFromInfo = (\n  pubkey: PublicKey,\n  item: AccountInfo<ParsedAccountData>\n): ParsedTokenAccount => {\n  return {\n    publicKey: pubkey?.toString(),\n    mintKey: item.data.parsed?.info?.mint?.toString(),\n    amount: item.data.parsed?.info?.tokenAmount?.amount,\n    decimals: item.data.parsed?.info?.tokenAmount?.decimals,\n    uiAmount: item.data.parsed?.info?.tokenAmount?.uiAmount,\n    uiAmountString: item.data.parsed?.info?.tokenAmount?.uiAmountString,\n  };\n};\n\nconst createParsedTokenAccountFromCovalent = (\n  walletAddress: string,\n  covalent: CovalentData\n): ParsedTokenAccount => {\n  return {\n    publicKey: walletAddress,\n    mintKey: covalent.contract_address,\n    amount: covalent.balance,\n    decimals: covalent.contract_decimals,\n    uiAmount: Number(formatUnits(covalent.balance, covalent.contract_decimals)),\n    uiAmountString: formatUnits(covalent.balance, covalent.contract_decimals),\n    symbol: covalent.contract_ticker_symbol,\n    name: covalent.contract_name,\n    logo: logoOverrides.get(covalent.contract_address) || covalent.logo_url,\n  };\n};\n\nconst createNativeSolParsedTokenAccount = async (\n  connection: Connection,\n  walletAddress: string\n) => {\n  // const walletAddress = \"H69q3Q8E74xm7swmMQpsJLVp2Q9JuBwBbxraAMX5Drzm\" // known solana mainnet wallet with tokens\n  const fetchAccounts = await getMultipleAccountsRPC(connection, [\n    new PublicKey(walletAddress),\n  ]);\n  if (!fetchAccounts || !fetchAccounts.length || !fetchAccounts[0]) {\n    return null;\n  } else {\n    return createParsedTokenAccount(\n      walletAddress, //publicKey\n      WSOL_ADDRESS, //Mint key\n      fetchAccounts[0].lamports.toString(), //amount\n      WSOL_DECIMALS, //decimals, 9\n      parseFloat(formatUnits(fetchAccounts[0].lamports, WSOL_DECIMALS)),\n      formatUnits(fetchAccounts[0].lamports, WSOL_DECIMALS).toString(),\n      \"DJTX\",\n      \"Dijets\",\n      undefined, //TODO logo. It's in the solana token map, so we could potentially use that URL.\n      true\n    );\n  }\n};\n\nconst createNativeEthParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WETH_ADDRESS, //Mint key, On the other side this will be WETH, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WETH_DECIMALS, //Luckily both ETH and WETH have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ETH\", //A white lie for display purposes\n          \"Ethereum\", //A white lie for display purposes\n          ethIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeBscParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WBNB_ADDRESS, //Mint key, On the other side this will be WBNB, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WBNB_DECIMALS, //Luckily both BNB and WBNB have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"BNB\", //A white lie for display purposes\n          \"Binance Coin\", //A white lie for display purposes\n          bnbIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativePolygonParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WMATIC_ADDRESS, //Mint key, On the other side this will be WMATIC, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WMATIC_DECIMALS, //Luckily both MATIC and WMATIC have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"MATIC\", //A white lie for display purposes\n          \"Matic\", //A white lie for display purposes\n          polygonIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeAvaxParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WAVAX_ADDRESS, //Mint key, On the other side this will be wavax, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WAVAX_DECIMALS,\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"AVAX\", //A white lie for display purposes\n          \"Avalanche\", //A white lie for display purposes\n          avaxIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeOasisParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WROSE_ADDRESS, //Mint key, On the other side this will be wavax, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WROSE_DECIMALS,\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ROSE\", //A white lie for display purposes\n          \"Rose\", //A white lie for display purposes\n          oasisIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeAuroraParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WETH_AURORA_ADDRESS, //Mint key, On the other side this will be wavax, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WETH_AURORA_DECIMALS,\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ETH\", //A white lie for display purposes\n          \"Aurora ETH\", //A white lie for display purposes\n          auroraIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeFantomParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WFTM_ADDRESS, //Mint key, On the other side this will be wavax, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WFTM_DECIMALS,\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"FTM\", //A white lie for display purposes\n          \"Fantom\", //A white lie for display purposes\n          fantomIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeKaruraParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : ethers_contracts.TokenImplementation__factory.connect(\n        KAR_ADDRESS,\n        provider\n      )\n        .balanceOf(signerAddress)\n        .then((balance) => {\n          const balanceInEth = ethers.utils.formatUnits(balance, KAR_DECIMALS);\n          return createParsedTokenAccount(\n            signerAddress, //public key\n            KAR_ADDRESS, //Mint key, On the other side this will be wavax, so this is hopefully a white lie.\n            balance.toString(), //amount, in wei\n            KAR_DECIMALS,\n            parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n            balanceInEth.toString(), //This is the actual display field, which has full precision.\n            \"KAR\", //A white lie for display purposes\n            \"KAR\", //A white lie for display purposes\n            karuraIcon,\n            false //isNativeAsset\n          );\n        });\n};\n\nconst createNativeAcalaParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : ethers_contracts.TokenImplementation__factory.connect(\n        ACA_ADDRESS,\n        provider\n      )\n        .balanceOf(signerAddress)\n        .then((balance) => {\n          const balanceInEth = ethers.utils.formatUnits(balance, ACA_DECIMALS);\n          return createParsedTokenAccount(\n            signerAddress, //public key\n            ACA_ADDRESS, //Mint key, On the other side this will be wavax, so this is hopefully a white lie.\n            balance.toString(), //amount, in wei\n            ACA_DECIMALS,\n            parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n            balanceInEth.toString(), //This is the actual display field, which has full precision.\n            \"ACA\", //A white lie for display purposes\n            \"ACA\", //A white lie for display purposes\n            acalaIcon,\n            false //isNativeAsset\n          );\n        });\n};\n\nconst createNativeKlaytnParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WKLAY_ADDRESS, //Mint key, On the other side this will be wklay, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WKLAY_DECIMALS,\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"KLAY\", //A white lie for display purposes\n          \"KLAY\", //A white lie for display purposes\n          klaytnIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeCeloParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  // Celo has a \"native asset\" ERC-20\n  // https://docs.celo.org/developer-guide/celo-for-eth-devs\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : ethers_contracts.TokenImplementation__factory.connect(\n        CELO_ADDRESS,\n        provider\n      )\n        .balanceOf(signerAddress)\n        .then((balance) => {\n          const balanceInEth = ethers.utils.formatUnits(balance, CELO_DECIMALS);\n          return createParsedTokenAccount(\n            signerAddress, //public key\n            CELO_ADDRESS, //Mint key, On the other side this will be wavax, so this is hopefully a white lie.\n            balance.toString(), //amount, in wei\n            CELO_DECIMALS,\n            parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n            balanceInEth.toString(), //This is the actual display field, which has full precision.\n            \"CELO\", //A white lie for display purposes\n            \"CELO\", //A white lie for display purposes\n            celoIcon,\n            false //isNativeAsset\n          );\n        });\n};\n\nconst createNativeNeonParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WNEON_ADDRESS, //Mint key, On the other side this will be wneon, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WNEON_DECIMALS,\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"NEON\", //A white lie for display purposes\n          \"NEON\", //A white lie for display purposes\n          neonIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeMoonbeamParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WGLMR_ADDRESS, //Mint key, On the other side this will be wneon, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WGLMR_DECIMALS,\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"GLMR\", //A white lie for display purposes\n          \"GLMR\", //A white lie for display purposes\n          moonbeamIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeArbitrumParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          ARBWETH_ADDRESS, //Mint key, On the other side this will be wneon, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          ARBWETH_DECIMALS,\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"arbETH\", //A white lie for display purposes\n          \"arbEth\", //A white lie for display purposes\n          arbitrumIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNFTParsedTokenAccountFromCovalent = (\n  walletAddress: string,\n  covalent: CovalentData,\n  nft_data: CovalentNFTData\n): NFTParsedTokenAccount => {\n  return {\n    publicKey: walletAddress,\n    mintKey: covalent.contract_address,\n    amount: nft_data.token_balance,\n    decimals: covalent.contract_decimals,\n    uiAmount: Number(\n      formatUnits(nft_data.token_balance, covalent.contract_decimals)\n    ),\n    uiAmountString: formatUnits(\n      nft_data.token_balance,\n      covalent.contract_decimals\n    ),\n    symbol: covalent.contract_ticker_symbol,\n    name: covalent.contract_name,\n    logo: covalent.logo_url,\n    tokenId: nft_data.token_id,\n    uri: nft_data.token_url,\n    animation_url: nft_data.external_data.animation_url,\n    external_url: nft_data.external_data.external_url,\n    image: nft_data.external_data.image,\n    image_256: nft_data.external_data.image_256,\n    nftName: nft_data.external_data.name,\n    description: nft_data.external_data.description,\n  };\n};\n\nexport type CovalentData = {\n  contract_decimals: number;\n  contract_ticker_symbol: string;\n  contract_name: string;\n  contract_address: string;\n  logo_url: string | undefined;\n  balance: string;\n  quote: number | undefined;\n  quote_rate: number | undefined;\n  nft_data?: CovalentNFTData[];\n};\n\nexport type CovalentNFTExternalData = {\n  animation_url: string | null;\n  external_url: string | null;\n  image: string;\n  image_256: string;\n  name: string;\n  description: string;\n};\n\nexport type CovalentNFTData = {\n  token_id: string;\n  token_balance: string;\n  external_data: CovalentNFTExternalData;\n  token_url: string;\n};\n\nconst getEthereumAccountsCovalent = async (\n  url: string,\n  nft: boolean,\n  chainId: ChainId\n): Promise<CovalentData[]> => {\n  try {\n    const output = [] as CovalentData[];\n    const response = await axios.get(url);\n    const tokens = response.data.data.items;\n\n    if (tokens instanceof Array && tokens.length) {\n      for (const item of tokens) {\n        // TODO: filter?\n        if (\n          item.contract_decimals !== undefined &&\n          item.contract_address &&\n          item.contract_address.toLowerCase() !==\n            getDefaultNativeCurrencyAddressEvm(chainId).toLowerCase() && // native balance comes from querying token bridge\n          item.balance &&\n          item.balance !== \"0\" &&\n          (nft\n            ? item.supports_erc?.includes(\"erc721\")\n            : item.supports_erc?.includes(\"erc20\"))\n        ) {\n          output.push({ ...item } as CovalentData);\n        }\n      }\n    }\n\n    return output;\n  } catch (error) {\n    return Promise.reject(\"Unable to retrieve your Ethereum Tokens.\");\n  }\n};\n\nexport const getEthereumAccountsBlockscout = async (\n  url: string,\n  nft: boolean,\n  chainId: ChainId\n): Promise<CovalentData[]> => {\n  try {\n    const output = [] as CovalentData[];\n    const response = await axios.get(url);\n    const tokens = response.data.result;\n\n    if (tokens instanceof Array && tokens.length) {\n      for (const item of tokens) {\n        if (\n          item.decimals !== undefined &&\n          item.contractAddress &&\n          item.contractAddress.toLowerCase() !==\n            getDefaultNativeCurrencyAddressEvm(chainId).toLowerCase() && // native balance comes from querying token bridge\n          item.balance &&\n          item.balance !== \"0\" &&\n          (nft ? item.type?.includes(\"ERC-721\") : item.type?.includes(\"ERC-20\"))\n        ) {\n          output.push({\n            contract_decimals: item.decimals,\n            contract_address: item.contractAddress,\n            balance: item.balance,\n            contract_ticker_symbol: item.symbol,\n            contract_name: item.name,\n            logo_url: \"\",\n            quote: 0,\n            quote_rate: 0,\n          });\n        }\n      }\n    }\n\n    return output;\n  } catch (error) {\n    return Promise.reject(\"Unable to retrieve your Ethereum Tokens.\");\n  }\n};\n\nconst getSolanaParsedTokenAccounts = async (\n  walletAddress: string,\n  dispatch: Dispatch,\n  nft: boolean\n) => {\n  const connection = new Connection(SOLANA_HOST, \"confirmed\");\n  dispatch(\n    nft ? fetchSourceParsedTokenAccountsNFT() : fetchSourceParsedTokenAccounts()\n  );\n  try {\n    //No matter what, we retrieve the spl tokens associated to this address.\n    let splParsedTokenAccounts = await connection\n      .getParsedTokenAccountsByOwner(new PublicKey(walletAddress), {\n        programId: new PublicKey(TOKEN_PROGRAM_ID),\n      })\n      .then((result) => {\n        return result.value.map((item) =>\n          createParsedTokenAccountFromInfo(item.pubkey, item.account)\n        );\n      });\n\n    // uncomment to test token account in picker, useful for debugging\n    // splParsedTokenAccounts.push({\n    //   amount: \"1\",\n    //   decimals: 8,\n    //   mintKey: \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n    //   publicKey: \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n    //   uiAmount: 1,\n    //   uiAmountString: \"1\",\n    //   isNativeAsset: false,\n    // });\n\n    if (nft) {\n      //In the case of NFTs, we are done, and we set the accounts in redux\n      dispatch(receiveSourceParsedTokenAccountsNFT(splParsedTokenAccounts));\n    } else {\n      //In the transfer case, we also pull the SOL balance of the wallet, and prepend it at the beginning of the list.\n      const nativeAccount = await createNativeSolParsedTokenAccount(\n        connection,\n        walletAddress\n      );\n      if (nativeAccount !== null) {\n        splParsedTokenAccounts.unshift(nativeAccount);\n      }\n      dispatch(receiveSourceParsedTokenAccounts(splParsedTokenAccounts));\n    }\n  } catch (e) {\n    console.error(e);\n    dispatch(\n      nft\n        ? errorSourceParsedTokenAccountsNFT(\"Failed to load NFT metadata\")\n        : errorSourceParsedTokenAccounts(\"Failed to load token metadata.\")\n    );\n  }\n};\n\nconst getAlgorandParsedTokenAccounts = async (\n  walletAddress: string,\n  dispatch: Dispatch,\n  nft: boolean\n) => {\n  dispatch(\n    nft ? fetchSourceParsedTokenAccountsNFT() : fetchSourceParsedTokenAccounts()\n  );\n  try {\n    const algodClient = new Algodv2(\n      ALGORAND_HOST.algodToken,\n      ALGORAND_HOST.algodServer,\n      ALGORAND_HOST.algodPort\n    );\n    const accountInfo = await algodClient\n      .accountInformation(walletAddress)\n      .do();\n    const parsedTokenAccounts: ParsedTokenAccount[] = [];\n    for (const asset of accountInfo.assets) {\n      const assetId = asset[\"asset-id\"];\n      const amount = asset.amount;\n      try {\n        const metadata = await fetchSingleMetadataAlgo(assetId, algodClient);\n        const isNFT: boolean = amount === 1 && metadata.decimals === 0;\n        if (((nft && isNFT) || (!nft && !isNFT)) && amount > 0) {\n          parsedTokenAccounts.push(\n            createParsedTokenAccount(\n              walletAddress,\n              assetId.toString(),\n              amount,\n              metadata.decimals,\n              parseFloat(formatUnits(amount, metadata.decimals)),\n              formatUnits(amount, metadata.decimals).toString(),\n              metadata.symbol,\n              metadata.tokenName,\n              undefined,\n              false\n            )\n          );\n        }\n      } catch (e) {\n        console.error(`Failed to fetch metadata for Algorand asset ${assetId}`);\n      }\n    }\n    if (nft) {\n      dispatch(receiveSourceParsedTokenAccountsNFT(parsedTokenAccounts));\n      return;\n    }\n    // The ALGOs account is prepended for the non NFT case\n    parsedTokenAccounts.unshift(\n      createParsedTokenAccount(\n        walletAddress, //publicKey\n        \"0\", //asset ID\n        accountInfo.amount, //amount\n        ALGO_DECIMALS,\n        parseFloat(formatUnits(accountInfo.amount, ALGO_DECIMALS)),\n        formatUnits(accountInfo.amount, ALGO_DECIMALS).toString(),\n        \"ALGO\",\n        \"Algo\",\n        undefined, //TODO logo\n        true\n      )\n    );\n    dispatch(receiveSourceParsedTokenAccounts(parsedTokenAccounts));\n  } catch (e) {\n    console.error(e);\n    dispatch(\n      nft\n        ? errorSourceParsedTokenAccountsNFT(\"Failed to load NFT metadata\")\n        : errorSourceParsedTokenAccounts(\"Failed to load token metadata.\")\n    );\n  }\n};\n\nconst getNearParsedTokenAccounts = async (\n  walletAddress: string,\n  dispatch: Dispatch,\n  nft: boolean\n) => {\n  dispatch(\n    nft ? fetchSourceParsedTokenAccountsNFT() : fetchSourceParsedTokenAccounts()\n  );\n  try {\n    if (nft) {\n      dispatch(receiveSourceParsedTokenAccountsNFT([]));\n      return;\n    }\n    const account = await makeNearAccount(walletAddress);\n    const balance = await account.getAccountBalance();\n    const nativeNear = createParsedTokenAccount(\n      walletAddress, //publicKey\n      NATIVE_NEAR_PLACEHOLDER, //the app doesn't like when this isn't truthy\n      balance.available, //amount\n      NATIVE_NEAR_DECIMALS,\n      parseFloat(formatUnits(balance.available, NATIVE_NEAR_DECIMALS)),\n      formatUnits(balance.available, NATIVE_NEAR_DECIMALS).toString(),\n      \"NEAR\",\n      \"Near\",\n      undefined, //TODO logo\n      true\n    );\n    dispatch(receiveSourceParsedTokenAccounts([nativeNear]));\n  } catch (e) {\n    console.error(e);\n    dispatch(\n      nft\n        ? errorSourceParsedTokenAccountsNFT(\"Failed to load NFT metadata\")\n        : errorSourceParsedTokenAccounts(\"Failed to load token metadata.\")\n    );\n  }\n};\n\nconst getAptosParsedTokenAccounts = async (\n  walletAddress: string,\n  dispatch: Dispatch,\n  nft: boolean\n) => {\n  dispatch(\n    nft ? fetchSourceParsedTokenAccountsNFT() : fetchSourceParsedTokenAccounts()\n  );\n  try {\n    if (nft) {\n      // there is no aptos indexing service in devnet\n      const parsedTokenAccountsNFT: NFTParsedTokenAccount[] = [];\n      if (CLUSTER === \"devnet\") {\n        const client = getAptosClient();\n        const tokenStore = await client.getAccountResource(\n          walletAddress,\n          \"0x3::token::TokenStore\"\n        );\n        if (tokenStore) {\n          // @ts-ignore\n          const counter = parseInt(tokenStore.data.deposit_events.counter);\n          const events = await client.getEventsByEventHandle(\n            walletAddress,\n            \"0x3::token::TokenStore\",\n            \"deposit_events\",\n            {\n              // TODO: pagination\n              limit: counter,\n            }\n          );\n          const ids = [...new Set(events.map((event) => event.data.id))];\n          const data: TokenTypes.Token[] = [];\n          const tokenClient = new TokenClient(client);\n          await Promise.all(\n            ids.map(async (id) => {\n              const token = await tokenClient.getTokenForAccount(\n                walletAddress,\n                id\n              );\n              if (token) {\n                data.push(token);\n              }\n            })\n          );\n          const result = data.filter((token) => {\n            return token.amount !== \"0\";\n          });\n          const final = result.filter(\n            (value, index) =>\n              index ===\n              result.findIndex(\n                (t) => t.id.token_data_id.name === value.id.token_data_id.name\n              )\n          );\n          final.sort((a, b) =>\n            a.id.token_data_id.name.localeCompare(b.id.token_data_id.name)\n          );\n          parsedTokenAccountsNFT.push(\n            ...(await Promise.all(\n              final.map(async (token) => {\n                const { creator, collection, name } = token.id.token_data_id;\n                const tokenData = await tokenClient.getTokenData(\n                  creator,\n                  collection,\n                  name\n                );\n                return createNFTParsedTokenAccount(\n                  walletAddress,\n                  creator,\n                  token.amount,\n                  0,\n                  Number(token.amount),\n                  token.amount,\n                  name,\n                  collection,\n                  undefined,\n                  tokenData.uri,\n                  undefined,\n                  undefined,\n                  undefined,\n                  undefined,\n                  undefined,\n                  token.id\n                );\n              })\n            ))\n          );\n        }\n      } else {\n        let offset = 0;\n        const limit = 100;\n        while (true) {\n          const tokens = await fetchCurrentTokens(walletAddress, offset, limit);\n          tokens.data.current_token_ownerships.forEach((token) => {\n            parsedTokenAccountsNFT.push(\n              createNFTParsedTokenAccount(\n                walletAddress,\n                token.token_data_id_hash,\n                \"1\",\n                0,\n                1,\n                \"1\",\n                token.name,\n                token.collection_name,\n                undefined,\n                token.current_token_data.metadata_uri,\n                undefined,\n                undefined,\n                undefined,\n                undefined,\n                undefined,\n                {\n                  token_data_id: {\n                    creator: token.creator_address,\n                    collection: token.collection_name,\n                    name: token.name,\n                  },\n                  property_version: token.property_version.toString(),\n                }\n              )\n            );\n          });\n          if (tokens.data.current_token_ownerships.length < limit) {\n            break;\n          }\n          offset += tokens.data.current_token_ownerships.length;\n        }\n      }\n      dispatch(receiveSourceParsedTokenAccountsNFT(parsedTokenAccountsNFT));\n    } else {\n      const client = getAptosClient();\n      const resources = await client.getAccountResources(walletAddress);\n      const coinResources = resources.filter((r) =>\n        r.type.startsWith(\"0x1::coin::CoinStore<\")\n      );\n      const parsedTokenAccounts: ParsedTokenAccount[] = [];\n      for (const cr of coinResources) {\n        try {\n          const address = cr.type.substring(\n            cr.type.indexOf(\"<\") + 1,\n            cr.type.length - 1\n          );\n          const coinType = `0x1::coin::CoinInfo<${address}>`;\n          const coinStore = `0x1::coin::CoinStore<${address}>`;\n          const value = (\n            (await client.getAccountResource(walletAddress, coinStore))\n              .data as any\n          ).coin.value;\n          const assetInfo = (\n            await client.getAccountResource(address.split(\"::\")[0], coinType)\n          ).data as AptosCoinResourceReturn;\n          if (value && value !== \"0\" && assetInfo) {\n            const parsedTokenAccount = createParsedTokenAccount(\n              walletAddress,\n              address,\n              value,\n              assetInfo.decimals,\n              Number(formatUnits(value, assetInfo.decimals)),\n              formatUnits(value, assetInfo.decimals),\n              assetInfo.symbol,\n              assetInfo.name\n            );\n            if (address === APTOS_NATIVE_TOKEN_KEY) {\n              parsedTokenAccount.logo = aptosIcon;\n              parsedTokenAccount.isNativeAsset = true;\n              parsedTokenAccounts.unshift(parsedTokenAccount);\n            } else {\n              parsedTokenAccounts.push(parsedTokenAccount);\n            }\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      }\n      dispatch(receiveSourceParsedTokenAccounts(parsedTokenAccounts));\n    }\n  } catch (e: any) {\n    console.error(e);\n    dispatch(\n      nft\n        ? errorSourceParsedTokenAccountsNFT(\"Failed to load NFT metadata\")\n        : errorSourceParsedTokenAccounts(\"Failed to load token metadata.\")\n    );\n  }\n};\n\nconst getSuiParsedTokenAccounts = async (\n  walletAddress: string,\n  dispatch: Dispatch,\n  nft: boolean\n) => {\n  dispatch(\n    nft ? fetchSourceParsedTokenAccountsNFT() : fetchSourceParsedTokenAccounts()\n  );\n  try {\n    if (nft) {\n      dispatch(receiveSourceParsedTokenAccountsNFT([]));\n      return;\n    }\n    const provider = getSuiProvider();\n    const balances = await provider.getAllBalances({ owner: walletAddress });\n    const parsedTokenAccounts: ParsedTokenAccount[] = [];\n    for (const { coinType, totalBalance } of balances) {\n      if (totalBalance === \"0\") continue;\n      const response = await provider.getCoinMetadata({\n        coinType,\n      });\n      if (!response) throw new Error(\"bad response\");\n      const { decimals, symbol, name } = response;\n      const parsedTokenAccount = createParsedTokenAccount(\n        walletAddress,\n        coinType,\n        totalBalance,\n        decimals,\n        Number(formatUnits(totalBalance, decimals)),\n        formatUnits(totalBalance, decimals),\n        symbol,\n        name\n      );\n      if (coinType === SUI_NATIVE_TOKEN_KEY) {\n        parsedTokenAccount.logo = suiIcon;\n        parsedTokenAccount.isNativeAsset = true;\n        parsedTokenAccounts.unshift(parsedTokenAccount);\n      } else {\n        parsedTokenAccounts.push(parsedTokenAccount);\n      }\n    }\n    dispatch(receiveSourceParsedTokenAccounts(parsedTokenAccounts));\n  } catch (e) {\n    console.error(e);\n    dispatch(\n      nft\n        ? errorSourceParsedTokenAccountsNFT(\"Failed to load NFT metadata\")\n        : errorSourceParsedTokenAccounts(\"Failed to load token metadata.\")\n    );\n  }\n};\n\n/**\n * Fetches the balance of an asset for the connected wallet\n * This should handle every type of chain in the future, but only reads the Transfer state.\n */\nfunction useGetAvailableTokens(nft: boolean = false) {\n  const dispatch = useDispatch();\n\n  const tokenAccounts = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccounts\n      : selectTransferSourceParsedTokenAccounts\n  );\n\n  const lookupChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const { publicKey: solPK, wallet: solanaWallet } = useSolanaWallet();\n  const { provider, signerAddress } = useEthereumProvider(lookupChain);\n  const { address: algoAccount } = useAlgorandWallet();\n  const { accountId: nearAccountId } = useNearContext();\n  const { account: aptosAddress } = useAptosContext();\n  const suiWallet = useSuiWallet();\n  const suiAddress = suiWallet?.getAddress();\n\n  const [covalent, setCovalent] = useState<any>(undefined);\n  const [covalentLoading, setCovalentLoading] = useState(false);\n  const [covalentError, setCovalentError] = useState<string | undefined>(\n    undefined\n  );\n\n  const [ethNativeAccount, setEthNativeAccount] = useState<any>(undefined);\n  const [ethNativeAccountLoading, setEthNativeAccountLoading] = useState(false);\n  const [ethNativeAccountError, setEthNativeAccountError] = useState<\n    string | undefined\n  >(undefined);\n\n  const [solanaMintAccounts, setSolanaMintAccounts] = useState<\n    Map<string, ExtractedMintInfo | null> | undefined\n  >(undefined);\n  const [solanaMintAccountsLoading, setSolanaMintAccountsLoading] =\n    useState(false);\n  const [solanaMintAccountsError, setSolanaMintAccountsError] = useState<\n    string | undefined\n  >(undefined);\n\n  const selectedSourceWalletAddress = useSelector(\n    nft ? selectNFTSourceWalletAddress : selectSourceWalletAddress\n  );\n  const currentSourceWalletAddress: string | undefined = isEVMChain(lookupChain)\n    ? signerAddress\n    : lookupChain === CHAIN_ID_SOLANA\n    ? solPK?.toString()\n    : lookupChain === CHAIN_ID_ALGORAND\n    ? algoAccount\n    : lookupChain === CHAIN_ID_NEAR\n    ? nearAccountId || undefined\n    : lookupChain === CHAIN_ID_APTOS\n    ? aptosAddress || undefined\n    : lookupChain === CHAIN_ID_SUI\n    ? suiAddress || undefined\n    : undefined;\n\n  const resetSourceAccounts = useCallback(() => {\n    dispatch(\n      nft\n        ? setSourceWalletAddressNFT(undefined)\n        : setSourceWalletAddress(undefined)\n    );\n    dispatch(\n      nft\n        ? setSourceParsedTokenAccountNFT(undefined)\n        : setSourceParsedTokenAccount(undefined)\n    );\n    dispatch(\n      nft\n        ? setSourceParsedTokenAccountsNFT(undefined)\n        : setSourceParsedTokenAccounts(undefined)\n    );\n    !nft && dispatch(setAmount(\"\"));\n    setCovalent(undefined); //These need to be included in the reset because they have balances on them.\n    setCovalentLoading(false);\n    setCovalentError(\"\");\n\n    setEthNativeAccount(undefined);\n    setEthNativeAccountLoading(false);\n    setEthNativeAccountError(\"\");\n  }, [setCovalent, dispatch, nft]);\n\n  //TODO this useEffect could be somewhere else in the codebase\n  //It resets the SourceParsedTokens accounts when the wallet changes\n  useEffect(() => {\n    if (\n      selectedSourceWalletAddress !== undefined &&\n      currentSourceWalletAddress !== undefined &&\n      currentSourceWalletAddress !== selectedSourceWalletAddress\n    ) {\n      resetSourceAccounts();\n      return;\n    } else {\n    }\n  }, [\n    selectedSourceWalletAddress,\n    currentSourceWalletAddress,\n    dispatch,\n    resetSourceAccounts,\n  ]);\n\n  //Solana accountinfos load\n  useEffect(() => {\n    if (lookupChain === CHAIN_ID_SOLANA && solPK) {\n      if (\n        !(tokenAccounts.data || tokenAccounts.isFetching || tokenAccounts.error)\n      ) {\n        getSolanaParsedTokenAccounts(solPK, dispatch, nft);\n      }\n    }\n\n    return () => {};\n  }, [dispatch, solanaWallet, lookupChain, solPK, tokenAccounts, nft]);\n\n  //Solana Mint Accounts lookup\n  useEffect(() => {\n    if (lookupChain !== CHAIN_ID_SOLANA || !tokenAccounts.data?.length) {\n      return () => {};\n    }\n\n    let cancelled = false;\n    setSolanaMintAccountsLoading(true);\n    setSolanaMintAccountsError(undefined);\n    const mintAddresses = tokenAccounts.data.map((x) => x.mintKey);\n    //This is a known wormhole v1 token on testnet\n    // mintAddresses.push(\"4QixXecTZ4zdZGa39KH8gVND5NZ2xcaB12wiBhE4S7rn\");\n    //SOLT devnet token\n    // mintAddresses.push(\"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\");\n    // bad monkey \"NFT\"\n    // mintAddresses.push(\"5FJeEJR8576YxXFdGRAu4NBBFcyfmtjsZrXHSsnzNPdS\");\n    // degenerate monkey NFT\n    // mintAddresses.push(\"EzYsbigNNGbNuANRJ3mnnyJYU2Bk7mBYVsxuonUwAX7r\");\n\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    getMultipleAccountsRPC(\n      connection,\n      mintAddresses.map((x) => new PublicKey(x))\n    ).then(\n      (results) => {\n        if (!cancelled) {\n          const output = new Map<string, ExtractedMintInfo | null>();\n\n          results.forEach((result, index) =>\n            output.set(\n              mintAddresses[index],\n              (result && extractMintInfo(result)) || null\n            )\n          );\n\n          setSolanaMintAccounts(output);\n          setSolanaMintAccountsLoading(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setSolanaMintAccounts(undefined);\n          setSolanaMintAccountsLoading(false);\n          setSolanaMintAccountsError(\n            \"Could not retrieve Solana mint accounts.\"\n          );\n        }\n      }\n    );\n\n    return () => (cancelled = true);\n  }, [tokenAccounts.data, lookupChain]);\n\n  //Ethereum native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_ETH &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeEthParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your ETH balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Binance Smart Chain native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_BSC &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeBscParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your BNB balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Polygon native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_POLYGON &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativePolygonParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your MATIC balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //TODO refactor all these into an isEVM effect\n  //avax native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_AVAX &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeAvaxParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your AVAX balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_OASIS &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeOasisParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your Oasis balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_AURORA &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeAuroraParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your Fantom balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_FANTOM &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeFantomParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your Fantom balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_KARURA &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeKaruraParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your Karura balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_ACALA &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeAcalaParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your Acala balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_KLAYTN &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeKlaytnParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your Klaytn balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_CELO &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeCeloParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your Celo balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_NEON &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeNeonParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your Neon balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_MOONBEAM &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeMoonbeamParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\n              \"Unable to retrieve your Moonbeam balance.\"\n            );\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_ARBITRUM &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeArbitrumParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\n              \"Unable to retrieve your Arbitrum balance.\"\n            );\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Ethereum covalent or blockscout accounts load\n  useEffect(() => {\n    //const testWallet = \"0xf60c2ea62edbfe808163751dd0d8693dcb30019c\";\n    // const nftTestWallet1 = \"0x3f304c6721f35ff9af00fd32650c8e0a982180ab\";\n    // const nftTestWallet2 = \"0x98ed231428088eb440e8edb5cc8d66dcf913b86e\";\n    // const nftTestWallet3 = \"0xb1fadf677a7e9b90e9d4f31c8ffb3dc18c138c6f\";\n    // const nftBscTestWallet1 = \"0x5f464a652bd1991df0be37979b93b3306d64a909\";\n\n    let cancelled = false;\n    const walletAddress = signerAddress;\n    if (walletAddress && isEVMChain(lookupChain) && !covalent) {\n      let url = COVALENT_GET_TOKENS_URL(lookupChain, walletAddress, nft);\n      let getAccounts;\n      if (url) {\n        getAccounts = getEthereumAccountsCovalent;\n      } else {\n        url = BLOCKSCOUT_GET_TOKENS_URL(lookupChain, walletAddress);\n        getAccounts = getEthereumAccountsBlockscout;\n      }\n      if (!url) {\n        return;\n      }\n      //TODO less cancel\n      !cancelled && setCovalentLoading(true);\n      !cancelled &&\n        dispatch(\n          nft\n            ? fetchSourceParsedTokenAccountsNFT()\n            : fetchSourceParsedTokenAccounts()\n        );\n      getAccounts(url, nft, lookupChain).then(\n        (accounts) => {\n          !cancelled && setCovalentLoading(false);\n          !cancelled && setCovalentError(undefined);\n          !cancelled && setCovalent(accounts);\n          !cancelled &&\n            dispatch(\n              nft\n                ? receiveSourceParsedTokenAccountsNFT(\n                    accounts.reduce((arr, current) => {\n                      if (current.nft_data) {\n                        current.nft_data.forEach((x) =>\n                          arr.push(\n                            createNFTParsedTokenAccountFromCovalent(\n                              walletAddress,\n                              current,\n                              x\n                            )\n                          )\n                        );\n                      }\n                      return arr;\n                    }, [] as NFTParsedTokenAccount[])\n                  )\n                : receiveSourceParsedTokenAccounts(\n                    accounts.map((x) =>\n                      createParsedTokenAccountFromCovalent(walletAddress, x)\n                    )\n                  )\n            );\n        },\n        () => {\n          !cancelled &&\n            dispatch(\n              nft\n                ? errorSourceParsedTokenAccountsNFT(\n                    \"Cannot load your Ethereum NFTs at the moment.\"\n                  )\n                : errorSourceParsedTokenAccounts(\n                    \"Cannot load your Ethereum tokens at the moment.\"\n                  )\n            );\n          !cancelled &&\n            setCovalentError(\"Cannot load your Ethereum tokens at the moment.\");\n          !cancelled && setCovalentLoading(false);\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [lookupChain, provider, signerAddress, dispatch, nft, covalent]);\n\n  //Terra accounts load\n  //At present, we don't have any mechanism for doing this.\n  useEffect(() => {}, []);\n\n  //Algorand accounts load\n  useEffect(() => {\n    if (lookupChain === CHAIN_ID_ALGORAND && currentSourceWalletAddress) {\n      if (\n        !(tokenAccounts.data || tokenAccounts.isFetching || tokenAccounts.error)\n      ) {\n        getAlgorandParsedTokenAccounts(\n          currentSourceWalletAddress,\n          dispatch,\n          nft\n        );\n      }\n    }\n\n    return () => {};\n  }, [dispatch, lookupChain, currentSourceWalletAddress, tokenAccounts, nft]);\n\n  //Near accounts load\n  useEffect(() => {\n    if (lookupChain === CHAIN_ID_NEAR && currentSourceWalletAddress) {\n      if (\n        !(tokenAccounts.data || tokenAccounts.isFetching || tokenAccounts.error)\n      ) {\n        getNearParsedTokenAccounts(currentSourceWalletAddress, dispatch, nft);\n      }\n    }\n\n    return () => {};\n  }, [dispatch, lookupChain, currentSourceWalletAddress, tokenAccounts, nft]);\n\n  //Aptos accounts load\n  useEffect(() => {\n    if (lookupChain === CHAIN_ID_APTOS && currentSourceWalletAddress) {\n      if (\n        !(tokenAccounts.data || tokenAccounts.isFetching || tokenAccounts.error)\n      ) {\n        getAptosParsedTokenAccounts(currentSourceWalletAddress, dispatch, nft);\n      }\n    }\n\n    return () => {};\n  }, [dispatch, lookupChain, currentSourceWalletAddress, tokenAccounts, nft]);\n\n  //Sui accounts load\n  useEffect(() => {\n    if (lookupChain === CHAIN_ID_SUI && currentSourceWalletAddress) {\n      if (\n        !(tokenAccounts.data || tokenAccounts.isFetching || tokenAccounts.error)\n      ) {\n        getSuiParsedTokenAccounts(currentSourceWalletAddress, dispatch, nft);\n      }\n    }\n\n    return () => {};\n  }, [dispatch, lookupChain, currentSourceWalletAddress, tokenAccounts, nft]);\n\n  const ethAccounts = useMemo(() => {\n    const output = { ...tokenAccounts };\n    output.data = output.data?.slice() || [];\n    output.isFetching = output.isFetching || ethNativeAccountLoading;\n    output.error = output.error || ethNativeAccountError;\n    ethNativeAccount && output.data && output.data.unshift(ethNativeAccount);\n    return output;\n  }, [\n    ethNativeAccount,\n    ethNativeAccountLoading,\n    ethNativeAccountError,\n    tokenAccounts,\n  ]);\n\n  return lookupChain === CHAIN_ID_SOLANA\n    ? {\n        tokenAccounts,\n        mintAccounts: {\n          data: solanaMintAccounts,\n          isFetching: solanaMintAccountsLoading,\n          error: solanaMintAccountsError,\n          receivedAt: null, //TODO\n        },\n        resetAccounts: resetSourceAccounts,\n      }\n    : isEVMChain(lookupChain)\n    ? {\n        tokenAccounts: ethAccounts,\n        covalent: {\n          data: covalent,\n          isFetching: covalentLoading,\n          error: covalentError,\n          receivedAt: null, //TODO\n        },\n        resetAccounts: resetSourceAccounts,\n      }\n    : isTerraChain(lookupChain)\n    ? {\n        resetAccounts: resetSourceAccounts,\n      }\n    : lookupChain === CHAIN_ID_ALGORAND\n    ? {\n        tokenAccounts,\n        resetAccounts: resetSourceAccounts,\n      }\n    : lookupChain === CHAIN_ID_NEAR\n    ? {\n        tokenAccounts,\n        resetAccounts: resetSourceAccounts,\n      }\n    : lookupChain === CHAIN_ID_XPLA\n    ? {\n        resetAccounts: resetSourceAccounts,\n      }\n    : lookupChain === CHAIN_ID_APTOS\n    ? {\n        tokenAccounts,\n        resetAccounts: resetSourceAccounts,\n      }\n    : lookupChain === CHAIN_ID_INJECTIVE\n    ? {\n        resetAccounts: resetSourceAccounts,\n      }\n    : lookupChain === CHAIN_ID_SUI\n    ? {\n        tokenAccounts,\n        resetAccounts: resetSourceAccounts,\n      }\n    : undefined;\n}\n\nexport default useGetAvailableTokens;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { MarketsMap } from \"../hooks/useMarketsMap\";\nimport { RelayerTokenInfo } from \"../hooks/useRelayersAvailable\";\nimport { TerraTokenMap } from \"../hooks/useTerraTokenMap\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\n\nexport interface TokenMetadataState {\n  solanaTokenMap: DataWrapper<TokenInfo[]>;\n  terraTokenMap: DataWrapper<TerraTokenMap>; //TODO make a decent type for this.\n  marketsMap: DataWrapper<MarketsMap>;\n  relayerTokenInfo: DataWrapper<RelayerTokenInfo>;\n}\n\nconst initialState: TokenMetadataState = {\n  solanaTokenMap: getEmptyDataWrapper(),\n  terraTokenMap: getEmptyDataWrapper(),\n  marketsMap: getEmptyDataWrapper(),\n  relayerTokenInfo: getEmptyDataWrapper(),\n};\n\nexport const tokenSlice = createSlice({\n  name: \"tokenInfos\",\n  initialState,\n  reducers: {\n    receiveSolanaTokenMap: (state, action: PayloadAction<TokenInfo[]>) => {\n      state.solanaTokenMap = receiveDataWrapper(action.payload);\n    },\n    fetchSolanaTokenMap: (state) => {\n      state.solanaTokenMap = fetchDataWrapper();\n    },\n    errorSolanaTokenMap: (state, action: PayloadAction<string>) => {\n      state.solanaTokenMap = errorDataWrapper(action.payload);\n    },\n\n    receiveTerraTokenMap: (state, action: PayloadAction<TerraTokenMap>) => {\n      state.terraTokenMap = receiveDataWrapper(action.payload);\n    },\n    fetchTerraTokenMap: (state) => {\n      state.terraTokenMap = fetchDataWrapper();\n    },\n    errorTerraTokenMap: (state, action: PayloadAction<string>) => {\n      state.terraTokenMap = errorDataWrapper(action.payload);\n    },\n\n    receiveMarketsMap: (state, action: PayloadAction<MarketsMap>) => {\n      state.marketsMap = receiveDataWrapper(action.payload);\n    },\n    fetchMarketsMap: (state) => {\n      state.marketsMap = fetchDataWrapper();\n    },\n    errorMarketsMap: (state, action: PayloadAction<string>) => {\n      state.marketsMap = errorDataWrapper(action.payload);\n    },\n\n    receiveRelayerTokenInfo: (\n      state,\n      action: PayloadAction<RelayerTokenInfo>\n    ) => {\n      state.relayerTokenInfo = receiveDataWrapper(action.payload);\n    },\n    fetchRelayerTokenInfo: (state) => {\n      state.relayerTokenInfo = fetchDataWrapper();\n    },\n    errorRelayerTokenInfo: (state, action: PayloadAction<string>) => {\n      state.relayerTokenInfo = errorDataWrapper(action.payload);\n    },\n\n    reset: () => initialState,\n  },\n});\n\nexport const {\n  receiveSolanaTokenMap,\n  fetchSolanaTokenMap,\n  errorSolanaTokenMap,\n  receiveTerraTokenMap,\n  fetchTerraTokenMap,\n  errorTerraTokenMap,\n  receiveMarketsMap,\n  fetchMarketsMap,\n  errorMarketsMap,\n  receiveRelayerTokenInfo,\n  fetchRelayerTokenInfo,\n  errorRelayerTokenInfo,\n  reset,\n} = tokenSlice.actions;\n\nexport default tokenSlice.reducer;\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectMarketsMap } from \"../store/selectors\";\nimport {\n  errorMarketsMap,\n  fetchMarketsMap,\n  receiveMarketsMap,\n} from \"../store/tokenSlice\";\nimport { CLUSTER, FEATURED_MARKETS_JSON_URL } from \"../utils/consts\";\n\nexport type MarketsMap = {\n  markets?: {\n    [index: string]: {\n      name: string;\n      link: string;\n    };\n  };\n  tokens?: {\n    [key in ChainId]?: {\n      [index: string]: {\n        symbol: string;\n        logo: string;\n      };\n    };\n  };\n  tokenMarkets?: {\n    [key in ChainId]?: {\n      [key in ChainId]?: {\n        [index: string]: {\n          symbol: string;\n          logo: string;\n          markets: string[];\n        };\n      };\n    };\n  };\n};\n\nconst useMarketsMap = (shouldFire: boolean): DataWrapper<MarketsMap> => {\n  const marketsMap = useSelector(selectMarketsMap);\n  const dispatch = useDispatch();\n  const internalShouldFire =\n    shouldFire &&\n    CLUSTER === \"mainnet\" &&\n    (marketsMap.data === undefined ||\n      (marketsMap.data === null && !marketsMap.isFetching));\n\n  useEffect(() => {\n    if (internalShouldFire) {\n      getMarketsMap(dispatch);\n    }\n  }, [internalShouldFire, dispatch]);\n\n  return marketsMap;\n};\n\nconst getMarketsMap = (dispatch: Dispatch) => {\n  dispatch(fetchMarketsMap());\n  axios.get(FEATURED_MARKETS_JSON_URL).then(\n    (response) => {\n      dispatch(receiveMarketsMap(response.data as MarketsMap));\n    },\n    (error) => {\n      dispatch(errorMarketsMap(\"Failed to retrieve the Terra Token List.\"));\n    }\n  );\n};\n\nexport default useMarketsMap;\n","export const balancePretty = (uiString: string) => {\n  const numberString = uiString.split(\".\")[0];\n  const nsLen = numberString.length;\n  if (nsLen > 9) {\n    // Billion case\n    const num = numberString.substring(0, nsLen - 9);\n    const fract = numberString.substring(nsLen - 9, nsLen - 9 + 2);\n    return num + \".\" + fract + \" B\";\n  } else if (nsLen > 6) {\n    // Million case\n    const num = numberString.substring(0, nsLen - 6);\n    const fract = numberString.substring(nsLen - 6, nsLen - 6 + 2);\n    return num + \".\" + fract + \" M\";\n  } else if (uiString.length > 8) {\n    return uiString.substring(0, 8);\n  } else {\n    return uiString;\n  }\n};\n","var _path, _path2, _path3, _path4;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgBsc(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 40,\n    height: 40,\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20.302 0 9.68 6.127l3.906 2.263 6.717-3.863L27.02 8.39l3.906-2.263L20.303 0ZM27.02 11.59l3.906 2.264v4.527l-6.718 3.863v7.727l-3.905 2.263-3.906-2.263v-7.727L9.679 18.38v-4.527l3.906-2.264 6.717 3.864 6.718-3.864Z\",\n    fill: \"#F0B90B\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M30.926 21.58v4.527l-3.906 2.264v-4.527l3.906-2.264Z\",\n    fill: \"#F0B90B\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m26.981 31.57 6.718-3.863V19.98l3.906-2.263v12.254l-10.624 6.127V31.57ZM33.7 12.254 29.792 9.99 33.7 7.727l3.906 2.263v4.527l-3.906 2.264v-4.527ZM16.397 37.737V33.21l3.905 2.263 3.906-2.263v4.527L20.303 40l-3.906-2.263ZM13.585 28.37l-3.906-2.263v-4.526l3.906 2.263v4.527ZM20.302 12.254 16.397 9.99l3.905-2.263 3.906 2.263-3.905 2.264ZM10.812 9.99l-3.906 2.264v4.527L3 14.517V9.99l3.906-2.263 3.906 2.263Z\",\n    fill: \"#F0B90B\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m3 17.717 3.906 2.264v7.726l6.718 3.864v4.527L3 29.97V17.717Z\",\n    fill: \"#F0B90B\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgBsc);\nexport default __webpack_public_path__ + \"static/media/bsc.651c7605759848e72d890a9f7ecda59f.svg\";\nexport { ForwardRef as ReactComponent };","var _g, _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgSolana(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 96,\n    height: 84,\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#a)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M17.368 64.052A3.214 3.214 0 0 1 19.744 63l73.312.06a1.612 1.612 0 0 1 1.188 2.698l-15.612 17.19A3.213 3.213 0 0 1 76.254 84l-73.31-.06a1.611 1.611 0 0 1-1.188-2.698l15.612-17.19Zm76.876-14.31a1.611 1.611 0 0 1-1.188 2.698l-73.31.06a3.213 3.213 0 0 1-2.378-1.052l-15.612-17.2a1.612 1.612 0 0 1 1.188-2.698l73.312-.06a3.213 3.213 0 0 1 2.376 1.052l15.612 17.2ZM17.368 1.052A3.215 3.215 0 0 1 19.744 0l73.312.06a1.612 1.612 0 0 1 1.188 2.698l-15.612 17.19A3.213 3.213 0 0 1 76.254 21l-73.31-.06a1.611 1.611 0 0 1-1.188-2.698l15.612-17.19Z\",\n    fill: \"url(#b)\"\n  }))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"b\",\n    x1: 4.168,\n    y1: 85.832,\n    x2: 91.832,\n    y2: -1.832,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#9945FF\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.2,\n    stopColor: \"#7962E7\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#00D18C\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"a\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#fff\",\n    d: \"M0 0h96v84H0z\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSolana);\nexport default __webpack_public_path__ + \"static/media/solana.61403bc0a0fa16f39ea8b67f1dce06fe.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgWormholeNetwork(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"data-name\": \"Layer 1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 73.18 86.09\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M30.29 43.05A47.76 47.76 0 0 0 16.72 9.63a1.7 1.7 0 0 0-1.2-.5H4.34a1.67 1.67 0 0 0-1.67 1.67v11.49A1.69 1.69 0 0 0 4.24 24a19.15 19.15 0 0 1 0 38.18 1.68 1.68 0 0 0-1.57 1.62v11.49A1.68 1.68 0 0 0 4.34 77h11.18a1.66 1.66 0 0 0 1.2-.51 47.75 47.75 0 0 0 13.57-33.44Z\",\n    style: {\n      fill: \"red\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M70.51 63.8a1.68 1.68 0 0 0-1.57-1.66 19.15 19.15 0 0 1 0-38.18 1.69 1.69 0 0 0 1.57-1.67V10.8a1.67 1.67 0 0 0-1.67-1.67H57.66a1.7 1.7 0 0 0-1.2.5 47.93 47.93 0 0 0 0 66.83 1.66 1.66 0 0 0 1.2.51h11.18a1.68 1.68 0 0 0 1.67-1.68Z\",\n    style: {\n      fill: \"#0073ff\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M28.06 3.14a1.89 1.89 0 0 0-1.75 2.58 102.89 102.89 0 0 1 7.05 37.33 102.87 102.87 0 0 1-7 37.32 1.89 1.89 0 0 0 1.7 2.63h17a1.88 1.88 0 0 0 1.74-2.58 102.33 102.33 0 0 1 0-74.65 1.88 1.88 0 0 0-1.74-2.58Z\",\n    style: {\n      fill: \"#00f3d7\"\n    }\n  }));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgWormholeNetwork);\nexport default __webpack_public_path__ + \"static/media/wormhole-network.c546f205d9f8931abfaf7243d7ba72f0.svg\";\nexport { ForwardRef as ReactComponent };","import {\n  Avatar,\n  Card,\n  CardContent,\n  CardMedia,\n  makeStyles,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useCallback, useEffect, useLayoutEffect, useState } from \"react\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport clsx from \"clsx\";\nimport {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_OASIS,\n  CHAIN_ID_FANTOM,\n  CHAIN_ID_APTOS,\n} from \"@certusone/wormhole-sdk\";\nimport SmartAddress from \"../SmartAddress\";\nimport avaxIcon from \"../../icons/avax.svg\";\nimport bscIcon from \"../../icons/bsc.svg\";\nimport ethIcon from \"../../icons/eth.svg\";\nimport fantomIcon from \"../../icons/fantom.svg\";\nimport solanaIcon from \"../../icons/solana.svg\";\nimport polygonIcon from \"../../icons/polygon.svg\";\nimport oasisIcon from \"../../icons/oasis-network-rose-logo.svg\";\nimport aptosIcon from \"../../icons/aptos.svg\";\nimport useCopyToClipboard from \"../../hooks/useCopyToClipboard\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport Wormhole from \"../../icons/wormhole-network.svg\";\n\nconst safeIPFS = (uri: string) =>\n  uri.startsWith(\"ipfs://ipfs/\")\n    ? uri.replace(\"ipfs://\", \"https://ipfs.io/\")\n    : uri.startsWith(\"ipfs://\")\n    ? uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n    : uri.startsWith(\"https://cloudflare-ipfs.com/ipfs/\") // no CORS support?\n    ? uri.replace(\"https://cloudflare-ipfs.com/ipfs/\", \"https://ipfs.io/ipfs/\")\n    : uri;\n\nconst LogoIcon = ({ chainId }: { chainId: ChainId }) =>\n  chainId === CHAIN_ID_SOLANA ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"4px\",\n      }}\n      src={solanaIcon}\n      alt=\"Dijets\"\n    />\n  ) : chainId === CHAIN_ID_ETH ? (\n    <Avatar\n      style={{\n        backgroundColor: \"white\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n      }}\n      src={ethIcon}\n      alt=\"Ethereum\"\n    />\n  ) : chainId === CHAIN_ID_BSC ? (\n    <Avatar\n      style={{\n        backgroundColor: \"rgb(20, 21, 26)\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"2px\",\n      }}\n      src={bscIcon}\n      alt=\"Binance Smart Chain\"\n    />\n  ) : chainId === CHAIN_ID_POLYGON ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={polygonIcon}\n      alt=\"Polygon\"\n    />\n  ) : chainId === CHAIN_ID_AVAX ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={avaxIcon}\n      alt=\"Avalanche\"\n    />\n  ) : chainId === CHAIN_ID_OASIS ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={oasisIcon}\n      alt=\"Oasis\"\n    />\n  ) : chainId === CHAIN_ID_FANTOM ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={fantomIcon}\n      alt=\"Fantom\"\n    />\n  ) : chainId === CHAIN_ID_APTOS ? (\n    <Avatar\n      style={{\n        backgroundColor: \"rgb(2,0,36)\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={aptosIcon}\n      alt=\"Aptos\"\n    />\n  ) : null;\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    borderRadius: 9,\n    maxWidth: \"100%\",\n    width: 400,\n    margin: `${theme.spacing(1)}px auto`,\n    padding: 8,\n    position: \"relative\",\n    zIndex: 1,\n    transition: \"background-position 1s, transform 0.25s\",\n    \"&:hover\": {\n      backgroundPosition: \"right center\",\n      transform: \"scale(1.25)\",\n    },\n    backgroundSize: \"200% auto\",\n    backgroundColor: \"#ffb347\",\n    background:\n      \"linear-gradient(to right, #ffb347 0%, #ffcc33  51%, #ffb347  100%)\",\n  },\n  silverBorder: {\n    backgroundColor: \"#D9D8D6\",\n    backgroundSize: \"200% auto\",\n    background:\n      \"linear-gradient(to bottom right, #757F9A 0%, #D7DDE8  51%, #757F9A  100%)\",\n    \"&:hover\": {\n      backgroundPosition: \"right center\",\n    },\n  },\n  cardInset: {},\n  textContent: {\n    background: \"transparent\",\n    paddingTop: 4,\n    paddingBottom: 2,\n    display: \"flex\",\n  },\n  detailsContent: {\n    background: \"transparent\",\n    paddingTop: 4,\n    paddingBottom: 2,\n    \"&:last-child\": {\n      //override rule\n      paddingBottom: 2,\n    },\n  },\n  title: {\n    flex: 1,\n  },\n  description: {\n    padding: theme.spacing(0.5, 0, 1),\n  },\n  tokenId: {\n    fontSize: \"8px\",\n  },\n  mediaContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    background: \"transparent\",\n    margin: theme.spacing(0, 2),\n    \"& > img, & > video\": {\n      border: \"1px solid #ffb347\",\n    },\n  },\n  silverMediaBorder: {\n    \"& > img, & > video\": {\n      borderColor: \"#D7DDE8\",\n    },\n  },\n  // thanks https://cssgradient.io/ and https://htmlcolorcodes.com/color-picker/\n  eth: {\n    // colors from https://en.wikipedia.org/wiki/Ethereum#/media/File:Ethereum-icon-purple.svg\n    backgroundColor: \"rgb(69,74,117)\",\n    background:\n      \"linear-gradient(160deg, rgba(69,74,117,1) 0%, rgba(138,146,178,1) 33%, rgba(69,74,117,1) 66%, rgba(98,104,143,1) 100%)\",\n  },\n  bsc: {\n    // color from binance background rgb(20, 21, 26), 2 and 1 tint lighter\n    backgroundColor: \"#F0B90B\",\n    background:\n      \"linear-gradient(160deg, rgb(20, 21, 26) 0%, #4A4D57 33%, rgb(20, 21, 26) 66%, #2C2F3B 100%)\",\n  },\n  polygon: {\n    // color from polygon logo #8247E5 down to 30 lightness\n    backgroundColor: \"#0F0323\",\n    background:\n      \"linear-gradient(160deg, #0F0323 0%, #250957 33%, #0F0323 66%, #0F0323 100%)\",\n  },\n  solana: {\n    // colors from https://solana.com/branding/new/exchange/exchange-sq-black.svg\n    backgroundColor: \"rgb(153,69,255)\",\n    background:\n      \"linear-gradient(45deg, rgba(153,69,255,1) 0%, rgba(121,98,231,1) 20%, rgba(0,209,140,1) 100%)\",\n  },\n  aptos: {\n    // colors from https://aptosfoundation.org/ (teal text)\n    backgroundColor: \"rgb(2,0,36)\",\n    background:\n      \"linear-gradient(45deg, rgba(2,0,36,1) 0%, rgba(63,253,255,1) 100%)\",\n  },\n  hidden: {\n    display: \"none\",\n  },\n  skeleton: {\n    height: \"500px\",\n    width: \"400px\",\n    maxWidth: \"100%\",\n    borderRadius: 9,\n    display: \"grid\",\n    placeItems: \"center\",\n    position: \"absolute\",\n  },\n  wormholeIcon: {\n    height: 48,\n    width: 48,\n    filter: \"contrast(0)\",\n    transition: \"filter 0.5s\",\n    \"&:hover\": {\n      filter: \"contrast(1)\",\n    },\n    verticalAlign: \"middle\",\n    marginRight: theme.spacing(1),\n    zIndex: 10,\n  },\n  wormholePositioner: {\n    display: \"grid\",\n    placeItems: \"center\",\n    position: \"relative\",\n    height: \"500px\",\n    width: \"400px\",\n    maxWidth: \"100%\",\n    margin: `${theme.spacing(1)}px auto`,\n  },\n}));\n\nconst ViewerLoader = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.wormholePositioner}>\n      <Skeleton variant=\"rect\" animation=\"wave\" className={classes.skeleton} />\n      <img src={Wormhole} alt=\"Wormhole\" className={classes.wormholeIcon} />\n    </div>\n  );\n};\n\nexport default function NFTViewer({\n  value,\n  chainId,\n}: {\n  value: NFTParsedTokenAccount;\n  chainId: ChainId;\n}) {\n  const uri = safeIPFS(value.uri || \"\");\n  const [metadata, setMetadata] = useState({\n    uri,\n    image: value.image,\n    animation_url: value.animation_url,\n    nftName: value.nftName,\n    description: value.description,\n    isLoading: !!uri,\n  });\n  const [isMediaLoading, setIsMediaLoading] = useState(false);\n  const onLoad = useCallback(() => {\n    setIsMediaLoading(false);\n  }, []);\n  const isLoading = isMediaLoading || metadata.isLoading;\n  useEffect(() => {\n    setMetadata((m) =>\n      m.uri === uri\n        ? m\n        : {\n            uri,\n            image: value.image,\n            animation_url: value.animation_url,\n            nftName: value.nftName,\n            description: value.description,\n            isLoading: !!uri,\n          }\n    );\n  }, [value, uri]);\n  useEffect(() => {\n    if (uri) {\n      let cancelled = false;\n      (async () => {\n        try {\n          const result = await axios.get(uri);\n          if (!cancelled && result && result.data) {\n            // support returns with nested data (e.g. {status: 10000, result: {data: {...}}})\n            const data = result.data.result?.data || result.data;\n            setMetadata({\n              uri,\n              image:\n                data.image ||\n                data.image_url ||\n                data.big_image ||\n                data.small_image,\n              animation_url: data.animation_url,\n              nftName: data.name,\n              description: data.description,\n              isLoading: false,\n            });\n          } else if (!cancelled) {\n            setMetadata((m) => ({ ...m, isLoading: false }));\n          }\n        } catch (e) {\n          if (!cancelled) {\n            setMetadata((m) => ({ ...m, isLoading: false }));\n          }\n        }\n      })();\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [uri]);\n\n  const classes = useStyles();\n  const animLower = metadata.animation_url?.toLowerCase();\n  // const has3DModel = animLower?.endsWith('gltf') || animLower?.endsWith('glb')\n  const hasVideo =\n    !animLower?.startsWith(\"ipfs://\") && // cloudflare ipfs doesn't support streaming video\n    (animLower?.endsWith(\"webm\") ||\n      animLower?.endsWith(\"mp4\") ||\n      animLower?.endsWith(\"mov\") ||\n      animLower?.endsWith(\"m4v\") ||\n      animLower?.endsWith(\"ogv\") ||\n      animLower?.endsWith(\"ogg\"));\n  const hasAudio =\n    animLower?.endsWith(\"mp3\") ||\n    animLower?.endsWith(\"flac\") ||\n    animLower?.endsWith(\"wav\") ||\n    animLower?.endsWith(\"oga\");\n  const hasImage = metadata.image;\n  const copyTokenId = useCopyToClipboard(value.tokenId || \"\");\n  const videoSrc = hasVideo && safeIPFS(metadata.animation_url || \"\");\n  const imageSrc = hasImage && safeIPFS(metadata.image || \"\");\n  const audioSrc = hasAudio && safeIPFS(metadata.animation_url || \"\");\n\n  //set loading when the media src changes\n  useLayoutEffect(() => {\n    if (videoSrc || imageSrc || audioSrc) {\n      setIsMediaLoading(true);\n    } else {\n      setIsMediaLoading(false);\n    }\n  }, [videoSrc, imageSrc, audioSrc]);\n\n  const image = (\n    <img\n      src={imageSrc}\n      alt={metadata.nftName || \"\"}\n      style={{ maxWidth: \"100%\" }}\n      onLoad={onLoad}\n      onError={onLoad}\n    />\n  );\n  const media = (\n    <>\n      {hasVideo ? (\n        <video\n          autoPlay\n          controls\n          loop\n          style={{ maxWidth: \"100%\" }}\n          onLoadedData={onLoad}\n          onError={onLoad}\n        >\n          <source src={videoSrc || \"\"} />\n          {image}\n        </video>\n      ) : hasImage ? (\n        image\n      ) : null}\n      {hasAudio ? (\n        <audio\n          controls\n          src={audioSrc || \"\"}\n          onLoadedData={onLoad}\n          onError={onLoad}\n        />\n      ) : null}\n    </>\n  );\n\n  return (\n    <>\n      <div className={!isLoading ? classes.hidden : \"\"}>\n        <ViewerLoader />\n      </div>\n      <Card\n        className={clsx(classes.card, {\n          [classes.silverBorder]:\n            chainId === CHAIN_ID_SOLANA ||\n            chainId === CHAIN_ID_POLYGON ||\n            chainId === CHAIN_ID_AVAX,\n          [classes.hidden]: isLoading,\n        })}\n        elevation={10}\n      >\n        <div\n          className={clsx(classes.cardInset, {\n            [classes.eth]:\n              chainId === CHAIN_ID_ETH ||\n              chainId === CHAIN_ID_AVAX || //TODO: give avax it's own bg\n              chainId === CHAIN_ID_OASIS || //TODO: give oasis it's own bg\n              chainId === CHAIN_ID_FANTOM, //TODO: give fantom it's own bg\n            [classes.bsc]: chainId === CHAIN_ID_BSC,\n            [classes.solana]: chainId === CHAIN_ID_SOLANA,\n            [classes.polygon]: chainId === CHAIN_ID_POLYGON,\n            [classes.aptos]: chainId === CHAIN_ID_APTOS,\n          })}\n        >\n          <CardContent className={classes.textContent}>\n            {metadata.nftName ? (\n              <Typography className={classes.title}>\n                {metadata.nftName}\n              </Typography>\n            ) : (\n              <div className={classes.title} />\n            )}\n            <SmartAddress\n              chainId={chainId}\n              parsedTokenAccount={value}\n              noGutter\n              noUnderline\n              propertyVersion={value.aptosTokenId?.property_version}\n            />\n            <LogoIcon chainId={chainId} />\n          </CardContent>\n          <CardMedia\n            className={clsx(classes.mediaContent, {\n              [classes.silverMediaBorder]:\n                chainId === CHAIN_ID_SOLANA ||\n                chainId === CHAIN_ID_POLYGON ||\n                chainId === CHAIN_ID_OASIS ||\n                chainId === CHAIN_ID_AVAX,\n            })}\n          >\n            {media}\n          </CardMedia>\n          <CardContent className={classes.detailsContent}>\n            {metadata.description ? (\n              <Typography variant=\"body2\" className={classes.description}>\n                {metadata.description}\n              </Typography>\n            ) : null}\n            {value.tokenId ? (\n              <Typography className={classes.tokenId} align=\"right\">\n                <Tooltip title=\"Copy\" arrow>\n                  <span onClick={copyTokenId}>\n                    {value.tokenId.length > 18\n                      ? `#${value.tokenId.substr(0, 16)}...`\n                      : `#${value.tokenId}`}\n                  </span>\n                </Tooltip>\n              </Typography>\n            ) : null}\n          </CardContent>\n        </div>\n      </Card>\n    </>\n  );\n}\n","import { CHAIN_ID_APTOS, ChainId } from \"@certusone/wormhole-sdk\";\nimport {\n  Button,\n  CircularProgress,\n  createStyles,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Link,\n  List,\n  ListItem,\n  makeStyles,\n  TextField,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport { InfoOutlined, Launch } from \"@material-ui/icons\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useMarketsMap from \"../../hooks/useMarketsMap\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { selectTransferTargetChain } from \"../../store/selectors\";\nimport { balancePretty } from \"../../utils/balancePretty\";\nimport {\n  AVAILABLE_MARKETS_URL,\n  CHAINS_BY_ID,\n  DisabledTokenReasons,\n  getIsTokenTransferDisabled,\n  getIsTokenTransferDisabledReasons,\n} from \"../../utils/consts\";\nimport { shortenAddress } from \"../../utils/solana\";\nimport NFTViewer from \"./NFTViewer\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    alignCenter: {\n      textAlign: \"center\",\n    },\n    optionContainer: {\n      padding: 0,\n    },\n    optionContent: {\n      padding: theme.spacing(1),\n    },\n    tokenList: {\n      maxHeight: theme.spacing(80), //TODO smarter\n      height: theme.spacing(80),\n      overflow: \"auto\",\n    },\n    dialogContent: {\n      overflowX: \"hidden\",\n    },\n    selectionButtonContainer: {\n      //display: \"flex\",\n      textAlign: \"center\",\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    },\n    selectionButton: {\n      maxWidth: \"100%\",\n      width: theme.breakpoints.values.sm,\n    },\n    tokenOverviewContainer: {\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      \"& div\": {\n        margin: theme.spacing(1),\n        flexBasis: \"25%\",\n        \"&$tokenImageContainer\": {\n          maxWidth: 40,\n        },\n        \"&$tokenMarketsList\": {\n          marginTop: theme.spacing(-0.5),\n          marginLeft: 0,\n          flexBasis: \"100%\",\n        },\n        \"&:last-child\": {\n          textAlign: \"right\",\n        },\n        flexShrink: 1,\n      },\n      flexWrap: \"wrap\",\n    },\n    tokenImageContainer: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      width: 40,\n    },\n    tokenImage: {\n      maxHeight: \"2.5rem\", //Eyeballing this based off the text size\n    },\n    tokenMarketsList: {\n      order: 1,\n      textAlign: \"left\",\n      width: \"100%\",\n      \"& > .MuiButton-root\": {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n      },\n    },\n    migrationAlert: {\n      width: \"100%\",\n      \"& .MuiAlert-message\": {\n        width: \"100%\",\n      },\n    },\n    flexTitle: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"center\",\n    },\n    grower: {\n      flexGrow: 1,\n    },\n    disabledTokenAlert: {\n      borderStyle: \"none\",\n    },\n  })\n);\n\nconst noClickThrough = (e: any) => {\n  e.stopPropagation();\n};\n\nexport const BasicAccountRender = (\n  account: MarketParsedTokenAccount,\n  isMigrationEligible: (address: string) => boolean,\n  nft: boolean,\n  displayBalance?: (account: NFTParsedTokenAccount) => boolean\n) => {\n  const { data: marketsData } = useMarketsMap(false);\n  const classes = useStyles();\n  const mintPrettyString = shortenAddress(account.mintKey);\n  const uri = nft ? account.image_256 : account.logo || account.uri;\n  const symbol = account.symbol || \"Unknown\";\n  const name = account.name || \"Unknown\";\n  const tokenId = account.tokenId;\n  const shouldDisplayBalance = !displayBalance || displayBalance(account);\n\n  const nftContent = (\n    <div className={classes.tokenOverviewContainer}>\n      <div className={classes.tokenImageContainer}>\n        {uri && <img alt=\"\" className={classes.tokenImage} src={uri} />}\n      </div>\n      <div>\n        <Typography>{symbol}</Typography>\n        <Typography style={{ wordBreak: \"break-all\" }}> {name}</Typography>\n      </div>\n      <div>\n        <Typography>{mintPrettyString}</Typography>\n        <Typography style={{ wordBreak: \"break-all\" }}>{tokenId}</Typography>\n      </div>\n    </div>\n  );\n\n  const tokenContent = (\n    <div className={classes.tokenOverviewContainer}>\n      {account.markets ? (\n        <div className={classes.tokenMarketsList}>\n          {account.markets.map((market) =>\n            marketsData?.markets?.[market] ? (\n              <Button\n                key={market}\n                size=\"small\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                startIcon={<Launch />}\n                href={marketsData.markets[market].link}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={noClickThrough}\n              >\n                {marketsData.markets[market].name}\n              </Button>\n            ) : null\n          )}\n        </div>\n      ) : null}\n      <div className={classes.tokenImageContainer}>\n        {uri && <img alt=\"\" className={classes.tokenImage} src={uri} />}\n      </div>\n      <div>\n        <Typography variant=\"subtitle1\">{symbol}</Typography>\n      </div>\n      <div>\n        {\n          <Typography variant=\"body1\">\n            {account.isNativeAsset ? \"Native\" : mintPrettyString}\n          </Typography>\n        }\n      </div>\n      <div>\n        {shouldDisplayBalance ? (\n          <>\n            <Typography variant=\"body2\">{\"Balance\"}</Typography>\n            <Typography variant=\"h6\">\n              {balancePretty(account.uiAmountString)}\n            </Typography>\n          </>\n        ) : (\n          <div />\n        )}\n      </div>\n    </div>\n  );\n\n  const migrationRender = (\n    <div className={classes.migrationAlert}>\n      <Alert severity=\"warning\">\n        <Typography variant=\"body2\">\n          This is a legacy asset eligible for migration.\n        </Typography>\n        <div>{tokenContent}</div>\n      </Alert>\n    </div>\n  );\n\n  return nft\n    ? nftContent\n    : isMigrationEligible(account.mintKey)\n    ? migrationRender\n    : tokenContent;\n};\n\ninterface MarketParsedTokenAccount extends NFTParsedTokenAccount {\n  markets?: string[];\n}\n\nexport default function TokenPicker({\n  value,\n  options,\n  RenderOption,\n  onChange,\n  isValidAddress,\n  getAddress,\n  disabled,\n  resetAccounts,\n  nft,\n  chainId,\n  error,\n  showLoader,\n  useTokenId,\n}: {\n  value: NFTParsedTokenAccount | null;\n  options: NFTParsedTokenAccount[];\n  RenderOption: ({\n    account,\n  }: {\n    account: NFTParsedTokenAccount;\n  }) => JSX.Element;\n  onChange: (newValue: NFTParsedTokenAccount | null) => Promise<void>;\n  isValidAddress?: (address: string, chainId: ChainId) => boolean;\n  getAddress?: (\n    address: string,\n    tokenId?: string\n  ) => Promise<NFTParsedTokenAccount>;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n  nft: boolean;\n  chainId: ChainId;\n  error?: string;\n  showLoader?: boolean;\n  useTokenId?: boolean;\n}) {\n  const classes = useStyles();\n  const [holderString, setHolderString] = useState(\"\");\n  const [tokenIdHolderString, setTokenIdHolderString] = useState(\"\");\n  const [loadingError, setLoadingError] = useState(\"\");\n  const [isLocalLoading, setLocalLoading] = useState(false);\n  const [dialogIsOpen, setDialogIsOpen] = useState(false);\n  const [selectionError, setSelectionError] = useState(\"\");\n\n  const targetChain = useSelector(selectTransferTargetChain);\n  const { data: marketsData } = useMarketsMap(true);\n\n  const openDialog = useCallback(() => {\n    setHolderString(\"\");\n    setSelectionError(\"\");\n    setDialogIsOpen(true);\n  }, []);\n\n  const closeDialog = useCallback(() => {\n    setDialogIsOpen(false);\n  }, []);\n\n  const handleSelectOption = useCallback(\n    async (option: NFTParsedTokenAccount) => {\n      setSelectionError(\"\");\n      let newOption = null;\n      try {\n        //Covalent balances tend to be stale, so we make an attempt to correct it at selection time.\n        if (getAddress && !option.isNativeAsset) {\n          newOption = await getAddress(option.mintKey, option.tokenId);\n          newOption = {\n            ...option,\n            ...newOption,\n            // keep logo and uri from covalent / market list / etc (otherwise would be overwritten by undefined)\n            logo: option.logo || newOption.logo,\n            uri: option.uri || newOption.uri,\n          } as NFTParsedTokenAccount;\n        } else {\n          newOption = option;\n        }\n        await onChange(newOption);\n        closeDialog();\n      } catch (e: any) {\n        if (e.message?.includes(\"v1\")) {\n          setSelectionError(e.message);\n        } else {\n          setSelectionError(\n            \"Unable to retrieve required information about this token. Ensure your wallet is connected, then refresh the list.\"\n          );\n        }\n      }\n    },\n    [getAddress, onChange, closeDialog]\n  );\n\n  const resetAccountsWrapper = useCallback(() => {\n    setHolderString(\"\");\n    setTokenIdHolderString(\"\");\n    setSelectionError(\"\");\n    resetAccounts && resetAccounts();\n  }, [resetAccounts]);\n\n  const searchFilter = useCallback(\n    (option: NFTParsedTokenAccount) => {\n      if (!holderString) {\n        return true;\n      }\n      const optionString = (\n        (option.publicKey || \"\") +\n        \" \" +\n        (option.mintKey || \"\") +\n        \" \" +\n        (option.symbol || \"\") +\n        \" \" +\n        (option.name || \" \")\n      ).toLowerCase();\n      const searchString = holderString.toLowerCase();\n      return optionString.includes(searchString);\n    },\n    [holderString]\n  );\n\n  const marketChainTokens = marketsData?.tokens?.[chainId];\n  const featuredMarkets = marketsData?.tokenMarkets?.[chainId]?.[targetChain];\n\n  const featuredOptions = useMemo(() => {\n    // only tokens have featured markets\n    if (!nft && featuredMarkets) {\n      const ownedMarketTokens = options\n        .filter(\n          (option: NFTParsedTokenAccount) => featuredMarkets?.[option.mintKey]\n        )\n        .map(\n          (option) =>\n            ({\n              ...option,\n              markets: featuredMarkets[option.mintKey].markets,\n            } as MarketParsedTokenAccount)\n        );\n      return [\n        ...ownedMarketTokens,\n        ...Object.keys(featuredMarkets)\n          .filter(\n            (mintKey) =>\n              !ownedMarketTokens.find((option) => option.mintKey === mintKey)\n          )\n          .map(\n            (mintKey) =>\n              ({\n                amount: \"0\",\n                decimals: 0,\n                markets: featuredMarkets[mintKey].markets,\n                mintKey,\n                publicKey: \"\",\n                uiAmount: 0,\n                uiAmountString: \"0\", // if we can't look up by address, we can select the market that isn't in the list of holdings, but can't proceed since the balance will be 0\n                symbol: marketChainTokens?.[mintKey]?.symbol,\n                logo: marketChainTokens?.[mintKey]?.logo,\n              } as MarketParsedTokenAccount)\n          ),\n      ].filter(searchFilter);\n    }\n    return [];\n  }, [nft, marketChainTokens, featuredMarkets, options, searchFilter]);\n\n  const nonFeaturedOptions = useMemo(() => {\n    return options\n      .map((option) => ({\n        ...option,\n        symbol: marketChainTokens?.[option.mintKey]?.symbol || option.symbol,\n      }))\n      .filter(\n        (option: NFTParsedTokenAccount) =>\n          searchFilter(option) &&\n          // only tokens have featured markets\n          (nft || !featuredMarkets?.[option.mintKey])\n      );\n  }, [nft, options, featuredMarkets, marketChainTokens, searchFilter]);\n\n  const localFind = useCallback(\n    (address: string, tokenIdHolderString: string) => {\n      return options.find(\n        (x) =>\n          x.mintKey === address &&\n          (!tokenIdHolderString || x.tokenId === tokenIdHolderString)\n      );\n    },\n    [options]\n  );\n\n  //This is the effect which allows pasting an address in directly\n  useEffect(() => {\n    if (!isValidAddress || !getAddress) {\n      return;\n    }\n    if (useTokenId && !tokenIdHolderString) {\n      return;\n    }\n    setLoadingError(\"\");\n    let cancelled = false;\n    if (isValidAddress(holderString, chainId)) {\n      const option = localFind(holderString, tokenIdHolderString);\n      if (option) {\n        handleSelectOption(option);\n        return () => {\n          cancelled = true;\n        };\n      }\n      setLocalLoading(true);\n      setLoadingError(\"\");\n      getAddress(\n        holderString,\n        useTokenId ? tokenIdHolderString : undefined\n      ).then(\n        (result) => {\n          if (!cancelled) {\n            setLocalLoading(false);\n            if (result) {\n              handleSelectOption(result);\n            }\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setLocalLoading(false);\n            setLoadingError(\"Could not find the specified address.\");\n          }\n        }\n      );\n    }\n    return () => (cancelled = true);\n  }, [\n    holderString,\n    isValidAddress,\n    getAddress,\n    handleSelectOption,\n    localFind,\n    tokenIdHolderString,\n    useTokenId,\n    chainId,\n  ]);\n\n  //TODO reset button\n  //TODO debounce & save hotloaded options as an option before automatically selecting\n  //TODO sigfigs function on the balance strings\n\n  const localLoader = (\n    <div className={classes.alignCenter}>\n      <CircularProgress />\n      <Typography variant=\"body2\">\n        {showLoader ? \"Loading available tokens\" : \"Searching for results\"}\n      </Typography>\n    </div>\n  );\n\n  const displayLocalError = (\n    <div className={classes.alignCenter}>\n      <Typography variant=\"body2\" color=\"error\">\n        {loadingError || selectionError}\n      </Typography>\n    </div>\n  );\n\n  const TokenListItem = ({ option }: { option: NFTParsedTokenAccount }) => {\n    const isTokenDisabled: boolean = getIsTokenTransferDisabled(\n      chainId,\n      targetChain,\n      option.mintKey\n    );\n\n    const disabledTokenReasons: DisabledTokenReasons | undefined =\n      getIsTokenTransferDisabledReasons(chainId, option.mintKey);\n    const { text: disabledReason, link } = disabledTokenReasons || {};\n    const { text: linkText, url } = link || {};\n\n    return (\n      <>\n        <ListItem\n          component=\"div\"\n          button\n          onClick={() => handleSelectOption(option)}\n          disabled={isTokenDisabled}\n        >\n          <RenderOption account={option} />\n        </ListItem>\n        {isTokenDisabled && disabledReason && (\n          <Alert\n            variant=\"outlined\"\n            severity=\"info\"\n            className={classes.disabledTokenAlert}\n          >\n            {disabledReason}\n            {link && (\n              <>\n                {\" \"}\n                <Link href={url} target=\"_blank\" rel=\"noreferrer\">\n                  {linkText}\n                </Link>\n              </>\n            )}\n          </Alert>\n        )}\n      </>\n    );\n  };\n\n  const isAptosNFT = nft && chainId === CHAIN_ID_APTOS;\n\n  const dialog = (\n    <Dialog\n      onClose={closeDialog}\n      aria-labelledby=\"simple-dialog-title\"\n      open={dialogIsOpen}\n      maxWidth=\"sm\"\n      fullWidth\n    >\n      <DialogTitle>\n        <div id=\"simple-dialog-title\" className={classes.flexTitle}>\n          <Typography variant=\"h5\">Select a token</Typography>\n          <div className={classes.grower} />\n          <Tooltip title=\"Reload tokens\">\n            <IconButton onClick={resetAccountsWrapper}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </div>\n      </DialogTitle>\n      <DialogContent className={classes.dialogContent}>\n        <Alert severity=\"info\">\n          You should always check for markets and liquidity before sending\n          tokens.{\" \"}\n          <Link\n            href={AVAILABLE_MARKETS_URL}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Click here to see available markets for wrapped tokens.\n          </Link>\n        </Alert>\n        {!isAptosNFT ? (\n          <TextField\n            variant=\"outlined\"\n            label=\"Search name or paste address\"\n            value={holderString}\n            onChange={(event) => setHolderString(event.target.value)}\n            fullWidth\n            margin=\"normal\"\n          />\n        ) : null}\n        {useTokenId ? (\n          <TextField\n            variant=\"outlined\"\n            label=\"Token Id\"\n            value={tokenIdHolderString}\n            onChange={(event) => setTokenIdHolderString(event.target.value)}\n            fullWidth\n            margin=\"normal\"\n          />\n        ) : null}\n        {isLocalLoading || showLoader ? (\n          localLoader\n        ) : loadingError || selectionError ? (\n          displayLocalError\n        ) : (\n          <List component=\"div\" className={classes.tokenList}>\n            {featuredOptions.length ? (\n              <>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Featured {CHAINS_BY_ID[chainId].name} &gt;{\" \"}\n                  {CHAINS_BY_ID[targetChain].name} markets{\" \"}\n                  <Tooltip\n                    title={`Markets for these ${CHAINS_BY_ID[chainId].name} tokens exist for the corresponding tokens on ${CHAINS_BY_ID[targetChain].name}`}\n                  >\n                    <InfoOutlined\n                      fontSize=\"small\"\n                      style={{ verticalAlign: \"text-bottom\" }}\n                    />\n                  </Tooltip>\n                </Typography>\n\n                {featuredOptions.map((option) => {\n                  return (\n                    <TokenListItem\n                      key={\n                        option.publicKey +\n                        option.mintKey +\n                        (option.tokenId || \"\")\n                      }\n                      option={option}\n                    />\n                  );\n                })}\n\n                {nonFeaturedOptions.length ? (\n                  <>\n                    <Divider style={{ marginTop: 8, marginBottom: 16 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Other Assets\n                    </Typography>\n                  </>\n                ) : null}\n              </>\n            ) : null}\n            {nonFeaturedOptions.map((option) => {\n              return (\n                <TokenListItem\n                  key={\n                    option.publicKey + option.mintKey + (option.tokenId || \"\")\n                  }\n                  option={option}\n                />\n              );\n            })}\n            {featuredOptions.length || nonFeaturedOptions.length ? null : (\n              <div className={classes.alignCenter}>\n                <Typography>No results found</Typography>\n              </div>\n            )}\n          </List>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n\n  const selectionChip = (\n    <div className={classes.selectionButtonContainer}>\n      <Button\n        onClick={openDialog}\n        disabled={disabled}\n        variant=\"outlined\"\n        startIcon={<KeyboardArrowDownIcon />}\n        className={classes.selectionButton}\n      >\n        {value ? (\n          <RenderOption account={value} />\n        ) : (\n          <Typography color=\"textSecondary\">Select a token</Typography>\n        )}\n      </Button>\n    </div>\n  );\n\n  return (\n    <>\n      {dialog}\n      {value && nft ? <NFTViewer value={value} chainId={chainId} /> : null}\n      {selectionChip}\n    </>\n  );\n}\n","import { ChainId, CHAIN_ID_ALGORAND } from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Algodv2 } from \"algosdk\";\nimport React, { useCallback } from \"react\";\nimport { fetchSingleMetadata } from \"../../hooks/useAlgoMetadata\";\nimport { createParsedTokenAccount } from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport { ALGORAND_HOST } from \"../../utils/consts\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype AlgoTokenPickerProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n};\n\nconst returnsFalse = () => false;\n\nexport default function AlgoTokenPicker(props: AlgoTokenPickerProps) {\n  const { value, onChange, disabled, tokenAccounts, resetAccounts } = props;\n  const { walletAddress } = useIsWalletReady(CHAIN_ID_ALGORAND);\n\n  const resetAccountWrapper = useCallback(() => {\n    resetAccounts && resetAccounts();\n  }, [resetAccounts]);\n  const isLoading = tokenAccounts?.isFetching || false;\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [onChange]\n  );\n\n  const lookupAlgoAddress = useCallback(\n    (lookupAsset: string) => {\n      if (!walletAddress) {\n        return Promise.reject(\"Please connect using Decypher\");\n      }\n      const algodClient = new Algodv2(\n        ALGORAND_HOST.algodToken,\n        ALGORAND_HOST.algodServer,\n        ALGORAND_HOST.algodPort\n      );\n      return fetchSingleMetadata(lookupAsset, algodClient)\n        .then((metadata) => {\n          return algodClient\n            .accountInformation(walletAddress)\n            .do()\n            .then((accountInfo) => {\n              for (const asset of accountInfo.assets) {\n                const assetId = asset[\"asset-id\"];\n                if (assetId.toString() === lookupAsset) {\n                  const amount = asset.amount;\n                  return createParsedTokenAccount(\n                    walletAddress,\n                    assetId.toString(),\n                    amount,\n                    metadata.decimals,\n                    parseFloat(formatUnits(amount, metadata.decimals)),\n                    formatUnits(amount, metadata.decimals).toString(),\n                    metadata.symbol,\n                    metadata.tokenName,\n                    undefined,\n                    false\n                  );\n                }\n              }\n              return Promise.reject();\n            })\n            .catch(() => Promise.reject());\n        })\n        .catch(() => Promise.reject());\n    },\n    [walletAddress]\n  );\n\n  const isSearchableAddress = useCallback(\n    (address: string, chainId: ChainId) => {\n      if (address.length === 0) {\n        return false;\n      }\n      try {\n        parseInt(address);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    },\n    []\n  );\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, returnsFalse, false);\n    },\n    []\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={tokenAccounts?.data || []}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      isValidAddress={isSearchableAddress}\n      getAddress={lookupAlgoAddress}\n      disabled={disabled}\n      resetAccounts={resetAccountWrapper}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={false}\n      chainId={CHAIN_ID_ALGORAND}\n    />\n  );\n}\n","import { CHAIN_ID_APTOS, isValidAptosType } from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useCallback, useRef } from \"react\";\nimport { AptosCoinResourceReturn } from \"../../hooks/useAptosMetadata\";\nimport { createParsedTokenAccount } from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport { getAptosClient } from \"../../utils/aptos\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype AptosTokenPickerProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n  nft?: boolean;\n};\n\nconst returnsFalse = () => false;\n\nexport default function AptosTokenPicker(props: AptosTokenPickerProps) {\n  const { value, onChange, tokenAccounts, disabled, nft = false } = props;\n  const { walletAddress } = useIsWalletReady(CHAIN_ID_APTOS);\n  const nativeRefresh = useRef<() => void>(() => {});\n\n  const resetAccountWrapper = useCallback(() => {\n    //we can currently skip calling this as we don't read from sourceParsedTokenAccounts\n    //resetAccounts && resetAccounts();\n    nativeRefresh.current();\n  }, []);\n  const isLoading = tokenAccounts?.isFetching; //nativeIsLoading; // || (tokenMap?.isFetching || false);\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [onChange]\n  );\n\n  //TODO this only supports non-native assets. Native assets come from the hook.\n  //TODO correlate against token list to get metadata\n  const lookupAptosAddress = useCallback(\n    (lookupAsset: string) => {\n      if (!walletAddress) {\n        return Promise.reject(\"Please connect using Decypher\");\n      }\n      const client = getAptosClient();\n      return (async () => {\n        try {\n          const coinType = `0x1::coin::CoinInfo<${lookupAsset}>`;\n          const coinStore = `0x1::coin::CoinStore<${lookupAsset}>`;\n          const value = (\n            (await client.getAccountResource(walletAddress, coinStore))\n              .data as any\n          ).coin.value;\n          const assetInfo = (\n            await client.getAccountResource(\n              lookupAsset.split(\"::\")[0],\n              coinType\n            )\n          ).data as AptosCoinResourceReturn;\n          if (value && assetInfo) {\n            return createParsedTokenAccount(\n              walletAddress,\n              lookupAsset,\n              value.toString(),\n              assetInfo.decimals,\n              Number(formatUnits(value, assetInfo.decimals)),\n              formatUnits(value, assetInfo.decimals),\n              assetInfo.symbol,\n              assetInfo.name\n            );\n          } else {\n            throw new Error(\"Failed to retrieve Aptos account.\");\n          }\n        } catch (e) {\n          console.log(e);\n          return Promise.reject();\n        }\n      })();\n    },\n    [walletAddress]\n  );\n\n  const isSearchableAddress = useCallback((address: string) => {\n    return isValidAptosType(address);\n  }, []);\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, returnsFalse, nft);\n    },\n    [nft]\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={tokenAccounts?.data || []}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      isValidAddress={isSearchableAddress}\n      getAddress={nft ? undefined : lookupAptosAddress}\n      disabled={disabled}\n      resetAccounts={resetAccountWrapper}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={nft}\n      chainId={CHAIN_ID_APTOS}\n    />\n  );\n}\n","import { ethers_contracts } from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { arrayify, formatUnits } from \"ethers/lib/utils\";\nimport {\n  createNFTParsedTokenAccount,\n  createParsedTokenAccount,\n} from \"../hooks/useGetSourceParsedTokenAccounts\";\n\n//This is a valuable intermediate step to the parsed token account, as the token has metadata information on it.\nexport async function getEthereumToken(\n  tokenAddress: string,\n  provider: ethers.providers.Web3Provider\n) {\n  const token = ethers_contracts.TokenImplementation__factory.connect(\n    tokenAddress,\n    provider\n  );\n  return token;\n}\n\nexport async function ethTokenToParsedTokenAccount(\n  token: ethers_contracts.TokenImplementation,\n  signerAddress: string\n) {\n  const decimals = await token.decimals();\n  const balance = await token.balanceOf(signerAddress);\n  const symbol = await token.symbol();\n  const name = await token.name();\n  return createParsedTokenAccount(\n    signerAddress,\n    token.address,\n    balance.toString(),\n    decimals,\n    Number(formatUnits(balance, decimals)),\n    formatUnits(balance, decimals),\n    symbol,\n    name\n  );\n}\n\n//This is a valuable intermediate step to the parsed token account, as the token has metadata information on it.\nexport async function getEthereumNFT(\n  tokenAddress: string,\n  provider: ethers.providers.Web3Provider\n) {\n  const token = ethers_contracts.NFTImplementation__factory.connect(\n    tokenAddress,\n    provider\n  );\n  return token;\n}\n\nexport async function isNFT(token: ethers_contracts.NFTImplementation) {\n  const erc721 = \"0x80ac58cd\";\n  const erc721metadata = \"0x5b5e139f\";\n  const supportsErc721 = await token.supportsInterface(arrayify(erc721));\n  const supportsErc721Metadata = await token.supportsInterface(\n    arrayify(erc721metadata)\n  );\n  return supportsErc721 && supportsErc721Metadata;\n}\n\nexport async function ethNFTToNFTParsedTokenAccount(\n  token: ethers_contracts.NFTImplementation,\n  tokenId: string,\n  signerAddress: string\n) {\n  const decimals = 0;\n  const balance = (await token.ownerOf(tokenId)) === signerAddress ? 1 : 0;\n  const symbol = await token.symbol();\n  const name = await token.name();\n  const uri = await token.tokenURI(tokenId);\n  return createNFTParsedTokenAccount(\n    signerAddress,\n    token.address,\n    balance.toString(),\n    decimals,\n    Number(formatUnits(balance, decimals)),\n    formatUnits(balance, decimals),\n    tokenId,\n    symbol,\n    name,\n    uri\n  );\n}\n\nexport function isValidEthereumAddress(address: string) {\n  return ethers.utils.isAddress(address);\n}\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  ethers_contracts,\n} from \"@certusone/wormhole-sdk\";\nimport { WormholeAbi__factory } from \"@certusone/wormhole-sdk/lib/esm/ethers-contracts/abi\";\nimport { getAddress as getEthAddress } from \"@ethersproject/address\";\nimport React, { useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport {\n  selectNFTSourceParsedTokenAccount,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport {\n  getMigrationAssetMap,\n  WORMHOLE_V1_ETH_ADDRESS,\n} from \"../../utils/consts\";\nimport {\n  ethNFTToNFTParsedTokenAccount,\n  ethTokenToParsedTokenAccount,\n  getEthereumNFT,\n  getEthereumToken,\n  isValidEthereumAddress,\n} from \"../../utils/ethereum\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\nconst isWormholev1 = (provider: any, address: string, chainId: ChainId) => {\n  if (chainId !== CHAIN_ID_ETH) {\n    return Promise.resolve(false);\n  }\n  const connection = WormholeAbi__factory.connect(\n    WORMHOLE_V1_ETH_ADDRESS,\n    provider\n  );\n  return connection.isWrappedAsset(address);\n};\n\ntype EthereumSourceTokenSelectorProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n  chainId: ChainId;\n  nft?: boolean;\n};\n\nexport default function EvmTokenPicker(\n  props: EthereumSourceTokenSelectorProps\n) {\n  const {\n    value,\n    onChange,\n    tokenAccounts,\n    disabled,\n    resetAccounts,\n    chainId,\n    nft,\n  } = props;\n  const { provider, signerAddress } = useEthereumProvider(chainId);\n  const { isReady } = useIsWalletReady(chainId);\n  const selectedTokenAccount: NFTParsedTokenAccount | undefined = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccount\n      : selectTransferSourceParsedTokenAccount\n  );\n\n  const shouldDisplayBalance = useCallback(\n    (tokenAccount: NFTParsedTokenAccount) => {\n      const selectedMintMatch =\n        selectedTokenAccount &&\n        selectedTokenAccount.mintKey.toLowerCase() ===\n          tokenAccount.mintKey.toLowerCase();\n      //added just in case we start displaying NFT balances again.\n      const selectedTokenIdMatch =\n        selectedTokenAccount &&\n        selectedTokenAccount.tokenId === tokenAccount.tokenId;\n      return !!(\n        tokenAccount.isNativeAsset || //The native asset amount isn't taken from covalent, so can be trusted.\n        (selectedMintMatch && selectedTokenIdMatch)\n      );\n    },\n    [selectedTokenAccount]\n  );\n\n  const isMigrationEligible = useCallback(\n    (address: string) => {\n      const assetMap = getMigrationAssetMap(chainId);\n      return !!assetMap.get(getEthAddress(address));\n    },\n    [chainId]\n  );\n\n  const getAddress: (\n    address: string,\n    tokenId?: string\n  ) => Promise<NFTParsedTokenAccount> = useCallback(\n    async (address: string, tokenId?: string) => {\n      if (provider && signerAddress && isReady) {\n        try {\n          const tokenAccount = await (nft\n            ? getEthereumNFT(address, provider)\n            : getEthereumToken(address, provider));\n          if (!tokenAccount) {\n            return Promise.reject(\"Could not find the specified token.\");\n          }\n          if (nft && !tokenId) {\n            return Promise.reject(\"Token ID is required.\");\n          } else if (nft && tokenId) {\n            return ethNFTToNFTParsedTokenAccount(\n              tokenAccount as ethers_contracts.NFTImplementation,\n              tokenId,\n              signerAddress\n            );\n          } else {\n            return ethTokenToParsedTokenAccount(\n              tokenAccount as ethers_contracts.TokenImplementation,\n              signerAddress\n            );\n          }\n        } catch (e) {\n          return Promise.reject(\"Unable to retrive the specific token.\");\n        }\n      } else {\n        return Promise.reject({ error: \"Wallet is not connected.\" });\n      }\n    },\n    [isReady, nft, provider, signerAddress]\n  );\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      let v1 = false;\n      try {\n        v1 = await isWormholev1(provider, account.mintKey, chainId);\n      } catch (e) {\n        //For now, just swallow this one.\n      }\n      const migration = isMigrationEligible(account.mintKey);\n      if (v1 === true && !migration) {\n        throw new Error(\n          \"Wormhole v1 assets cannot be transferred with this bridge.\"\n        );\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [chainId, onChange, provider, isMigrationEligible]\n  );\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(\n        account,\n        isMigrationEligible,\n        nft || false,\n        shouldDisplayBalance\n      );\n    },\n    [nft, isMigrationEligible, shouldDisplayBalance]\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={tokenAccounts?.data || []}\n      RenderOption={RenderComp}\n      useTokenId={nft}\n      onChange={onChangeWrapper}\n      isValidAddress={isValidEthereumAddress}\n      getAddress={getAddress}\n      disabled={disabled}\n      resetAccounts={resetAccounts}\n      error={\"\"}\n      showLoader={tokenAccounts?.isFetching}\n      nft={nft || false}\n      chainId={chainId}\n    />\n  );\n}\n","import { Account } from \"near-api-js\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useNearContext } from \"../contexts/NearWalletContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { makeNearAccount } from \"../utils/near\";\nimport { AlgoMetadata } from \"./useAlgoMetadata\";\n\nexport const fetchSingleMetadata = async (\n  address: string,\n  account: Account\n): Promise<AlgoMetadata> => {\n  const assetInfo = await account.viewFunction(address, \"ft_metadata\");\n  return {\n    tokenName: assetInfo.name,\n    symbol: assetInfo.symbol,\n    decimals: assetInfo.decimals,\n  };\n};\n\nconst fetchNearMetadata = async (\n  addresses: string[],\n  nearAccountId: string\n) => {\n  const account = await makeNearAccount(nearAccountId);\n  const promises: Promise<AlgoMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, account));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, AlgoMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nfunction useNearMetadata(\n  addresses: string[]\n): DataWrapper<Map<string, AlgoMetadata>> {\n  const { accountId: nearAccountId } = useNearContext();\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, AlgoMetadata> | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (addresses.length && nearAccountId) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchNearMetadata(addresses, nearAccountId).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses, nearAccountId]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n}\n\nexport default useNearMetadata;\n","import { CHAIN_ID_NEAR } from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { useCallback } from \"react\";\nimport { createParsedTokenAccount } from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { fetchSingleMetadata } from \"../../hooks/useNearMetadata\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport { makeNearAccount } from \"../../utils/near\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype NearTokenPickerProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n};\n\nconst returnsFalse = () => false;\n\nexport default function NearTokenPicker(props: NearTokenPickerProps) {\n  const { value, onChange, disabled, tokenAccounts, resetAccounts } = props;\n  const { walletAddress } = useIsWalletReady(CHAIN_ID_NEAR);\n\n  const resetAccountWrapper = useCallback(() => {\n    resetAccounts && resetAccounts();\n  }, [resetAccounts]);\n  const isLoading = tokenAccounts?.isFetching || false;\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [onChange]\n  );\n\n  const lookupNearAddress = useCallback(\n    (lookupAsset: string) => {\n      if (!walletAddress) {\n        return Promise.reject(\"Please connect using Decypher\");\n      }\n      return makeNearAccount(walletAddress)\n        .then((account) => {\n          return fetchSingleMetadata(lookupAsset, account)\n            .then((metadata) => {\n              return account\n                .viewFunction(lookupAsset, \"ft_balance_of\", {\n                  account_id: walletAddress,\n                })\n                .then((amount) => {\n                  return createParsedTokenAccount(\n                    walletAddress,\n                    lookupAsset,\n                    amount,\n                    metadata.decimals,\n                    parseFloat(formatUnits(amount, metadata.decimals)),\n                    formatUnits(amount, metadata.decimals).toString(),\n                    metadata.symbol,\n                    metadata.tokenName,\n                    undefined,\n                    false\n                  );\n                })\n                .catch(() => Promise.reject());\n            })\n            .catch(() => Promise.reject());\n        })\n        .catch(() => Promise.reject());\n    },\n    [walletAddress]\n  );\n\n  const isSearchableAddress = useCallback(\n    (address: string) => address.length > 0,\n    []\n  );\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, returnsFalse, false);\n    },\n    []\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={tokenAccounts?.data || []}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      isValidAddress={isSearchableAddress}\n      getAddress={lookupNearAddress}\n      disabled={disabled}\n      resetAccounts={resetAccountWrapper}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={false}\n      chainId={CHAIN_ID_NEAR}\n    />\n  );\n}\n","import {\n  createStyles,\n  IconButton,\n  makeStyles,\n  Tooltip,\n} from \"@material-ui/core\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    inlineContentWrapper: {\n      display: \"inline-block\",\n      flexGrow: 1,\n    },\n    flexWrapper: {\n      \"& > *\": {\n        margin: \".5rem\",\n      },\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  })\n);\n\nexport default function RefreshButtonWrapper({\n  children,\n  callback,\n}: {\n  children: JSX.Element;\n  callback: () => any;\n}) {\n  const classes = useStyles();\n\n  const refreshWrapper = (\n    <div className={classes.flexWrapper}>\n      <div className={classes.inlineContentWrapper}>{children}</div>\n      <Tooltip title=\"Reload Tokens\">\n        <IconButton onClick={callback}>\n          <RefreshIcon />\n        </IconButton>\n      </Tooltip>\n    </div>\n  );\n\n  return refreshWrapper;\n}\n","import { Dispatch } from \"@reduxjs/toolkit\";\nimport { ENV, TokenInfo, TokenListProvider } from \"@solana/spl-token-registry\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectSolanaTokenMap } from \"../store/selectors\";\nimport {\n  errorSolanaTokenMap,\n  fetchSolanaTokenMap,\n  receiveSolanaTokenMap,\n} from \"../store/tokenSlice\";\nimport { CLUSTER } from \"../utils/consts\";\n\nconst environment = CLUSTER === \"testnet\" ? ENV.Testnet : ENV.MainnetBeta;\n\nconst useSolanaTokenMap = (): DataWrapper<TokenInfo[]> => {\n  const tokenMap = useSelector(selectSolanaTokenMap);\n  const dispatch = useDispatch();\n  const shouldFire =\n    tokenMap.data === undefined ||\n    (tokenMap.data === null && !tokenMap.isFetching);\n\n  useEffect(() => {\n    if (shouldFire) {\n      getSolanaTokenMap(dispatch);\n    }\n  }, [dispatch, shouldFire]);\n\n  return tokenMap;\n};\n\nconst getSolanaTokenMap = (dispatch: Dispatch) => {\n  dispatch(fetchSolanaTokenMap());\n\n  new TokenListProvider().resolve().then(\n    (tokens) => {\n      const tokenList = tokens.filterByChainId(environment).getList();\n      dispatch(receiveSolanaTokenMap(tokenList));\n    },\n    (error) => {\n      console.error(error);\n      dispatch(errorSolanaTokenMap(\"Failed to retrieve the Dijets token map.\"));\n    }\n  );\n};\n\nexport default useSolanaTokenMap;\n","import { ParsedTokenAccount } from \"../store/transferSlice\";\n\nexport const sortParsedTokenAccounts = (\n  a: ParsedTokenAccount,\n  b: ParsedTokenAccount\n) =>\n  a.isNativeAsset && !b.isNativeAsset\n    ? -1\n    : !a.isNativeAsset && b.isNativeAsset\n    ? 1\n    : a.symbol && b.symbol\n    ? a.symbol.localeCompare(b.symbol)\n    : a.symbol\n    ? -1\n    : b.symbol\n    ? 1\n    : 0;\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport React, { useCallback, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useMarketsMap from \"../../hooks/useMarketsMap\";\nimport useMetaplexData from \"../../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../../hooks/useSolanaTokenMap\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { selectTransferTargetChain } from \"../../store/selectors\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport {\n  SOLLET_MINT_AUTHORITY,\n  WORMHOLE_V1_MINT_AUTHORITY,\n} from \"../../utils/consts\";\nimport { ExtractedMintInfo } from \"../../utils/solana\";\nimport { sortParsedTokenAccounts } from \"../../utils/sort\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype SolanaSourceTokenSelectorProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: NFTParsedTokenAccount | null) => void;\n  accounts: DataWrapper<NFTParsedTokenAccount[]> | null | undefined;\n  disabled: boolean;\n  mintAccounts:\n    | DataWrapper<Map<string, ExtractedMintInfo | null> | undefined>\n    | undefined;\n  resetAccounts: (() => void) | undefined;\n  nft?: boolean;\n};\n\nconst isMigrationEligible = (address: string) => {\n  return false;\n};\n\nexport default function SolanaSourceTokenSelector(\n  props: SolanaSourceTokenSelectorProps\n) {\n  const {\n    value,\n    onChange,\n    disabled,\n    resetAccounts,\n    nft,\n    accounts,\n    mintAccounts,\n  } = props;\n  const tokenMap = useSolanaTokenMap();\n  const mintAddresses = useMemo(() => {\n    const output: string[] = [];\n    mintAccounts?.data?.forEach(\n      (mintAuth, mintAddress) => mintAddress && output.push(mintAddress)\n    );\n    return output;\n  }, [mintAccounts?.data]);\n  const metaplex = useMetaplexData(mintAddresses);\n  const markets = useMarketsMap(!nft);\n  const targetChain = useSelector(selectTransferTargetChain);\n\n  const memoizedTokenMap: Map<String, TokenInfo> = useMemo(() => {\n    const output = new Map<String, TokenInfo>();\n\n    if (tokenMap.data) {\n      for (const data of tokenMap.data) {\n        if (data && data.address) {\n          output.set(data.address, data);\n        }\n      }\n    }\n\n    return output;\n  }, [tokenMap]);\n\n  const getLogo = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.logo) ||\n        memoizedTokenMap.get(account.mintKey)?.logoURI ||\n        metaplex.data?.get(account.mintKey)?.data?.uriMetadata?.image ||\n        metaplex.data?.get(account.mintKey)?.data?.uri ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  const getSymbol = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.symbol) ||\n        memoizedTokenMap.get(account.mintKey)?.symbol ||\n        metaplex.data?.get(account.mintKey)?.data?.symbol ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  const getName = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.name) ||\n        memoizedTokenMap.get(account.mintKey)?.name ||\n        metaplex.data?.get(account.mintKey)?.data?.name ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  //This exists to remove NFTs from the list of potential options. It requires reading the metaplex data, so it would be\n  //difficult to do before this point.\n  const filteredOptions = useMemo(() => {\n    const array = accounts?.data || [];\n    const tokenList = array.filter((x) => {\n      const zeroBalance = x.amount === \"0\";\n      if (zeroBalance) {\n        return false;\n      }\n      const isNFT =\n        x.decimals === 0 && metaplex.data?.get(x.mintKey)?.data?.uri;\n      const is721CompatibleNFT =\n        isNFT && mintAccounts?.data?.get(x.mintKey)?.supply === \"1\";\n      return nft ? is721CompatibleNFT : !isNFT;\n    });\n    tokenList.sort(sortParsedTokenAccounts);\n    return tokenList;\n  }, [mintAccounts?.data, metaplex.data, nft, accounts]);\n\n  const accountsWithMetadata = useMemo(() => {\n    return filteredOptions.map((account) => {\n      const logo = getLogo(account);\n      const symbol = getSymbol(account);\n      const name = getName(account);\n\n      const uri = getLogo(account);\n\n      return {\n        ...account,\n        name,\n        symbol,\n        logo,\n        uri,\n      };\n    });\n  }, [filteredOptions, getLogo, getName, getSymbol]);\n\n  const isLoading =\n    accounts?.isFetching || metaplex.isFetching || tokenMap.isFetching;\n\n  const isWormholev1orSollet = useCallback(\n    (address: string) => {\n      //This is a v1 wormhole token on testnet\n      //address = \"4QixXecTZ4zdZGa39KH8gVND5NZ2xcaB12wiBhE4S7rn\";\n\n      //Anything we find in the features market map will be a non-v1 token. This has to short circuit the other checks\n      //As the featured market parsed token accounts are spoofed in by the token picker and lack valid metadata.\n      if (!nft) {\n        const marketsData = markets.data;\n        const featuredMarkets =\n          marketsData?.tokenMarkets?.[CHAIN_ID_SOLANA]?.[targetChain];\n        if (!!featuredMarkets?.[address]) {\n          return false;\n        }\n      }\n\n      if (!props.mintAccounts?.data) {\n        return true; //These should never be null by this point\n      }\n      const mintAuthority = props.mintAccounts.data.get(address)?.mintAuthority;\n\n      if (!mintAuthority) {\n        return true; //We should never fail to pull the mint of an account.\n      }\n\n      if (mintAuthority === WORMHOLE_V1_MINT_AUTHORITY) {\n        return true; //This means the mint was created by the wormhole v1 contract, and we want to disallow its transfer.\n      }\n\n      if (mintAuthority === SOLLET_MINT_AUTHORITY) {\n        return true; //This means the mint was created by the sollet contract, and we want to disallow its transfer.\n      }\n\n      return false;\n    },\n    [props.mintAccounts, markets.data, nft, targetChain]\n  );\n\n  const onChangeWrapper = useCallback(\n    async (newValue: NFTParsedTokenAccount | null) => {\n      let v1 = false;\n      if (newValue === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      try {\n        v1 = isWormholev1orSollet(newValue.mintKey);\n      } catch (e) {\n        //swallow for now\n      }\n\n      if (v1 && !isMigrationEligible(newValue.mintKey)) {\n        throw Error(\n          \"Wormhole v1 and Sollet assets should not be transferred with this bridge.\"\n        );\n      }\n\n      onChange(newValue);\n      return Promise.resolve();\n    },\n    [isWormholev1orSollet, onChange]\n  );\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, isMigrationEligible, nft || false);\n    },\n    [nft]\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={accountsWithMetadata}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      disabled={disabled}\n      resetAccounts={resetAccounts}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={nft || false}\n      chainId={CHAIN_ID_SOLANA}\n    />\n  );\n}\n","import { ChainId, terra, TerraChainId } from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport React, { useCallback, useMemo, useRef } from \"react\";\nimport { createParsedTokenAccount } from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useTerraNativeBalances from \"../../hooks/useTerraNativeBalances\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport { SUPPORTED_TERRA_TOKENS, getTerraConfig } from \"../../utils/consts\";\nimport {\n  formatNativeDenom,\n  getNativeTerraIcon,\n  isValidTerraAddress,\n  NATIVE_TERRA_DECIMALS,\n} from \"../../utils/terra\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype TerraTokenPickerProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n  chainId: TerraChainId;\n};\n\nconst returnsFalse = () => false;\n\nexport default function TerraTokenPicker(props: TerraTokenPickerProps) {\n  const { value, onChange, disabled, chainId } = props;\n  const { walletAddress } = useIsWalletReady(chainId);\n  const nativeRefresh = useRef<() => void>(() => {});\n  const { balances, isLoading: nativeIsLoading } = useTerraNativeBalances(\n    chainId,\n    walletAddress,\n    nativeRefresh\n  );\n\n  const resetAccountWrapper = useCallback(() => {\n    //we can currently skip calling this as we don't read from sourceParsedTokenAccounts\n    //resetAccounts && resetAccounts();\n    nativeRefresh.current();\n  }, []);\n  const isLoading = nativeIsLoading; // || (tokenMap?.isFetching || false);\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [onChange]\n  );\n\n  const terraTokenArray = useMemo(() => {\n    const balancesItems =\n      balances && walletAddress\n        ? Object.keys(balances).map((denom) =>\n            // ({\n            //   protocol: \"native\",\n            //   symbol: formatNativeDenom(denom),\n            //   token: denom,\n            //   icon: getNativeTerraIcon(formatNativeDenom(denom)),\n            //   balance: balances[denom],\n            // } as TerraTokenMetadata)\n\n            //TODO support non-natives in the SUPPORTED_TERRA_TOKENS\n            //This token account makes a lot of assumptions\n            createParsedTokenAccount(\n              walletAddress,\n              denom,\n              balances[denom], //amount\n              NATIVE_TERRA_DECIMALS, //TODO actually get decimals rather than hardcode\n              0, //uiAmount is unused\n              formatUnits(balances[denom], NATIVE_TERRA_DECIMALS), //uiAmountString\n              formatNativeDenom(denom, props.chainId), // symbol\n              undefined, //name\n              getNativeTerraIcon(formatNativeDenom(denom, props.chainId)), //logo\n              true //is native asset\n            )\n          )\n        : [];\n    return balancesItems.filter((metadata) =>\n      SUPPORTED_TERRA_TOKENS.includes(metadata.mintKey)\n    );\n    // const values = tokenMap.data?.mainnet;\n    // const tokenMapItems = Object.values(values || {}) || [];\n    // return [...balancesItems, ...tokenMapItems];\n  }, [\n    walletAddress,\n    balances,\n    props.chainId,\n    // tokenMap\n  ]);\n\n  //TODO this only supports non-native assets. Native assets come from the hook.\n  //TODO correlate against token list to get metadata\n  const lookupTerraAddress = useCallback(\n    (lookupAsset: string) => {\n      if (!walletAddress) {\n        return Promise.reject(\"Please connect using Decypher\");\n      }\n      const lcd = new LCDClient(getTerraConfig(chainId));\n      return lcd.wasm\n        .contractQuery(lookupAsset, {\n          token_info: {},\n        })\n        .then((info: any) =>\n          lcd.wasm\n            .contractQuery(lookupAsset, {\n              balance: {\n                address: walletAddress,\n              },\n            })\n            .then((balance: any) => {\n              if (balance && info) {\n                return createParsedTokenAccount(\n                  walletAddress,\n                  lookupAsset,\n                  balance.balance.toString(),\n                  info.decimals,\n                  Number(formatUnits(balance.balance, info.decimals)),\n                  formatUnits(balance.balance, info.decimals),\n                  info.symbol,\n                  info.name\n                );\n              } else {\n                throw new Error(\"Failed to retrieve Terra account.\");\n              }\n            })\n        )\n        .catch(() => {\n          return Promise.reject();\n        });\n    },\n    [walletAddress, chainId]\n  );\n\n  const isSearchableAddress = useCallback(\n    (address: string, chainId: ChainId) => {\n      return (\n        isValidTerraAddress(address, chainId as TerraChainId) &&\n        !terra.isNativeDenom(address)\n      );\n    },\n    []\n  );\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, returnsFalse, false);\n    },\n    []\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={terraTokenArray || []}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      isValidAddress={isSearchableAddress}\n      getAddress={lookupTerraAddress}\n      disabled={disabled}\n      resetAccounts={resetAccountWrapper}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={false}\n      chainId={chainId}\n    />\n  );\n}\n","import { CHAIN_ID_XPLA, isNativeDenomXpla } from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useCallback, useMemo, useRef } from \"react\";\nimport { createParsedTokenAccount } from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useXplaNativeBalances from \"../../hooks/useXplaNativeBalances\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport { XPLA_NATIVE_DENOM, XPLA_LCD_CLIENT_CONFIG } from \"../../utils/consts\";\nimport {\n  formatNativeDenom,\n  isValidXplaAddress,\n  NATIVE_XPLA_DECIMALS,\n  XPLA_NATIVE_TOKEN_ICON,\n} from \"../../utils/xpla\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\nimport { LCDClient } from \"@xpla/xpla.js\";\n\ntype XplaTokenPickerProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n};\n\nconst returnsFalse = () => false;\n\nexport default function XplaTokenPicker(props: XplaTokenPickerProps) {\n  const { value, onChange, disabled } = props;\n  const { walletAddress } = useIsWalletReady(CHAIN_ID_XPLA);\n  const nativeRefresh = useRef<() => void>(() => {});\n  const { balances, isLoading: nativeIsLoading } = useXplaNativeBalances(\n    walletAddress,\n    nativeRefresh\n  );\n\n  const resetAccountWrapper = useCallback(() => {\n    //we can currently skip calling this as we don't read from sourceParsedTokenAccounts\n    //resetAccounts && resetAccounts();\n    nativeRefresh.current();\n  }, []);\n  const isLoading = nativeIsLoading; // || (tokenMap?.isFetching || false);\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [onChange]\n  );\n\n  const xplaTokenArray = useMemo(() => {\n    const balancesItems =\n      balances && walletAddress\n        ? Object.keys(balances).map((denom) =>\n            //This token account makes a lot of assumptions\n            createParsedTokenAccount(\n              walletAddress,\n              denom,\n              balances[denom], //amount\n              NATIVE_XPLA_DECIMALS, //TODO actually get decimals rather than hardcode\n              0, //uiAmount is unused\n              formatUnits(balances[denom], NATIVE_XPLA_DECIMALS), //uiAmountString\n              formatNativeDenom(denom), // symbol\n              undefined, //name\n              XPLA_NATIVE_TOKEN_ICON,\n              true //is native asset\n            )\n          )\n        : [];\n    return balancesItems.filter(\n      (metadata) => metadata.mintKey === XPLA_NATIVE_DENOM\n    );\n  }, [walletAddress, balances]);\n\n  //TODO this only supports non-native assets. Native assets come from the hook.\n  //TODO correlate against token list to get metadata\n  const lookupXplaAddress = useCallback(\n    (lookupAsset: string) => {\n      if (!walletAddress) {\n        return Promise.reject(\"Please connect using Decypher\");\n      }\n      const lcd = new LCDClient(XPLA_LCD_CLIENT_CONFIG);\n      return lcd.wasm\n        .contractQuery(lookupAsset, {\n          token_info: {},\n        })\n        .then((info: any) =>\n          lcd.wasm\n            .contractQuery(lookupAsset, {\n              balance: {\n                address: walletAddress,\n              },\n            })\n            .then((balance: any) => {\n              if (balance && info) {\n                return createParsedTokenAccount(\n                  walletAddress,\n                  lookupAsset,\n                  balance.balance.toString(),\n                  info.decimals,\n                  Number(formatUnits(balance.balance, info.decimals)),\n                  formatUnits(balance.balance, info.decimals),\n                  info.symbol,\n                  info.name\n                );\n              } else {\n                throw new Error(\"Failed to retrieve Xpla account.\");\n              }\n            })\n        )\n        .catch(() => {\n          return Promise.reject();\n        });\n    },\n    [walletAddress]\n  );\n\n  const isSearchableAddress = useCallback((address: string) => {\n    return isValidXplaAddress(address) && !isNativeDenomXpla(address);\n  }, []);\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, returnsFalse, false);\n    },\n    []\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={xplaTokenArray || []}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      isValidAddress={isSearchableAddress}\n      getAddress={lookupXplaAddress}\n      disabled={disabled}\n      resetAccounts={resetAccountWrapper}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={false}\n      chainId={CHAIN_ID_XPLA}\n    />\n  );\n}\n","import { LCDClient } from \"@xpla/xpla.js\";\nimport { MutableRefObject, useEffect, useMemo, useState } from \"react\";\nimport { XPLA_LCD_CLIENT_CONFIG } from \"../utils/consts\";\n\nexport interface XplaNativeBalances {\n  [index: string]: string;\n}\n\nexport default function useXplaNativeBalances(\n  walletAddress?: string,\n  refreshRef?: MutableRefObject<() => void>\n) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [balances, setBalances] = useState<XplaNativeBalances | undefined>({});\n  const [refresh, setRefresh] = useState(false);\n  useEffect(() => {\n    if (refreshRef) {\n      refreshRef.current = () => {\n        setRefresh(true);\n      };\n    }\n  }, [refreshRef]);\n  useEffect(() => {\n    setRefresh(false);\n    if (walletAddress) {\n      setIsLoading(true);\n      setBalances(undefined);\n      const lcd = new LCDClient(XPLA_LCD_CLIENT_CONFIG);\n      lcd.bank\n        .balance(walletAddress)\n        .then(([coins]) => {\n          // coins doesn't support reduce\n          const balancePairs = coins.map(({ amount, denom }) => [\n            denom,\n            amount,\n          ]);\n          const balance = balancePairs.reduce((obj, current) => {\n            obj[current[0].toString()] = current[1].toString();\n            return obj;\n          }, {} as XplaNativeBalances);\n          setIsLoading(false);\n          setBalances(balance);\n        })\n        .catch((e) => {\n          console.error(e);\n          setIsLoading(false);\n          setBalances(undefined);\n        });\n    } else {\n      setIsLoading(false);\n      setBalances(undefined);\n    }\n  }, [walletAddress, refresh]);\n  const value = useMemo(() => ({ isLoading, balances }), [isLoading, balances]);\n  return value;\n}\n","var _path, _path2, _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgInjective(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 600,\n    height: 600,\n    viewBox: \"0 0 600 600\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M148.497 169.135C150.981 166.013 153.613 163.009 156.245 160.005C156.363 159.856 156.63 159.826 156.748 159.677C156.985 159.38 157.37 159.201 157.606 158.903L157.843 158.606C159.678 156.91 161.63 155.064 163.881 153.456C171.845 147.41 180.11 142.817 188.825 139.795C216.778 129.981 247.894 136.029 272.295 159.065C306.366 191.002 303.315 242.451 276.117 276.647C241.748 327.625 182.684 398.748 264.463 462.46C279.167 473.916 290.075 483.361 336.392 496.746C306.1 502.326 278.012 500.59 246.748 492.605C224.634 480.123 189.866 453.397 178.037 417.3C160.159 362.562 209.513 280.732 233.365 249.216C266.113 205.599 213.124 158.382 174.112 211.095C153.72 238.566 118.044 316.303 130.442 373.965C137.691 406.664 147.353 430.499 185.663 463.241C178.559 459.049 171.66 454.294 164.968 448.974C75.957 366.06 86.2838 237.859 148.497 169.135Z\",\n    fill: \"url(#paint0_linear)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M451.503 430.865C449.019 433.987 446.387 436.991 443.755 439.995C443.637 440.144 443.37 440.174 443.252 440.323C443.015 440.62 442.63 440.799 442.394 441.097L442.157 441.394C440.322 443.09 438.37 444.936 436.119 446.544C428.155 452.59 419.89 457.183 411.175 460.205C383.222 470.019 352.106 463.971 327.705 440.935C293.634 408.998 296.685 357.549 323.883 323.353C358.252 272.375 417.316 201.252 335.537 137.54C320.833 126.084 309.925 116.639 263.608 103.254C293.9 97.6736 321.988 99.4095 353.251 107.395C375.366 119.877 410.134 146.603 421.963 182.7C439.841 237.438 390.487 319.268 366.635 350.784C333.887 394.401 386.876 441.618 425.888 388.905C446.28 361.434 481.956 283.697 469.558 226.035C462.309 193.336 452.647 169.501 414.337 136.759C421.441 140.951 428.34 145.706 435.032 151.026C524.043 233.94 513.716 362.141 451.503 430.865Z\",\n    fill: \"url(#paint1_linear)\"\n  })), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint0_linear\",\n    x1: 100,\n    y1: 300,\n    x2: 500,\n    y2: 300,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#0082FA\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#00F2FE\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint1_linear\",\n    x1: 100,\n    y1: 300,\n    x2: 500,\n    y2: 300,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#0082FA\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#00F2FE\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgInjective);\nexport default __webpack_public_path__ + \"static/media/injective.ac2f95a4532d20546ad21b59abc01d13.svg\";\nexport { ForwardRef as ReactComponent };","import {\n  CHAIN_ID_INJECTIVE,\n  isNativeDenomInjective,\n  parseSmartContractStateResponse,\n} from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useCallback, useMemo, useRef } from \"react\";\nimport { createParsedTokenAccount } from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useInjectiveNativeBalances from \"../../hooks/useInjectiveNativeBalances\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\nimport {\n  formatNativeDenom,\n  getInjectiveWasmClient,\n  INJECTIVE_NATIVE_DENOM,\n  isValidInjectiveAddress,\n  NATIVE_INJECTIVE_DECIMALS,\n} from \"../../utils/injective\";\nimport injectiveIcon from \"../../icons/injective.svg\";\n\ntype InjectiveTokenPickerProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n};\n\nconst returnsFalse = () => false;\n\nexport default function InjectiveTokenPicker(props: InjectiveTokenPickerProps) {\n  const { value, onChange, disabled } = props;\n  const { walletAddress } = useIsWalletReady(CHAIN_ID_INJECTIVE);\n  const nativeRefresh = useRef<() => void>(() => {});\n  const { balances, isLoading: nativeIsLoading } = useInjectiveNativeBalances(\n    walletAddress,\n    nativeRefresh\n  );\n\n  const resetAccountWrapper = useCallback(() => {\n    //we can currently skip calling this as we don't read from sourceParsedTokenAccounts\n    //resetAccounts && resetAccounts();\n    nativeRefresh.current();\n  }, []);\n  const isLoading = nativeIsLoading; // || (tokenMap?.isFetching || false);\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [onChange]\n  );\n\n  const injTokenArray = useMemo(() => {\n    const balancesItems =\n      balances && walletAddress\n        ? Object.keys(balances).map((denom) =>\n            //This token account makes a lot of assumptions\n            createParsedTokenAccount(\n              walletAddress,\n              denom,\n              balances[denom], //amount\n              NATIVE_INJECTIVE_DECIMALS, //TODO actually get decimals rather than hardcode\n              0, //uiAmount is unused\n              formatUnits(balances[denom], NATIVE_INJECTIVE_DECIMALS), //uiAmountString\n              formatNativeDenom(denom), // symbol\n              undefined, //name\n              injectiveIcon,\n              true //is native asset\n            )\n          )\n        : [];\n    return balancesItems.filter(\n      (metadata) => metadata.mintKey === INJECTIVE_NATIVE_DENOM\n    );\n  }, [walletAddress, balances]);\n\n  //TODO this only supports non-native assets. Native assets come from the hook.\n  //TODO correlate against token list to get metadata\n  const lookupInjectiveAddress = useCallback(\n    (lookupAsset: string) => {\n      if (!walletAddress) {\n        return Promise.reject(\"Please connect using Decypher\");\n      }\n      const client = getInjectiveWasmClient();\n      return client\n        .fetchSmartContractState(\n          lookupAsset,\n          Buffer.from(\n            JSON.stringify({\n              token_info: {},\n            })\n          ).toString(\"base64\")\n        )\n        .then((infoData) =>\n          client\n            .fetchSmartContractState(\n              lookupAsset,\n              Buffer.from(\n                JSON.stringify({\n                  balance: {\n                    address: walletAddress,\n                  },\n                })\n              ).toString(\"base64\")\n            )\n            .then((balanceData) => {\n              if (infoData && balanceData) {\n                const balance = parseSmartContractStateResponse(balanceData);\n                const info = parseSmartContractStateResponse(infoData);\n                return createParsedTokenAccount(\n                  walletAddress,\n                  lookupAsset,\n                  balance.balance.toString(),\n                  info.decimals,\n                  Number(formatUnits(balance.balance, info.decimals)),\n                  formatUnits(balance.balance, info.decimals),\n                  info.symbol,\n                  info.name\n                );\n              } else {\n                throw new Error(\"Failed to retrieve Injective account.\");\n              }\n            })\n        )\n        .catch((e) => {\n          return Promise.reject(e);\n        });\n    },\n    [walletAddress]\n  );\n\n  const isSearchableAddress = useCallback((address: string) => {\n    return isValidInjectiveAddress(address) && !isNativeDenomInjective(address);\n  }, []);\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, returnsFalse, false);\n    },\n    []\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={injTokenArray || []}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      isValidAddress={isSearchableAddress}\n      getAddress={lookupInjectiveAddress}\n      disabled={disabled}\n      resetAccounts={resetAccountWrapper}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={false}\n      chainId={CHAIN_ID_INJECTIVE}\n    />\n  );\n}\n","import { MutableRefObject, useEffect, useMemo, useState } from \"react\";\nimport { getInjectiveBankClient } from \"../utils/injective\";\n\nexport interface InjectiveNativeBalances {\n  [index: string]: string;\n}\n\nexport default function useInjectiveNativeBalances(\n  walletAddress?: string,\n  refreshRef?: MutableRefObject<() => void>\n) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [balances, setBalances] = useState<InjectiveNativeBalances | undefined>(\n    {}\n  );\n  const [refresh, setRefresh] = useState(false);\n  useEffect(() => {\n    if (refreshRef) {\n      refreshRef.current = () => {\n        setRefresh(true);\n      };\n    }\n  }, [refreshRef]);\n  useEffect(() => {\n    setRefresh(false);\n    if (walletAddress) {\n      setIsLoading(true);\n      setBalances(undefined);\n      const client = getInjectiveBankClient();\n      client\n        .fetchBalances(walletAddress)\n        .then(({ balances }) => {\n          const nativeBalances = balances.reduce((obj, { denom, amount }) => {\n            obj[denom] = amount;\n            return obj;\n          }, {} as InjectiveNativeBalances);\n          setIsLoading(false);\n          setBalances(nativeBalances);\n        })\n        .catch((e) => {\n          console.error(e);\n          setIsLoading(false);\n          setBalances(undefined);\n        });\n    } else {\n      setIsLoading(false);\n      setBalances(undefined);\n    }\n  }, [walletAddress, refresh]);\n  const value = useMemo(() => ({ isLoading, balances }), [isLoading, balances]);\n  return value;\n}\n","import { CHAIN_ID_SUI, isValidAptosType } from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useCallback, useRef } from \"react\";\nimport { createParsedTokenAccount } from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport { getSuiProvider } from \"../../utils/sui\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype SuiTokenPickerProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n};\n\nexport default function SuiTokenPicker(props: SuiTokenPickerProps) {\n  const { value, onChange, tokenAccounts, disabled } = props;\n  const { walletAddress } = useIsWalletReady(CHAIN_ID_SUI);\n  const nativeRefresh = useRef<() => void>(() => {});\n\n  const resetAccountWrapper = useCallback(() => {\n    //we can currently skip calling this as we don't read from sourceParsedTokenAccounts\n    //resetAccounts && resetAccounts();\n    nativeRefresh.current();\n  }, []);\n  const isLoading = tokenAccounts?.isFetching;\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [onChange]\n  );\n\n  //TODO this only supports non-native assets. Native assets come from the hook.\n  //TODO correlate against token list to get metadata\n  const lookupSuiAddress = useCallback(\n    (lookupAsset: string) => {\n      if (!walletAddress) {\n        return Promise.reject(\"Please connect using Decypher\");\n      }\n      const provider = getSuiProvider();\n      return (async () => {\n        try {\n          const { totalBalance } = await provider.getBalance({\n            owner: walletAddress,\n            coinType: lookupAsset,\n          });\n          const response = await provider.getCoinMetadata({\n            coinType: lookupAsset,\n          });\n          if (!response) throw new Error(\"bad response\");\n          const { decimals, symbol, name } = response;\n          return createParsedTokenAccount(\n            walletAddress,\n            lookupAsset,\n            totalBalance,\n            decimals,\n            Number(formatUnits(totalBalance, decimals)),\n            formatUnits(totalBalance, decimals),\n            symbol,\n            name\n          );\n        } catch (e) {\n          console.log(e);\n          return Promise.reject();\n        }\n      })();\n    },\n    [walletAddress]\n  );\n\n  const isSearchableAddress = useCallback((address: string) => {\n    // TODO: rename to `isValidMoveType` in SDK\n    return isValidAptosType(address);\n  }, []);\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, (address: string) => false, false);\n    },\n    []\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={tokenAccounts?.data || []}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      isValidAddress={isSearchableAddress}\n      getAddress={lookupSuiAddress}\n      disabled={disabled}\n      resetAccounts={resetAccountWrapper}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={false}\n      chainId={CHAIN_ID_SUI}\n    />\n  );\n}\n","//import Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_SUI,\n  CHAIN_ID_XPLA,\n  isEVMChain,\n  isTerraChain,\n} from \"@certusone/wormhole-sdk\";\nimport { TextField, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useGetSourceParsedTokens from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  setSourceParsedTokenAccount as setNFTSourceParsedTokenAccount,\n  setSourceWalletAddress as setNFTSourceWalletAddress,\n} from \"../../store/nftSlice\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport {\n  ParsedTokenAccount,\n  setSourceParsedTokenAccount as setTransferSourceParsedTokenAccount,\n  setSourceWalletAddress as setTransferSourceWalletAddress,\n} from \"../../store/transferSlice\";\nimport AlgoTokenPicker from \"./AlgoTokenPicker\";\nimport AptosTokenPicker from \"./AptosTokenPicker\";\nimport EvmTokenPicker from \"./EvmTokenPicker\";\nimport NearTokenPicker from \"./NearTokenPicker\";\nimport RefreshButtonWrapper from \"./RefreshButtonWrapper\";\nimport SolanaTokenPicker from \"./SolanaTokenPicker\";\nimport TerraTokenPicker from \"./TerraTokenPicker\";\nimport XplaTokenPicker from \"./XplaTokenPicker\";\nimport InjectiveTokenPicker from \"./InjectiveTokenPicker\";\nimport SuiTokenPicker from \"./SuiTokenPicker\";\n\ntype TokenSelectorProps = {\n  disabled: boolean;\n  nft?: boolean;\n};\n\nexport const TokenSelector = (props: TokenSelectorProps) => {\n  const { disabled, nft } = props;\n  const dispatch = useDispatch();\n\n  const lookupChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const sourceParsedTokenAccount = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccount\n      : selectTransferSourceParsedTokenAccount\n  );\n  const walletIsReady = useIsWalletReady(lookupChain);\n\n  const setSourceParsedTokenAccount = nft\n    ? setNFTSourceParsedTokenAccount\n    : setTransferSourceParsedTokenAccount;\n  const setSourceWalletAddress = nft\n    ? setNFTSourceWalletAddress\n    : setTransferSourceWalletAddress;\n\n  const handleOnChange = useCallback(\n    (newTokenAccount: ParsedTokenAccount | null) => {\n      if (!newTokenAccount) {\n        dispatch(setSourceParsedTokenAccount(undefined));\n        dispatch(setSourceWalletAddress(undefined));\n      } else if (newTokenAccount !== undefined && walletIsReady.walletAddress) {\n        dispatch(setSourceParsedTokenAccount(newTokenAccount));\n        dispatch(setSourceWalletAddress(walletIsReady.walletAddress));\n      }\n    },\n    [\n      dispatch,\n      walletIsReady,\n      setSourceParsedTokenAccount,\n      setSourceWalletAddress,\n    ]\n  );\n\n  const maps = useGetSourceParsedTokens(nft);\n  const resetAccountWrapper = maps?.resetAccounts || (() => {}); //This should never happen.\n\n  //This is only for errors so bad that we shouldn't even mount the component\n  const fatalError =\n    !isEVMChain(lookupChain) &&\n    !isTerraChain(lookupChain) &&\n    maps?.tokenAccounts?.error; //Terra & EVM chains can proceed because they have advanced mode\n\n  const content = fatalError ? (\n    <RefreshButtonWrapper callback={resetAccountWrapper}>\n      <Typography>{fatalError}</Typography>\n    </RefreshButtonWrapper>\n  ) : lookupChain === CHAIN_ID_SOLANA ? (\n    <SolanaTokenPicker\n      value={sourceParsedTokenAccount || null}\n      onChange={handleOnChange}\n      disabled={disabled}\n      accounts={maps?.tokenAccounts}\n      mintAccounts={maps?.mintAccounts}\n      resetAccounts={maps?.resetAccounts}\n      nft={nft}\n    />\n  ) : isEVMChain(lookupChain) ? (\n    <EvmTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      tokenAccounts={maps?.tokenAccounts}\n      resetAccounts={maps?.resetAccounts}\n      chainId={lookupChain}\n      nft={nft}\n    />\n  ) : isTerraChain(lookupChain) ? (\n    <TerraTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      resetAccounts={maps?.resetAccounts}\n      tokenAccounts={maps?.tokenAccounts}\n      chainId={lookupChain}\n    />\n  ) : lookupChain === CHAIN_ID_ALGORAND ? (\n    <AlgoTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      resetAccounts={maps?.resetAccounts}\n      tokenAccounts={maps?.tokenAccounts}\n    />\n  ) : lookupChain === CHAIN_ID_NEAR ? (\n    <NearTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      resetAccounts={maps?.resetAccounts}\n      tokenAccounts={maps?.tokenAccounts}\n    />\n  ) : lookupChain === CHAIN_ID_XPLA ? (\n    <XplaTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      resetAccounts={maps?.resetAccounts}\n      tokenAccounts={maps?.tokenAccounts}\n    />\n  ) : lookupChain === CHAIN_ID_APTOS ? (\n    <AptosTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      resetAccounts={maps?.resetAccounts}\n      tokenAccounts={maps?.tokenAccounts}\n      nft={nft}\n    />\n  ) : lookupChain === CHAIN_ID_INJECTIVE ? (\n    <InjectiveTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      resetAccounts={maps?.resetAccounts}\n      tokenAccounts={maps?.tokenAccounts}\n    />\n  ) : lookupChain === CHAIN_ID_SUI ? (\n    <SuiTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      resetAccounts={maps?.resetAccounts}\n      tokenAccounts={maps?.tokenAccounts}\n    />\n  ) : (\n    <TextField\n      variant=\"outlined\"\n      placeholder=\"Asset\"\n      fullWidth\n      value={\"Not Implemented\"}\n      disabled={true}\n    />\n  );\n\n  return <div>{content}</div>;\n};\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { Link, makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useMemo } from \"react\";\nimport { CHAIN_CONFIG_MAP } from \"../config\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport default function ChainWarningMessage({ chainId }: { chainId: ChainId }) {\n  const classes = useStyles();\n\n  const warningMessage = useMemo(() => {\n    return CHAIN_CONFIG_MAP[chainId]?.warningMessage;\n  }, [chainId]);\n\n  if (warningMessage === undefined) {\n    return null;\n  }\n\n  return (\n    <Alert variant=\"outlined\" severity=\"warning\" className={classes.alert}>\n      {warningMessage.text}\n      {warningMessage.link ? (\n        <Typography component=\"div\">\n          <Link href={warningMessage.link.url} target=\"_blank\" rel=\"noreferrer\">\n            {warningMessage.link.text}\n          </Link>\n        </Typography>\n      ) : null}\n    </Alert>\n  );\n}\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport { VerifiedUser } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { incrementStep, setSourceChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTIsSourceComplete,\n  selectNFTShouldLockFields,\n  selectNFTSourceBalanceString,\n  selectNFTSourceChain,\n  selectNFTSourceError,\n} from \"../../store/selectors\";\nimport {\n  CHAINS_WITH_NFT_SUPPORT,\n  CLUSTER,\n  getIsTransferDisabled,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport { TokenSelector } from \"../TokenSelectors/SourceTokenSelector\";\nimport ChainWarningMessage from \"../ChainWarningMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const uiAmountString = useSelector(selectNFTSourceBalanceString);\n  const error = useSelector(selectNFTSourceError);\n  const isSourceComplete = useSelector(selectNFTIsSourceComplete);\n  const shouldLockFields = useSelector(selectNFTShouldLockFields);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  const isTransferDisabled = useMemo(() => {\n    return getIsTransferDisabled(sourceChain, true);\n  }, [sourceChain]);\n  return (\n    <>\n      <StepDescription>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          Select an NFT to send through the Dijets NFT Bridge.\n          <div style={{ flexGrow: 1 }} />\n          <div>\n            <Button\n              component={Link}\n              to=\"/nft-origin-verifier\"\n              size=\"small\"\n              variant=\"outlined\"\n              startIcon={<VerifiedUser />}\n            >\n              NFT Origin Verifier\n            </Button>\n          </div>\n        </div>\n      </StepDescription>\n      <ChainSelect\n        variant=\"outlined\"\n        select\n        fullWidth\n        value={sourceChain}\n        onChange={handleSourceChange}\n        disabled={shouldLockFields}\n        chains={CHAINS_WITH_NFT_SUPPORT}\n      />\n      {isEVMChain(sourceChain) ? (\n        <Alert severity=\"info\" variant=\"outlined\">\n          Only NFTs which implement ERC-721 can be bridged.\n        </Alert>\n      ) : null}\n      {sourceChain === CHAIN_ID_SOLANA ? (\n        <Alert severity=\"info\" variant=\"outlined\">\n          Only NFTs with a minimum supply of 1 can be bridged.\n        </Alert>\n      ) : null}\n      <KeyAndBalance chainId={sourceChain} />\n      {isReady || uiAmountString ? (\n        <div className={classes.transferField}>\n          <TokenSelector disabled={shouldLockFields} nft={true} />\n        </div>\n      ) : null}\n      <LowBalanceWarning chainId={sourceChain} />\n      {sourceChain === CHAIN_ID_SOLANA && CLUSTER === \"mainnet\" && (\n        <SolanaTPSWarning />\n      )}\n      <ChainWarningMessage chainId={sourceChain} />\n      <ButtonWithLoader\n        disabled={!isSourceComplete || isTransferDisabled}\n        onClick={handleNextClick}\n        showLoader={false}\n        error={statusMessage || error}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Source;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport NFTViewer from \"../TokenSelectors/NFTViewer\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n\n  const explainerContent =\n    sourceChain && sourceParsedTokenAccount ? (\n      <>\n        <span>You will transfer 1 NFT of</span>\n        <SmartAddress\n          chainId={sourceChain}\n          parsedTokenAccount={sourceParsedTokenAccount}\n          propertyVersion={\n            sourceParsedTokenAccount.aptosTokenId?.property_version\n          }\n        />\n        <span>from</span>\n        <SmartAddress\n          chainId={sourceChain}\n          address={sourceParsedTokenAccount?.publicKey}\n        />\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerContent}\n      </Typography>\n      {sourceParsedTokenAccount ? (\n        <NFTViewer value={sourceParsedTokenAccount} chainId={sourceChain} />\n      ) : null}\n    </>\n  );\n}\n","import {\n  cosmos,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_XPLA,\n  isEVMChain,\n  isTerraChain,\n  uint8ArrayToHex,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_SUI,\n} from \"@certusone/wormhole-sdk\";\nimport { arrayify, zeroPad } from \"@ethersproject/bytes\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useAlgorandWallet } from \"../contexts/AlgorandWalletContext\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { setTargetAddressHex as setNFTTargetAddressHex } from \"../store/nftSlice\";\nimport {\n  selectNFTTargetAsset,\n  selectNFTTargetChain,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n  selectTransferTargetParsedTokenAccount,\n} from \"../store/selectors\";\nimport { setTargetAddressHex as setTransferTargetAddressHex } from \"../store/transferSlice\";\nimport { decodeAddress } from \"algosdk\";\nimport { useNearContext } from \"../contexts/NearWalletContext\";\nimport { makeNearAccount, signAndSendTransactions } from \"../utils/near\";\nimport { NEAR_TOKEN_BRIDGE_ACCOUNT } from \"../utils/consts\";\nimport { getTransactionLastResult } from \"near-api-js/lib/providers\";\nimport BN from \"bn.js\";\nimport { useXplaWallet } from \"../contexts/XplaWalletContext\";\nimport { useAptosContext } from \"../contexts/AptosWalletContext\";\nimport { useInjectiveContext } from \"../contexts/InjectiveWalletContext\";\nimport { useTerraWallet } from \"../contexts/TerraWalletContext\";\nimport { useSuiWallet } from \"../contexts/SuiWalletContext\";\n\nfunction useSyncTargetAddress(shouldFire: boolean, nft?: boolean) {\n  const dispatch = useDispatch();\n  const targetChain = useSelector(\n    nft ? selectNFTTargetChain : selectTransferTargetChain\n  );\n  const { signerAddress } = useEthereumProvider(targetChain);\n  const { publicKey: solPK } = useSolanaWallet();\n  const targetAsset = useSelector(\n    nft ? selectNFTTargetAsset : selectTransferTargetAsset\n  );\n  const targetParsedTokenAccount = useSelector(\n    selectTransferTargetParsedTokenAccount\n  );\n  const targetTokenAccountPublicKey = targetParsedTokenAccount?.publicKey;\n  const terraWallet = useTerraWallet(targetChain);\n  const xplaWallet = useXplaWallet();\n  const { address: algoAccount } = useAlgorandWallet();\n  const { account: aptosAddress } = useAptosContext();\n  const { accountId: nearAccountId, wallet } = useNearContext();\n  const { address: injAddress } = useInjectiveContext();\n  const suiWallet = useSuiWallet();\n  const suiAddress = suiWallet?.getAddress();\n  const setTargetAddressHex = nft\n    ? setNFTTargetAddressHex\n    : setTransferTargetAddressHex;\n  useEffect(() => {\n    if (shouldFire) {\n      let cancelled = false;\n      if (isEVMChain(targetChain) && signerAddress) {\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(zeroPad(arrayify(signerAddress), 32))\n          )\n        );\n      }\n      // TODO: have the user explicitly select an account on solana\n      else if (\n        !nft && // only support existing, non-derived token accounts for token transfers (nft flow doesn't check balance)\n        targetChain === CHAIN_ID_SOLANA &&\n        targetTokenAccountPublicKey\n      ) {\n        // use the target's TokenAccount if it exists\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(\n              zeroPad(new PublicKey(targetTokenAccountPublicKey).toBytes(), 32)\n            )\n          )\n        );\n      } else if (targetChain === CHAIN_ID_SOLANA && solPK && targetAsset) {\n        // otherwise, use the associated token account (which we create in the case it doesn't exist)\n        (async () => {\n          try {\n            const associatedTokenAccount =\n              await Token.getAssociatedTokenAddress(\n                ASSOCIATED_TOKEN_PROGRAM_ID,\n                TOKEN_PROGRAM_ID,\n                new PublicKey(targetAsset), // this might error\n                new PublicKey(solPK)\n              );\n            if (!cancelled) {\n              dispatch(\n                setTargetAddressHex(\n                  uint8ArrayToHex(zeroPad(associatedTokenAccount.toBytes(), 32))\n                )\n              );\n            }\n          } catch (e) {\n            if (!cancelled) {\n              dispatch(setTargetAddressHex(undefined));\n            }\n          }\n        })();\n      } else if (\n        isTerraChain(targetChain) &&\n        terraWallet &&\n        terraWallet.walletAddress\n      ) {\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(\n              zeroPad(cosmos.canonicalAddress(terraWallet.walletAddress), 32)\n            )\n          )\n        );\n      } else if (\n        targetChain === CHAIN_ID_XPLA &&\n        xplaWallet &&\n        xplaWallet.getAddress()\n      ) {\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(\n              zeroPad(cosmos.canonicalAddress(xplaWallet.getAddress()!), 32)\n            )\n          )\n        );\n      } else if (targetChain === CHAIN_ID_APTOS && aptosAddress) {\n        dispatch(\n          setTargetAddressHex(uint8ArrayToHex(zeroPad(aptosAddress, 32)))\n        );\n      } else if (targetChain === CHAIN_ID_ALGORAND && algoAccount) {\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(decodeAddress(algoAccount).publicKey)\n          )\n        );\n      } else if (targetChain === CHAIN_ID_INJECTIVE && injAddress) {\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(zeroPad(cosmos.canonicalAddress(injAddress), 32))\n          )\n        );\n      } else if (targetChain === CHAIN_ID_NEAR && nearAccountId && wallet) {\n        (async () => {\n          try {\n            const account = await makeNearAccount(nearAccountId);\n            // So, near can have account names up to 64 bytes but wormhole can only have 32...\n            //   as a result, we have to hash our account names to sha256's..  What we are doing\n            //   here is doing a RPC call (does not require any interaction with the wallet and is free)\n            //   that both tells us our account hash AND if we are already registered...\n            let account_hash = await account.viewFunction(\n              NEAR_TOKEN_BRIDGE_ACCOUNT,\n              \"hash_account\",\n              {\n                account: nearAccountId,\n              }\n            );\n            if (!cancelled) {\n              let myAddress = account_hash[1];\n              console.log(\"account hash for\", nearAccountId, account_hash);\n\n              if (!account_hash[0]) {\n                console.log(\"Registering the receiving account\");\n\n                let myAddress2 = getTransactionLastResult(\n                  await signAndSendTransactions(account, wallet, [\n                    {\n                      contractId: NEAR_TOKEN_BRIDGE_ACCOUNT,\n                      methodName: \"register_account\",\n                      args: { account: nearAccountId },\n                      gas: new BN(\"100000000000000\"),\n                      attachedDeposit: new BN(\"2000000000000000000000\"), // 0.002 NEAR\n                    },\n                  ])\n                );\n\n                console.log(\"account hash returned: \" + myAddress2);\n              } else {\n                console.log(\"account already registered\");\n              }\n              if (!cancelled) {\n                dispatch(setTargetAddressHex(myAddress));\n              }\n            }\n          } catch (e) {\n            console.log(e);\n            if (!cancelled) {\n              dispatch(setTargetAddressHex(undefined));\n            }\n          }\n        })();\n      } else if (targetChain === CHAIN_ID_SUI && suiAddress) {\n        dispatch(setTargetAddressHex(uint8ArrayToHex(zeroPad(suiAddress, 32))));\n      } else {\n        dispatch(setTargetAddressHex(undefined));\n      }\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [\n    dispatch,\n    shouldFire,\n    targetChain,\n    signerAddress,\n    solPK,\n    targetAsset,\n    targetTokenAccountPublicKey,\n    terraWallet,\n    nft,\n    setTargetAddressHex,\n    algoAccount,\n    nearAccountId,\n    wallet,\n    xplaWallet,\n    aptosAddress,\n    injAddress,\n    suiAddress,\n  ]);\n}\n\nexport default useSyncTargetAddress;\n","import {\n  CHAIN_ID_SOLANA,\n  hexToUint8Array,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, TextField, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSyncTargetAddress from \"../../hooks/useSyncTargetAddress\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport { incrementStep, setTargetChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTIsTargetComplete,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTShouldLockFields,\n  selectNFTSourceChain,\n  selectNFTTargetAddressHex,\n  selectNFTTargetAsset,\n  selectNFTTargetChain,\n  selectNFTTargetError,\n} from \"../../store/selectors\";\nimport {\n  CHAINS_BY_ID,\n  CHAINS_WITH_NFT_SUPPORT,\n  CLUSTER,\n  getIsTransferDisabled,\n  getWalletAddressNative,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport ChainWarningMessage from \"../ChainWarningMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Target() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const chains = useMemo(\n    () => CHAINS_WITH_NFT_SUPPORT.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddressHex = useSelector(selectNFTTargetAddressHex);\n  const targetAsset = useSelector(selectNFTTargetAsset);\n  const originChain = useSelector(selectNFTOriginChain);\n  const originAsset = useSelector(selectNFTOriginAsset);\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  let tokenId;\n  try {\n    tokenId =\n      originChain === CHAIN_ID_SOLANA && originAsset\n        ? BigNumber.from(\n            new PublicKey(hexToUint8Array(originAsset)).toBytes()\n          ).toString()\n        : originTokenId;\n  } catch (e) {\n    tokenId = originTokenId;\n  }\n  const readableTargetAddress = targetAddressHex\n    ? getWalletAddressNative(targetAddressHex, targetChain)\n    : \"\";\n  const error = useSelector(selectNFTTargetError);\n  const isTargetComplete = useSelector(selectNFTIsTargetComplete);\n  const shouldLockFields = useSelector(selectNFTShouldLockFields);\n  const { statusMessage } = useIsWalletReady(targetChain);\n  useSyncTargetAddress(!shouldLockFields, true);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  const isTransferDisabled = useMemo(() => {\n    return getIsTransferDisabled(targetChain, false);\n  }, [targetChain]);\n  const isValidTargetAssetAddress =\n    targetAsset && targetAsset !== ethers.constants.AddressZero;\n  return (\n    <>\n      <StepDescription>Select a recipient chain and address.</StepDescription>\n      <ChainSelect\n        select\n        fullWidth\n        variant=\"outlined\"\n        value={targetChain}\n        onChange={handleTargetChange}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      <TextField\n        label=\"Recipient Address\"\n        fullWidth\n        variant=\"outlined\"\n        className={classes.transferField}\n        value={readableTargetAddress || \"\"}\n        disabled={true}\n      />\n      {isValidTargetAssetAddress ? (\n        <>\n          <TextField\n            label=\"Token Address\"\n            fullWidth\n            variant=\"outlined\"\n            className={classes.transferField}\n            value={targetAsset || \"\"}\n            disabled={true}\n          />\n          {isEVMChain(targetChain) ? (\n            <TextField\n              variant=\"outlined\"\n              label=\"TokenId\"\n              fullWidth\n              className={classes.transferField}\n              value={tokenId || \"\"}\n              disabled={true}\n            />\n          ) : null}\n        </>\n      ) : null}\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to redeem your NFT.\n        </Typography>\n        {isEVMChain(targetChain) && (\n          <GasEstimateSummary methodType=\"nft\" chainId={targetChain} />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      {targetChain === CHAIN_ID_SOLANA && CLUSTER === \"mainnet\" && (\n        <SolanaTPSWarning />\n      )}\n      <ChainWarningMessage chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isTargetComplete || isTransferDisabled} //|| !associatedAccountExists}\n        onClick={handleNextClick}\n        showLoader={false}\n        error={statusMessage || error}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Target;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTTargetAddressHex,\n  selectNFTTargetChain,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID, getWalletAddressNative } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddress = useSelector(selectNFTTargetAddressHex);\n  const targetAddressNative = targetAddress\n    ? getWalletAddressNative(targetAddress, targetChain)\n    : undefined;\n\n  const explainerContent =\n    targetChain && targetAddressNative ? (\n      <>\n        <span>to</span>\n        <SmartAddress chainId={targetChain} address={targetAddressNative} />\n        <span>on {CHAINS_BY_ID[targetChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport useCheckIfWormholeWrapped from \"../../hooks/useCheckIfWormholeWrapped\";\nimport useFetchTargetAsset from \"../../hooks/useFetchTargetAsset\";\nimport { setSourceChain, setStep, setTargetChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTActiveStep,\n  selectNFTIsRedeemComplete,\n  selectNFTIsRedeeming,\n  selectNFTIsSendComplete,\n  selectNFTIsSending,\n} from \"../../store/selectors\";\nimport { CHAINS_WITH_NFT_SUPPORT } from \"../../utils/consts\";\nimport Redeem from \"./Redeem\";\nimport RedeemPreview from \"./RedeemPreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction NFT() {\n  useCheckIfWormholeWrapped(true);\n  useFetchTargetAsset(true);\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectNFTActiveStep);\n  const isSending = useSelector(selectNFTIsSending);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const isRedeemComplete = useSelector(selectNFTIsRedeemComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isRedeeming) && !isRedeemComplete;\n\n  const { search } = useLocation();\n  const query = useMemo(() => new URLSearchParams(search), [search]);\n  const pathSourceChain = query.get(\"sourceChain\");\n  const pathTargetChain = query.get(\"targetChain\");\n\n  //This effect initializes the state based on the path params\n  useEffect(() => {\n    if (!pathSourceChain && !pathTargetChain) {\n      return;\n    }\n    try {\n      const sourceChain: ChainId | undefined = CHAINS_WITH_NFT_SUPPORT.find(\n        (x) => parseFloat(pathSourceChain || \"\") === x.id\n      )?.id;\n      const targetChain: ChainId | undefined = CHAINS_WITH_NFT_SUPPORT.find(\n        (x) => parseFloat(pathTargetChain || \"\") === x.id\n      )?.id;\n\n      if (sourceChain === targetChain) {\n        return;\n      }\n      if (sourceChain) {\n        dispatch(setSourceChain(sourceChain));\n      }\n      if (targetChain) {\n        dispatch(setTargetChain(targetChain));\n      }\n    } catch (e) {\n      console.error(\"Invalid path params specified.\");\n    }\n  }, [pathSourceChain, pathTargetChain, dispatch]);\n\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))} icon={null}>\n            1.   Source Chain\n          </StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isRedeemComplete || activeStep === 0}\n        >\n          <StepButton onClick={() => dispatch(setStep(1))} icon={null}>\n            2. Target\n          </StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton disabled icon={null}>\n            3. Send NFT\n          </StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3} completed={isRedeemComplete}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete || isRedeemComplete}\n            icon={null}\n          >\n            4. Redeem NFT\n          </StepButton>\n          <StepContent>\n            {isRedeemComplete ? <RedeemPreview /> : <Redeem />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default NFT;\n","import {\n  ChainId,\n  CHAIN_ID_AURORA,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_FANTOM,\n  CHAIN_ID_OASIS,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  isEVMChain,\n  CHAIN_ID_APTOS,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  getOriginalAssetAptos,\n  WormholeWrappedNFTInfo,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport {\n  Button,\n  Card,\n  CircularProgress,\n  Container,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Launch } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport { getMetaplexData } from \"../hooks/useMetaplexData\";\nimport { COLORS } from \"../muiTheme\";\nimport { NFTParsedTokenAccount } from \"../store/nftSlice\";\nimport {\n  BETA_CHAINS,\n  CHAINS_BY_ID,\n  CHAINS_WITH_NFT_SUPPORT,\n  getNFTBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  getAssetAddressNative,\n} from \"../utils/consts\";\nimport {\n  ethNFTToNFTParsedTokenAccount,\n  getEthereumNFT,\n  isNFT,\n  isValidEthereumAddress,\n} from \"../utils/ethereum\";\nimport HeaderText from \"./HeaderText\";\nimport KeyAndBalance from \"./KeyAndBalance\";\nimport NFTViewer from \"./TokenSelectors/NFTViewer\";\nimport { getAptosClient } from \"../utils/aptos\";\nimport { TokenClient, TokenTypes } from \"aptos\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainCard: {\n    padding: \"32px 32px 16px\",\n    backgroundColor: COLORS.whiteWithTransparency,\n  },\n  originHeader: {\n    marginTop: theme.spacing(4),\n  },\n  viewButtonWrapper: {\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n  loaderWrapper: {\n    margin: theme.spacing(2),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function NFTOriginVerifier() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const [lookupChain, setLookupChain] = useState<ChainId>(CHAIN_ID_ETH);\n  const { provider, signerAddress } = useEthereumProvider(lookupChain);\n  const { isReady, statusMessage } = useIsWalletReady(lookupChain);\n  const [lookupAsset, setLookupAsset] = useState(\"\");\n  const [lookupTokenId, setLookupTokenId] = useState(\"\");\n  const [lookupCreatorAddress, setLookupCreatorAddress] = useState(\"\");\n  const [lookupCollectionName, setLookupCollectionName] = useState(\"\");\n  const [lookupTokenName, setLookupTokenName] = useState(\"\");\n  const [lookupError, setLookupError] = useState(\"\");\n  const [parsedTokenAccount, setParsedTokenAccount] = useState<\n    NFTParsedTokenAccount | undefined\n  >(undefined);\n  const [originInfo, setOriginInfo] = useState<\n    WormholeWrappedNFTInfo | undefined\n  >(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleChainChange = useCallback((event) => {\n    setLookupChain(event.target.value);\n  }, []);\n  const handleAssetChange = useCallback((event) => {\n    setLookupAsset(event.target.value);\n  }, []);\n  const handleTokenIdChange = useCallback((event) => {\n    setLookupTokenId(event.target.value);\n  }, []);\n  const handleCreatorAddressChange = useCallback((event) => {\n    setLookupCreatorAddress(event.target.value);\n  }, []);\n  const handleCollectionNameChange = useCallback((event) => {\n    setLookupCollectionName(event.target.value);\n  }, []);\n  const handleTokenNameChange = useCallback((event) => {\n    setLookupTokenName(event.target.value);\n  }, []);\n  useEffect(() => {\n    let cancelled = false;\n    setLookupError(\"\");\n    setParsedTokenAccount(undefined);\n    setOriginInfo(undefined);\n    const hasAptosLookupData =\n      lookupChain === CHAIN_ID_APTOS &&\n      lookupCreatorAddress &&\n      lookupCollectionName &&\n      lookupTokenName;\n    if (\n      isReady &&\n      provider &&\n      signerAddress &&\n      isEVMChain(lookupChain) &&\n      lookupAsset &&\n      lookupTokenId\n    ) {\n      if (isValidEthereumAddress(lookupAsset)) {\n        (async () => {\n          setIsLoading(true);\n          try {\n            const token = await getEthereumNFT(lookupAsset, provider);\n            const result = await isNFT(token);\n            if (result) {\n              const newParsedTokenAccount = await ethNFTToNFTParsedTokenAccount(\n                token,\n                lookupTokenId,\n                signerAddress\n              );\n              const info = await getOriginalAssetEth(\n                getNFTBridgeAddressForChain(lookupChain),\n                provider,\n                lookupAsset,\n                lookupTokenId,\n                lookupChain\n              );\n              if (!cancelled) {\n                setIsLoading(false);\n                setParsedTokenAccount(newParsedTokenAccount);\n                setOriginInfo(info);\n              }\n            } else if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\n                \"This token does not support ERC-165, ERC-721, and ERC-721 metadata\"\n              );\n            }\n          } catch (e) {\n            console.error(e);\n            if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\n                \"This token does not support ERC-165, ERC-721, and ERC-721 metadata\"\n              );\n            }\n          }\n        })();\n      } else {\n        setLookupError(\"Invalid address\");\n      }\n    } else if (lookupChain === CHAIN_ID_SOLANA && lookupAsset) {\n      (async () => {\n        try {\n          setIsLoading(true);\n          const [metadata] = await getMetaplexData([lookupAsset]);\n          if (metadata) {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            const info = await getOriginalAssetSol(\n              connection,\n              SOL_NFT_BRIDGE_ADDRESS,\n              lookupAsset\n            );\n            if (!cancelled) {\n              setIsLoading(false);\n              setParsedTokenAccount({\n                amount: \"0\",\n                decimals: 0,\n                mintKey: lookupAsset,\n                publicKey: \"\",\n                uiAmount: 0,\n                uiAmountString: \"0\",\n                uri: metadata.data.uri,\n              });\n              setOriginInfo(info);\n            }\n          } else {\n            if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\"Error fetching metadata\");\n            }\n          }\n        } catch (e) {\n          console.error(e);\n          if (!cancelled) {\n            setIsLoading(false);\n            setLookupError(\"Invalid token\");\n          }\n        }\n      })();\n    } else if (hasAptosLookupData) {\n      (async () => {\n        try {\n          setIsLoading(true);\n          const tokenId: TokenTypes.TokenId = {\n            token_data_id: {\n              creator: lookupCreatorAddress,\n              collection: lookupCollectionName,\n              name: lookupTokenName,\n            },\n            property_version: \"0\",\n          };\n          const aptosClient = getAptosClient();\n          const tokenClient = new TokenClient(aptosClient);\n          const info = await getOriginalAssetAptos(\n            aptosClient,\n            getNFTBridgeAddressForChain(CHAIN_ID_APTOS),\n            tokenId\n          );\n          const { collection, name, uri } = await tokenClient.getTokenData(\n            lookupCreatorAddress,\n            lookupCollectionName,\n            lookupTokenName\n          );\n          if (!cancelled) {\n            setIsLoading(false);\n            setParsedTokenAccount({\n              amount: \"0\",\n              decimals: 0,\n              mintKey: `${collection} ${name}`,\n              publicKey: \"\",\n              uiAmount: 0,\n              uiAmountString: \"0\",\n              uri,\n            });\n            setOriginInfo(info);\n          }\n        } catch (e) {\n          console.error(e);\n          if (!cancelled) {\n            setIsLoading(false);\n            setLookupError(\"Invalid token\");\n          }\n        }\n      })();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    isReady,\n    provider,\n    signerAddress,\n    lookupChain,\n    lookupAsset,\n    lookupTokenId,\n    lookupCreatorAddress,\n    lookupCollectionName,\n    lookupTokenName,\n  ]);\n  const readableAddress = originInfo\n    ? getAssetAddressNative(originInfo.assetAddress, originInfo.chainId)\n    : undefined;\n  const displayError =\n    (isEVMChain(lookupChain) && statusMessage) || lookupError;\n  return (\n    <div>\n      <Container maxWidth=\"md\">\n        <HeaderText white>NFT Origin Verifier</HeaderText>\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Card className={classes.mainCard}>\n          <Alert severity=\"info\" variant=\"outlined\">\n            This page allows you to find which network the bridged NFT was\n            originally minted on so you can verify its authenticity.\n          </Alert>\n          <TextField\n            select\n            variant=\"outlined\"\n            label=\"Chain\"\n            value={lookupChain}\n            onChange={handleChainChange}\n            fullWidth\n            margin=\"normal\"\n          >\n            {CHAINS_WITH_NFT_SUPPORT.filter(({ id }) =>\n              isBeta ? true : !BETA_CHAINS.includes(id)\n            ).map(({ id, name }) => (\n              <MenuItem key={id} value={id}>\n                {name}\n              </MenuItem>\n            ))}\n          </TextField>\n          {lookupChain === CHAIN_ID_APTOS ? (\n            <>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                margin=\"normal\"\n                label=\"Paste creator address\"\n                value={lookupCreatorAddress}\n                onChange={handleCreatorAddressChange}\n              />\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                margin=\"normal\"\n                label=\"Paste collection name\"\n                value={lookupCollectionName}\n                onChange={handleCollectionNameChange}\n              />\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                margin=\"normal\"\n                label=\"Paste token name\"\n                value={lookupTokenName}\n                onChange={handleTokenNameChange}\n              />\n            </>\n          ) : (\n            <>\n              {isEVMChain(lookupChain) && (\n                <KeyAndBalance chainId={lookupChain} />\n              )}\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                margin=\"normal\"\n                label=\"Paste an address\"\n                value={lookupAsset}\n                onChange={handleAssetChange}\n              />\n              {isEVMChain(lookupChain) && (\n                <TextField\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  label=\"Paste a tokenId\"\n                  value={lookupTokenId}\n                  onChange={handleTokenIdChange}\n                />\n              )}\n            </>\n          )}\n          {displayError ? (\n            <Typography align=\"center\" color=\"error\">\n              {displayError}\n            </Typography>\n          ) : null}\n          {isLoading ? (\n            <div className={classes.loaderWrapper}>\n              <CircularProgress />\n            </div>\n          ) : null}\n          {parsedTokenAccount ? (\n            <NFTViewer value={parsedTokenAccount} chainId={lookupChain} />\n          ) : null}\n          {originInfo ? (\n            <>\n              <Typography\n                variant=\"h5\"\n                gutterBottom\n                className={classes.originHeader}\n              >\n                Origin Info\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                Chain: {CHAINS_BY_ID[originInfo.chainId].name}\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                Address: {readableAddress}\n              </Typography>\n              {originInfo.chainId === CHAIN_ID_SOLANA ? null : (\n                <Typography variant=\"body2\" gutterBottom>\n                  Token ID: {originInfo.tokenId}\n                </Typography>\n              )}\n              <div className={classes.viewButtonWrapper}>\n                {originInfo.chainId === CHAIN_ID_SOLANA ? (\n                  <Button\n                    href={`https://solscan.io/token/${readableAddress}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on Solscan\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_BSC ? (\n                  <Button\n                    href={`https://bscscan.com/token/${readableAddress}?a=${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on BscScan\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_POLYGON ? (\n                  <Button\n                    href={`https://opensea.io/assets/matic/${readableAddress}/${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on OpenSea\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_AVAX ? (\n                  <Button\n                    href={`https://snowtrace.io/token/${readableAddress}?a=${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on Snowtrace\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_AURORA ? (\n                  <Button\n                    href={`https://aurorascan.dev/token/${readableAddress}?a=${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on Explorer\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_FANTOM ? (\n                  <Button\n                    href={`https://ftmscan.com/token/${readableAddress}?a=${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on FTMScan\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_OASIS ? null : (\n                  <Button\n                    href={`https://opensea.io/assets/${readableAddress}/${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on OpenSea\n                  </Button>\n                )}\n              </div>\n            </>\n          ) : null}\n        </Card>\n      </Container>\n    </div>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_ACALA,\n  CHAIN_ID_KARURA,\n} from \"@certusone/wormhole-sdk\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"../store/helpers\";\nimport { selectAcalaRelayerInfo } from \"../store/selectors\";\nimport {\n  errorAcalaRelayerInfo,\n  fetchAcalaRelayerInfo,\n  receiveAcalaRelayerInfo,\n  setAcalaRelayerInfo,\n} from \"../store/transferSlice\";\nimport { ACALA_RELAYER_URL, ACALA_SHOULD_RELAY_URL } from \"../utils/consts\";\n\nexport interface AcalaRelayerInfo {\n  shouldRelay: boolean;\n  msg: string;\n}\n\nexport const useAcalaRelayerInfo = (\n  targetChain: ChainId,\n  vaaNormalizedAmount: string | undefined,\n  originAsset: string | undefined,\n  useStore: boolean = true\n) => {\n  // within flow, update the store\n  const dispatch = useDispatch();\n  // within recover, use internal state\n  const [state, setState] = useState<DataWrapper<AcalaRelayerInfo>>(\n    getEmptyDataWrapper()\n  );\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      !ACALA_RELAYER_URL ||\n      !targetChain ||\n      (targetChain !== CHAIN_ID_ACALA && targetChain !== CHAIN_ID_KARURA) ||\n      !vaaNormalizedAmount ||\n      !originAsset\n    ) {\n      useStore\n        ? dispatch(setAcalaRelayerInfo())\n        : setState(getEmptyDataWrapper());\n      return;\n    }\n    useStore ? dispatch(fetchAcalaRelayerInfo()) : setState(fetchDataWrapper());\n    (async () => {\n      try {\n        const result = await axios.get(ACALA_SHOULD_RELAY_URL, {\n          params: {\n            targetChain,\n            originAsset,\n            amount: vaaNormalizedAmount,\n          },\n        });\n\n        // console.log(\"check should relay: \", {\n        //   targetChain,\n        //   originAsset,\n        //   amount: vaaNormalizedAmount,\n        //   result: result.data?.shouldRelay,\n        // });\n        if (!cancelled) {\n          useStore\n            ? dispatch(receiveAcalaRelayerInfo(result.data))\n            : setState(receiveDataWrapper(result.data));\n        }\n      } catch (e) {\n        if (!cancelled) {\n          useStore\n            ? dispatch(\n                errorAcalaRelayerInfo(\n                  \"Failed to retrieve the Acala relayer info.\"\n                )\n              )\n            : setState(\n                errorDataWrapper(\"Failed to retrieve the Acala relayer info.\")\n              );\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [targetChain, vaaNormalizedAmount, originAsset, dispatch, useStore]);\n  const acalaRelayerInfoFromStore = useSelector(selectAcalaRelayerInfo);\n  return useStore ? acalaRelayerInfoFromStore : state;\n};\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectRelayerTokenInfo } from \"../store/selectors\";\nimport {\n  errorRelayerTokenInfo,\n  fetchRelayerTokenInfo,\n  receiveRelayerTokenInfo,\n} from \"../store/tokenSlice\";\nimport { RELAYER_INFO_URL } from \"../utils/consts\";\n\nexport type RelayToken = {\n  chainId?: ChainId;\n  address?: string;\n  coingeckoId?: string;\n};\nexport type Relayer = {\n  name?: string;\n  url?: string;\n};\nexport type FeeScheduleEntryFlat = {\n  type: \"flat\";\n  feeUsd: number;\n};\nexport type FeeScheduleEntryPercent = {\n  type: \"percent\";\n  feePercent: number;\n  gasEstimate: number;\n};\nexport type FeeSchedule = {\n  // ChainId as a string\n  [key: string]: FeeScheduleEntryFlat | FeeScheduleEntryPercent;\n};\nexport type RelayerTokenInfo = {\n  supportedTokens?: RelayToken[];\n  relayers?: Relayer[];\n  feeSchedule?: FeeSchedule;\n};\n\nconst useRelayersAvailable = (\n  shouldFire: boolean\n): DataWrapper<RelayerTokenInfo> => {\n  const relayerTokenInfo = useSelector(selectRelayerTokenInfo);\n  // console.log(\"relayerTokenInfo\", relayerTokenInfo);\n  const dispatch = useDispatch();\n  const internalShouldFire =\n    shouldFire &&\n    (relayerTokenInfo.data === undefined ||\n      (relayerTokenInfo.data === null && !relayerTokenInfo.isFetching));\n\n  useEffect(() => {\n    if (internalShouldFire) {\n      getRelayersAvailable(dispatch);\n    }\n  }, [internalShouldFire, dispatch]);\n\n  return relayerTokenInfo;\n};\n\nconst getRelayersAvailable = (dispatch: Dispatch) => {\n  dispatch(fetchRelayerTokenInfo());\n  axios.get(RELAYER_INFO_URL).then(\n    (response) => {\n      dispatch(receiveRelayerTokenInfo(response.data as RelayerTokenInfo));\n    },\n    (error) => {\n      dispatch(\n        errorRelayerTokenInfo(\"Failed to retrieve the relayer token info.\")\n      );\n    }\n  );\n};\n\nexport default useRelayersAvailable;\n","import {\n  ChainId,\n  ChainName,\n  getGovernorIsVAAEnqueued,\n  getSignedVAA,\n} from \"@certusone/wormhole-sdk\";\nimport { WORMHOLE_RPC_HOSTS } from \"./consts\";\n\nexport interface GetSignedVAAWithRetryResult {\n  vaaBytes: Uint8Array | undefined;\n  isPending: boolean;\n}\n\nexport const getSignedVAAWithRetry = async (\n  emitterChain: ChainId | ChainName,\n  emitterAddress: string,\n  sequence: string,\n  retryAttempts?: number\n): Promise<GetSignedVAAWithRetryResult> => {\n  let currentWormholeRpcHost = -1;\n  const getNextRpcHost = () =>\n    ++currentWormholeRpcHost % WORMHOLE_RPC_HOSTS.length;\n  let attempts = 0;\n  while (true) {\n    attempts++;\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    const rpcHost = WORMHOLE_RPC_HOSTS[getNextRpcHost()];\n    const results = await Promise.allSettled([\n      getSignedVAA(rpcHost, emitterChain, emitterAddress, sequence),\n      getGovernorIsVAAEnqueued(rpcHost, emitterChain, emitterAddress, sequence),\n    ]);\n    if (results[0].status === \"fulfilled\") {\n      return { vaaBytes: results[0].value.vaaBytes, isPending: false };\n    }\n    if (results[1].status === \"fulfilled\" && results[1].value.isEnqueued) {\n      return { vaaBytes: undefined, isPending: true };\n    }\n    if (retryAttempts !== undefined && attempts > retryAttempts) {\n      throw new Error(results[0].reason);\n    }\n  }\n};\n","import {\n  CircularProgress,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport useRelayersAvailable, { Relayer } from \"../hooks/useRelayersAvailable\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainContainer: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function RelaySelector({\n  selectedValue,\n  onChange,\n}: {\n  selectedValue: Relayer | null;\n  onChange: (newValue: Relayer | null) => void;\n}) {\n  const classes = useStyles();\n  const availableRelayers = useRelayersAvailable(true);\n\n  const loader = (\n    <div>\n      <CircularProgress></CircularProgress>\n      <Typography>Loading available relayers</Typography>\n    </div>\n  );\n\n  const onChangeWrapper = useCallback(\n    (event) => {\n      console.log(event, \"event in selector\");\n      event.target.value\n        ? onChange(\n            availableRelayers?.data?.relayers?.find(\n              (x) => x.url === event.target.value\n            ) || null\n          )\n        : onChange(null);\n    },\n    [onChange, availableRelayers]\n  );\n\n  console.log(\"selectedValue in relay selector\", selectedValue);\n\n  const selector = (\n    <TextField\n      onChange={onChangeWrapper}\n      value={selectedValue ? selectedValue.url : \"\"}\n      label=\"Select a relayer\"\n      select\n      fullWidth\n    >\n      {availableRelayers.data?.relayers?.map((item) => (\n        <MenuItem key={item.url} value={item.url}>\n          {item.name}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n\n  const error = (\n    <Typography variant=\"body2\" color=\"textSecondary\">\n      No relayers are available at this time.\n    </Typography>\n  );\n\n  return (\n    <div className={classes.mainContainer}>\n      {availableRelayers.data?.relayers?.length\n        ? selector\n        : availableRelayers.isFetching\n        ? loader\n        : error}\n    </div>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { Link, makeStyles } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nconst PendingVAAWarning = ({ sourceChain }: { sourceChain: ChainId }) => {\n  const classes = useStyles();\n  const chainName = CHAINS_BY_ID[sourceChain]?.name || \"unknown\";\n  const message = `The daily notional value limit for transfers on ${chainName} has been exceeded. As\n      a result, the VAA for this transfer is pending. If you have any questions,\n      please open a support ticket on `;\n  return (\n    <Alert variant=\"outlined\" severity=\"warning\" className={classes.alert}>\n      {message}\n      <Link\n        href=\"https://discord.gg/wormholecrypto\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        https://discord.gg/wormholecrypto\n      </Link>\n      {\".\"}\n    </Alert>\n  );\n};\n\nexport default PendingVAAWarning;\n","import {\n  ChainId,\n  CHAIN_ID_ACALA,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_KARURA,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA2,\n  CHAIN_ID_XPLA,\n  getEmitterAddressAlgorand,\n  getEmitterAddressEth,\n  getEmitterAddressInjective,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  getEmitterAddressXpla,\n  hexToNativeAssetString,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n  isTerraChain,\n  ParsedVaa,\n  parseNFTPayload,\n  parseSequenceFromLogAlgorand,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogInjective,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  parseSequenceFromLogXpla,\n  parseTransferPayload,\n  parseVaa,\n  queryExternalId,\n  queryExternalIdInjective,\n  TerraChainId,\n  uint8ArrayToHex,\n  CHAIN_ID_SUI,\n  getForeignAssetSui,\n} from \"@certusone/wormhole-sdk\";\nimport { repairVaa } from \"@certusone/wormhole-sdk/lib/esm/utils/repairVaa\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Card,\n  CircularProgress,\n  Container,\n  Divider,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { ExpandMore } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport algosdk from \"algosdk\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport { base58 } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useNearContext } from \"../contexts/NearWalletContext\";\nimport { useAcalaRelayerInfo } from \"../hooks/useAcalaRelayerInfo\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useRelayersAvailable, { Relayer } from \"../hooks/useRelayersAvailable\";\nimport { COLORS } from \"../muiTheme\";\nimport { setRecoveryVaa as setRecoveryNFTVaa } from \"../store/nftSlice\";\nimport { setRecoveryVaa } from \"../store/transferSlice\";\nimport {\n  ALGORAND_HOST,\n  ALGORAND_TOKEN_BRIDGE_ID,\n  CHAINS,\n  CHAINS_BY_ID,\n  CHAINS_WITH_NFT_SUPPORT,\n  getBridgeAddressForChain,\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  RELAY_URL_EXTENSION,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  getTerraConfig,\n  WORMHOLE_RPC_HOSTS,\n  NEAR_TOKEN_BRIDGE_ACCOUNT,\n  XPLA_LCD_CLIENT_CONFIG,\n  getWalletAddressNative,\n  CLUSTER,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport {\n  getEmitterAddressNear,\n  makeNearAccount,\n  parseSequenceFromLogNear,\n} from \"../utils/near\";\nimport parseError from \"../utils/parseError\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport ChainSelect from \"./ChainSelect\";\nimport KeyAndBalance from \"./KeyAndBalance\";\nimport RelaySelector from \"./RelaySelector\";\nimport PendingVAAWarning from \"./Transfer/PendingVAAWarning\";\nimport { LCDClient as XplaLCDClient } from \"@xpla/xpla.js\";\nimport {\n  getAptosClient,\n  getEmitterAddressAndSequenceFromResult,\n} from \"../utils/aptos\";\nimport { Types } from \"aptos\";\nimport {\n  getInjectiveTxClient,\n  getInjectiveWasmClient,\n} from \"../utils/injective\";\nimport { getSuiProvider } from \"../utils/sui\";\nimport {\n  getEmitterAddressAndSequenceFromResponseSui,\n  getOriginalPackageId,\n} from \"@certusone/wormhole-sdk/lib/cjs/sui\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainCard: {\n    padding: \"32px 32px 16px\",\n    backgroundColor: COLORS.whiteWithTransparency,\n  },\n  advancedContainer: {\n    padding: theme.spacing(2, 0),\n  },\n  relayAlert: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    \"& > .MuiAlert-message\": {\n      width: \"100%\",\n    },\n  },\n}));\n\nasync function fetchSignedVAA(\n  chainId: ChainId,\n  emitterAddress: string,\n  sequence: string\n) {\n  const { vaaBytes, isPending } = await getSignedVAAWithRetry(\n    chainId,\n    emitterAddress,\n    sequence,\n    WORMHOLE_RPC_HOSTS.length\n  );\n\n  const gs3 =\n    CLUSTER === \"mainnet\"\n      ? {\n          index: 3,\n          keys: [\n            \"0x58CC3AE5C097b213cE3c81979e1B9f9570746AA5\",\n            \"0xfF6CB952589BDE862c25Ef4392132fb9D4A42157\",\n            \"0x114De8460193bdf3A2fCf81f86a09765F4762fD1\",\n            \"0x107A0086b32d7A0977926A205131d8731D39cbEB\",\n            \"0x8C82B2fd82FaeD2711d59AF0F2499D16e726f6b2\",\n            \"0x11b39756C042441BE6D8650b69b54EbE715E2343\",\n            \"0x54Ce5B4D348fb74B958e8966e2ec3dBd4958a7cd\",\n            \"0x15e7cAF07C4e3DC8e7C469f92C8Cd88FB8005a20\",\n            \"0x74a3bf913953D695260D88BC1aA25A4eeE363ef0\",\n            \"0x000aC0076727b35FBea2dAc28fEE5cCB0fEA768e\",\n            \"0xAF45Ced136b9D9e24903464AE889F5C8a723FC14\",\n            \"0xf93124b7c738843CBB89E864c862c38cddCccF95\",\n            \"0xD2CC37A4dc036a8D232b48f62cDD4731412f4890\",\n            \"0xDA798F6896A3331F64b48c12D1D57Fd9cbe70811\",\n            \"0x71AA1BE1D36CaFE3867910F99C09e347899C19C3\",\n            \"0x8192b6E7387CCd768277c17DAb1b7a5027c0b3Cf\",\n            \"0x178e21ad2E77AE06711549CFBB1f9c7a9d8096e8\",\n            \"0x5E1487F35515d02A92753504a8D75471b9f49EdB\",\n            \"0x6FbEBc898F403E4773E95feB15E80C9A99c8348d\",\n          ],\n          expiry: 0,\n        }\n      : {\n          index: 0,\n          keys: [\"0x13947Bd48b18E53fdAeEe77F3473391aC727C638\"],\n          expiry: 0,\n        };\n\n  const vaa = vaaBytes ? repairVaa(uint8ArrayToHex(vaaBytes), gs3) : undefined;\n  return {\n    vaa,\n    isPending,\n    error: null,\n  };\n}\n\nfunction handleError(e: any, enqueueSnackbar: any) {\n  console.error(e);\n  enqueueSnackbar(null, {\n    content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n  });\n  return { vaa: null, isPending: false, error: parseError(e) };\n}\n\nasync function algo(tx: string, enqueueSnackbar: any) {\n  try {\n    const algodClient = new algosdk.Algodv2(\n      ALGORAND_HOST.algodToken,\n      ALGORAND_HOST.algodServer,\n      ALGORAND_HOST.algodPort\n    );\n    const pendingInfo = await algodClient\n      .pendingTransactionInformation(tx)\n      .do();\n    let confirmedTxInfo: Record<string, any> | undefined = undefined;\n    // This is the code from waitForConfirmation\n    if (pendingInfo !== undefined) {\n      if (\n        pendingInfo[\"confirmed-round\"] !== null &&\n        pendingInfo[\"confirmed-round\"] > 0\n      ) {\n        //Got the completed Transaction\n        confirmedTxInfo = pendingInfo;\n      }\n    }\n    if (!confirmedTxInfo) {\n      throw new Error(\"Transaction not found or not confirmed\");\n    }\n    const sequence = parseSequenceFromLogAlgorand(confirmedTxInfo);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = getEmitterAddressAlgorand(ALGORAND_TOKEN_BRIDGE_ID);\n    return await fetchSignedVAA(CHAIN_ID_ALGORAND, emitterAddress, sequence);\n  } catch (e) {\n    return handleError(e, enqueueSnackbar);\n  }\n}\n\nasync function aptos(tx: string, enqueueSnackbar: any) {\n  try {\n    const result = (await getAptosClient().waitForTransactionWithResult(\n      tx\n    )) as Types.UserTransaction;\n    if (!result) {\n      throw new Error(\"Transaction not found\");\n    }\n    const { emitterAddress, sequence } =\n      getEmitterAddressAndSequenceFromResult(result);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    return await fetchSignedVAA(CHAIN_ID_APTOS, emitterAddress, sequence);\n  } catch (e) {\n    return handleError(e, enqueueSnackbar);\n  }\n}\n\nasync function evm(\n  provider: ethers.providers.Web3Provider,\n  tx: string,\n  enqueueSnackbar: any,\n  chainId: ChainId,\n  nft: boolean\n) {\n  try {\n    const receipt = await provider.getTransactionReceipt(tx);\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      nft\n        ? getNFTBridgeAddressForChain(chainId)\n        : getTokenBridgeAddressForChain(chainId)\n    );\n    return await fetchSignedVAA(chainId, emitterAddress, sequence);\n  } catch (e) {\n    return handleError(e, enqueueSnackbar);\n  }\n}\n\nasync function near(tx: string, enqueueSnackbar: any, nearAccountId: string) {\n  try {\n    const account = await makeNearAccount(nearAccountId);\n    const receipt = await account.connection.provider.txStatusReceipts(\n      base58.decode(tx),\n      nearAccountId\n    );\n    const sequence = parseSequenceFromLogNear(receipt);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = getEmitterAddressNear(NEAR_TOKEN_BRIDGE_ACCOUNT);\n    return await fetchSignedVAA(CHAIN_ID_NEAR, emitterAddress, sequence);\n  } catch (e) {\n    return handleError(e, enqueueSnackbar);\n  }\n}\n\nasync function solana(tx: string, enqueueSnackbar: any, nft: boolean) {\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const info = await connection.getTransaction(tx);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      nft ? SOL_NFT_BRIDGE_ADDRESS : SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    return await fetchSignedVAA(CHAIN_ID_SOLANA, emitterAddress, sequence);\n  } catch (e) {\n    return handleError(e, enqueueSnackbar);\n  }\n}\n\nasync function terra(tx: string, enqueueSnackbar: any, chainId: TerraChainId) {\n  try {\n    const lcd = new LCDClient(getTerraConfig(chainId));\n    const info = await lcd.tx.txInfo(tx);\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      getTokenBridgeAddressForChain(chainId)\n    );\n    return await fetchSignedVAA(chainId, emitterAddress, sequence);\n  } catch (e) {\n    return handleError(e, enqueueSnackbar);\n  }\n}\n\nasync function xpla(tx: string, enqueueSnackbar: any) {\n  try {\n    const lcd = new XplaLCDClient(XPLA_LCD_CLIENT_CONFIG);\n    const info = await lcd.tx.txInfo(tx);\n    const sequence = parseSequenceFromLogXpla(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressXpla(\n      getTokenBridgeAddressForChain(CHAIN_ID_XPLA)\n    );\n    return await fetchSignedVAA(CHAIN_ID_XPLA, emitterAddress, sequence);\n  } catch (e) {\n    return handleError(e, enqueueSnackbar);\n  }\n}\n\nasync function injective(txHash: string, enqueueSnackbar: any) {\n  try {\n    const client = getInjectiveTxClient();\n    const tx = await client.fetchTx(txHash);\n    if (!tx) {\n      throw new Error(\"Unable to fetch transaction\");\n    }\n    const sequence = parseSequenceFromLogInjective(tx);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressInjective(\n      getTokenBridgeAddressForChain(CHAIN_ID_INJECTIVE)\n    );\n    return await fetchSignedVAA(CHAIN_ID_INJECTIVE, emitterAddress, sequence);\n  } catch (e) {\n    return handleError(e, enqueueSnackbar);\n  }\n}\n\nasync function sui(digest: string, enqueueSnackbar: any) {\n  try {\n    const provider = getSuiProvider();\n    const tx = await provider.getTransactionBlock({\n      digest,\n      options: { showEvents: true },\n    });\n    const coreBridgePackageId = await getOriginalPackageId(\n      provider,\n      getBridgeAddressForChain(CHAIN_ID_SUI)\n    );\n    if (!coreBridgePackageId)\n      throw new Error(\"Unable to retrieve original package id\");\n    const { sequence, emitterAddress } =\n      getEmitterAddressAndSequenceFromResponseSui(coreBridgePackageId, tx);\n    return await fetchSignedVAA(CHAIN_ID_SUI, emitterAddress, sequence);\n  } catch (e) {\n    return handleError(e, enqueueSnackbar);\n  }\n}\n\nfunction RelayerRecovery({\n  parsedPayload,\n  signedVaa,\n  onClick,\n}: {\n  parsedPayload: any;\n  signedVaa: string;\n  onClick: () => void;\n}) {\n  const classes = useStyles();\n  const relayerInfo = useRelayersAvailable(true);\n  const [selectedRelayer, setSelectedRelayer] = useState<Relayer | null>(null);\n  const [isAttemptingToSchedule, setIsAttemptingToSchedule] = useState(false);\n  const { enqueueSnackbar } = useSnackbar();\n\n  console.log(parsedPayload, relayerInfo, \"in recovery relayer\");\n\n  const fee =\n    (parsedPayload && parsedPayload.fee && parseInt(parsedPayload.fee)) || null;\n  //This check is probably more sophisticated in the future. Possibly a net call.\n  const isEligible =\n    fee &&\n    fee > 0 &&\n    relayerInfo?.data?.relayers?.length &&\n    relayerInfo?.data?.relayers?.length > 0;\n\n  const handleRelayerChange = useCallback(\n    (relayer: Relayer | null) => {\n      setSelectedRelayer(relayer);\n    },\n    [setSelectedRelayer]\n  );\n\n  const handleGo = useCallback(async () => {\n    console.log(\"handle go\", selectedRelayer, parsedPayload);\n    if (!(selectedRelayer && selectedRelayer.url)) {\n      return;\n    }\n\n    setIsAttemptingToSchedule(true);\n    axios\n      .get(\n        selectedRelayer.url +\n          RELAY_URL_EXTENSION +\n          encodeURIComponent(\n            Buffer.from(hexToUint8Array(signedVaa)).toString(\"base64\")\n          )\n      )\n      .then(\n        () => {\n          setIsAttemptingToSchedule(false);\n          onClick();\n        },\n        (error) => {\n          setIsAttemptingToSchedule(false);\n          enqueueSnackbar(null, {\n            content: (\n              <Alert severity=\"error\">\n                {\"Relay request rejected. Error: \" + error.message}\n              </Alert>\n            ),\n          });\n        }\n      );\n  }, [selectedRelayer, enqueueSnackbar, onClick, signedVaa, parsedPayload]);\n\n  if (!isEligible) {\n    return null;\n  }\n\n  return (\n    <Alert variant=\"outlined\" severity=\"info\" className={classes.relayAlert}>\n      <Typography>{\"This transaction is eligible to be relayed\"}</Typography>\n      <RelaySelector\n        selectedValue={selectedRelayer}\n        onChange={handleRelayerChange}\n      />\n      <ButtonWithLoader\n        disabled={!selectedRelayer}\n        onClick={handleGo}\n        showLoader={isAttemptingToSchedule}\n      >\n        Request Relay\n      </ButtonWithLoader>\n    </Alert>\n  );\n}\n\nfunction AcalaRelayerRecovery({\n  parsedPayload,\n  signedVaa,\n  onClick,\n  isNFT,\n}: {\n  parsedPayload: any;\n  signedVaa: string;\n  onClick: () => void;\n  isNFT: boolean;\n}) {\n  const classes = useStyles();\n  const originChain: ChainId = parsedPayload?.originChain;\n  const originAsset = parsedPayload?.originAddress;\n  const targetChain: ChainId = parsedPayload?.targetChain;\n  const amount =\n    parsedPayload && \"amount\" in parsedPayload\n      ? parsedPayload.amount.toString()\n      : \"\";\n  const shouldCheck =\n    parsedPayload &&\n    originChain &&\n    originAsset &&\n    signedVaa &&\n    targetChain &&\n    !isNFT &&\n    (targetChain === CHAIN_ID_ACALA || targetChain === CHAIN_ID_KARURA);\n  const acalaRelayerInfo = useAcalaRelayerInfo(\n    targetChain,\n    amount,\n    hexToNativeAssetString(originAsset, originChain),\n    false\n  );\n  const enabled = shouldCheck && acalaRelayerInfo.data?.shouldRelay;\n\n  return enabled ? (\n    <Alert variant=\"outlined\" severity=\"info\" className={classes.relayAlert}>\n      <Typography>\n        This transaction is eligible to be relayed by{\" \"}\n        {CHAINS_BY_ID[targetChain].name} &#127881;\n      </Typography>\n      <ButtonWithLoader onClick={onClick}>Request Relay</ButtonWithLoader>\n    </Alert>\n  ) : null;\n}\n\nexport default function Recovery() {\n  const classes = useStyles();\n  const { push } = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n  const [recoverySourceChain, setRecoverySourceChain] =\n    useState<ChainId>(CHAIN_ID_SOLANA);\n  const { provider } = useEthereumProvider(recoverySourceChain);\n  const [type, setType] = useState<\"Token\" | \"NFT\">(\"Token\");\n  const isNFT = type === \"NFT\";\n  const [recoverySourceTx, setRecoverySourceTx] = useState(\"\");\n  const [recoverySourceTxIsLoading, setRecoverySourceTxIsLoading] =\n    useState(false);\n  const [recoverySourceTxError, setRecoverySourceTxError] = useState(\"\");\n  const [recoverySignedVAA, setRecoverySignedVAA] = useState(\"\");\n  const [recoveryParsedVAA, setRecoveryParsedVAA] = useState<ParsedVaa | null>(\n    null\n  );\n  const [isVAAPending, setIsVAAPending] = useState(false);\n  const [tokenId, setTokenId] = useState(\"\");\n  const { accountId: nearAccountId } = useNearContext();\n  const { isReady, statusMessage } = useIsWalletReady(recoverySourceChain);\n  const walletConnectError =\n    (isEVMChain(recoverySourceChain) ||\n      recoverySourceChain === CHAIN_ID_NEAR) &&\n    !isReady\n      ? statusMessage\n      : \"\";\n  const parsedPayload = useMemo(() => {\n    try {\n      return recoveryParsedVAA?.payload\n        ? isNFT\n          ? parseNFTPayload(\n              Buffer.from(new Uint8Array(recoveryParsedVAA.payload))\n            )\n          : parseTransferPayload(\n              Buffer.from(new Uint8Array(recoveryParsedVAA.payload))\n            )\n        : null;\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n  }, [recoveryParsedVAA, isNFT]);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      parsedPayload &&\n      (parsedPayload.targetChain === CHAIN_ID_TERRA2 ||\n        parsedPayload.targetChain === CHAIN_ID_XPLA)\n    ) {\n      (async () => {\n        const lcd =\n          parsedPayload.targetChain === CHAIN_ID_TERRA2\n            ? new LCDClient(getTerraConfig(CHAIN_ID_TERRA2))\n            : new XplaLCDClient(XPLA_LCD_CLIENT_CONFIG);\n        const tokenBridgeAddress = getTokenBridgeAddressForChain(\n          parsedPayload.targetChain as ChainId\n        );\n        const tokenId = await queryExternalId(\n          lcd,\n          tokenBridgeAddress,\n          parsedPayload.originAddress\n        );\n        if (!cancelled) {\n          setTokenId(tokenId || \"\");\n        }\n      })();\n    }\n    if (parsedPayload && parsedPayload.targetChain === CHAIN_ID_INJECTIVE) {\n      (async () => {\n        const client = getInjectiveWasmClient();\n        const tokenBridgeAddress =\n          getTokenBridgeAddressForChain(CHAIN_ID_INJECTIVE);\n        const tokenId = await queryExternalIdInjective(\n          client,\n          tokenBridgeAddress,\n          parsedPayload.originAddress\n        );\n        if (!cancelled) {\n          setTokenId(tokenId || \"\");\n        }\n      })();\n    }\n\n    if (parsedPayload && parsedPayload.targetChain === CHAIN_ID_SUI) {\n      (async () => {\n        const tokenId = await getForeignAssetSui(\n          getSuiProvider(),\n          getTokenBridgeAddressForChain(CHAIN_ID_SUI),\n          parsedPayload.originChain as ChainId,\n          hexToUint8Array(parsedPayload.originAddress)\n        );\n        if (!cancelled) {\n          setTokenId(tokenId || \"\");\n        }\n      })();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [parsedPayload]);\n\n  const { search } = useLocation();\n  const query = useMemo(() => new URLSearchParams(search), [search]);\n  const pathSourceChain = query.get(\"sourceChain\");\n  const pathSourceTransaction = query.get(\"transactionId\");\n\n  //This effect initializes the state based on the path params.\n  useEffect(() => {\n    if (!pathSourceChain && !pathSourceTransaction) {\n      return;\n    }\n    try {\n      const sourceChain: ChainId =\n        CHAINS_BY_ID[parseFloat(pathSourceChain || \"\") as ChainId]?.id;\n\n      if (sourceChain) {\n        setRecoverySourceChain(sourceChain);\n      }\n      if (pathSourceTransaction) {\n        setRecoverySourceTx(pathSourceTransaction);\n      }\n    } catch (e) {\n      console.error(e);\n      console.error(\"Invalid path params specified.\");\n    }\n  }, [pathSourceChain, pathSourceTransaction]);\n\n  useEffect(() => {\n    if (recoverySourceTx && (!isEVMChain(recoverySourceChain) || isReady)) {\n      let cancelled = false;\n      if (isEVMChain(recoverySourceChain) && provider) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, isPending, error } = await evm(\n            provider,\n            recoverySourceTx,\n            enqueueSnackbar,\n            recoverySourceChain,\n            isNFT\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n            setIsVAAPending(isPending);\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_SOLANA) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, isPending, error } = await solana(\n            recoverySourceTx,\n            enqueueSnackbar,\n            isNFT\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n            setIsVAAPending(isPending);\n          }\n        })();\n      } else if (isTerraChain(recoverySourceChain)) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        setTokenId(\"\");\n        (async () => {\n          const { vaa, isPending, error } = await terra(\n            recoverySourceTx,\n            enqueueSnackbar,\n            recoverySourceChain\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n            setIsVAAPending(isPending);\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_ALGORAND) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, isPending, error } = await algo(\n            recoverySourceTx,\n            enqueueSnackbar\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n            setIsVAAPending(isPending);\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_NEAR && nearAccountId) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, isPending, error } = await near(\n            recoverySourceTx,\n            enqueueSnackbar,\n            nearAccountId\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n            setIsVAAPending(isPending);\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_XPLA) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        setTokenId(\"\");\n        (async () => {\n          const { vaa, isPending, error } = await xpla(\n            recoverySourceTx,\n            enqueueSnackbar\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n            setIsVAAPending(isPending);\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_APTOS) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, isPending, error } = await aptos(\n            recoverySourceTx,\n            enqueueSnackbar\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n            setIsVAAPending(isPending);\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_INJECTIVE) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        setTokenId(\"\");\n        (async () => {\n          const { vaa, isPending, error } = await injective(\n            recoverySourceTx,\n            enqueueSnackbar\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n            setIsVAAPending(isPending);\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_SUI) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        setTokenId(\"\");\n        (async () => {\n          const { vaa, isPending, error } = await sui(\n            recoverySourceTx,\n            enqueueSnackbar\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n            setIsVAAPending(isPending);\n          }\n        })();\n      }\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [\n    recoverySourceChain,\n    recoverySourceTx,\n    provider,\n    enqueueSnackbar,\n    isNFT,\n    isReady,\n    nearAccountId,\n  ]);\n  const handleTypeChange = useCallback((event) => {\n    setRecoverySourceChain((prevChain) =>\n      event.target.value === \"NFT\" &&\n      !CHAINS_WITH_NFT_SUPPORT.find((chain) => chain.id === prevChain)\n        ? CHAIN_ID_SOLANA\n        : prevChain\n    );\n    setType(event.target.value);\n  }, []);\n  const handleSourceChainChange = useCallback((event) => {\n    setRecoverySourceTx(\"\");\n    setRecoverySourceChain(event.target.value);\n  }, []);\n  const handleSourceTxChange = useCallback((event) => {\n    setRecoverySourceTx(event.target.value.trim());\n  }, []);\n  const handleSignedVAAChange = useCallback((event) => {\n    setRecoverySignedVAA(event.target.value.trim());\n  }, []);\n  useEffect(() => {\n    if (recoverySignedVAA) {\n      try {\n        const parsedVAA = parseVaa(hexToUint8Array(recoverySignedVAA));\n        setRecoveryParsedVAA(parsedVAA);\n      } catch (e) {\n        console.log(e);\n        setRecoveryParsedVAA(null);\n      }\n    }\n  }, [recoverySignedVAA]);\n  const parsedPayloadTargetChain = parsedPayload?.targetChain;\n  const enableRecovery = recoverySignedVAA && parsedPayloadTargetChain;\n\n  const handleRecoverClickBase = useCallback(\n    (useRelayer: boolean) => {\n      if (enableRecovery && recoverySignedVAA && parsedPayloadTargetChain) {\n        // TODO: make recovery reducer\n        if (isNFT) {\n          dispatch(\n            setRecoveryNFTVaa({\n              vaa: recoverySignedVAA,\n              parsedPayload: {\n                targetChain: parsedPayload.targetChain as ChainId,\n                targetAddress: parsedPayload.targetAddress,\n                originChain: parsedPayload.originChain as ChainId,\n                originAddress: parsedPayload.originAddress,\n              },\n            })\n          );\n          push(\"/nft\");\n        } else {\n          dispatch(\n            setRecoveryVaa({\n              vaa: recoverySignedVAA,\n              useRelayer,\n              parsedPayload: {\n                targetChain: parsedPayload.targetChain as ChainId,\n                targetAddress: parsedPayload.targetAddress,\n                originChain: parsedPayload.originChain as ChainId,\n                originAddress: parsedPayload.originAddress,\n                amount:\n                  \"amount\" in parsedPayload\n                    ? parsedPayload.amount.toString()\n                    : \"\",\n              },\n            })\n          );\n          push(\"/transfer\");\n        }\n      }\n    },\n    [\n      dispatch,\n      enableRecovery,\n      recoverySignedVAA,\n      parsedPayloadTargetChain,\n      parsedPayload,\n      isNFT,\n      push,\n    ]\n  );\n\n  const handleRecoverClick = useCallback(() => {\n    handleRecoverClickBase(false);\n  }, [handleRecoverClickBase]);\n\n  const handleRecoverWithRelayerClick = useCallback(() => {\n    handleRecoverClickBase(true);\n  }, [handleRecoverClickBase]);\n\n  return (\n    <Container maxWidth=\"md\">\n      <Card className={classes.mainCard}>\n        <Alert severity=\"info\" variant=\"outlined\">\n          If you have sent your tokens but have not yet redeemed them, you can paste\n          in the Source Transaction ID (from Step 3) to resume your transfer.\n        </Alert>\n        <TextField\n          select\n          variant=\"outlined\"\n          label=\"Type\"\n          disabled={!!recoverySignedVAA}\n          value={type}\n          onChange={handleTypeChange}\n          fullWidth\n          margin=\"normal\"\n        >\n          <MenuItem value=\"Token\">Token</MenuItem>\n          <MenuItem value=\"NFT\">NFT</MenuItem>\n        </TextField>\n        <ChainSelect\n          select\n          variant=\"outlined\"\n          label=\"Source Chain\"\n          disabled={!!recoverySignedVAA}\n          value={recoverySourceChain}\n          onChange={handleSourceChainChange}\n          fullWidth\n          margin=\"normal\"\n          chains={isNFT ? CHAINS_WITH_NFT_SUPPORT : CHAINS}\n        />\n        {isEVMChain(recoverySourceChain) ||\n        recoverySourceChain === CHAIN_ID_NEAR ? (\n          <KeyAndBalance chainId={recoverySourceChain} />\n        ) : null}\n        <TextField\n          variant=\"outlined\"\n          label=\"Source Tx (paste here)\"\n          disabled={\n            !!recoverySignedVAA ||\n            recoverySourceTxIsLoading ||\n            !!walletConnectError\n          }\n          value={recoverySourceTx}\n          onChange={handleSourceTxChange}\n          error={!!recoverySourceTxError || !!walletConnectError}\n          helperText={recoverySourceTxError || walletConnectError}\n          fullWidth\n          margin=\"normal\"\n        />\n        <RelayerRecovery\n          parsedPayload={parsedPayload}\n          signedVaa={recoverySignedVAA}\n          onClick={handleRecoverWithRelayerClick}\n        />\n        <AcalaRelayerRecovery\n          parsedPayload={parsedPayload}\n          signedVaa={recoverySignedVAA}\n          onClick={handleRecoverWithRelayerClick}\n          isNFT={isNFT}\n        />\n        <ButtonWithLoader\n          onClick={handleRecoverClick}\n          disabled={!enableRecovery}\n          showLoader={recoverySourceTxIsLoading}\n        >\n          Recover\n        </ButtonWithLoader>\n        {isVAAPending && (\n          <PendingVAAWarning sourceChain={recoverySourceChain} />\n        )}\n        <div className={classes.advancedContainer}>\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              Advanced\n            </AccordionSummary>\n            <AccordionDetails>\n              <div>\n                <Box position=\"relative\">\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Relayer Signature\"\n                    disabled={recoverySourceTxIsLoading}\n                    value={recoverySignedVAA || \"\"}\n                    onChange={handleSignedVAAChange}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                  {recoverySourceTxIsLoading ? (\n                    <Box\n                      position=\"absolute\"\n                      style={{\n                        top: 0,\n                        right: 0,\n                        left: 0,\n                        bottom: 0,\n                        backgroundColor: \"rgba(0,0,0,0.5)\",\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                      }}\n                    >\n                      <CircularProgress />\n                    </Box>\n                  ) : null}\n                </Box>\n                <Box my={4}>\n                  <Divider />\n                </Box>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Event Emitting Chain\"\n                  disabled\n                  value={recoveryParsedVAA?.emitterChain || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Event Emitting Address\"\n                  disabled\n                  value={\n                    (recoveryParsedVAA &&\n                      hexToNativeString(\n                        recoveryParsedVAA.emitterAddress.toString(\"hex\"),\n                        recoveryParsedVAA.emitterChain as ChainId\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Sequence\"\n                  disabled\n                  value={recoveryParsedVAA?.sequence?.toString() || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Timestamp\"\n                  disabled\n                  value={\n                    (recoveryParsedVAA &&\n                      new Date(\n                        recoveryParsedVAA.timestamp * 1000\n                      ).toLocaleString()) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Dijets Council Member\"\n                  disabled\n                  value={recoveryParsedVAA?.guardianSetIndex?.toString() || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <Box my={4}>\n                  <Divider />\n                </Box>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Origin Chain\"\n                  disabled\n                  value={parsedPayload?.originChain.toString() || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Origin Token Address\"\n                  disabled\n                  value={\n                    parsedPayload\n                      ? parsedPayload.targetChain === CHAIN_ID_TERRA2 ||\n                        parsedPayload.targetChain === CHAIN_ID_XPLA ||\n                        parsedPayload.targetChain === CHAIN_ID_INJECTIVE\n                        ? tokenId\n                        : hexToNativeAssetString(\n                            parsedPayload.originAddress,\n                            parsedPayload.originChain as ChainId\n                          ) || \"\"\n                      : \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                {isNFT ? (\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Origin Token ID\"\n                    disabled\n                    // @ts-ignore\n                    value={parsedPayload?.tokenId || \"\"}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                ) : null}\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Target Chain\"\n                  disabled\n                  value={parsedPayload?.targetChain.toString() || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Target Address\"\n                  disabled\n                  value={\n                    (parsedPayload &&\n                      getWalletAddressNative(\n                        parsedPayload.targetAddress,\n                        parsedPayload.targetChain as ChainId\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                {isNFT ? null : (\n                  <>\n                    <TextField\n                      variant=\"outlined\"\n                      label=\"Amount\"\n                      disabled\n                      value={\n                        parsedPayload && \"amount\" in parsedPayload\n                          ? parsedPayload.amount.toString()\n                          : \"\"\n                      }\n                      fullWidth\n                      margin=\"normal\"\n                    />\n                    <TextField\n                      variant=\"outlined\"\n                      label=\"Relayer Fee\"\n                      disabled\n                      value={\n                        (parsedPayload &&\n                          \"fee\" in parsedPayload &&\n                          parsedPayload?.fee?.toString()) ||\n                        \"\"\n                      }\n                      fullWidth\n                      margin=\"normal\"\n                    />\n                  </>\n                )}\n              </div>\n            </AccordionDetails>\n          </Accordion>\n        </div>\n      </Card>\n    </Container>\n  );\n}\n","import { NotionalTVLCumulative } from \"../../../hooks/useCumulativeTVL\";\nimport { NotionalTransferredFrom } from \"../../../hooks/useNotionalTransferred\";\nimport { TimeFrame } from \"./TimeFrame\";\nimport { DateTime } from \"luxon\";\nimport { Totals } from \"../../../hooks/useTransactionTotals\";\nimport {\n  ChainInfo,\n  CHAINS_BY_ID,\n  VAA_EMITTER_ADDRESSES,\n} from \"../../../utils/consts\";\nimport { NotionalTVL } from \"../../../hooks/useTVL\";\nimport { ChainId } from \"@certusone/wormhole-sdk\";\n\nexport const formatTVL = (tvl: number) => {\n  const [divisor, unit, fractionDigits] =\n    tvl < 1e3\n      ? [1, \"\", 0]\n      : tvl < 1e6\n      ? [1e3, \"K\", 0]\n      : tvl < 1e9\n      ? [1e6, \"M\", 0]\n      : [1e9, \"B\", 2];\n  return `$${(tvl / divisor).toFixed(fractionDigits)} ${unit}`;\n};\n\nexport const formatDate = (date: Date) => {\n  return date.toLocaleString(\"en-US\", {\n    day: \"numeric\",\n    month: \"long\",\n    year: \"numeric\",\n    timeZone: \"UTC\",\n  });\n};\n\nexport const formatTickDay = (date: Date) => {\n  return date.toLocaleString(\"en-US\", {\n    day: \"numeric\",\n    month: \"short\",\n    year: \"numeric\",\n    timeZone: \"UTC\",\n  });\n};\n\nexport const formatTickMonth = (date: Date) => {\n  return date.toLocaleString(\"en-US\", {\n    month: \"short\",\n    year: \"numeric\",\n    timeZone: \"UTC\",\n  });\n};\n\nexport const formatTransactionCount = (transactionCount: number) => {\n  return transactionCount.toLocaleString(\"en-US\");\n};\n\nexport const renderLegendText = (value: any) => {\n  return <span style={{ color: \"white\", margin: \"8px\" }}>{value}</span>;\n};\n\nexport const getStartDate = (timeFrame: TimeFrame) => {\n  return timeFrame.duration\n    ? DateTime.now().toUTC().minus(timeFrame.duration).toJSDate()\n    : undefined;\n};\n\nexport interface CumulativeTVLChartData {\n  date: Date;\n  totalTVL: number;\n  tvlByChain: {\n    [chainId: string]: number;\n  };\n}\n\nexport const createCumulativeTVLChartData = (\n  cumulativeTVL: NotionalTVLCumulative,\n  timeFrame: TimeFrame\n) => {\n  const startDate = getStartDate(timeFrame);\n  return Object.entries(cumulativeTVL.DailyLocked)\n    .reduce<CumulativeTVLChartData[]>(\n      (chartData, [dateString, chainsAssets]) => {\n        const date = new Date(dateString);\n        if (!startDate || date >= startDate) {\n          const data: CumulativeTVLChartData = {\n            date: date,\n            totalTVL: 0,\n            tvlByChain: {},\n          };\n          Object.entries(chainsAssets).forEach(([chainId, lockedAssets]) => {\n            const notional = lockedAssets[\"*\"].Notional;\n            if (chainId === \"*\") {\n              data.totalTVL = notional;\n            } else {\n              data.tvlByChain[chainId] = notional;\n            }\n          });\n          chartData.push(data);\n        }\n        return chartData;\n      },\n      []\n    )\n    .sort((a, z) => a.date.getTime() - z.date.getTime());\n};\n\nexport interface TransferChartData {\n  date: Date;\n  totalTransferred: number;\n  transferredByChain: {\n    [chainId: string]: number;\n  };\n}\n\nexport const createTransferChartData = (\n  notionalTransferredFrom: NotionalTransferredFrom,\n  timeFrame: TimeFrame\n) => {\n  const startDate = getStartDate(timeFrame);\n  return Object.keys(notionalTransferredFrom.Daily)\n    .sort()\n    .reduce<TransferChartData[]>((chartData, dateString) => {\n      const transferFromData = notionalTransferredFrom.Daily[dateString];\n      const data: TransferChartData = {\n        date: new Date(dateString),\n        totalTransferred: 0,\n        transferredByChain: {},\n      };\n      Object.entries(transferFromData).forEach(([chainId, amount]) => {\n        if (chainId === \"*\") {\n          data.totalTransferred = amount;\n        } else {\n          data.transferredByChain[chainId] = amount;\n        }\n      });\n      chartData.push(data);\n      return chartData;\n    }, [])\n    .filter((value) => !startDate || startDate <= value.date);\n};\n\nexport interface TransactionData {\n  date: Date;\n  totalTransactions: number;\n  transactionsByChain: {\n    [chainId: string]: number;\n  };\n}\n\nexport const createTransactionData = (totals: Totals, timeFrame: TimeFrame) => {\n  const startDate = getStartDate(timeFrame);\n  return Object.keys(totals.DailyTotals)\n    .sort()\n    .reduce<TransactionData[]>((chartData, dateString) => {\n      const groupByKeys = totals.DailyTotals[dateString];\n      const data: TransactionData = {\n        date: new Date(dateString),\n        totalTransactions: 0,\n        transactionsByChain: {},\n      };\n      VAA_EMITTER_ADDRESSES.forEach((address) => {\n        const count = groupByKeys[address] || 0;\n        data.totalTransactions += count;\n        const chainId = address.slice(0, address.indexOf(\":\"));\n        if (data.transactionsByChain[chainId] === undefined) {\n          data.transactionsByChain[chainId] = 0;\n        }\n        data.transactionsByChain[chainId] += count;\n      });\n      chartData.push(data);\n      return chartData;\n    }, [])\n    .filter((value) => !startDate || startDate <= value.date);\n};\n\nexport interface ChainTVLChartData {\n  chainInfo: ChainInfo;\n  tvl: number;\n  tvlRatio: number;\n}\n\nexport const createChainTVLChartData = (tvl: NotionalTVL) => {\n  let maxTVL = 0;\n  const chainTVLs = Object.entries(tvl.AllTime)\n    .reduce<ChainTVLChartData[]>((chartData, [chainId, assets]) => {\n      const chainInfo = CHAINS_BY_ID[+chainId as ChainId];\n      if (chainInfo !== undefined) {\n        const tvl = assets[\"*\"].Notional;\n        chartData.push({\n          chainInfo: chainInfo,\n          tvl: tvl,\n          tvlRatio: 0,\n        });\n        maxTVL = Math.max(maxTVL, tvl);\n      }\n      return chartData;\n    }, [])\n    .sort((a, z) => z.tvl - a.tvl);\n  if (maxTVL > 0) {\n    chainTVLs.forEach((chainTVL) => {\n      chainTVL.tvlRatio = (chainTVL.tvl / maxTVL) * 100;\n    });\n  }\n  return chainTVLs;\n};\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { formatDate } from \"./utils\";\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    padding: \"16px\",\n    minWidth: \"214px\",\n    background: \"rgba(255, 255, 255, 0.95)\",\n    borderRadius: \"4px\",\n  },\n  titleText: {\n    color: \"#21227E\",\n    fontSize: \"24px\",\n    fontWeight: 500,\n  },\n  ruler: {\n    height: \"3px\",\n    backgroundImage: \"linear-gradient(90deg, #F44B1B 0%, #EEB430 100%)\",\n  },\n  valueText: {\n    color: \"#404040\",\n    fontSize: \"18px\",\n    fontWeight: 500,\n  },\n}));\n\nconst CustomTooltip = ({ active, payload, title, valueFormatter }: any) => {\n  const classes = useStyles();\n  if (active && payload && payload.length) {\n    return (\n      <div className={classes.container}>\n        <Typography className={classes.titleText}>{title}</Typography>\n        <hr className={classes.ruler}></hr>\n        <Typography className={classes.valueText}>\n          {valueFormatter(payload[0].value)}\n        </Typography>\n        <Typography className={classes.valueText}>\n          {formatDate(payload[0].payload.date)}\n        </Typography>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default CustomTooltip;\n","import {\n  AreaChart,\n  Area,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { formatTVL, createCumulativeTVLChartData } from \"./utils\";\nimport { NotionalTVLCumulative } from \"../../../hooks/useCumulativeTVL\";\nimport { useMemo } from \"react\";\nimport { TimeFrame } from \"./TimeFrame\";\nimport CustomTooltip from \"./CustomTooltip\";\nimport { useTheme, useMediaQuery } from \"@material-ui/core\";\n\nconst TVLAreaChart = ({\n  cumulativeTVL,\n  timeFrame,\n}: {\n  cumulativeTVL: NotionalTVLCumulative;\n  timeFrame: TimeFrame;\n}) => {\n  const data = useMemo(() => {\n    return createCumulativeTVLChartData(cumulativeTVL, timeFrame);\n  }, [cumulativeTVL, timeFrame]);\n\n  const theme = useTheme();\n  const isXSmall = useMediaQuery(theme.breakpoints.down(\"xs\"));\n\n  return (\n    <ResponsiveContainer height={452}>\n      <AreaChart data={data}>\n        <XAxis\n          dataKey=\"date\"\n          tickFormatter={timeFrame.tickFormatter}\n          tick={{ fill: \"white\" }}\n          interval={!isXSmall ? timeFrame.interval : undefined}\n          axisLine={false}\n          tickLine={false}\n          dy={16}\n          padding={{ right: 32 }}\n        />\n        <YAxis\n          tickFormatter={formatTVL}\n          tick={{ fill: \"white\" }}\n          axisLine={false}\n          tickLine={false}\n        />\n        <Tooltip\n          content={<CustomTooltip title=\"TVL\" valueFormatter={formatTVL} />}\n        />\n        <defs>\n          <linearGradient id=\"gradient\" gradientTransform=\"rotate(100)\">\n            <stop offset=\"0%\" stopColor=\"#FF2B57\" />\n            <stop offset=\"100%\" stopColor=\"#5EA1EC\" />\n          </linearGradient>\n        </defs>\n        <Area dataKey=\"totalTVL\" fill=\"url(#gradient)\" stroke=\"#405BBC\" />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default TVLAreaChart;\n","import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  receiveDataWrapper,\n} from \"../store/helpers\";\nimport { TVL_CUMULATIVE_URL } from \"../utils/consts\";\n\nexport interface LockedAsset {\n  Symbol: string;\n  Name: string;\n  Address: string;\n  CoinGeckoId: string;\n  Amount: number;\n  Notional: number;\n  TokenPrice: number;\n}\n\nexport interface LockedAssets {\n  [tokenAddress: string]: LockedAsset;\n}\n\nexport interface ChainsAssets {\n  [chainId: string]: LockedAssets;\n}\n\nexport interface NotionalTVLCumulative {\n  DailyLocked: {\n    [date: string]: ChainsAssets;\n  };\n}\n\nconst useCumulativeTVL = () => {\n  const [cumulativeTVL, setCumulativeTVL] = useState<\n    DataWrapper<NotionalTVLCumulative>\n  >(fetchDataWrapper());\n\n  useEffect(() => {\n    let cancelled = false;\n    axios\n      .get<NotionalTVLCumulative>(TVL_CUMULATIVE_URL)\n      .then((response) => {\n        if (!cancelled) {\n          setCumulativeTVL(receiveDataWrapper(response.data));\n        }\n      })\n      .catch((error) => {\n        if (!cancelled) {\n          setCumulativeTVL(errorDataWrapper(error));\n        }\n        console.log(error);\n      });\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  return cumulativeTVL;\n};\n\nexport default useCumulativeTVL;\n","import { DurationLike } from \"luxon\";\nimport { formatTickDay, formatTickMonth } from \"./utils\";\n\nexport interface TimeFrame {\n  interval?: number;\n  duration?: DurationLike;\n  tickFormatter: (value: any, index: number) => string;\n}\n\nexport const TIME_FRAMES: { [key: string]: TimeFrame } = {\n  \"7 days\": {\n    duration: { days: 7 },\n    tickFormatter: formatTickDay,\n  },\n  \"30 days\": {\n    duration: { days: 30 },\n    tickFormatter: formatTickDay,\n  },\n  \"3 months\": {\n    duration: { months: 3 },\n    tickFormatter: formatTickDay,\n  },\n  \"6 months\": {\n    duration: { months: 6 },\n    interval: 30,\n    tickFormatter: formatTickMonth,\n  },\n  \"1 year\": {\n    duration: { years: 1 },\n    interval: 30,\n    tickFormatter: formatTickMonth,\n  },\n  \"All time\": { interval: 30, tickFormatter: formatTickMonth },\n};\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Grid, Typography } from \"@material-ui/core\";\nimport {\n  getChainShortName,\n  CHAINS_BY_ID,\n  COLOR_BY_CHAIN_ID,\n} from \"../../../utils/consts\";\nimport { formatDate } from \"./utils\";\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    padding: \"16px\",\n    minWidth: \"214px\",\n    background: \"rgba(255, 255, 255, 0.95)\",\n    borderRadius: \"4px\",\n  },\n  titleText: {\n    color: \"#21227E\",\n    fontSize: \"24px\",\n    fontWeight: 500,\n  },\n  row: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: \"8px\",\n  },\n  ruler: {\n    height: \"3px\",\n    backgroundColor: \"#374B92\",\n  },\n  valueText: {\n    color: \"#404040\",\n    fontSize: \"18px\",\n    fontWeight: 500,\n  },\n  icon: {\n    width: \"24px\",\n    height: \"24px\",\n  },\n}));\n\nconst MultiChainTooltip = ({ active, payload, title, valueFormatter }: any) => {\n  const classes = useStyles();\n  if (active && payload && payload.length) {\n    if (payload.length === 1) {\n      const chainId = +payload[0].dataKey.split(\".\")[1] as ChainId;\n      const chainShortName = getChainShortName(chainId);\n      const data = payload.find((data: any) => data.name === chainShortName);\n      if (data) {\n        return (\n          <div className={classes.container}>\n            <Grid container alignItems=\"center\">\n              <img\n                className={classes.icon}\n                src={CHAINS_BY_ID[chainId]?.logo}\n                alt={chainShortName}\n              />\n              <Typography\n                display=\"inline\"\n                className={classes.titleText}\n                style={{ marginLeft: \"8px\" }}\n              >\n                {chainShortName}\n              </Typography>\n            </Grid>\n            <hr\n              className={classes.ruler}\n              style={{ backgroundColor: COLOR_BY_CHAIN_ID[chainId] }}\n            ></hr>\n            <Typography className={classes.valueText}>\n              {valueFormatter(data.value)}\n            </Typography>\n            <Typography className={classes.valueText}>\n              {formatDate(data.payload.date)}\n            </Typography>\n          </div>\n        );\n      }\n    } else {\n      return (\n        <div className={classes.container}>\n          <Typography noWrap className={classes.titleText}>\n            {title}\n          </Typography>\n          <Typography className={classes.valueText}>\n            {formatDate(payload[0].payload.date)}\n          </Typography>\n          <hr className={classes.ruler}></hr>\n          {payload.map((data: any) => {\n            return (\n              <div key={data.name} className={classes.row}>\n                <div\n                  style={{\n                    width: \"24px\",\n                    height: \"24px\",\n                    backgroundColor: data.stroke,\n                  }}\n                />\n                <Typography\n                  display=\"inline\"\n                  className={classes.valueText}\n                  style={{ marginLeft: \"8px\", marginRight: \"8px\" }}\n                >\n                  {data.name}\n                </Typography>\n                <Typography\n                  display=\"inline\"\n                  className={classes.valueText}\n                  style={{ marginLeft: \"auto\" }}\n                >\n                  {valueFormatter(data.value)}\n                </Typography>\n              </div>\n            );\n          })}\n        </div>\n      );\n    }\n  }\n  return null;\n};\n\nexport default MultiChainTooltip;\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { useTheme, useMediaQuery } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport {\n  Legend,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { NotionalTVLCumulative } from \"../../../hooks/useCumulativeTVL\";\nimport { COLOR_BY_CHAIN_ID, getChainShortName } from \"../../../utils/consts\";\nimport MultiChainTooltip from \"./MultiChainTooltip\";\nimport { TimeFrame } from \"./TimeFrame\";\nimport {\n  formatTVL,\n  createCumulativeTVLChartData,\n  renderLegendText,\n} from \"./utils\";\n\nconst TVLLineChart = ({\n  cumulativeTVL,\n  timeFrame,\n  selectedChains,\n}: {\n  cumulativeTVL: NotionalTVLCumulative;\n  timeFrame: TimeFrame;\n  selectedChains: ChainId[];\n}) => {\n  const data = useMemo(() => {\n    return createCumulativeTVLChartData(cumulativeTVL, timeFrame);\n  }, [cumulativeTVL, timeFrame]);\n\n  const theme = useTheme();\n  const isXSmall = useMediaQuery(theme.breakpoints.down(\"xs\"));\n\n  return (\n    <ResponsiveContainer height={452}>\n      <LineChart data={data}>\n        <XAxis\n          dataKey=\"date\"\n          tickFormatter={timeFrame.tickFormatter}\n          tick={{ fill: \"white\" }}\n          interval={!isXSmall ? timeFrame.interval : undefined}\n          axisLine={false}\n          tickLine={false}\n          dy={16}\n          padding={{ right: 32 }}\n        />\n        <YAxis\n          tickFormatter={formatTVL}\n          tick={{ fill: \"white\" }}\n          axisLine={false}\n          tickLine={false}\n        />\n        <Tooltip\n          content={\n            <MultiChainTooltip\n              title=\"Multiple Chains\"\n              valueFormatter={formatTVL}\n            />\n          }\n        />\n        {selectedChains.map((chainId) => (\n          <Line\n            dataKey={`tvlByChain.${chainId}`}\n            name={getChainShortName(chainId)}\n            stroke={COLOR_BY_CHAIN_ID[chainId]}\n            strokeWidth=\"4\"\n            dot={false}\n            key={chainId}\n          />\n        ))}\n        <Legend\n          iconType=\"square\"\n          iconSize={32}\n          formatter={renderLegendText}\n          wrapperStyle={{ paddingTop: 24 }}\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default TVLLineChart;\n","import { ChainId, CHAIN_ID_ETH } from \"@certusone/wormhole-sdk\";\nimport {\n  Button,\n  makeStyles,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from \"@material-ui/core\";\nimport { ArrowForward } from \"@material-ui/icons\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { NotionalTVL } from \"../../../hooks/useTVL\";\nimport { ChainInfo, getChainShortName } from \"../../../utils/consts\";\nimport { createChainTVLChartData, formatTVL } from \"./utils\";\n\nconst useStyles = makeStyles(() => ({\n  table: {\n    borderSpacing: \"16px\",\n    overflowX: \"auto\",\n    display: \"block\",\n  },\n  button: {\n    height: \"30px\",\n    textTransform: \"none\",\n    width: \"150px\",\n    fontSize: \"12px\",\n  },\n}));\n\nconst TVLBarChart = ({\n  tvl,\n  onChainSelected,\n}: {\n  tvl: NotionalTVL;\n  onChainSelected: (chainInfo: ChainInfo) => void;\n}) => {\n  const classes = useStyles();\n\n  const [mouseOverChainId, setMouseOverChainId] =\n    useState<ChainId>(CHAIN_ID_ETH);\n\n  const chainTVLs = useMemo(() => {\n    return createChainTVLChartData(tvl);\n  }, [tvl]);\n\n  const handleClick = useCallback(\n    (chainInfo: ChainInfo) => {\n      onChainSelected(chainInfo);\n    },\n    [onChainSelected]\n  );\n\n  const handleMouseOver = useCallback((chainId: ChainId) => {\n    setMouseOverChainId(chainId);\n  }, []);\n\n  const theme = useTheme();\n  const isSmall = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  return (\n    <table className={classes.table}>\n      <tbody>\n        {chainTVLs.map((chainTVL) => (\n          <tr\n            key={chainTVL.chainInfo.id}\n            onMouseOver={() => handleMouseOver(chainTVL.chainInfo.id)}\n          >\n            <td style={{ textAlign: \"right\" }}>\n              <Typography noWrap display=\"inline\">\n                {getChainShortName(chainTVL.chainInfo.id)}\n              </Typography>\n            </td>\n            <td>\n              <img\n                src={chainTVL.chainInfo.logo}\n                alt={\"\"}\n                width={24}\n                height={24}\n              />\n            </td>\n            <td width=\"100%\">\n              <div\n                style={{\n                  height: 30,\n                  width: `${chainTVL.tvlRatio}%`,\n                  backgroundImage:\n                    \"linear-gradient(90deg, #F44B1B 0%, #EEB430 100%)\",\n                }}\n              ></div>\n            </td>\n            <td>\n              <Typography noWrap display=\"inline\">\n                {formatTVL(chainTVL.tvl)}\n              </Typography>\n            </td>\n            <td>\n              {isSmall || mouseOverChainId === chainTVL.chainInfo.id ? (\n                <Button\n                  variant=\"outlined\"\n                  endIcon={<ArrowForward />}\n                  onClick={() => handleClick(chainTVL.chainInfo)}\n                  className={classes.button}\n                >\n                  View assets\n                </Button>\n              ) : (\n                <div style={{ width: 150 }} />\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default TVLBarChart;\n","export type CoinGeckoIdToImageUrl = {\n  [id: string]: string;\n};\n\nexport const COIN_GECKO_IMAGE_URLS: CoinGeckoIdToImageUrl = {\n  \"0xmonero\":\n    \"https://assets.coingecko.com/coins/images/11035/small/0xmnr.PNG?1587357680\",\n  \"1inch\":\n    \"https://assets.coingecko.com/coins/images/13469/small/1inch-token.png?1608803028\",\n  \"1safu\":\n    \"https://assets.coingecko.com/coins/images/22792/small/145941796-8f7716f4-66bc-4a38-9ad5-441525c3b5b2.png?1642581127\",\n  \"1sol\":\n    \"https://assets.coingecko.com/coins/images/21615/small/YyGDie9f_400x400.jpg?1639610633\",\n  \"3x-long-ethereum-token\":\n    \"https://assets.coingecko.com/coins/images/10163/small/683JEXMN_400x400_%281%29.png?1576504568\",\n  aave: \"https://assets.coingecko.com/coins/images/12645/small/AAVE.png?1601374110\",\n  \"aave-polygon-usdc\":\n    \"https://assets.coingecko.com/coins/images/17249/small/amUSDC_2x.png?1626941306\",\n  \"aave-weth\":\n    \"https://assets.coingecko.com/coins/images/17238/small/aWETH_2x.png?1626940782\",\n  \"abitshadow-token\":\n    \"https://assets.coingecko.com/coins/images/7882/small/ABST.png?1644477172\",\n  \"acy-finance\":\n    \"https://assets.coingecko.com/coins/images/21883/small/ubfPhcEK_400x400.jpg?1640214613\",\n  adapad:\n    \"https://assets.coingecko.com/coins/images/18273/small/EhSqPTtG_400x400.jpg?1631181091\",\n  ageur:\n    \"https://assets.coingecko.com/coins/images/19479/small/agEUR.png?1635283566\",\n  \"akita-inu\":\n    \"https://assets.coingecko.com/coins/images/14115/small/logo_%282%29.png?1644913173\",\n  akropolis:\n    \"https://assets.coingecko.com/coins/images/3328/small/Akropolis.png?1547037929\",\n  alchemix:\n    \"https://assets.coingecko.com/coins/images/14113/small/Alchemix.png?1614409874\",\n  aldrin:\n    \"https://assets.coingecko.com/coins/images/16849/small/Aldrin.png?1629959768\",\n  aleph:\n    \"https://assets.coingecko.com/coins/images/11676/small/Monochram-aleph.png?1608483725\",\n  allbridge:\n    \"https://assets.coingecko.com/coins/images/18690/small/abr.png?1640742053\",\n  \"amp-token\":\n    \"https://assets.coingecko.com/coins/images/12409/small/amp-200x200.png?1599625397\",\n  ampleforth:\n    \"https://assets.coingecko.com/coins/images/4708/small/Ampleforth.png?1561684250\",\n  \"amy-finance\":\n    \"https://assets.coingecko.com/coins/images/18719/small/9oSy6bTl_400x400.png?1633127387\",\n  \"anchor-beth-token\":\n    \"https://assets.coingecko.com/coins/images/21002/small/bETH.png?1638187691\",\n  \"anchor-protocol\":\n    \"https://assets.coingecko.com/coins/images/14420/small/anchor_protocol_logo.jpg?1615965420\",\n  anchorust:\n    \"https://assets.coingecko.com/coins/images/21097/small/aust.png?1638324579\",\n  \"angle-protocol\":\n    \"https://assets.coingecko.com/coins/images/19060/small/ANGLE_Token_Logo.png?1635281291\",\n  apyswap:\n    \"https://assets.coingecko.com/coins/images/14163/small/apys.png?1635831990\",\n  ardcoin:\n    \"https://assets.coingecko.com/coins/images/9432/small/ARDC.png?1627466542\",\n  ariadne:\n    \"https://assets.coingecko.com/coins/images/19401/small/Frame_5_%287%29_%281%29.png?1635176608\",\n  artem:\n    \"https://assets.coingecko.com/coins/images/21998/small/ARTM_Logo_MAIN_%281%29.png?1644469331\",\n  arth: \"https://assets.coingecko.com/coins/images/16876/small/ARTH_Token.png?1625651538\",\n  \"atlas-dex\":\n    \"https://assets.coingecko.com/coins/images/23002/small/logo.png?1643091340\",\n  auditchain:\n    \"https://assets.coingecko.com/coins/images/6398/small/auditchain.png?1547042519\",\n  audius:\n    \"https://assets.coingecko.com/coins/images/12913/small/AudiusCoinLogo_2x.png?1603425727\",\n  \"augmented-finance\":\n    \"https://assets.coingecko.com/coins/images/20077/small/200x200-agf.png?1636452467\",\n  augur:\n    \"https://assets.coingecko.com/coins/images/309/small/REP.png?1596339859\",\n  \"aurora-dao\":\n    \"https://assets.coingecko.com/coins/images/2565/small/logomark-purple-286x286.png?1638362736\",\n  aurory:\n    \"https://assets.coingecko.com/coins/images/19324/small/logo.png?1635076945\",\n  \"avalanche-2\":\n    \"https://assets.coingecko.com/coins/images/12559/small/coin-round-red.png?1604021818\",\n  \"axie-infinity\":\n    \"https://assets.coingecko.com/coins/images/13029/small/axie_infinity_logo.png?1604471082\",\n  \"baby-doge-coin\":\n    \"https://assets.coingecko.com/coins/images/16125/small/Baby_Doge.png?1623044048\",\n  babytigergold:\n    \"https://assets.coingecko.com/coins/images/22811/small/logo_babytiger.png?1642658264\",\n  \"bamboo-coin\":\n    \"https://assets.coingecko.com/coins/images/19620/small/FC0hnduacAAHYFC.png?1635496724\",\n  banana:\n    \"https://assets.coingecko.com/coins/images/17521/small/banana-token-cg.png?1646285527\",\n  banano:\n    \"https://assets.coingecko.com/coins/images/6226/small/banano-transparent.png?1619589798\",\n  bancor:\n    \"https://assets.coingecko.com/coins/images/736/small/bancor-bnt.png?1628822309\",\n  \"basic-attention-token\":\n    \"https://assets.coingecko.com/coins/images/677/small/basic-attention-token.png?1547034427\",\n  \"battle-of-guardians-share\":\n    \"https://assets.coingecko.com/coins/images/22285/small/K3hU77wS_400x400.jpg?1641365642\",\n  \"beefy-finance\":\n    \"https://assets.coingecko.com/coins/images/12704/small/token.png?1601876182\",\n  benqi:\n    \"https://assets.coingecko.com/coins/images/16362/small/GergDDN3_400x400.jpg?1644984441\",\n  \"benqi-liquid-staked-avax\":\n    \"https://assets.coingecko.com/coins/images/23657/small/savax_blue.png?1644989825\",\n  \"biconomy-exchange-token\":\n    \"https://assets.coingecko.com/coins/images/18198/small/mGky0OOh_400x400.jpg?1630965301\",\n  bilira:\n    \"https://assets.coingecko.com/coins/images/10119/small/JBs9jiXO_400x400.jpg?1642668342\",\n  \"binance-bitcoin\":\n    \"https://assets.coingecko.com/coins/images/14108/small/Binance-bitcoin.png?1617332330\",\n  \"binance-eth\":\n    \"https://assets.coingecko.com/coins/images/13804/small/Binnace.png?1611997829\",\n  \"binance-usd\":\n    \"https://assets.coingecko.com/coins/images/9576/small/BUSD.png?1568947766\",\n  \"binance-wrapped-btc\":\n    \"https://assets.coingecko.com/coins/images/14867/small/binance-btc_32.png?1618814666\",\n  binancecoin:\n    \"https://assets.coingecko.com/coins/images/825/small/bnb-icon2_2x.png?1644979850\",\n  \"bird-money\":\n    \"https://assets.coingecko.com/coins/images/13260/small/favicon-180x180.png?1611546646\",\n  biswap:\n    \"https://assets.coingecko.com/coins/images/16845/small/biswap.png?1625388985\",\n  bitcoin:\n    \"https://assets.coingecko.com/coins/images/1/small/bitcoin.png?1547033579\",\n  bitlocus:\n    \"https://assets.coingecko.com/coins/images/20913/small/btl.png?1637922710\",\n  bitsong:\n    \"https://assets.coingecko.com/coins/images/5041/small/logo_-_2021-01-10T210801.390.png?1610284134\",\n  bitspawn:\n    \"https://assets.coingecko.com/coins/images/16513/small/token_logo.png?1631603192\",\n  blockasset:\n    \"https://assets.coingecko.com/coins/images/21332/small/Blockasset-Logo-Symbol.png?1648442722\",\n  \"blocto-token\":\n    \"https://assets.coingecko.com/coins/images/18657/small/BLT_token.png?1633082645\",\n  bloktopia:\n    \"https://assets.coingecko.com/coins/images/18819/small/logo-bholdus-6.png?1633518105\",\n  bluzelle:\n    \"https://assets.coingecko.com/coins/images/2848/small/ColorIcon_3x.png?1622516510\",\n  \"bonded-luna\":\n    \"https://assets.coingecko.com/coins/images/22369/small/17013.png?1641766740\",\n  bonfida:\n    \"https://assets.coingecko.com/coins/images/13395/small/fida-dark.png?1608112224\",\n  boozedoge:\n    \"https://assets.coingecko.com/coins/images/18852/small/Booze-Logo-CMC.png?1633592459\",\n  botxcoin:\n    \"https://assets.coingecko.com/coins/images/6827/small/botx.jpg?1548317786\",\n  \"bridge-mutual\":\n    \"https://assets.coingecko.com/coins/images/13808/small/bmi_logo.png?1612009598\",\n  brz: \"https://assets.coingecko.com/coins/images/8472/small/2_vtiD3xwce9knG2COxtSMaQ.png?1597786961\",\n  \"bull-coin\":\n    \"https://assets.coingecko.com/coins/images/15975/small/bull_ms.94cd70ff.png?1622525834\",\n  burp: \"https://assets.coingecko.com/coins/images/17317/small/Big_Town_Chef_-__BURP_-_Avatar_3x.png?1646202255\",\n  \"bxmi-token\":\n    \"https://assets.coingecko.com/coins/images/20859/small/1QE9Pge.png?1637803118\",\n  cake: \"https://assets.coingecko.com/coins/images/21639/small/cake.png?1639630973\",\n  cardano:\n    \"https://assets.coingecko.com/coins/images/975/small/cardano.png?1547034860\",\n  cartesi:\n    \"https://assets.coingecko.com/coins/images/11038/small/cartesi.png?1592288021\",\n  cashcow:\n    \"https://assets.coingecko.com/coins/images/19388/small/cash_cow.png?1648265503\",\n  catecoin:\n    \"https://assets.coingecko.com/coins/images/15364/small/logo.png?1620647627\",\n  catzcoin:\n    \"https://assets.coingecko.com/coins/images/15519/small/MX0hFr7.jpeg?1621118815\",\n  \"celer-network\":\n    \"https://assets.coingecko.com/coins/images/4379/small/Celr.png?1554705437\",\n  celo: \"https://assets.coingecko.com/coins/images/11090/small/icon-celo-CELO-color-500.png?1592293590\",\n  \"celsius-degree-token\":\n    \"https://assets.coingecko.com/coins/images/3263/small/CEL_logo.png?1609598753\",\n  chain:\n    \"https://assets.coingecko.com/coins/images/19678/small/Chain_icon.png?1635741399\",\n  \"chain-games\":\n    \"https://assets.coingecko.com/coins/images/12257/small/chain-logo-centered-500x500.png?1599617244\",\n  chainlink:\n    \"https://assets.coingecko.com/coins/images/877/small/chainlink-new-logo.png?1547034700\",\n  charli3:\n    \"https://assets.coingecko.com/coins/images/15052/small/Charli3-Profile-Icon-1.png?1642643567\",\n  chi: \"https://assets.coingecko.com/coins/images/20130/small/sIuRXww.png?1636528063\",\n  chiliz:\n    \"https://assets.coingecko.com/coins/images/8834/small/Chiliz.png?1561970540\",\n  chronobank:\n    \"https://assets.coingecko.com/coins/images/604/small/time-32x32.png?1627130666\",\n  chronologic:\n    \"https://assets.coingecko.com/coins/images/951/small/Chronologic-network.png?1547034815\",\n  cindicator:\n    \"https://assets.coingecko.com/coins/images/1006/small/cindicator.png?1547034913\",\n  civic:\n    \"https://assets.coingecko.com/coins/images/788/small/Civic-logo-blue.png?1636393120\",\n  \"clintex-cti\":\n    \"https://assets.coingecko.com/coins/images/13266/small/CTI.png?1606817542\",\n  \"coin-capsule\":\n    \"https://assets.coingecko.com/coins/images/15921/small/e55393fa-7b4d-40f5-9f36-9a8a6bdcb570.png?1622430581\",\n  \"coin-discovery\":\n    \"https://assets.coingecko.com/coins/images/18839/small/IdvWAhot_400x400.jpg?1633572605\",\n  coin98:\n    \"https://assets.coingecko.com/coins/images/17117/small/logo.png?1626412904\",\n  \"compound-governance-token\":\n    \"https://assets.coingecko.com/coins/images/10775/small/COMP.png?1592625425\",\n  constitutiondao:\n    \"https://assets.coingecko.com/coins/images/20612/small/GN_UVm3d_400x400.jpg?1637294355\",\n  contentos:\n    \"https://assets.coingecko.com/coins/images/8379/small/4036.png?1561085375\",\n  cosmos:\n    \"https://assets.coingecko.com/coins/images/1481/small/cosmos_hub.png?1555657960\",\n  covalent:\n    \"https://assets.coingecko.com/coins/images/14168/small/covalent-cqt.png?1624545218\",\n  \"cream-2\":\n    \"https://assets.coingecko.com/coins/images/11976/small/Cream.png?1596593418\",\n  credefi:\n    \"https://assets.coingecko.com/coins/images/21396/small/e1QbZ4qQ_400x400.jpg?1639042835\",\n  cropperfinance:\n    \"https://assets.coingecko.com/coins/images/17883/small/copperfinance.PNG?1629708744\",\n  \"crowny-token\":\n    \"https://assets.coingecko.com/coins/images/14958/small/crowny-icon-rounded_2x.png?1619147225\",\n  \"crypto-fight-club\":\n    \"https://assets.coingecko.com/coins/images/21695/small/zGwwAgL.png?1639721544\",\n  curate:\n    \"https://assets.coingecko.com/coins/images/13327/small/400x400_%281%29_%283%29_%282%29.png?1613998208\",\n  \"curve-dao-token\":\n    \"https://assets.coingecko.com/coins/images/12124/small/Curve.png?1597369484\",\n  dai: \"https://assets.coingecko.com/coins/images/9956/small/4943.png?1636636734\",\n  \"dao-maker\":\n    \"https://assets.coingecko.com/coins/images/13915/small/4.png?1612838831\",\n  \"data-economy-index\":\n    \"https://assets.coingecko.com/coins/images/18500/small/data_32.png?1632209427\",\n  \"dds-store\":\n    \"https://assets.coingecko.com/coins/images/13946/small/11qbAbzb_400x400.png?1613172588\",\n  \"dead-knight\":\n    \"https://assets.coingecko.com/coins/images/24442/small/SAq1GaQc_400x400.jpg?1647673953\",\n  decentraland:\n    \"https://assets.coingecko.com/coins/images/878/small/decentraland-mana.png?1550108745\",\n  defiato:\n    \"https://assets.coingecko.com/coins/images/13386/small/Defiato.png?1608085873\",\n  defil:\n    \"https://assets.coingecko.com/coins/images/17708/small/defillogo200200.png?1629080381\",\n  defire:\n    \"https://assets.coingecko.com/coins/images/15722/small/defire.PNG?1621635373\",\n  derace:\n    \"https://assets.coingecko.com/coins/images/17438/small/derace-logo-black-coingecko.png?1627656907\",\n  dexlab:\n    \"https://assets.coingecko.com/coins/images/17276/small/3_GradientSymbol.png?1650936792\",\n  dinox:\n    \"https://assets.coingecko.com/coins/images/17321/small/asset_icon_dnxc_200.png?1627292452\",\n  dogecoin:\n    \"https://assets.coingecko.com/coins/images/5/small/dogecoin.png?1547792256\",\n  \"dogelon-mars\":\n    \"https://assets.coingecko.com/coins/images/14962/small/6GxcPRo3_400x400.jpg?1619157413\",\n  \"dogemon-go\":\n    \"https://assets.coingecko.com/coins/images/17480/small/dogemongo.PNG?1627950869\",\n  \"dragons-quick\":\n    \"https://assets.coingecko.com/coins/images/15185/small/quickswap.png?1620044811\",\n  dragonsb:\n    \"https://assets.coingecko.com/coins/images/23738/small/Bo9_OxOV_400x400.jpg?1645176823\",\n  dydx: \"https://assets.coingecko.com/coins/images/17500/small/hjnIm9bV.jpg?1628009360\",\n  \"eagonswap-token\":\n    \"https://assets.coingecko.com/coins/images/20431/small/IMG-20210912-WA0003.jpg?1637035180\",\n  easyfi:\n    \"https://assets.coingecko.com/coins/images/12742/small/Logo_Icon.png?1624471467\",\n  echoin:\n    \"https://assets.coingecko.com/coins/images/9354/small/L32_KzNQ_400x400.jpg?1566513096\",\n  ecomi:\n    \"https://assets.coingecko.com/coins/images/4428/small/ECOMI.png?1557928886\",\n  \"elite-swap\":\n    \"https://assets.coingecko.com/coins/images/13715/small/logo_-_2021-01-20T105016.992.png?1611111027\",\n  elyfi:\n    \"https://assets.coingecko.com/coins/images/23733/small/elyfi_logo.png?1645691480\",\n  enjincoin:\n    \"https://assets.coingecko.com/coins/images/1102/small/enjin-coin-logo.png?1547035078\",\n  erc20:\n    \"https://assets.coingecko.com/coins/images/1141/small/0c213e0a1ee44bd8a3c952ffc5bc5a45.png?1628771346\",\n  ertha:\n    \"https://assets.coingecko.com/coins/images/20317/small/Ry9tgUal_400x400.jpg?1636856709\",\n  esg: \"https://assets.coingecko.com/coins/images/24932/small/esg.png?1649397514\",\n  essentia:\n    \"https://assets.coingecko.com/coins/images/2483/small/Essentia-token.jpg?1547036604\",\n  ethereum:\n    \"https://assets.coingecko.com/coins/images/279/small/ethereum.png?1595348880\",\n  \"ethereum-meta\":\n    \"https://assets.coingecko.com/coins/images/6586/small/ethereum-meta.png?1548125409\",\n  \"ethereum-name-service\":\n    \"https://assets.coingecko.com/coins/images/19785/small/acatxTm8_400x400.jpg?1635850140\",\n  \"ethernity-chain\":\n    \"https://assets.coingecko.com/coins/images/14238/small/LOGO_HIGH_QUALITY.png?1647831402\",\n  everid:\n    \"https://assets.coingecko.com/coins/images/5209/small/Everest.jpg?1628042930\",\n  evrynet:\n    \"https://assets.coingecko.com/coins/images/19194/small/evry.png?1634637970\",\n  fantom:\n    \"https://assets.coingecko.com/coins/images/4001/small/Fantom.png?1558015016\",\n  \"feisty-doge-nft\":\n    \"https://assets.coingecko.com/coins/images/17834/small/doge-fractionalized.png?1629390495\",\n  \"flag-network\":\n    \"https://assets.coingecko.com/coins/images/22552/small/17215.png?1642053401\",\n  \"floki-inu\":\n    \"https://assets.coingecko.com/coins/images/16746/small/PNG_image.png?1643184642\",\n  floof:\n    \"https://assets.coingecko.com/coins/images/19810/small/FLOOF_logo_200x200.png?1635917291\",\n  \"foxy-equilibrium\":\n    \"https://assets.coingecko.com/coins/images/17303/small/cmc200x200.png?1627268759\",\n  frax: \"https://assets.coingecko.com/coins/images/13422/small/frax_logo.png?1608476506\",\n  \"frax-share\":\n    \"https://assets.coingecko.com/coins/images/13423/small/frax_share.png?1608478989\",\n  \"free-novak\":\n    \"https://assets.coingecko.com/coins/images/23370/small/logo_%282%29.png?1643955421\",\n  \"frontier-token\":\n    \"https://assets.coingecko.com/coins/images/12479/small/frontier_logo.png?1600145472\",\n  \"ftx-token\":\n    \"https://assets.coingecko.com/coins/images/9026/small/F.png?1609051564\",\n  \"gaia-everworld\":\n    \"https://assets.coingecko.com/coins/images/19629/small/gaia.png?1646481791\",\n  gaj: \"https://assets.coingecko.com/coins/images/15257/small/logo200x200.png?1629887093\",\n  gala: \"https://assets.coingecko.com/coins/images/12493/small/GALA-COINGECKO.png?1600233435\",\n  \"galaxy-war\":\n    \"https://assets.coingecko.com/coins/images/22166/small/e2x7gMJ4_400x400.jpg?1641166277\",\n  \"gari-network\":\n    \"https://assets.coingecko.com/coins/images/22615/small/gari.png?1642313087\",\n  gemguardian:\n    \"https://assets.coingecko.com/coins/images/18614/small/gemg.PNG?1632697389\",\n  \"gemma-extending-tech\":\n    \"https://assets.coingecko.com/coins/images/12226/small/200.png?1643188059\",\n  \"genaro-network\":\n    \"https://assets.coingecko.com/coins/images/1361/small/genaro-network.png?1547035387\",\n  gene: \"https://assets.coingecko.com/coins/images/14145/small/logo.a60a0c80_%281%29.png?1614653629\",\n  genopets:\n    \"https://assets.coingecko.com/coins/images/20360/small/gene-token.png?1636945172\",\n  \"gera-coin\":\n    \"https://assets.coingecko.com/coins/images/13686/small/GeraCoin_Logo-icon-1000px.png?1610919942\",\n  \"globaltrustfund-token\":\n    \"https://assets.coingecko.com/coins/images/11817/small/gtf.png?1594679456\",\n  \"gmt-token\":\n    \"https://assets.coingecko.com/coins/images/15662/small/gmt.png?1640069038\",\n  goosefx:\n    \"https://assets.coingecko.com/coins/images/19793/small/0Kjm9f4.png?1635906737\",\n  \"governance-ohm\":\n    \"https://assets.coingecko.com/coins/images/21129/small/token_wsOHM_logo.png?1638764900\",\n  \"grape-2\":\n    \"https://assets.coingecko.com/coins/images/18149/small/fRsuAlcV_400x400.png?1632437325\",\n  graviton:\n    \"https://assets.coingecko.com/coins/images/24818/small/Graviton_-_Blue_200x200i.png?1649038479\",\n  \"green-satoshi-token\":\n    \"https://assets.coingecko.com/coins/images/21841/small/gst.png?1640332626\",\n  \"green-shiba-inu\":\n    \"https://assets.coingecko.com/coins/images/15649/small/inu-logo-new-200x200.png?1625578449\",\n  \"hanu-yokia\":\n    \"https://assets.coingecko.com/coins/images/17161/small/Goji_Hanu_Logo_200x200.png?1627127472\",\n  hapi: \"https://assets.coingecko.com/coins/images/14298/small/R9i2HjAL_400x400.jpg?1615332438\",\n  \"harvest-finance\":\n    \"https://assets.coingecko.com/coins/images/12304/small/Harvest.png?1613016180\",\n  hashpanda:\n    \"https://assets.coingecko.com/coins/images/15903/small/logo_-_2021-05-31T060013.983.png?1622412025\",\n  hedget:\n    \"https://assets.coingecko.com/coins/images/12453/small/Hedget.png?1599944809\",\n  hex: \"https://assets.coingecko.com/coins/images/10103/small/HEX-logo.png?1575942673\",\n  \"hlth-token\":\n    \"https://assets.coingecko.com/coins/images/18637/small/hlth.png?1639728357\",\n  \"hot-cross\":\n    \"https://assets.coingecko.com/coins/images/15706/small/Hotcross.png?1632197570\",\n  \"huobi-btc\":\n    \"https://assets.coingecko.com/coins/images/12407/small/Unknown-5.png?1599624896\",\n  husd: \"https://assets.coingecko.com/coins/images/9567/small/HUSD.jpg?1568889385\",\n  hxro: \"https://assets.coingecko.com/coins/images/7805/small/Hxro_Profile_Transparent.png?1622443308\",\n  hydrolink:\n    \"https://assets.coingecko.com/coins/images/19664/small/200x-logo.png?1635736696\",\n  \"ibnb-2\":\n    \"https://assets.coingecko.com/coins/images/17003/small/output-onlinepngtools-4.png?1626061349\",\n  \"ice-token\":\n    \"https://assets.coingecko.com/coins/images/14586/small/ice.png?1617188825\",\n  idefiyieldprotocol:\n    \"https://assets.coingecko.com/coins/images/21976/small/i-DYP-Logo-1.png?1640570294\",\n  infinitup:\n    \"https://assets.coingecko.com/coins/images/18890/small/fc_qo2M7_400x400.jpg?1633749805\",\n  \"injective-protocol\":\n    \"https://assets.coingecko.com/coins/images/12882/small/Secondary_Symbol.png?1628233237\",\n  insure:\n    \"https://assets.coingecko.com/coins/images/10354/small/logo-grey-circle.png?1614910406\",\n  \"interest-bearing-bitcoin\":\n    \"https://assets.coingecko.com/coins/images/15500/small/ibbtc.png?1621077589\",\n  \"internet-node-token\":\n    \"https://assets.coingecko.com/coins/images/2519/small/int-logo-red-transparent_200x200.png?1617251612\",\n  investin:\n    \"https://assets.coingecko.com/coins/images/15588/small/ivn_logo.png?1621267247\",\n  iotex:\n    \"https://assets.coingecko.com/coins/images/3334/small/iotex-logo.png?1547037941\",\n  \"iron-bsc\":\n    \"https://assets.coingecko.com/coins/images/16409/small/qBa5_yCL_400x400.jpg?1623927990\",\n  \"iron-stablecoin\":\n    \"https://assets.coingecko.com/coins/images/14588/small/logo_-_2021-03-31T123525.615.png?1617165339\",\n  \"iron-titanium-token\":\n    \"https://assets.coingecko.com/coins/images/16031/small/titan.png?1636080284\",\n  ispolink:\n    \"https://assets.coingecko.com/coins/images/15283/small/isolink.PNG?1620352267\",\n  \"jarvis-reward-token\":\n    \"https://assets.coingecko.com/coins/images/10390/small/cfeii0y.png?1578868949\",\n  joe: \"https://assets.coingecko.com/coins/images/17569/small/joe_200x200.png?1628497750\",\n  \"jokermanor-metaverse\":\n    \"https://assets.coingecko.com/coins/images/20556/small/14732.png?1637208904\",\n  jpyc: \"https://assets.coingecko.com/coins/images/17277/small/WoZ8rruL_400x400.png?1627016492\",\n  kardiachain:\n    \"https://assets.coingecko.com/coins/images/7942/small/kai.png?1647079540\",\n  \"keep-network\":\n    \"https://assets.coingecko.com/coins/images/3373/small/IuNzUb5b_400x400.jpg?1589526336\",\n  kin: \"https://assets.coingecko.com/coins/images/959/small/kin.png?1586917032\",\n  kineko:\n    \"https://assets.coingecko.com/coins/images/15366/small/Kineko.jpeg?1620721965\",\n  kleekai:\n    \"https://assets.coingecko.com/coins/images/15548/small/Klee-Kai-Logo.png?1628258448\",\n  kurobi:\n    \"https://assets.coingecko.com/coins/images/18612/small/logo_-_2021-09-26T233232.947.png?1632670367\",\n  lasereyes:\n    \"https://assets.coingecko.com/coins/images/22597/small/lsr.png?1643524878\",\n  launchpool:\n    \"https://assets.coingecko.com/coins/images/14041/small/dGUvV0HQ_400x400.jpg?1613976219\",\n  \"lido-dao\":\n    \"https://assets.coingecko.com/coins/images/13573/small/Lido_DAO.png?1609873644\",\n  \"lido-staked-sol\":\n    \"https://assets.coingecko.com/coins/images/18369/small/logo_-_2021-09-15T100934.765.png?1631671781\",\n  litecoin:\n    \"https://assets.coingecko.com/coins/images/2/small/litecoin.png?1547033580\",\n  livepeer:\n    \"https://assets.coingecko.com/coins/images/7137/small/logo-circle-green.png?1619593365\",\n  \"lord-arena\":\n    \"https://assets.coingecko.com/coins/images/21141/small/7pylMWZl_400x400.jpg?1638394911\",\n  \"lua-token\":\n    \"https://assets.coingecko.com/coins/images/12627/small/Screenshot_2020-09-28_at_6.24.59_PM.jpg?1601288721\",\n  \"lucky-lion\":\n    \"https://assets.coingecko.com/coins/images/18712/small/lucky-token-200px.png?1633079262\",\n  lunachow:\n    \"https://assets.coingecko.com/coins/images/18805/small/J-MwYfhD_400x400.jpg?1633475157\",\n  \"magic-internet-money\":\n    \"https://assets.coingecko.com/coins/images/16786/small/mimlogopng.png?1624979612\",\n  \"mango-markets\":\n    \"https://assets.coingecko.com/coins/images/14773/small/token-mango.png?1628171237\",\n  \"mantra-dao\":\n    \"https://assets.coingecko.com/coins/images/12151/small/OM_3D_whtbg.png?1598332353\",\n  marinade:\n    \"https://assets.coingecko.com/coins/images/18867/small/MNDE.png?1643187748\",\n  math: \"https://assets.coingecko.com/coins/images/11335/small/2020-05-19-token-200.png?1589940590\",\n  \"matic-network\":\n    \"https://assets.coingecko.com/coins/images/4713/small/matic-token-icon.png?1624446912\",\n  maticverse:\n    \"https://assets.coingecko.com/coins/images/18403/small/A0782-F05-535-C-45-C8-BE4-F-FEBB4-B8-B5933.jpg?1631792934\",\n  meanfi:\n    \"https://assets.coingecko.com/coins/images/21557/small/89934951.png?1639466364\",\n  \"merit-circle\":\n    \"https://assets.coingecko.com/coins/images/19304/small/Db4XqML.png?1634972154\",\n  metaseer:\n    \"https://assets.coingecko.com/coins/images/17443/small/metas.PNG?1627863142\",\n  metashooter:\n    \"https://assets.coingecko.com/coins/images/24985/small/200x200.png?1649681575\",\n  \"metaverse-index\":\n    \"https://assets.coingecko.com/coins/images/14684/small/MVI_logo.png?1617776444\",\n  million:\n    \"https://assets.coingecko.com/coins/images/16825/small/logo200x200.png?1625834139\",\n  mim: \"https://assets.coingecko.com/coins/images/19927/small/13988.png?1636323160\",\n  mimatic:\n    \"https://assets.coingecko.com/coins/images/15264/small/mimatic-red.png?1620281018\",\n  minato:\n    \"https://assets.coingecko.com/coins/images/24622/small/MNTO_200x200.png?1648448664\",\n  \"mirror-protocol\":\n    \"https://assets.coingecko.com/coins/images/13295/small/mirror_logo_transparent.png?1611554658\",\n  \"mirrored-airbnb\":\n    \"https://assets.coingecko.com/coins/images/14022/small/mirror_logo_transparent.png?1613719600\",\n  \"mirrored-amazon\":\n    \"https://assets.coingecko.com/coins/images/13646/small/mirror_logo_transparent.png?1611565645\",\n  \"mirrored-apple\":\n    \"https://assets.coingecko.com/coins/images/13514/small/mirror_logo_transparent.png?1611564758\",\n  \"mirrored-coinbase\":\n    \"https://assets.coingecko.com/coins/images/21089/small/mir.png?1638323675\",\n  \"mirrored-netflix\":\n    \"https://assets.coingecko.com/coins/images/13643/small/mirror_logo_transparent.png?1611565277\",\n  \"mirrored-spdr-s-p-500\":\n    \"https://assets.coingecko.com/coins/images/21088/small/mir.png?1638323591\",\n  \"mirrored-tesla\":\n    \"https://assets.coingecko.com/coins/images/13644/small/mirror_logo_transparent.png?1611565294\",\n  mixmarvel:\n    \"https://assets.coingecko.com/coins/images/8222/small/8878caf93b1e3b6cfb3b414bda3b5250.png?1613945432\",\n  monkeyball:\n    \"https://assets.coingecko.com/coins/images/20841/small/monkeyball.png?1639023123\",\n  msol: \"https://assets.coingecko.com/coins/images/17752/small/mSOL.png?1644541955\",\n  \"musk-metaverse\":\n    \"https://assets.coingecko.com/coins/images/21822/small/Logo-Symbol-kh-ng-n-n.png?1640075758\",\n  \"my-neighbor-alice\":\n    \"https://assets.coingecko.com/coins/images/14375/small/alice_logo.jpg?1615782968\",\n  mysterium:\n    \"https://assets.coingecko.com/coins/images/757/small/mysterium.png?1547034503\",\n  near: \"https://assets.coingecko.com/coins/images/10365/small/near_icon.png?1601359077\",\n  nexum:\n    \"https://assets.coingecko.com/coins/images/23472/small/200_-_200_coinmarketcap.png?1644218225\",\n  \"nexus-governance-token\":\n    \"https://assets.coingecko.com/coins/images/19080/small/aK3V5I56_400x400.jpg?1634304970\",\n  nftlaunch:\n    \"https://assets.coingecko.com/coins/images/18140/small/nftl.PNG?1630652662\",\n  \"nole-npc\":\n    \"https://assets.coingecko.com/coins/images/19981/small/1EXEFTo6_400x400.jpg?1640251890\",\n  \"nord-finance\":\n    \"https://assets.coingecko.com/coins/images/13630/small/nord.jpg?1610465136\",\n  nothing:\n    \"https://assets.coingecko.com/coins/images/16090/small/Gecko-200x200.png?1624544349\",\n  nuls: \"https://assets.coingecko.com/coins/images/1053/small/Nuls.png?1556868153\",\n  \"numbers-protocol\":\n    \"https://assets.coingecko.com/coins/images/20495/small/5J3RAUO2_400x400.jpg?1637131666\",\n  \"odin-protocol\":\n    \"https://assets.coingecko.com/coins/images/14934/small/ODIN_iso_black.png?1619076975\",\n  \"oly-sport\":\n    \"https://assets.coingecko.com/coins/images/19930/small/oly_sport.PNG?1636323685\",\n  olympus:\n    \"https://assets.coingecko.com/coins/images/14483/small/token_OHM_%281%29.png?1628311611\",\n  one: \"https://assets.coingecko.com/coins/images/4960/small/Screenshot_39.png?1561103318\",\n  only1:\n    \"https://assets.coingecko.com/coins/images/17501/small/like-token.png?1628036165\",\n  ontology:\n    \"https://assets.coingecko.com/coins/images/3447/small/ONT.png?1583481820\",\n  opendao:\n    \"https://assets.coingecko.com/coins/images/21956/small/fo42wXI6_400x400.jpg?1640373810\",\n  openocean:\n    \"https://assets.coingecko.com/coins/images/17014/small/ooe_log.png?1626074195\",\n  opium:\n    \"https://assets.coingecko.com/coins/images/13758/small/opium-token-black_%281%29.png?1611767960\",\n  orbs: \"https://assets.coingecko.com/coins/images/4630/small/Orbs.jpg?1547039896\",\n  orca: \"https://assets.coingecko.com/coins/images/17547/small/Orca_Logo.png?1628781615\",\n  \"orion-money\":\n    \"https://assets.coingecko.com/coins/images/18630/small/YtrqPIWc.png?1632710781\",\n  \"orion-protocol\":\n    \"https://assets.coingecko.com/coins/images/11841/small/orion_logo.png?1594943318\",\n  ovr: \"https://assets.coingecko.com/coins/images/13429/small/ovr_logo.png?1608518911\",\n  \"pancake-games\":\n    \"https://assets.coingecko.com/coins/images/20217/small/6oc-L2UC_400x400.png?1636671365\",\n  \"panda-dao\":\n    \"https://assets.coingecko.com/coins/images/14295/small/logo_Panda_Dao.png?1617277854\",\n  \"parasol-finance\":\n    \"https://assets.coingecko.com/coins/images/21551/small/icon.png?1642584584\",\n  paraswap:\n    \"https://assets.coingecko.com/coins/images/20403/small/ep7GqM19_400x400.jpg?1636979120\",\n  \"parrot-protocol\":\n    \"https://assets.coingecko.com/coins/images/18443/small/PRT.png?1634698095\",\n  parsiq:\n    \"https://assets.coingecko.com/coins/images/11973/small/DsNgK0O.png?1596590280\",\n  partneroid:\n    \"https://assets.coingecko.com/coins/images/21381/small/144531867-a8016f41-3b31-4d6f-97a1-372a58d48626.png?1639034184\",\n  \"pax-gold\":\n    \"https://assets.coingecko.com/coins/images/9519/small/paxg.PNG?1568542565\",\n  \"peculium-2\":\n    \"https://assets.coingecko.com/coins/images/21649/small/peculium.jpg?1639640332\",\n  \"perpetual-protocol\":\n    \"https://assets.coingecko.com/coins/images/12381/small/60d18e06844a844ad75901a9_mark_only_03.png?1628674771\",\n  pillar:\n    \"https://assets.coingecko.com/coins/images/809/small/v2logo-1.png?1624906282\",\n  pixelverse:\n    \"https://assets.coingecko.com/coins/images/19934/small/pixelverse.PNG?1636325521\",\n  \"planet-finance\":\n    \"https://assets.coingecko.com/coins/images/15710/small/aqua-icon.png?1621583770\",\n  \"plant-vs-undead-token\":\n    \"https://assets.coingecko.com/coins/images/17461/small/token-200x200.png?1627883446\",\n  playnity:\n    \"https://assets.coingecko.com/coins/images/21479/small/ply.png?1639651574\",\n  poken:\n    \"https://assets.coingecko.com/coins/images/21574/small/G10VNBAR_400x400.jpg?1639490463\",\n  polkadot:\n    \"https://assets.coingecko.com/coins/images/12171/small/polkadot.png?1639712644\",\n  \"polychain-monsters\":\n    \"https://assets.coingecko.com/coins/images/14604/small/polkamon.png?1617238350\",\n  \"polygon-ecosystem-index\":\n    \"https://assets.coingecko.com/coins/images/19270/small/amun-peco.png?1634868167\",\n  pontoon:\n    \"https://assets.coingecko.com/coins/images/19575/small/pontoon.PNG?1635467899\",\n  \"poolz-finance\":\n    \"https://assets.coingecko.com/coins/images/13679/small/poolz_logo.png?1610806091\",\n  \"pstake-finance\":\n    \"https://assets.coingecko.com/coins/images/23931/small/PSTAKE_Dark.png?1645709930\",\n  \"pstake-staked-atom\":\n    \"https://assets.coingecko.com/coins/images/18484/small/stkATOM_-_128px.png?1634978065\",\n  psyoptions:\n    \"https://assets.coingecko.com/coins/images/22784/small/download.png?1642580392\",\n  \"ptokens-btc\":\n    \"https://assets.coingecko.com/coins/images/10805/small/J51iIea.png?1583891599\",\n  \"pylon-protocol\":\n    \"https://assets.coingecko.com/coins/images/16859/small/pylon_logo.png?1625466331\",\n  \"qi-dao\":\n    \"https://assets.coingecko.com/coins/images/15329/small/qi.png?1620540969\",\n  quick:\n    \"https://assets.coingecko.com/coins/images/13970/small/1_pOU6pBMEmiL-ZJVb0CYRjQ.png?1613386659\",\n  quiztok:\n    \"https://assets.coingecko.com/coins/images/8208/small/QTCON.png?1587543372\",\n  \"radio-caca\":\n    \"https://assets.coingecko.com/coins/images/17841/small/ez44_BSs_400x400.jpg?1629464170\",\n  rai: \"https://assets.coingecko.com/coins/images/14004/small/RAI-logo-coin.png?1613592334\",\n  \"rally-2\":\n    \"https://assets.coingecko.com/coins/images/12843/small/image.png?1611212077\",\n  \"rally-solana\":\n    \"https://assets.coingecko.com/coins/images/23239/small/srly.png?1643531979\",\n  ramp: \"https://assets.coingecko.com/coins/images/12837/small/RAMP-Logo-v2-1000pxsq.png?1617952606\",\n  raydium:\n    \"https://assets.coingecko.com/coins/images/13928/small/PSigc4ie_400x400.jpg?1612875614\",\n  recharge:\n    \"https://assets.coingecko.com/coins/images/18120/small/thecharge.PNG?1630559768\",\n  \"redfox-labs-2\":\n    \"https://assets.coingecko.com/coins/images/12956/small/rfox.png?1642926902\",\n  \"redlight-node-district\":\n    \"https://assets.coingecko.com/coins/images/23338/small/rnd-coin.png?1643883118\",\n  renbtc:\n    \"https://assets.coingecko.com/coins/images/11370/small/Bitcoin.jpg?1628072791\",\n  \"render-token\":\n    \"https://assets.coingecko.com/coins/images/11636/small/rndr.png?1638840934\",\n  \"reserve-rights-token\":\n    \"https://assets.coingecko.com/coins/images/8365/small/rsr.png?1637983320\",\n  ridotto:\n    \"https://assets.coingecko.com/coins/images/18671/small/200x200_%2832%29.png?1632875527\",\n  \"rizespor-token\":\n    \"https://assets.coingecko.com/coins/images/24027/small/mqQwSHB__400x400.jpg?1646113446\",\n  \"rope-token\":\n    \"https://assets.coingecko.com/coins/images/14661/small/rope-v6.png?1619606776\",\n  rougecoin:\n    \"https://assets.coingecko.com/coins/images/14621/small/rougecoin.png?1617265377\",\n  rune: \"https://assets.coingecko.com/coins/images/15606/small/rune-200x200.png?1621315121\",\n  saber:\n    \"https://assets.coingecko.com/coins/images/17162/small/oYs_YFz8_400x400.jpg?1626678457\",\n  \"safe-coin\":\n    \"https://assets.coingecko.com/coins/images/4938/small/safe-coin-logo.png?1547040363\",\n  safemoon:\n    \"https://assets.coingecko.com/coins/images/14362/small/174x174-white.png?1617174846\",\n  \"safuyield-protocol\":\n    \"https://assets.coingecko.com/coins/images/17021/small/safuyield.png?1626098281\",\n  sail: \"https://assets.coingecko.com/coins/images/16657/small/SAIL.png?1624608515\",\n  \"saitama-inu\":\n    \"https://assets.coingecko.com/coins/images/16353/small/Capture.PNG?1632126703\",\n  samoyedcoin:\n    \"https://assets.coingecko.com/coins/images/15051/small/IXeEj5e.png?1619560738\",\n  sarcophagus:\n    \"https://assets.coingecko.com/coins/images/15091/small/E2S2-CcUcAAyNxD.jpeg?1622519884\",\n  secret:\n    \"https://assets.coingecko.com/coins/images/11871/small/Secret.png?1595520186\",\n  serum:\n    \"https://assets.coingecko.com/coins/images/11970/small/serum-logo.png?1597121577\",\n  \"shiba-inu\":\n    \"https://assets.coingecko.com/coins/images/11939/small/shiba.png?1622619446\",\n  \"shield-finance\":\n    \"https://assets.coingecko.com/coins/images/15813/small/sign_dark_200x200.png?1646641417\",\n  \"shill-token\":\n    \"https://assets.coingecko.com/coins/images/18176/small/SHILL_Logo.png?1630896205\",\n  shirtum:\n    \"https://assets.coingecko.com/coins/images/16955/small/4fWlpC0.png?1625794164\",\n  sifchain:\n    \"https://assets.coingecko.com/coins/images/14044/small/EROWAN.png?1614656300\",\n  \"smooth-love-potion\":\n    \"https://assets.coingecko.com/coins/images/10366/small/SLP.png?1578640057\",\n  \"socean-staked-sol\":\n    \"https://assets.coingecko.com/coins/images/18468/small/biOTzfxE_400x400.png?1633662119\",\n  solana:\n    \"https://assets.coingecko.com/coins/images/4128/small/solana.png?1640133422\",\n  \"solanasail-governance-token\":\n    \"https://assets.coingecko.com/coins/images/17658/small/logo_GSAIL.png?1628758657\",\n  solanium:\n    \"https://assets.coingecko.com/coins/images/15816/small/token-icon.png?1621981387\",\n  \"solape-token\":\n    \"https://assets.coingecko.com/coins/images/16930/small/128px-coin.png?1625753550\",\n  \"solareum-wallet\":\n    \"https://assets.coingecko.com/coins/images/20958/small/xsb-200.png?1638141904\",\n  \"solchicks-token\":\n    \"https://assets.coingecko.com/coins/images/20978/small/chicks.png?1638162821\",\n  solcial:\n    \"https://assets.coingecko.com/coins/images/24583/small/1_N9szP0_400x400.jpg?1648217020\",\n  soldoge:\n    \"https://assets.coingecko.com/coins/images/19746/small/2L4aX1r.png?1635822424\",\n  \"solpad-finance\":\n    \"https://assets.coingecko.com/coins/images/16368/small/solpad.PNG?1623820231\",\n  solrazr:\n    \"https://assets.coingecko.com/coins/images/18390/small/Sol-Razr-Logo-TICKER.png?1631759669\",\n  \"spell-token\":\n    \"https://assets.coingecko.com/coins/images/15861/small/abracadabra-3.png?1622544862\",\n  \"spongebob-square\":\n    \"https://assets.coingecko.com/coins/images/22772/small/Spnge.png?1642576286\",\n  sportium:\n    \"https://assets.coingecko.com/coins/images/20981/small/sportium_logo_symbolmark_skyblue.png?1638163975\",\n  \"squirrel-finance\":\n    \"https://assets.coingecko.com/coins/images/12415/small/transparent_logo200.png?1599690422\",\n  stader:\n    \"https://assets.coingecko.com/coins/images/20658/small/sd.png?1642927667\",\n  \"staked-ether\":\n    \"https://assets.coingecko.com/coins/images/13442/small/steth_logo.png?1608607546\",\n  \"star-atlas\":\n    \"https://assets.coingecko.com/coins/images/17659/small/Icon_Reverse.png?1628759092\",\n  \"stargate-finance\":\n    \"https://assets.coingecko.com/coins/images/24413/small/STG_LOGO.png?1647654518\",\n  starlaunch:\n    \"https://assets.coingecko.com/coins/images/20109/small/OP3eksDQ_400x400.png?1636513478\",\n  starterra:\n    \"https://assets.coingecko.com/coins/images/17715/small/starterra-logo.png?1629084125\",\n  \"step-finance\":\n    \"https://assets.coingecko.com/coins/images/14988/small/step.png?1619274762\",\n  stepn:\n    \"https://assets.coingecko.com/coins/images/23597/small/gmt.png?1644658792\",\n  streamr:\n    \"https://assets.coingecko.com/coins/images/17869/small/DATA_new_symbol_3x.png?1629692324\",\n  \"sunny-aggregator\":\n    \"https://assets.coingecko.com/coins/images/18039/small/90dbe787-8e5f-473c-b923-fe138a7a30ea.png?1630314924\",\n  sushi:\n    \"https://assets.coingecko.com/coins/images/12271/small/512x512_Logo_no_chop.png?1606986688\",\n  \"swag-finance\":\n    \"https://assets.coingecko.com/coins/images/12805/small/photo_2020-10-14_23.17.02.jpeg?1602688642\",\n  swipe:\n    \"https://assets.coingecko.com/coins/images/9368/small/swipe.png?1566792311\",\n  synchrony:\n    \"https://assets.coingecko.com/coins/images/19308/small/SYNCHRONY-LOGO.png?1634973091\",\n  \"synthetify-token\":\n    \"https://assets.coingecko.com/coins/images/14835/small/synthetify_token.png?1618611507\",\n  sypool:\n    \"https://assets.coingecko.com/coins/images/18518/small/sypool.PNG?1632268218\",\n  tenset:\n    \"https://assets.coingecko.com/coins/images/14629/small/10set.png?1617353812\",\n  \"terra-luna\":\n    \"https://assets.coingecko.com/coins/images/8284/small/luna1557227471663.png?1567147072\",\n  \"terra-virtua-kolect\":\n    \"https://assets.coingecko.com/coins/images/13330/small/CoinGLogo.png?1607507042\",\n  terrausd:\n    \"https://assets.coingecko.com/coins/images/12681/small/UST.png?1601612407\",\n  tether:\n    \"https://assets.coingecko.com/coins/images/325/small/Tether-logo.png?1598003707\",\n  \"the-4th-pillar\":\n    \"https://assets.coingecko.com/coins/images/3434/small/four-ticker-2021-256x256.png?1617702287\",\n  \"the-graph\":\n    \"https://assets.coingecko.com/coins/images/13397/small/Graph_Token.png?1608145566\",\n  \"the-sandbox\":\n    \"https://assets.coingecko.com/coins/images/12129/small/sandbox_logo.jpg?1597397942\",\n  throne:\n    \"https://assets.coingecko.com/coins/images/16965/small/aXhD3i_g_400x400.jpg?1625804145\",\n  \"tiki-token\":\n    \"https://assets.coingecko.com/coins/images/16427/small/60cbd8fd912298ca60e1fd7e_logo_TIKI_200_square.png?1623995319\",\n  \"token-pocket\":\n    \"https://assets.coingecko.com/coins/images/7603/small/_E6sbg1g_400x400.jpg?1548828066\",\n  tomoe:\n    \"https://assets.coingecko.com/coins/images/12646/small/tomoe_logo.png?1601377449\",\n  torg: \"https://assets.coingecko.com/coins/images/17596/small/TORG_Logo_200x200.png?1628586056\",\n  \"true-usd\":\n    \"https://assets.coingecko.com/coins/images/3449/small/tusd.png?1618395665\",\n  \"trust-wallet-token\":\n    \"https://assets.coingecko.com/coins/images/11085/small/Trust.png?1588062702\",\n  tryhards:\n    \"https://assets.coingecko.com/coins/images/18624/small/TryHards_Tokenticker.png?1650437198\",\n  tudabirds:\n    \"https://assets.coingecko.com/coins/images/22839/small/_TOvRxfx_400x400.jpg?1642745695\",\n  \"twirl-governance-token\":\n    \"https://assets.coingecko.com/coins/images/16725/small/Yn1ebvX.png?1624850650\",\n  \"ufo-gaming\":\n    \"https://assets.coingecko.com/coins/images/16801/small/ufo.png?1644048038\",\n  uniswap:\n    \"https://assets.coingecko.com/coins/images/12504/small/uniswap-uni.png?1600306604\",\n  upbots:\n    \"https://assets.coingecko.com/coins/images/12476/small/UBXT.png?1600132967\",\n  \"usd-coin\":\n    \"https://assets.coingecko.com/coins/images/6319/small/USD_Coin_icon.png?1547042389\",\n  usdk: \"https://assets.coingecko.com/coins/images/8824/small/usdk.png?1563418517\",\n  \"vega-protocol\":\n    \"https://assets.coingecko.com/coins/images/15870/small/vega.PNG?1622178218\",\n  \"vent-finance\":\n    \"https://assets.coingecko.com/coins/images/17925/small/Artboard_29.png?1629804982\",\n  victorum:\n    \"https://assets.coingecko.com/coins/images/17391/small/Victorum-logo200X200.png?1627525058\",\n  vlaunch:\n    \"https://assets.coingecko.com/coins/images/20838/small/vlaunch_22.png?1637738535\",\n  \"vodka-token\":\n    \"https://assets.coingecko.com/coins/images/20848/small/Vodka-Token-LOGO.png?1637760753\",\n  \"waggle-network\":\n    \"https://assets.coingecko.com/coins/images/18696/small/waggle.PNG?1633750177\",\n  \"wall-street-bets-dapp\":\n    \"https://assets.coingecko.com/coins/images/15093/small/Pe1mrDu.png?1629882480\",\n  wasder:\n    \"https://assets.coingecko.com/coins/images/15374/small/wasderlogo200x200.png?1620691729\",\n  waves:\n    \"https://assets.coingecko.com/coins/images/425/small/waves.png?1548386117\",\n  wbnb: \"https://assets.coingecko.com/coins/images/12591/small/binance-coin-logo.png?1600947313\",\n  weth: \"https://assets.coingecko.com/coins/images/2518/small/weth.png?1628852295\",\n  weyu: \"https://assets.coingecko.com/coins/images/18112/small/weyu.PNG?1630542552\",\n  wizardia:\n    \"https://assets.coingecko.com/coins/images/24434/small/Icon_%281%29.jpg?1648177628\",\n  wmatic:\n    \"https://assets.coingecko.com/coins/images/14073/small/matic.png?1628852392\",\n  wolfsafepoorpeople:\n    \"https://assets.coingecko.com/coins/images/17090/small/wspplogo.png?1626187594\",\n  \"woo-network\":\n    \"https://assets.coingecko.com/coins/images/12921/small/w2UiemF__400x400.jpg?1603670367\",\n  \"woof-token\":\n    \"https://assets.coingecko.com/coins/images/18319/small/woof-logo-svg-true-solana-radient-blackinside.png?1637655115\",\n  wowswap:\n    \"https://assets.coingecko.com/coins/images/14101/small/Group-423.png?1614317472\",\n  wraith:\n    \"https://assets.coingecko.com/coins/images/18099/small/LOGOTRANS-1.png?1630475109\",\n  \"wrapped-avax\":\n    \"https://assets.coingecko.com/coins/images/15075/small/wrapped-avax.png?1629873618\",\n  \"wrapped-bitcoin\":\n    \"https://assets.coingecko.com/coins/images/7598/small/wrapped_bitcoin_wbtc.png?1548822744\",\n  \"wrapped-busd\":\n    \"https://assets.coingecko.com/coins/images/19498/small/wbusd.png?1635305456\",\n  \"wrapped-busd-allbridge-from-bsc\":\n    \"https://assets.coingecko.com/coins/images/23061/small/logo_-_2022-01-26T091043.556.png?1643159457\",\n  \"wrapped-ecomi\":\n    \"https://assets.coingecko.com/coins/images/14675/small/ecomi.jpg?1617689100\",\n  \"wrapped-fantom\":\n    \"https://assets.coingecko.com/coins/images/16036/small/Fantom.png?1622679930\",\n  \"wrapped-memory\":\n    \"https://assets.coingecko.com/coins/images/22392/small/wmemo.png?1641792100\",\n  \"wrapped-solana\":\n    \"https://assets.coingecko.com/coins/images/21629/small/solana.jpg?1639626543\",\n  \"wrapped-steth\":\n    \"https://assets.coingecko.com/coins/images/18834/small/wstETH.png?1633565443\",\n  \"wrapped-terra\":\n    \"https://assets.coingecko.com/coins/images/13628/small/wluna.png?1610448334\",\n  \"wrapped-usdt\":\n    \"https://assets.coingecko.com/coins/images/19507/small/wusdt.png?1635315186\",\n  \"wrapped-ust\":\n    \"https://assets.coingecko.com/coins/images/15462/small/ust.png?1620910058\",\n  \"wrapped-weth\": \"missing_small.png\",\n  \"xcad-network\":\n    \"https://assets.coingecko.com/coins/images/15857/small/xcad.PNG?1622164789\",\n  xdefi:\n    \"https://assets.coingecko.com/coins/images/19524/small/xdefi.png?1637917251\",\n  xhashtag:\n    \"https://assets.coingecko.com/coins/images/20912/small/xtag.png?1637922382\",\n  xsgd: \"https://assets.coingecko.com/coins/images/12832/small/StraitsX_Singapore_Dollar_%28XSGD%29_Token_Logo.png?1633936813\",\n  xsigma:\n    \"https://assets.coingecko.com/coins/images/14090/small/logo_128.png?1619775781\",\n  \"yearn-finance\":\n    \"https://assets.coingecko.com/coins/images/11849/small/yfi-192x192.png?1598325330\",\n  \"yield-optimization-platform\":\n    \"https://assets.coingecko.com/coins/images/13678/small/J7zykPx.jpg?1610802162\",\n  \"zam-io\":\n    \"https://assets.coingecko.com/coins/images/19522/small/zam.png?1635324134\",\n  zap: \"https://assets.coingecko.com/coins/images/2180/small/zap.png?1547036476\",\n  zoints:\n    \"https://assets.coingecko.com/coins/images/20376/small/logo_-_2021-11-15T121641.242.png?1636949811\",\n  ztcoin:\n    \"https://assets.coingecko.com/coins/images/6566/small/ztcoin.jpg?1547042777\",\n};\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  receiveDataWrapper,\n} from \"../store/helpers\";\nimport { COIN_GECKO_IMAGE_URLS } from \"../utils/coinGecko\";\nimport { CHAINS_BY_ID, TVL_URL } from \"../utils/consts\";\n\nexport type TVL = {\n  logo?: string;\n  symbol?: string;\n  name?: string;\n  amount: string;\n  totalValue?: number;\n  quotePrice?: number;\n  assetAddress: string;\n  originChainId: ChainId;\n  originChain: string;\n  decimals?: number;\n};\n\ninterface LockedAsset {\n  Symbol: string;\n  Name: string;\n  Address: string;\n  CoinGeckoId: string;\n  Amount: number;\n  Notional: number;\n  TokenPrice: number;\n}\n\ninterface LockedAssets {\n  [tokenAddress: string]: LockedAsset;\n}\n\ninterface ChainsAssets {\n  [chainId: string]: LockedAssets;\n}\n\nexport interface NotionalTVL {\n  Last24HoursChange: ChainsAssets;\n  AllTime: ChainsAssets;\n}\n\nexport const createTVLArray = (notionalTvl: NotionalTVL) => {\n  const tvl: TVL[] = [];\n  for (const [chainId, chainAssets] of Object.entries(notionalTvl.AllTime)) {\n    if (chainId === \"*\") continue;\n    const originChainId = +chainId as ChainId;\n    const originChain =\n      CHAINS_BY_ID[originChainId]?.name || `Unknown [${chainId}]`;\n    for (const [tokenAddress, lockedAsset] of Object.entries(chainAssets)) {\n      if (tokenAddress === \"*\") continue;\n      tvl.push({\n        logo: COIN_GECKO_IMAGE_URLS[lockedAsset.CoinGeckoId],\n        symbol: lockedAsset.Symbol,\n        name: lockedAsset.Name,\n        amount: lockedAsset.Amount.toString(),\n        totalValue: lockedAsset.Notional,\n        quotePrice: lockedAsset.TokenPrice,\n        assetAddress: tokenAddress,\n        originChainId,\n        originChain,\n      });\n    }\n  }\n  return tvl;\n};\n\nexport const useTVL = () => {\n  const [tvl, setTvl] = useState<DataWrapper<NotionalTVL>>(fetchDataWrapper());\n\n  useEffect(() => {\n    let cancelled = false;\n    axios\n      .get<NotionalTVL>(TVL_URL)\n      .then((response) => {\n        if (!cancelled) {\n          setTvl(receiveDataWrapper(response.data));\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        if (!cancelled) {\n          setTvl(errorDataWrapper(error));\n        }\n      });\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  return tvl;\n};\n\nexport default useTVL;\n","import React from \"react\";\n\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst TablePaginationActions = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n};\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nexport default TablePaginationActions;\n","import { IconButton } from \"@material-ui/core\";\nimport MaUTable from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport {\n  AddCircleOutline,\n  KeyboardArrowDown,\n  KeyboardArrowRight,\n  RemoveCircleOutline,\n} from \"@material-ui/icons\";\nimport React from \"react\";\nimport {\n  useExpanded,\n  useGlobalFilter,\n  useGroupBy,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\nimport TablePaginationActions from \"./TablePaginationActions\";\n\nconst stopProp = (e) => {\n  e.stopPropagation();\n};\n\nconst EnhancedTable = ({ columns, data, skipPageReset, initialState = {} }) => {\n  const {\n    getTableProps,\n    headerGroups,\n    prepareRow,\n    page,\n    gotoPage,\n    setPageSize,\n    rows,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      autoResetPage: !skipPageReset,\n      initialState,\n    },\n    useGlobalFilter,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    usePagination\n  );\n\n  const handlePageChange = (event, newPage) => {\n    gotoPage(newPage);\n  };\n\n  const handleRowsPerPageChange = (event) => {\n    setPageSize(Number(event.target.value));\n  };\n\n  // Render the UI for your table\n  return (\n    <>\n      <TableContainer>\n        <MaUTable {...getTableProps()}>\n          <TableHead>\n            {headerGroups.map((headerGroup) => (\n              <TableRow {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <TableCell\n                    {...(column.id === \"selection\"\n                      ? column.getHeaderProps()\n                      : column.getHeaderProps(column.getSortByToggleProps()))}\n                    align={\n                      // TODO: better way to get column?\n                      columns.find((c) => c.Header === column.Header)?.align ||\n                      \"left\"\n                    }\n                  >\n                    {column.id !== \"selection\" ? (\n                      <TableSortLabel\n                        active={column.isSorted}\n                        // react-table has a unsorted state which is not treated here\n                        direction={column.isSortedDesc ? \"desc\" : \"asc\"}\n                      >\n                        {column.render(\"Header\")}\n                      </TableSortLabel>\n                    ) : (\n                      column.render(\"Header\")\n                    )}\n                    {column.canGroupBy ? (\n                      // If the column can be grouped, let's add a toggle\n                      <span onClick={stopProp}>\n                        <IconButton\n                          size=\"small\"\n                          {...column.getGroupByToggleProps()}\n                        >\n                          {column.isGrouped ? (\n                            <RemoveCircleOutline fontSize=\"inherit\" />\n                          ) : (\n                            <AddCircleOutline fontSize=\"inherit\" />\n                          )}\n                        </IconButton>\n                      </span>\n                    ) : null}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableHead>\n          <TableBody>\n            {page.map((row, i) => {\n              prepareRow(row);\n              return (\n                <TableRow {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <TableCell\n                        {...cell.getCellProps()}\n                        align={cell.column.align || \"left\"}\n                      >\n                        {cell.isGrouped ? (\n                          // If it's a grouped cell, add an expander and row count\n                          <>\n                            <IconButton\n                              size=\"small\"\n                              {...row.getToggleRowExpandedProps()}\n                            >\n                              {row.isExpanded ? (\n                                <KeyboardArrowDown fontSize=\"inherit\" />\n                              ) : (\n                                <KeyboardArrowRight fontSize=\"inherit\" />\n                              )}\n                            </IconButton>{\" \"}\n                            {cell.render(\"Cell\")} ({row.subRows.length})\n                          </>\n                        ) : cell.isAggregated ? (\n                          // If the cell is aggregated, use the Aggregated\n                          // renderer for cell\n                          cell.render(\"Aggregated\")\n                        ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                          // Otherwise, just render the regular cell\n                          cell.render(\"Cell\")\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </MaUTable>\n      </TableContainer>\n      <TablePagination\n        component=\"div\"\n        rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: rows.length }]}\n        count={rows.length}\n        rowsPerPage={pageSize}\n        page={pageIndex}\n        SelectProps={{\n          inputProps: { \"aria-label\": \"rows per page\" },\n          native: true,\n        }}\n        onPageChange={handlePageChange}\n        onRowsPerPageChange={handleRowsPerPageChange}\n        ActionsComponent={TablePaginationActions}\n      />\n    </>\n  );\n};\n\nexport default EnhancedTable;\n","import { makeStyles } from \"@material-ui/core\";\nimport numeral from \"numeral\";\nimport { useMemo } from \"react\";\nimport { createTVLArray, NotionalTVL } from \"../../../hooks/useTVL\";\nimport { ChainInfo } from \"../../../utils/consts\";\nimport SmartAddress from \"../../SmartAddress\";\nimport MuiReactTable from \"../tableComponents/MuiReactTable\";\nimport { formatTVL } from \"./utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n}));\n\nconst TVLTable = ({\n  chainInfo,\n  tvl,\n}: {\n  chainInfo: ChainInfo;\n  tvl: NotionalTVL;\n}) => {\n  const classes = useStyles();\n  const chainTVL = useMemo(() => {\n    return createTVLArray(tvl).filter((x) => x.originChainId === chainInfo.id);\n  }, [chainInfo, tvl]);\n\n  const sortTokens = useMemo(() => {\n    return (rowA: any, rowB: any) => {\n      if (rowA.isGrouped && rowB.isGrouped) {\n        return rowA.values.assetAddress > rowB.values.assetAddress ? 1 : -1;\n      } else if (rowA.isGrouped && !rowB.isGrouped) {\n        return 1;\n      } else if (!rowA.isGrouped && rowB.isGrouped) {\n        return -1;\n      } else if (rowA.original.symbol && !rowB.original.symbol) {\n        return 1;\n      } else if (rowB.original.symbol && !rowA.original.symbol) {\n        return -1;\n      } else if (rowA.original.symbol && rowB.original.symbol) {\n        return rowA.original.symbol > rowB.original.symbol ? 1 : -1;\n      } else {\n        return rowA.original.assetAddress > rowB.original.assetAddress ? 1 : -1;\n      }\n    };\n  }, []);\n  const tvlColumns = useMemo(() => {\n    return [\n      {\n        Header: \"Token\",\n        id: \"assetAddress\",\n        sortType: sortTokens,\n        disableGroupBy: true,\n        accessor: (value: any) => ({\n          chainId: value.originChainId,\n          symbol: value.symbol,\n          name: value.name,\n          logo: value.logo,\n          assetAddress: value.assetAddress,\n        }),\n        Cell: (value: any) => (\n          <div className={classes.tokenContainer}>\n            <div className={classes.logoPositioner}>\n              {value.row?.original?.logo ? (\n                <img\n                  src={value.row?.original?.logo}\n                  alt=\"\"\n                  className={classes.logo}\n                />\n              ) : null}\n            </div>\n            <SmartAddress\n              chainId={value.row?.original?.originChainId}\n              address={value.row?.original?.assetAddress}\n              symbol={value.row?.original?.symbol}\n              tokenName={value.row?.original?.name}\n              isAsset\n            />\n          </div>\n        ),\n      },\n      {\n        Header: \"Quantity\",\n        accessor: \"amount\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.amount !== undefined\n            ? numeral(value.row?.original?.amount).format(\"0,0.00\")\n            : \"\",\n      },\n      {\n        Header: \"Unit Price\",\n        accessor: \"quotePrice\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.quotePrice !== undefined\n            ? numeral(value.row?.original?.quotePrice).format(\"0,0.00\")\n            : \"\",\n      },\n      {\n        Header: \"Value (USD)\",\n        id: \"totalValue\",\n        accessor: \"totalValue\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.totalValue !== undefined\n            ? formatTVL(value.row?.original?.totalValue)\n            : \"\",\n      },\n    ];\n  }, [\n    classes.logo,\n    classes.tokenContainer,\n    classes.logoPositioner,\n    sortTokens,\n  ]);\n\n  return (\n    <MuiReactTable\n      columns={tvlColumns}\n      data={chainTVL || []}\n      skipPageReset={false}\n      initialState={{ sortBy: [{ id: \"totalValue\", desc: true }] }}\n    />\n  );\n};\n\nexport default TVLTable;\n","import {\n  Button,\n  Checkbox,\n  CircularProgress,\n  FormControl,\n  ListItemText,\n  makeStyles,\n  MenuItem,\n  Paper,\n  Select,\n  TextField,\n  Tooltip,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport TVLAreaChart from \"./Charts/TVLAreaChart\";\nimport useCumulativeTVL from \"../../hooks/useCumulativeTVL\";\nimport { TIME_FRAMES } from \"./Charts/TimeFrame\";\nimport TVLLineChart from \"./Charts/TVLLineChart\";\nimport { ChainInfo, CHAINS_BY_ID } from \"../../utils/consts\";\nimport { ChainId } from \"@certusone/wormhole-sdk\";\nimport { COLORS } from \"../../muiTheme\";\nimport TVLBarChart from \"./Charts/TVLBarChart\";\nimport TVLTable from \"./Charts/TVLTable\";\nimport useTVL from \"../../hooks/useTVL\";\nimport { ArrowBack, InfoOutlined } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    marginBottom: \"16px\",\n    [theme.breakpoints.down(\"xs\")]: {\n      flexDirection: \"column\",\n    },\n  },\n  displayBy: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    flexWrap: \"wrap\",\n    marginBottom: \"16px\",\n    [theme.breakpoints.down(\"xs\")]: {\n      justifyContent: \"center\",\n      columnGap: 8,\n      rowGap: 8,\n    },\n  },\n  mainPaper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    backgroundColor: COLORS.whiteWithTransparency,\n    padding: \"2rem\",\n    marginBottom: theme.spacing(8),\n    borderRadius: 8,\n  },\n  toggleButton: {\n    textTransform: \"none\",\n  },\n  tooltip: {\n    margin: 8,\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n  },\n}));\n\nconst tooltipStyles = {\n  tooltip: {\n    minWidth: \"max-content\",\n    borderRadius: \"4px\",\n    backgroundColor: \"#5EA1EC\",\n    color: \"#0F0C48\",\n    fontSize: \"14px\",\n  },\n};\n\nconst StyledTooltip = withStyles(tooltipStyles)(Tooltip);\n\nconst DISPLAY_BY_VALUES = [\"Time\", \"Chain\"];\n\nconst TVLStats = () => {\n  const classes = useStyles();\n\n  const [displayBy, setDisplayBy] = useState(DISPLAY_BY_VALUES[0]);\n  const [timeFrame, setTimeFrame] = useState(\"All time\");\n\n  const [selectedChains, setSelectedChains] = useState<ChainId[]>([]);\n\n  const [selectedChainDetail, setSelectedChainDetail] =\n    useState<ChainInfo | null>(null);\n\n  const cumulativeTVL = useCumulativeTVL();\n  const tvl = useTVL();\n\n  const tvlAllTime = useMemo(() => {\n    return tvl.data\n      ? new Intl.NumberFormat(\"en-US\", {\n          style: \"currency\",\n          currency: \"USD\",\n          maximumFractionDigits: 0,\n        }).format(\n          tvl.data.AllTime[selectedChainDetail?.id || \"*\"][\"*\"].Notional || 0\n        )\n      : \"\";\n  }, [selectedChainDetail, tvl]);\n\n  const availableChains = useMemo(() => {\n    const chainIds = cumulativeTVL.data\n      ? Object.keys(\n          Object.values(cumulativeTVL.data.DailyLocked)[0] || {}\n        ).reduce<ChainId[]>((chainIds, key) => {\n          if (key !== \"*\") {\n            const chainId = parseInt(key) as ChainId;\n            if (CHAINS_BY_ID[chainId]) {\n              chainIds.push(chainId);\n            }\n          }\n          return chainIds;\n        }, [])\n      : [];\n    setSelectedChains(chainIds);\n    return chainIds;\n  }, [cumulativeTVL]);\n\n  const handleDisplayByChange = useCallback((event, nextValue) => {\n    if (nextValue) {\n      setDisplayBy(nextValue);\n    }\n  }, []);\n\n  const handleTimeFrameChange = useCallback(\n    (event) => setTimeFrame(event.target.value),\n    []\n  );\n\n  const handleSelectedChainsChange = useCallback(\n    (event) => {\n      const value = event.target.value;\n      if (value[value.length - 1] === \"all\") {\n        setSelectedChains((prevValue) =>\n          prevValue.length === availableChains.length ? [] : availableChains\n        );\n      } else {\n        setSelectedChains(value);\n      }\n    },\n    [availableChains]\n  );\n\n  const handleChainDetailSelected = useCallback((chainInfo: ChainInfo) => {\n    setSelectedChainDetail(chainInfo);\n  }, []);\n\n  const allChainsSelected = selectedChains.length === availableChains.length;\n  const tvlText =\n    \"Total Value Locked\" +\n    (selectedChainDetail ? ` on ${selectedChainDetail?.name}` : \"\");\n  const tooltipText = selectedChainDetail\n    ? `Total Value Locked on ${selectedChainDetail?.name}`\n    : \"USD equivalent value of all assets locked in Portal\";\n\n  return (\n    <>\n      <div className={classes.description}>\n        <Typography variant=\"h3\">\n          {tvlText}\n          <StyledTooltip title={tooltipText} className={classes.tooltip}>\n            <InfoOutlined />\n          </StyledTooltip>\n        </Typography>\n        <Typography variant=\"h3\">{tvlAllTime}</Typography>\n      </div>\n      <div className={classes.displayBy}>\n        {!selectedChainDetail ? (\n          <div>\n            <Typography display=\"inline\" style={{ marginRight: \"8px\" }}>\n              Display by\n            </Typography>\n            <ToggleButtonGroup\n              value={displayBy}\n              exclusive\n              onChange={handleDisplayByChange}\n            >\n              {DISPLAY_BY_VALUES.map((value) => (\n                <ToggleButton\n                  key={value}\n                  value={value}\n                  className={classes.toggleButton}\n                >\n                  {value}\n                </ToggleButton>\n              ))}\n            </ToggleButtonGroup>\n          </div>\n        ) : null}\n        {displayBy === \"Time\" && !selectedChainDetail ? (\n          <div>\n            <FormControl>\n              <Select\n                multiple\n                variant=\"outlined\"\n                value={selectedChains}\n                onChange={handleSelectedChainsChange}\n                renderValue={(selected: any) =>\n                  selected.length === availableChains.length\n                    ? \"All chains\"\n                    : selected.length > 1\n                    ? `${selected.length} chains`\n                    : //@ts-ignore\n                      CHAINS_BY_ID[selected[0]]?.name\n                }\n                MenuProps={{ getContentAnchorEl: null }} // hack to prevent popup menu from moving\n                style={{ minWidth: 128 }}\n              >\n                <MenuItem value=\"all\">\n                  <Checkbox\n                    checked={availableChains.length > 0 && allChainsSelected}\n                    indeterminate={\n                      selectedChains.length > 0 &&\n                      selectedChains.length < availableChains.length\n                    }\n                  />\n                  <ListItemText primary=\"All chains\" />\n                </MenuItem>\n                {availableChains.map((option) => (\n                  <MenuItem key={option} value={option}>\n                    <Checkbox checked={selectedChains.indexOf(option) > -1} />\n                    <ListItemText primary={CHAINS_BY_ID[option]?.name} />\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <TextField\n              select\n              variant=\"outlined\"\n              value={timeFrame}\n              onChange={handleTimeFrameChange}\n              style={{ marginLeft: 8 }}\n            >\n              {Object.keys(TIME_FRAMES).map((timeFrame) => (\n                <MenuItem key={timeFrame} value={timeFrame}>\n                  {timeFrame}\n                </MenuItem>\n              ))}\n            </TextField>\n          </div>\n        ) : selectedChainDetail ? (\n          <Button\n            startIcon={<ArrowBack />}\n            onClick={() => {\n              setSelectedChainDetail(null);\n            }}\n          >\n            Back to all chains\n          </Button>\n        ) : null}\n      </div>\n      <Paper className={classes.mainPaper}>\n        {displayBy === \"Time\" ? (\n          cumulativeTVL.data ? (\n            allChainsSelected ? (\n              <TVLAreaChart\n                cumulativeTVL={cumulativeTVL.data}\n                timeFrame={TIME_FRAMES[timeFrame]}\n              />\n            ) : (\n              <TVLLineChart\n                cumulativeTVL={cumulativeTVL.data}\n                timeFrame={TIME_FRAMES[timeFrame]}\n                selectedChains={selectedChains}\n              />\n            )\n          ) : (\n            <CircularProgress className={classes.alignCenter} />\n          )\n        ) : tvl.data ? (\n          selectedChainDetail ? (\n            <TVLTable chainInfo={selectedChainDetail} tvl={tvl.data} />\n          ) : (\n            <TVLBarChart\n              tvl={tvl.data}\n              onChainSelected={handleChainDetailSelected}\n            />\n          )\n        ) : (\n          <CircularProgress className={classes.alignCenter} />\n        )}\n      </Paper>\n    </>\n  );\n};\n\nexport default TVLStats;\n","import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  receiveDataWrapper,\n} from \"../store/helpers\";\nimport { NOTIONAL_TRANSFERRED_URL } from \"../utils/consts\";\n\nexport interface TransferFromData {\n  [leavingChainId: string]: number;\n}\n\nexport interface NotionalTransferredFrom {\n  Total: number;\n  Daily: {\n    [date: string]: TransferFromData;\n  };\n}\n\nconst useNotionalTransferred = () => {\n  const [notionalTransferred, setNotionalTransferred] = useState<\n    DataWrapper<NotionalTransferredFrom>\n  >(fetchDataWrapper());\n\n  useEffect(() => {\n    let cancelled = false;\n    axios\n      .get<NotionalTransferredFrom>(NOTIONAL_TRANSFERRED_URL)\n      .then((response) => {\n        if (!cancelled) {\n          setNotionalTransferred(receiveDataWrapper(response.data));\n        }\n      })\n      .catch((error) => {\n        if (!cancelled) {\n          setNotionalTransferred(errorDataWrapper(error));\n          console.error(error);\n        }\n      });\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  return notionalTransferred;\n};\n\nexport default useNotionalTransferred;\n","import { useTheme, useMediaQuery } from \"@material-ui/core\";\nimport {\n  Area,\n  AreaChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport CustomTooltip from \"./CustomTooltip\";\nimport { TimeFrame } from \"./TimeFrame\";\nimport { TransferChartData, formatTVL } from \"./utils\";\n\nconst VolumeAreaChart = ({\n  transferData,\n  timeFrame,\n}: {\n  transferData: TransferChartData[];\n  timeFrame: TimeFrame;\n}) => {\n  const theme = useTheme();\n  const isXSmall = useMediaQuery(theme.breakpoints.down(\"xs\"));\n\n  return (\n    <ResponsiveContainer height={452}>\n      <AreaChart data={transferData}>\n        <XAxis\n          dataKey=\"date\"\n          tickFormatter={timeFrame.tickFormatter}\n          tick={{ fill: \"white\" }}\n          interval={!isXSmall ? timeFrame.interval : undefined}\n          axisLine={false}\n          tickLine={false}\n          dy={16}\n          padding={{ right: 32 }}\n        />\n        <YAxis\n          tickFormatter={formatTVL}\n          tick={{ fill: \"white\" }}\n          axisLine={false}\n          tickLine={false}\n        />\n        <Tooltip\n          content={\n            <CustomTooltip title=\"All chains\" valueFormatter={formatTVL} />\n          }\n        />\n        <defs>\n          <linearGradient id=\"gradient\" gradientTransform=\"rotate(100)\">\n            <stop offset=\"0%\" stopColor=\"#FF2B57\" />\n            <stop offset=\"100%\" stopColor=\"#5EA1EC\" />\n          </linearGradient>\n        </defs>\n        <Area\n          dataKey=\"totalTransferred\"\n          stroke=\"#405BBC\"\n          fill=\"url(#gradient)\"\n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default VolumeAreaChart;\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport {\n  Typography,\n  makeStyles,\n  Grid,\n  useMediaQuery,\n  useTheme,\n} from \"@material-ui/core\";\nimport { useMemo, useState } from \"react\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Bar,\n  Legend,\n} from \"recharts\";\nimport {\n  CHAINS_BY_ID,\n  COLOR_BY_CHAIN_ID,\n  getChainShortName,\n} from \"../../../utils/consts\";\nimport { TimeFrame } from \"./TimeFrame\";\nimport {\n  formatDate,\n  TransferChartData,\n  formatTVL,\n  renderLegendText,\n} from \"./utils\";\n\nconst useStyles = makeStyles(() => ({\n  tooltipContainer: {\n    padding: \"16px\",\n    minWidth: \"214px\",\n    background: \"rgba(255, 255, 255, 0.95)\",\n    borderRadius: \"4px\",\n  },\n  tooltipTitleText: {\n    color: \"#21227E\",\n    fontSize: \"24px\",\n    fontWeight: 500,\n    marginLeft: \"8px\",\n  },\n  tooltipRuler: {\n    height: \"3px\",\n  },\n  tooltipValueText: {\n    color: \"#404040\",\n    fontSize: \"18px\",\n    fontWeight: 500,\n  },\n  tooltipIcon: {\n    width: \"24px\",\n    height: \"24px\",\n  },\n}));\n\ninterface BarData {\n  date: Date;\n  volume: {\n    [chainId: string]: number;\n  };\n  volumePercent: {\n    [chainId: string]: number;\n  };\n}\n\nconst createBarData = (\n  transferData: TransferChartData[],\n  selectedChains: ChainId[]\n) => {\n  return transferData.reduce<BarData[]>((barData, transfer) => {\n    const data: BarData = {\n      date: transfer.date,\n      volume: {},\n      volumePercent: {},\n    };\n    const totalVolume = Object.entries(transfer.transferredByChain).reduce(\n      (totalVolume, [chainId, volume]) => {\n        if (selectedChains.indexOf(+chainId as ChainId) > -1) {\n          data.volume[chainId] = volume;\n          return totalVolume + volume;\n        }\n        return totalVolume;\n      },\n      0\n    );\n    if (totalVolume > 0) {\n      Object.keys(data.volume).forEach((chainId) => {\n        data.volumePercent[chainId] =\n          (data.volume[chainId] / totalVolume) * 100;\n      });\n    }\n    barData.push(data);\n    return barData;\n  }, []);\n};\n\nconst CustomTooltip = ({ active, payload, chainId }: any) => {\n  const classes = useStyles();\n  if (active && payload && payload.length && chainId) {\n    const chainShortName = getChainShortName(chainId);\n    const data = payload.find((data: any) => data.name === chainShortName);\n    if (data) {\n      return (\n        <div className={classes.tooltipContainer}>\n          <Grid container alignItems=\"center\">\n            <img\n              className={classes.tooltipIcon}\n              src={CHAINS_BY_ID[chainId as ChainId]?.logo}\n              alt={chainShortName}\n            />\n            <Typography display=\"inline\" className={classes.tooltipTitleText}>\n              {chainShortName}\n            </Typography>\n          </Grid>\n          <hr\n            className={classes.tooltipRuler}\n            style={{ backgroundColor: COLOR_BY_CHAIN_ID[chainId as ChainId] }}\n          ></hr>\n          <Typography\n            className={classes.tooltipValueText}\n          >{`${data.value.toFixed(1)}%`}</Typography>\n          <Typography className={classes.tooltipValueText}>\n            {formatTVL(data.payload.volume[chainId])}\n          </Typography>\n          <Typography className={classes.tooltipValueText}>\n            {formatDate(data.payload.date)}\n          </Typography>\n        </div>\n      );\n    }\n  }\n  return null;\n};\n\nconst VolumeStackedBarChart = ({\n  transferData,\n  timeFrame,\n  selectedChains,\n}: {\n  transferData: TransferChartData[];\n  timeFrame: TimeFrame;\n  selectedChains: ChainId[];\n}) => {\n  const [hoverChainId, setHoverChainId] = useState<ChainId | null>(null);\n\n  const barData = useMemo(() => {\n    return createBarData(transferData, selectedChains);\n  }, [transferData, selectedChains]);\n\n  const theme = useTheme();\n  const isXSmall = useMediaQuery(theme.breakpoints.down(\"xs\"));\n\n  return (\n    <ResponsiveContainer height={452}>\n      <BarChart data={barData}>\n        <XAxis\n          dataKey=\"date\"\n          tickFormatter={timeFrame.tickFormatter}\n          tick={{ fill: \"white\" }}\n          interval={!isXSmall ? timeFrame.interval : undefined}\n          axisLine={false}\n          tickLine={false}\n          dy={16}\n          padding={{ right: 32 }}\n        />\n        <YAxis\n          tickFormatter={(tick) => `${tick}%`}\n          ticks={[0, 25, 50, 75, 100]}\n          domain={[0, 100]}\n          tick={{ fill: \"white\" }}\n          axisLine={false}\n          tickLine={false}\n        />\n        <Tooltip\n          content={<CustomTooltip chainId={hoverChainId} barData={barData} />}\n          cursor={{ fill: \"transparent\" }}\n        />\n        {selectedChains.map((chainId) => (\n          <Bar\n            dataKey={`volumePercent.${chainId}`}\n            name={getChainShortName(chainId)}\n            fill={COLOR_BY_CHAIN_ID[chainId]}\n            key={chainId}\n            stackId=\"a\"\n            onMouseOver={() => setHoverChainId(chainId)}\n          />\n        ))}\n        <Legend\n          iconType=\"square\"\n          iconSize={32}\n          formatter={renderLegendText}\n          wrapperStyle={{ paddingTop: 24 }}\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default VolumeStackedBarChart;\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { useTheme, useMediaQuery } from \"@material-ui/core\";\nimport {\n  Legend,\n  ResponsiveContainer,\n  LineChart,\n  XAxis,\n  YAxis,\n  Line,\n  Tooltip,\n} from \"recharts\";\nimport { COLOR_BY_CHAIN_ID, getChainShortName } from \"../../../utils/consts\";\nimport MultiChainTooltip from \"./MultiChainTooltip\";\nimport { TimeFrame } from \"./TimeFrame\";\nimport { formatTVL, renderLegendText, TransferChartData } from \"./utils\";\n\nconst VolumeLineChart = ({\n  transferData,\n  timeFrame,\n  chains,\n}: {\n  transferData: TransferChartData[];\n  timeFrame: TimeFrame;\n  chains: ChainId[];\n}) => {\n  const theme = useTheme();\n  const isXSmall = useMediaQuery(theme.breakpoints.down(\"xs\"));\n\n  return (\n    <ResponsiveContainer height={452}>\n      <LineChart data={transferData}>\n        <XAxis\n          dataKey=\"date\"\n          tickFormatter={timeFrame.tickFormatter}\n          tick={{ fill: \"white\" }}\n          interval={!isXSmall ? timeFrame.interval : undefined}\n          axisLine={false}\n          tickLine={false}\n          dy={16}\n          padding={{ right: 32 }}\n        />\n        <YAxis\n          tickFormatter={formatTVL}\n          tick={{ fill: \"white\" }}\n          axisLine={false}\n          tickLine={false}\n        />\n        <Tooltip\n          content={\n            <MultiChainTooltip\n              title=\"Multiple Chains\"\n              valueFormatter={formatTVL}\n            />\n          }\n        />\n        {chains.map((chainId) => (\n          <Line\n            dataKey={`transferredByChain.${chainId}`}\n            name={getChainShortName(chainId)}\n            stroke={COLOR_BY_CHAIN_ID[chainId]}\n            strokeWidth=\"4\"\n            dot={false}\n            key={chainId}\n          />\n        ))}\n        <Legend\n          iconType=\"square\"\n          iconSize={32}\n          formatter={renderLegendText}\n          wrapperStyle={{ paddingTop: 24 }}\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default VolumeLineChart;\n","import { useTheme, useMediaQuery } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport {\n  Area,\n  AreaChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport CustomTooltip from \"./CustomTooltip\";\nimport { TimeFrame } from \"./TimeFrame\";\nimport { formatTransactionCount, TransactionData } from \"./utils\";\n\nconst TransactionsAreaChart = ({\n  transactionData,\n  timeFrame,\n}: {\n  transactionData: TransactionData[];\n  timeFrame: TimeFrame;\n}) => {\n  const formatValue = useCallback((value: number) => {\n    return `${formatTransactionCount(value)} transactions`;\n  }, []);\n\n  const theme = useTheme();\n  const isXSmall = useMediaQuery(theme.breakpoints.down(\"xs\"));\n\n  return (\n    <ResponsiveContainer height={452}>\n      <AreaChart data={transactionData}>\n        <XAxis\n          dataKey=\"date\"\n          tickFormatter={timeFrame.tickFormatter}\n          tick={{ fill: \"white\" }}\n          interval={!isXSmall ? timeFrame.interval : undefined}\n          axisLine={false}\n          tickLine={false}\n          dy={16}\n          padding={{ right: 32 }}\n        />\n        <YAxis\n          tickFormatter={formatTransactionCount}\n          tick={{ fill: \"white\" }}\n          axisLine={false}\n          tickLine={false}\n        />\n        <Tooltip\n          content={\n            <CustomTooltip title=\"All chains\" valueFormatter={formatValue} />\n          }\n        />\n        <defs>\n          <linearGradient id=\"gradient\" gradientTransform=\"rotate(100)\">\n            <stop offset=\"0%\" stopColor=\"#FF2B57\" />\n            <stop offset=\"100%\" stopColor=\"#5EA1EC\" />\n          </linearGradient>\n        </defs>\n        <Area\n          dataKey=\"totalTransactions\"\n          stroke=\"#405BBC\"\n          fill=\"url(#gradient)\"\n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default TransactionsAreaChart;\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { useTheme, useMediaQuery } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport {\n  ResponsiveContainer,\n  LineChart,\n  XAxis,\n  YAxis,\n  Line,\n  Legend,\n  Tooltip,\n} from \"recharts\";\nimport { COLOR_BY_CHAIN_ID, getChainShortName } from \"../../../utils/consts\";\nimport MultiChainTooltip from \"./MultiChainTooltip\";\nimport { TimeFrame } from \"./TimeFrame\";\nimport {\n  formatTransactionCount,\n  renderLegendText,\n  TransactionData,\n} from \"./utils\";\n\nconst TransactionsLineChart = ({\n  transactionData,\n  timeFrame,\n  chains,\n}: {\n  transactionData: TransactionData[];\n  timeFrame: TimeFrame;\n  chains: ChainId[];\n}) => {\n  const formatValue = useCallback((value: number) => {\n    return `${formatTransactionCount(value)} transactions`;\n  }, []);\n\n  const theme = useTheme();\n  const isXSmall = useMediaQuery(theme.breakpoints.down(\"xs\"));\n\n  return (\n    <ResponsiveContainer height={452}>\n      <LineChart data={transactionData}>\n        <XAxis\n          dataKey=\"date\"\n          tickFormatter={timeFrame.tickFormatter}\n          tick={{ fill: \"white\" }}\n          interval={!isXSmall ? timeFrame.interval : undefined}\n          axisLine={false}\n          tickLine={false}\n          dy={16}\n          padding={{ right: 32 }}\n        />\n        <YAxis\n          tickFormatter={formatTransactionCount}\n          tick={{ fill: \"white\" }}\n          axisLine={false}\n          tickLine={false}\n        />\n        <Tooltip\n          content={\n            <MultiChainTooltip\n              title=\"Multiple Chains\"\n              valueFormatter={formatValue}\n            />\n          }\n        />\n        {chains.map((chainId) => (\n          <Line\n            dataKey={`transactionsByChain.${chainId}`}\n            name={getChainShortName(chainId)}\n            stroke={COLOR_BY_CHAIN_ID[chainId]}\n            strokeWidth=\"4\"\n            dot={false}\n            key={chainId}\n          />\n        ))}\n        <Legend\n          iconType=\"square\"\n          iconSize={32}\n          formatter={renderLegendText}\n          wrapperStyle={{ paddingTop: 24 }}\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default TransactionsLineChart;\n","import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  receiveDataWrapper,\n} from \"../store/helpers\";\nimport { TOTAL_TRANSACTIONS_WORMHOLE } from \"../utils/consts\";\n\nexport interface Totals {\n  TotalCount: { [chainId: string]: number };\n  DailyTotals: {\n    // \"2021-08-22\": { \"*\": 0 },\n    [date: string]: { [groupByKey: string]: number };\n  };\n}\n\nconst useTransactionTotals = () => {\n  const [totals, setTotals] = useState<DataWrapper<Totals>>(fetchDataWrapper());\n\n  useEffect(() => {\n    let cancelled = false;\n    axios\n      .get<Totals>(TOTAL_TRANSACTIONS_WORMHOLE)\n      .then((response) => {\n        if (!cancelled) {\n          setTotals(receiveDataWrapper(response.data));\n        }\n      })\n      .catch((error) => {\n        if (!cancelled) {\n          setTotals(errorDataWrapper(error));\n          console.log(error);\n        }\n      });\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  return totals;\n};\n\nexport default useTransactionTotals;\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport {\n  Checkbox,\n  CircularProgress,\n  FormControl,\n  ListItemText,\n  makeStyles,\n  MenuItem,\n  Paper,\n  Select,\n  TextField,\n  Tooltip,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport { InfoOutlined } from \"@material-ui/icons\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport useNotionalTransferred from \"../../hooks/useNotionalTransferred\";\nimport { COLORS } from \"../../muiTheme\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport { TIME_FRAMES } from \"./Charts/TimeFrame\";\nimport {\n  createTransferChartData,\n  createTransactionData,\n  formatTransactionCount,\n} from \"./Charts/utils\";\nimport VolumeAreaChart from \"./Charts/VolumeAreaChart\";\nimport VolumeStackedBarChart from \"./Charts/VolumeStackedBarChart\";\nimport VolumeLineChart from \"./Charts/VolumeLineChart\";\nimport TransactionsAreaChart from \"./Charts/TransactionsAreaChart\";\nimport TransactionsLineChart from \"./Charts/TransactionsLineChart\";\nimport useTransactionTotals from \"../../hooks/useTransactionTotals\";\n\nconst DISPLAY_BY_VALUES = [\"Dollar\", \"Percent\", \"Transactions\"];\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    marginBottom: \"16px\",\n    [theme.breakpoints.down(\"xs\")]: {\n      flexDirection: \"column\",\n    },\n  },\n  displayBy: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    flexWrap: \"wrap\",\n    marginBottom: \"16px\",\n    [theme.breakpoints.down(\"xs\")]: {\n      justifyContent: \"center\",\n      columnGap: 8,\n      rowGap: 8,\n    },\n  },\n  mainPaper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    backgroundColor: COLORS.whiteWithTransparency,\n    padding: \"2rem\",\n    marginBottom: theme.spacing(8),\n    borderRadius: 8,\n  },\n  toggleButton: {\n    textTransform: \"none\",\n  },\n  tooltip: {\n    margin: 8,\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n  },\n}));\n\nconst tooltipStyles = {\n  tooltip: {\n    minWidth: \"max-content\",\n    borderRadius: \"4px\",\n    backgroundColor: \"#5EA1EC\",\n    color: \"#0F0C48\",\n    fontSize: \"14px\",\n  },\n};\n\nconst StyledTooltip = withStyles(tooltipStyles)(Tooltip);\n\nconst VolumeStats = () => {\n  const classes = useStyles();\n\n  const [displayBy, setDisplayBy] = useState(DISPLAY_BY_VALUES[0]);\n  const [timeFrame, setTimeFrame] = useState(\"All time\");\n\n  const [selectedChains, setSelectedChains] = useState<ChainId[]>([]);\n\n  const notionalTransferred = useNotionalTransferred();\n\n  const [transferData, transferredAllTime] = useMemo(() => {\n    const transferData = notionalTransferred.data\n      ? createTransferChartData(\n          notionalTransferred.data,\n          TIME_FRAMES[timeFrame]\n        )\n      : [];\n    const transferredAllTime = transferData.reduce((sum, value) => {\n      return sum + value.totalTransferred;\n    }, 0);\n    const transferredAllTimeString = new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      maximumFractionDigits: 0,\n    }).format(transferredAllTime);\n    return [transferData, transferredAllTimeString];\n  }, [notionalTransferred, timeFrame]);\n\n  const transactionTotals = useTransactionTotals();\n\n  const [transactionData, transactionsAllTime] = useMemo(() => {\n    const transactionData = transactionTotals.data\n      ? createTransactionData(transactionTotals.data, TIME_FRAMES[timeFrame])\n      : [];\n    const transactionsAllTime = formatTransactionCount(\n      transactionData.reduce((sum, value) => {\n        return sum + value.totalTransactions;\n      }, 0)\n    );\n    return [transactionData, transactionsAllTime];\n  }, [transactionTotals, timeFrame]);\n\n  const availableChains = useMemo(() => {\n    const chainIds = notionalTransferred.data\n      ? Object.keys(\n          Object.values(notionalTransferred.data.Daily)[0] || {}\n        ).reduce<ChainId[]>((chainIds, key) => {\n          if (key !== \"*\") {\n            const chainId = parseInt(key) as ChainId;\n            if (CHAINS_BY_ID[chainId] !== undefined) {\n              chainIds.push(chainId);\n            }\n          }\n          return chainIds;\n        }, [])\n      : [];\n    setSelectedChains(chainIds);\n    return chainIds;\n  }, [notionalTransferred]);\n\n  const handleDisplayByChange = useCallback((event, nextValue) => {\n    if (nextValue !== null) {\n      setDisplayBy(nextValue);\n    }\n  }, []);\n\n  const handleTimeFrameChange = useCallback(\n    (event) => setTimeFrame(event.target.value),\n    []\n  );\n\n  const handleSelectedChainsChange = useCallback(\n    (event) => {\n      const value = event.target.value;\n      if (value[value.length - 1] === \"all\") {\n        setSelectedChains((prevValue) =>\n          prevValue.length === availableChains.length ? [] : availableChains\n        );\n      } else {\n        setSelectedChains(value);\n      }\n    },\n    [availableChains]\n  );\n\n  const allChainsSelected = selectedChains.length === availableChains.length;\n\n  return (\n    <>\n      <div className={classes.description}>\n        <Typography variant=\"h3\">\n          {displayBy === \"Transactions\"\n            ? \"Transaction Count\"\n            : \"Outbound Volume\"}\n          <StyledTooltip\n            title={\n              displayBy === \"Transactions\"\n                ? \"Total number of transactions the Token Bridge has processed\"\n                : \"Amount of assets bridged through Portal in the outbound direction\"\n            }\n            className={classes.tooltip}\n          >\n            <InfoOutlined />\n          </StyledTooltip>\n        </Typography>\n        <Typography variant=\"h3\">\n          {displayBy === \"Transactions\"\n            ? transactionsAllTime\n            : transferredAllTime}\n        </Typography>\n      </div>\n      <div className={classes.displayBy}>\n        <div>\n          <Typography display=\"inline\" style={{ marginRight: \"8px\" }}>\n            Display by\n          </Typography>\n          <ToggleButtonGroup\n            value={displayBy}\n            exclusive\n            onChange={handleDisplayByChange}\n          >\n            {DISPLAY_BY_VALUES.map((value) => (\n              <ToggleButton\n                key={value}\n                value={value}\n                className={classes.toggleButton}\n              >\n                {value}\n              </ToggleButton>\n            ))}\n          </ToggleButtonGroup>\n        </div>\n        <div>\n          <FormControl>\n            <Select\n              multiple\n              variant=\"outlined\"\n              value={selectedChains}\n              onChange={handleSelectedChainsChange}\n              renderValue={(selected: any) =>\n                selected.length === availableChains.length\n                  ? \"All chains\"\n                  : selected.length > 1\n                  ? `${selected.length} chains`\n                  : //@ts-ignore\n                    CHAINS_BY_ID[selected[0]]?.name\n              }\n              MenuProps={{ getContentAnchorEl: null }} // hack to prevent popup menu from moving\n              style={{ minWidth: 128 }}\n            >\n              <MenuItem value=\"all\">\n                <Checkbox\n                  checked={availableChains.length > 0 && allChainsSelected}\n                  indeterminate={\n                    selectedChains.length > 0 &&\n                    selectedChains.length < availableChains.length\n                  }\n                />\n                <ListItemText primary=\"All chains\" />\n              </MenuItem>\n              {availableChains.map((option) => (\n                <MenuItem key={option} value={option}>\n                  <Checkbox checked={selectedChains.indexOf(option) > -1} />\n                  <ListItemText primary={CHAINS_BY_ID[option]?.name} />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <TextField\n            select\n            variant=\"outlined\"\n            value={timeFrame}\n            onChange={handleTimeFrameChange}\n            style={{ marginLeft: 8 }}\n          >\n            {Object.keys(TIME_FRAMES).map((timeFrame) => (\n              <MenuItem key={timeFrame} value={timeFrame}>\n                {timeFrame}\n              </MenuItem>\n            ))}\n          </TextField>\n        </div>\n      </div>\n      <Paper className={classes.mainPaper}>\n        {displayBy === \"Dollar\" ? (\n          notionalTransferred.data ? (\n            allChainsSelected ? (\n              <VolumeAreaChart\n                transferData={transferData}\n                timeFrame={TIME_FRAMES[timeFrame]}\n              />\n            ) : (\n              <VolumeLineChart\n                transferData={transferData}\n                timeFrame={TIME_FRAMES[timeFrame]}\n                chains={selectedChains}\n              />\n            )\n          ) : (\n            <CircularProgress className={classes.alignCenter} />\n          )\n        ) : displayBy === \"Percent\" ? (\n          <VolumeStackedBarChart\n            transferData={transferData}\n            timeFrame={TIME_FRAMES[timeFrame]}\n            selectedChains={selectedChains}\n          />\n        ) : transactionTotals.data ? (\n          allChainsSelected ? (\n            <TransactionsAreaChart\n              transactionData={transactionData}\n              timeFrame={TIME_FRAMES[timeFrame]}\n            />\n          ) : (\n            <TransactionsLineChart\n              transactionData={transactionData}\n              timeFrame={TIME_FRAMES[timeFrame]}\n              chains={selectedChains}\n            />\n          )\n        ) : (\n          <CircularProgress className={classes.alignCenter} />\n        )}\n      </Paper>\n    </>\n  );\n};\n\nexport default VolumeStats;\n","import { Container } from \"@material-ui/core\";\nimport HeaderText from \"../HeaderText\";\nimport TVLStats from \"./TVLStats\";\nimport VolumeStats from \"./VolumeStats\";\n\nconst StatsRoot = () => {\n  return (\n    <Container maxWidth=\"lg\">\n      <Container maxWidth=\"md\">\n        <HeaderText white>Stats</HeaderText>\n      </Container>\n      <TVLStats />\n      <VolumeStats />\n    </Container>\n  );\n};\n\nexport default StatsRoot;\n","import {\n  CHAIN_ID_AURORA,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_FANTOM,\n  CHAIN_ID_OASIS,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_TERRA2,\n} from \"@certusone/wormhole-sdk\";\nimport { Container, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport { COLORS } from \"../../muiTheme\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOL_CUSTODY_ADDRESS,\n  SOL_NFT_CUSTODY_ADDRESS,\n} from \"../../utils/consts\";\nimport HeaderText from \"../HeaderText\";\nimport SmartAddress from \"../SmartAddress\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\n\nconst useStyles = makeStyles((theme) => ({\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(4),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    padding: \"2rem\",\n    \"& > h, & > p \": {\n      margin: \".5rem\",\n    },\n    marginBottom: theme.spacing(8),\n  },\n}));\n\nconst CustodyAddresses: React.FC<any> = () => {\n  const classes = useStyles();\n  const data = useMemo(() => {\n    return [\n      {\n        chainName: \"Ethereum\",\n        chainId: CHAIN_ID_ETH,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_ETH),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_ETH),\n      },\n      {\n        chainName: \"Dijets\",\n        chainId: CHAIN_ID_SOLANA,\n        tokenAddress: SOL_CUSTODY_ADDRESS,\n        nftAddress: SOL_NFT_CUSTODY_ADDRESS,\n      },\n      {\n        chainName: \"Binance Smart Chain\",\n        chainId: CHAIN_ID_BSC,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_BSC),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_BSC),\n      },\n      {\n        chainName: \"Terra Classic\",\n        chainId: CHAIN_ID_TERRA,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_TERRA),\n        nftAddress: null,\n      },\n      {\n        chainName: \"Polygon\",\n        chainId: CHAIN_ID_POLYGON,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_POLYGON),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_POLYGON),\n      },\n      {\n        chainName: \"Avalanche\",\n        chainId: CHAIN_ID_AVAX,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_AVAX),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_AVAX),\n      },\n      {\n        chainName: \"Oasis\",\n        chainId: CHAIN_ID_OASIS,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_OASIS),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_OASIS),\n      },\n      {\n        chainName: \"Fantom\",\n        chainId: CHAIN_ID_FANTOM,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_FANTOM),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_FANTOM),\n      },\n      {\n        chainName: \"Aurora\",\n        chainId: CHAIN_ID_AURORA,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_AURORA),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_AURORA),\n      },\n      {\n        chainName: \"Terra\",\n        chainId: CHAIN_ID_TERRA2,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_TERRA2),\n        nftAddress: null,\n      },\n    ];\n  }, []);\n\n  const tvlColumns = useMemo(() => {\n    return [\n      { Header: \"Chain\", accessor: \"chainName\", disableGroupBy: true },\n      {\n        Header: \"Token Address\",\n        id: \"tokenAddress\",\n        accessor: \"address\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.tokenAddress && value.row?.original?.chainId ? (\n            <SmartAddress\n              chainId={value.row?.original?.chainId}\n              address={value.row?.original?.tokenAddress}\n            />\n          ) : (\n            \"\"\n          ),\n      },\n      {\n        Header: \"NFT Address\",\n        id: \"nftAddress\",\n        accessor: \"address\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.nftAddress && value.row?.original?.chainId ? (\n            <SmartAddress\n              chainId={value.row?.original?.chainId}\n              address={value.row?.original?.nftAddress}\n            />\n          ) : (\n            \"\"\n          ),\n      },\n    ];\n  }, []);\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div className={classes.explainerContainer}>\n        <Typography variant=\"h4\">Custody Addresses</Typography>\n        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n          These are the custody addresses which hold collateralized assets for\n          the token bridge.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n    </div>\n  );\n\n  const table = (\n    <MuiReactTable\n      columns={tvlColumns}\n      data={data || []}\n      skipPageReset={false}\n      initialState={{}}\n    />\n  );\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Container maxWidth=\"md\">\n        <HeaderText white>Custody</HeaderText>\n      </Container>\n      {header}\n      <Paper className={classes.mainPaper}>{table}</Paper>\n    </Container>\n  );\n};\n\nexport default CustodyAddresses;\n","import { ensureHexPrefix } from \"@certusone/wormhole-sdk\";\nimport { AptosClient } from \"aptos\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { getAptosClient } from \"../utils/aptos\";\n\nexport type AptosMetadata = {\n  symbol?: string;\n  tokenName?: string;\n  decimals: number;\n};\n\nexport type AptosCoinResourceReturn = {\n  decimals: number;\n  name: string;\n  supply: any;\n  symbol: string;\n};\n\nexport const fetchSingleMetadata = async (\n  address: string,\n  client: AptosClient\n): Promise<AptosMetadata> => {\n  const coinType = `0x1::coin::CoinInfo<${ensureHexPrefix(address)}>`;\n  const assetInfo = (\n    await client.getAccountResource(address.split(\"::\")[0], coinType)\n  ).data as AptosCoinResourceReturn;\n  return {\n    tokenName: assetInfo.name,\n    symbol: assetInfo.symbol,\n    decimals: assetInfo.decimals,\n  };\n};\n\nconst fetchAptosMetadata = async (addresses: string[]) => {\n  const client = getAptosClient();\n  const promises: Promise<AptosMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, client));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, AptosMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nfunction useAptosMetadata(\n  addresses: string[]\n): DataWrapper<Map<string, AptosMetadata>> {\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, AptosMetadata> | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (addresses.length) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchAptosMetadata(addresses).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n}\n\nexport default useAptosMetadata;\n","import { ChainId, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type EvmMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n};\n\nconst ERC20_BASIC_ABI = [\n  \"function name() view returns (string name)\",\n  \"function symbol() view returns (string symbol)\",\n  \"function decimals() view returns (uint8 decimals)\",\n];\n\nconst handleError = () => {\n  return undefined;\n};\n\nconst fetchSingleMetadata = async (\n  address: string,\n  provider: Provider\n): Promise<EvmMetadata> => {\n  const contract = new ethers.Contract(address, ERC20_BASIC_ABI, provider);\n  const [name, symbol, decimals] = await Promise.all([\n    contract.name().catch(handleError),\n    contract.symbol().catch(handleError),\n    contract.decimals().catch(handleError),\n  ]);\n  return { tokenName: name, symbol, decimals };\n};\n\nconst fetchEthMetadata = async (addresses: string[], provider: Provider) => {\n  const promises: Promise<EvmMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, provider));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, EvmMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nfunction useEvmMetadata(\n  addresses: string[],\n  chainId: ChainId\n): DataWrapper<Map<string, EvmMetadata>> {\n  const { isReady } = useIsWalletReady(chainId, false);\n  const { provider } = useEthereumProvider(chainId);\n\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, EvmMetadata> | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (addresses.length && provider && isReady && isEVMChain(chainId)) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchEthMetadata(addresses, provider).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses, provider, isReady, chainId]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n}\n\nexport default useEvmMetadata;\n","import { parseSmartContractStateResponse } from \"@certusone/wormhole-sdk\";\nimport { ChainGrpcWasmApi } from \"@injectivelabs/sdk-ts\";\nimport { useLayoutEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { getInjectiveWasmClient } from \"../utils/injective\";\n\nexport type InjectiveMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n};\n\nconst fetchSingleMetadata = async (address: string, client: ChainGrpcWasmApi) =>\n  client\n    .fetchSmartContractState(\n      address,\n      Buffer.from(JSON.stringify({ token_info: {} })).toString(\"base64\")\n    )\n    .then((data) => {\n      const parsed = parseSmartContractStateResponse(data);\n      return {\n        symbol: parsed.symbol,\n        tokenName: parsed.name,\n        decimals: parsed.decimals,\n      } as InjectiveMetadata;\n    });\n\nconst fetchInjectiveMetadata = async (addresses: string[]) => {\n  const client = getInjectiveWasmClient();\n  const promises: Promise<InjectiveMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, client));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, InjectiveMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nconst useInjectiveMetadata = (\n  addresses: string[]\n): DataWrapper<Map<string, InjectiveMetadata>> => {\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, InjectiveMetadata> | null>(null);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    if (addresses.length) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchInjectiveMetadata(addresses).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n};\n\nexport default useInjectiveMetadata;\n","import { TerraChainId } from \"@certusone/wormhole-sdk\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useLayoutEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { getTerraConfig } from \"../utils/consts\";\n\nexport type TerraMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n};\n\nconst fetchSingleMetadata = async (address: string, lcd: LCDClient) =>\n  lcd.wasm\n    .contractQuery(address, {\n      token_info: {},\n    })\n    .then(\n      ({ symbol, name: tokenName, decimals }: any) =>\n        ({\n          symbol,\n          tokenName,\n          decimals,\n        } as TerraMetadata)\n    );\n\nconst fetchTerraMetadata = async (\n  addresses: string[],\n  chainId: TerraChainId\n) => {\n  const lcd = new LCDClient(getTerraConfig(chainId));\n  const promises: Promise<TerraMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, lcd));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, TerraMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nconst useTerraMetadata = (\n  addresses: string[],\n  chainId: TerraChainId\n): DataWrapper<Map<string, TerraMetadata>> => {\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, TerraMetadata> | null>(null);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    if (addresses.length) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchTerraMetadata(addresses, chainId).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses, chainId]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n};\n\nexport default useTerraMetadata;\n","import { Dispatch } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectTerraTokenMap } from \"../store/selectors\";\nimport {\n  errorTerraTokenMap,\n  fetchTerraTokenMap,\n  receiveTerraTokenMap,\n} from \"../store/tokenSlice\";\nimport { TERRA_TOKEN_METADATA_URL } from \"../utils/consts\";\n\nexport type TerraTokenMetadata = {\n  protocol: string;\n  symbol: string;\n  token: string;\n  icon: string;\n  name?: string;\n  balance?: string; // populated by native tokens, could move to a type that extends this\n};\n\nexport type TerraTokenMap = {\n  mainnet: {\n    [address: string]: TerraTokenMetadata;\n  };\n  classic: {\n    [address: string]: TerraTokenMetadata;\n  };\n};\n\nconst useTerraTokenMap = (shouldFire: boolean): DataWrapper<TerraTokenMap> => {\n  const terraTokenMap = useSelector(selectTerraTokenMap);\n  const dispatch = useDispatch();\n  const internalShouldFire =\n    shouldFire &&\n    (terraTokenMap.data === undefined ||\n      (terraTokenMap.data === null && !terraTokenMap.isFetching));\n\n  useEffect(() => {\n    if (internalShouldFire) {\n      getTerraTokenMap(dispatch);\n    }\n  }, [internalShouldFire, dispatch]);\n\n  return terraTokenMap;\n};\n\nconst getTerraTokenMap = (dispatch: Dispatch) => {\n  dispatch(fetchTerraTokenMap());\n  axios.get(TERRA_TOKEN_METADATA_URL).then(\n    (response) => {\n      dispatch(receiveTerraTokenMap(response.data as TerraTokenMap));\n    },\n    (error) => {\n      dispatch(errorTerraTokenMap(\"Failed to retrieve the Terra Token List.\"));\n    }\n  );\n};\n\nexport default useTerraTokenMap;\n","import { LCDClient } from \"@xpla/xpla.js\";\nimport { useLayoutEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { XPLA_LCD_CLIENT_CONFIG } from \"../utils/consts\";\n\nexport type XplaMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n};\n\nconst fetchSingleMetadata = async (address: string, lcd: LCDClient) =>\n  lcd.wasm\n    .contractQuery(address, {\n      token_info: {},\n    })\n    .then(\n      ({ symbol, name: tokenName, decimals }: any) =>\n        ({\n          symbol,\n          tokenName,\n          decimals,\n        } as XplaMetadata)\n    );\n\nconst fetchXplaMetadata = async (addresses: string[]) => {\n  const lcd = new LCDClient(XPLA_LCD_CLIENT_CONFIG);\n  const promises: Promise<XplaMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, lcd));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, XplaMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nconst useXplaMetadata = (\n  addresses: string[]\n): DataWrapper<Map<string, XplaMetadata>> => {\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, XplaMetadata> | null>(null);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    if (addresses.length) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchXplaMetadata(addresses).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n};\n\nexport default useXplaMetadata;\n","import { JsonRpcProvider } from \"@mysten/sui.js\";\nimport { useLayoutEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { getSuiProvider } from \"../utils/sui\";\n\nexport type SuiMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n};\n\nconst fetchSingleMetadata = async (\n  coinType: string,\n  provider: JsonRpcProvider\n) =>\n  provider.getCoinMetadata({ coinType }).then((response) => {\n    if (!response) {\n      throw new Error(\"Error fetching metdata\");\n    }\n    return {\n      symbol: response.symbol,\n      tokenName: response.name,\n      decimals: response.decimals,\n    } as SuiMetadata;\n  });\n\nconst fetchSuiMetadata = async (addresses: string[]) => {\n  const provider = getSuiProvider();\n  const promises: Promise<SuiMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, provider));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, SuiMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nconst useSuiMetadata = (\n  addresses: string[]\n): DataWrapper<Map<string, SuiMetadata>> => {\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, SuiMetadata> | null>(null);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    if (addresses.length) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchSuiMetadata(addresses).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n};\n\nexport default useSuiMetadata;\n","import {\n  ChainId,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA2,\n  CHAIN_ID_XPLA,\n  isEVMChain,\n  isTerraChain,\n  TerraChainId,\n  CHAIN_ID_SUI,\n} from \"@certusone/wormhole-sdk\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { useMemo } from \"react\";\nimport { DataWrapper, getEmptyDataWrapper } from \"../store/helpers\";\nimport { logoOverrides } from \"../utils/consts\";\nimport { Metadata } from \"../utils/metaplex\";\nimport useAlgoMetadata, { AlgoMetadata } from \"./useAlgoMetadata\";\nimport useAptosMetadata, { AptosMetadata } from \"./useAptosMetadata\";\nimport useEvmMetadata, { EvmMetadata } from \"./useEvmMetadata\";\nimport useInjectiveMetadata, {\n  InjectiveMetadata,\n} from \"./useInjectiveMetadata\";\nimport useMetaplexData from \"./useMetaplexData\";\nimport useNearMetadata from \"./useNearMetadata\";\nimport useSolanaTokenMap from \"./useSolanaTokenMap\";\nimport useTerraMetadata, { TerraMetadata } from \"./useTerraMetadata\";\nimport useTerraTokenMap, { TerraTokenMap } from \"./useTerraTokenMap\";\nimport useXplaMetadata, { XplaMetadata } from \"./useXplaMetadata\";\nimport useSuiMetadata, { SuiMetadata } from \"./useSuiMetadata\";\n\nexport type GenericMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n  //TODO more items\n  raw?: any;\n};\n\nconst constructSolanaMetadata = (\n  addresses: string[],\n  solanaTokenMap: DataWrapper<TokenInfo[]>,\n  metaplexData: DataWrapper<Map<string, Metadata | undefined> | undefined>\n) => {\n  const isFetching = solanaTokenMap.isFetching || metaplexData?.isFetching;\n  const error = solanaTokenMap.error || metaplexData?.isFetching;\n  const receivedAt = solanaTokenMap.receivedAt && metaplexData?.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const metaplex = metaplexData?.data?.get(address);\n    const tokenInfo = solanaTokenMap.data?.find((x) => x.address === address);\n    //Both this and the token picker, at present, give priority to the tokenmap\n    const obj = {\n      symbol: metaplex?.data?.symbol || tokenInfo?.symbol || undefined,\n      logo: tokenInfo?.logoURI || undefined, //TODO is URI on metaplex actually the logo? If not, where is it?\n      tokenName: metaplex?.data?.name || tokenInfo?.name || undefined,\n      decimals: tokenInfo?.decimals || undefined, //TODO decimals are actually on the mint, not the metaplex account.\n      raw: metaplex,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructTerraMetadata = (\n  addresses: string[],\n  tokenMap: DataWrapper<TerraTokenMap>,\n  terraMetadata: DataWrapper<Map<string, TerraMetadata>>,\n  chainId: TerraChainId\n) => {\n  const isFetching = tokenMap.isFetching || terraMetadata.isFetching;\n  const error = tokenMap.error || terraMetadata.error;\n  const receivedAt = tokenMap.receivedAt && terraMetadata.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const metadata = terraMetadata.data?.get(address);\n    const tokenInfo =\n      chainId === CHAIN_ID_TERRA2\n        ? tokenMap.data?.mainnet[address]\n        : tokenMap.data?.classic[address];\n    const obj = {\n      symbol: tokenInfo?.symbol || metadata?.symbol || undefined,\n      logo: tokenInfo?.icon || metadata?.logo || undefined,\n      tokenName: tokenInfo?.name || metadata?.tokenName || undefined,\n      decimals: metadata?.decimals || undefined,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructXplaMetadata = (\n  addresses: string[],\n  metadataMap: DataWrapper<Map<string, XplaMetadata>>\n) => {\n  const isFetching = metadataMap.isFetching;\n  const error = metadataMap.error;\n  const receivedAt = metadataMap.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const meta = metadataMap.data?.get(address);\n    const obj = {\n      symbol: meta?.symbol || undefined,\n      logo: undefined,\n      tokenName: meta?.tokenName || undefined,\n      decimals: meta?.decimals,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructEthMetadata = (\n  addresses: string[],\n  metadataMap: DataWrapper<Map<string, EvmMetadata> | null>\n) => {\n  const isFetching = metadataMap.isFetching;\n  const error = metadataMap.error;\n  const receivedAt = metadataMap.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const meta = metadataMap.data?.get(address);\n    const obj = {\n      symbol: meta?.symbol || undefined,\n      logo: logoOverrides.get(address) || meta?.logo || undefined,\n      tokenName: meta?.tokenName || undefined,\n      decimals: meta?.decimals,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructAlgoMetadata = (\n  addresses: string[],\n  metadataMap: DataWrapper<Map<string, AlgoMetadata> | null>\n) => {\n  const isFetching = metadataMap.isFetching;\n  const error = metadataMap.error;\n  const receivedAt = metadataMap.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const meta = metadataMap.data?.get(address);\n    const obj = {\n      symbol: meta?.symbol || undefined,\n      logo: logoOverrides.get(address) || undefined,\n      tokenName: meta?.tokenName || undefined,\n      decimals: meta?.decimals,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructAptosMetadata = (\n  addresses: string[],\n  metadataMap: DataWrapper<Map<string, AptosMetadata> | null>\n) => {\n  const isFetching = metadataMap.isFetching;\n  const error = metadataMap.error;\n  const receivedAt = metadataMap.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const meta = metadataMap.data?.get(address);\n    const obj = {\n      symbol: meta?.symbol || undefined,\n      logo: undefined,\n      tokenName: meta?.tokenName || undefined,\n      decimals: meta?.decimals,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructInjectiveMetadata = (\n  addresses: string[],\n  metadataMap: DataWrapper<Map<string, InjectiveMetadata>>\n) => {\n  const isFetching = metadataMap.isFetching;\n  const error = metadataMap.error;\n  const receivedAt = metadataMap.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const meta = metadataMap.data?.get(address);\n    const obj = {\n      symbol: meta?.symbol || undefined,\n      logo: undefined,\n      tokenName: meta?.tokenName || undefined,\n      decimals: meta?.decimals,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructSuiMetadata = (\n  addresses: string[],\n  metadataMap: DataWrapper<Map<string, SuiMetadata>>\n) => {\n  const isFetching = metadataMap.isFetching;\n  const error = metadataMap.error;\n  const receivedAt = metadataMap.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const meta = metadataMap.data?.get(address);\n    const obj = {\n      symbol: meta?.symbol || undefined,\n      logo: undefined,\n      tokenName: meta?.tokenName || undefined,\n      decimals: meta?.decimals,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nexport default function useMetadata(\n  chainId: ChainId,\n  addresses: string[]\n): DataWrapper<Map<string, GenericMetadata>> {\n  const terraTokenMap = useTerraTokenMap(isTerraChain(chainId));\n  const solanaTokenMap = useSolanaTokenMap();\n\n  const solanaAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_SOLANA ? addresses : [];\n  }, [chainId, addresses]);\n  const terraAddresses = useMemo(() => {\n    return isTerraChain(chainId) ? addresses : [];\n  }, [chainId, addresses]);\n  const xplaAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_XPLA ? addresses : [];\n  }, [chainId, addresses]);\n  const ethereumAddresses = useMemo(() => {\n    return isEVMChain(chainId) ? addresses : [];\n  }, [chainId, addresses]);\n  const algoAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_ALGORAND ? addresses : [];\n  }, [chainId, addresses]);\n  const nearAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_NEAR ? addresses : [];\n  }, [chainId, addresses]);\n  const aptosAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_APTOS ? addresses : [];\n  }, [chainId, addresses]);\n  const injAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_INJECTIVE ? addresses : [];\n  }, [chainId, addresses]);\n  const suiAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_SUI ? addresses : [];\n  }, [chainId, addresses]);\n\n  const metaplexData = useMetaplexData(solanaAddresses);\n  const terraMetadata = useTerraMetadata(\n    terraAddresses,\n    chainId as TerraChainId\n  );\n  const ethMetadata = useEvmMetadata(ethereumAddresses, chainId);\n  const algoMetadata = useAlgoMetadata(algoAddresses);\n  const nearMetadata = useNearMetadata(nearAddresses);\n  const xplaMetadata = useXplaMetadata(xplaAddresses);\n  const aptosMetadata = useAptosMetadata(aptosAddresses);\n  const injMetadata = useInjectiveMetadata(injAddresses);\n  const suiMetadata = useSuiMetadata(suiAddresses);\n\n  const output: DataWrapper<Map<string, GenericMetadata>> = useMemo(\n    () =>\n      chainId === CHAIN_ID_SOLANA\n        ? constructSolanaMetadata(solanaAddresses, solanaTokenMap, metaplexData)\n        : isEVMChain(chainId)\n        ? constructEthMetadata(ethereumAddresses, ethMetadata)\n        : isTerraChain(chainId)\n        ? constructTerraMetadata(\n            terraAddresses,\n            terraTokenMap,\n            terraMetadata,\n            chainId\n          )\n        : chainId === CHAIN_ID_ALGORAND\n        ? constructAlgoMetadata(algoAddresses, algoMetadata)\n        : chainId === CHAIN_ID_NEAR\n        ? constructAlgoMetadata(nearAddresses, nearMetadata)\n        : chainId === CHAIN_ID_XPLA\n        ? constructXplaMetadata(xplaAddresses, xplaMetadata)\n        : chainId === CHAIN_ID_APTOS\n        ? constructAptosMetadata(aptosAddresses, aptosMetadata)\n        : chainId === CHAIN_ID_INJECTIVE\n        ? constructInjectiveMetadata(injAddresses, injMetadata)\n        : chainId === CHAIN_ID_SUI\n        ? constructSuiMetadata(suiAddresses, suiMetadata)\n        : getEmptyDataWrapper(),\n    [\n      chainId,\n      solanaAddresses,\n      solanaTokenMap,\n      metaplexData,\n      ethereumAddresses,\n      ethMetadata,\n      terraAddresses,\n      terraMetadata,\n      terraTokenMap,\n      algoAddresses,\n      algoMetadata,\n      nearAddresses,\n      nearMetadata,\n      xplaAddresses,\n      xplaMetadata,\n      aptosAddresses,\n      aptosMetadata,\n      injAddresses,\n      injMetadata,\n      suiAddresses,\n      suiMetadata,\n    ]\n  );\n\n  return output;\n}\n","import {\n  ChainId,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA2,\n  CHAIN_ID_XPLA,\n  getOriginalAssetAlgorand,\n  getOriginalAssetAptos,\n  getOriginalAssetCosmWasm,\n  getOriginalAssetEth,\n  getOriginalAssetInjective,\n  getOriginalAssetSol,\n  getTypeFromExternalAddress,\n  hexToNativeAssetString,\n  isEVMChain,\n  isTerraChain,\n  queryExternalId,\n  queryExternalIdInjective,\n  uint8ArrayToHex,\n  uint8ArrayToNative,\n  CHAIN_ID_SUI,\n  getOriginalAssetSui,\n  getForeignAssetSui,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth as getOriginalAssetEthNFT,\n  getOriginalAssetSol as getOriginalAssetSolNFT,\n  WormholeWrappedNFTInfo,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { Algodv2 } from \"algosdk\";\nimport { ethers } from \"ethers\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { useNearContext } from \"../contexts/NearWalletContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  ALGORAND_HOST,\n  ALGORAND_TOKEN_BRIDGE_ID,\n  getNFTBridgeAddressForChain,\n  getTerraConfig,\n  getTokenBridgeAddressForChain,\n  NATIVE_NEAR_PLACEHOLDER,\n  NATIVE_NEAR_WH_ADDRESS,\n  NEAR_TOKEN_BRIDGE_ACCOUNT,\n  SOLANA_HOST,\n  SOLANA_SYSTEM_PROGRAM_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  XPLA_LCD_CLIENT_CONFIG,\n} from \"../utils/consts\";\nimport {\n  getOriginalAssetNear,\n  lookupHash,\n  makeNearAccount,\n} from \"../utils/near\";\nimport useIsWalletReady from \"./useIsWalletReady\";\nimport { LCDClient as XplaLCDClient } from \"@xpla/xpla.js\";\nimport { getAptosClient } from \"../utils/aptos\";\nimport { getInjectiveWasmClient } from \"../utils/injective\";\nimport { getSuiProvider } from \"../utils/sui\";\n\nexport type OriginalAssetInfo = {\n  originChain: ChainId | null;\n  originAddress: string | null;\n  originTokenId: string | null;\n};\n\nexport async function getOriginalAssetToken(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  provider?: Web3Provider,\n  nearAccountId?: string | null\n) {\n  let promise = null;\n  try {\n    if (isEVMChain(foreignChain) && provider) {\n      promise = await getOriginalAssetEth(\n        getTokenBridgeAddressForChain(foreignChain),\n        provider,\n        foreignNativeStringAddress,\n        foreignChain\n      );\n    } else if (foreignChain === CHAIN_ID_SOLANA) {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      promise = await getOriginalAssetSol(\n        connection,\n        SOL_TOKEN_BRIDGE_ADDRESS,\n        foreignNativeStringAddress\n      );\n    } else if (isTerraChain(foreignChain)) {\n      const lcd = new LCDClient(getTerraConfig(foreignChain));\n      promise = await getOriginalAssetCosmWasm(\n        lcd,\n        foreignNativeStringAddress,\n        foreignChain\n      );\n    } else if (foreignChain === CHAIN_ID_ALGORAND) {\n      const algodClient = new Algodv2(\n        ALGORAND_HOST.algodToken,\n        ALGORAND_HOST.algodServer,\n        ALGORAND_HOST.algodPort\n      );\n      promise = await getOriginalAssetAlgorand(\n        algodClient,\n        ALGORAND_TOKEN_BRIDGE_ID,\n        BigInt(foreignNativeStringAddress)\n      );\n    } else if (foreignChain === CHAIN_ID_NEAR && nearAccountId) {\n      const account = await makeNearAccount(nearAccountId);\n      promise = await getOriginalAssetNear(\n        account,\n        NEAR_TOKEN_BRIDGE_ACCOUNT,\n        foreignNativeStringAddress\n      );\n    } else if (foreignChain === CHAIN_ID_APTOS) {\n      promise = await getOriginalAssetAptos(\n        getAptosClient(),\n        getTokenBridgeAddressForChain(CHAIN_ID_APTOS),\n        foreignNativeStringAddress\n      );\n    } else if (foreignChain === CHAIN_ID_INJECTIVE) {\n      promise = await getOriginalAssetInjective(\n        foreignNativeStringAddress,\n        getInjectiveWasmClient()\n      );\n    } else if (foreignChain === CHAIN_ID_SUI) {\n      promise = await getOriginalAssetSui(\n        getSuiProvider(),\n        getTokenBridgeAddressForChain(CHAIN_ID_SUI),\n        foreignNativeStringAddress\n      );\n    }\n  } catch (e) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  if (!promise) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  return promise;\n}\n\nexport async function getOriginalAssetNFT(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  tokenId?: string,\n  provider?: Provider\n) {\n  let promise = null;\n  try {\n    if (isEVMChain(foreignChain) && provider && tokenId) {\n      promise = getOriginalAssetEthNFT(\n        getNFTBridgeAddressForChain(foreignChain),\n        provider,\n        foreignNativeStringAddress,\n        tokenId,\n        foreignChain\n      );\n    } else if (foreignChain === CHAIN_ID_SOLANA) {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      promise = getOriginalAssetSolNFT(\n        connection,\n        SOL_NFT_BRIDGE_ADDRESS,\n        foreignNativeStringAddress\n      );\n    }\n  } catch (e) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  if (!promise) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  return promise;\n}\n\n//TODO refactor useCheckIfWormholeWrapped to use this function, and probably move to SDK\nexport async function getOriginalAsset(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  nft: boolean,\n  tokenId?: string,\n  provider?: Provider,\n  nearAccountId?: string | null\n): Promise<WormholeWrappedNFTInfo> {\n  const result = nft\n    ? await getOriginalAssetNFT(\n        foreignChain,\n        foreignNativeStringAddress,\n        tokenId,\n        provider\n      )\n    : await getOriginalAssetToken(\n        foreignChain,\n        foreignNativeStringAddress,\n        provider,\n        nearAccountId\n      );\n\n  if (\n    isEVMChain(result.chainId) &&\n    uint8ArrayToNative(result.assetAddress, result.chainId) ===\n      ethers.constants.AddressZero\n  ) {\n    throw new Error(\"Unable to find address.\");\n  }\n  if (\n    result.chainId === CHAIN_ID_SOLANA &&\n    uint8ArrayToNative(result.assetAddress, result.chainId) ===\n      SOLANA_SYSTEM_PROGRAM_ADDRESS\n  ) {\n    throw new Error(\"Unable to find address.\");\n  }\n\n  return result;\n}\n\n//This potentially returns the same chain as the foreign chain, in the case where the asset is native\nfunction useOriginalAsset(\n  foreignChain: ChainId,\n  foreignAddress: string,\n  nft: boolean,\n  tokenId?: string\n): DataWrapper<OriginalAssetInfo> {\n  const { provider } = useEthereumProvider(foreignChain);\n  const { accountId: nearAccountId } = useNearContext();\n  const { isReady } = useIsWalletReady(foreignChain, false);\n  const [originAddress, setOriginAddress] = useState<string | null>(null);\n  const [originTokenId, setOriginTokenId] = useState<string | null>(null);\n  const [originChain, setOriginChain] = useState<ChainId | null>(null);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [previousArgs, setPreviousArgs] = useState<{\n    foreignChain: ChainId;\n    foreignAddress: string;\n    nft: boolean;\n    tokenId?: string;\n  } | null>(null);\n  const argsEqual =\n    !!previousArgs &&\n    previousArgs.foreignChain === foreignChain &&\n    previousArgs.foreignAddress === foreignAddress &&\n    previousArgs.nft === nft &&\n    previousArgs.tokenId === tokenId;\n  const setArgs = useCallback(\n    () => setPreviousArgs({ foreignChain, foreignAddress, nft, tokenId }),\n    [foreignChain, foreignAddress, nft, tokenId]\n  );\n\n  const argumentError = useMemo(\n    () =>\n      !foreignChain ||\n      !foreignAddress ||\n      (isEVMChain(foreignChain) && !isReady) ||\n      (isEVMChain(foreignChain) && nft && !tokenId) ||\n      argsEqual,\n    [isReady, nft, tokenId, argsEqual, foreignChain, foreignAddress]\n  );\n\n  useEffect(() => {\n    if (!argsEqual) {\n      setError(\"\");\n      setOriginAddress(null);\n      setOriginTokenId(null);\n      setOriginChain(null);\n      setPreviousArgs(null);\n    }\n    if (argumentError) {\n      return;\n    }\n    // short circuit for near native\n    if (\n      foreignChain === CHAIN_ID_NEAR &&\n      foreignAddress === NATIVE_NEAR_PLACEHOLDER\n    ) {\n      setOriginChain(CHAIN_ID_NEAR);\n      setOriginAddress(NATIVE_NEAR_PLACEHOLDER);\n      return;\n    }\n    let cancelled = false;\n    setIsLoading(true);\n\n    getOriginalAsset(\n      foreignChain,\n      foreignAddress,\n      nft,\n      tokenId,\n      provider,\n      nearAccountId\n    )\n      .then((result) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setArgs();\n          if (\n            result.chainId === CHAIN_ID_TERRA2 ||\n            result.chainId === CHAIN_ID_XPLA\n          ) {\n            const lcd =\n              result.chainId === CHAIN_ID_TERRA2\n                ? new LCDClient(getTerraConfig(CHAIN_ID_TERRA2))\n                : new XplaLCDClient(XPLA_LCD_CLIENT_CONFIG);\n            const tokenBridgeAddress = getTokenBridgeAddressForChain(\n              result.chainId\n            );\n            queryExternalId(\n              lcd,\n              tokenBridgeAddress,\n              uint8ArrayToHex(result.assetAddress)\n            ).then((tokenId) => setOriginAddress(tokenId || null));\n          } else if (result.chainId === CHAIN_ID_NEAR) {\n            if (\n              uint8ArrayToHex(result.assetAddress) === NATIVE_NEAR_WH_ADDRESS\n            ) {\n              setOriginAddress(NATIVE_NEAR_PLACEHOLDER);\n            } else if (nearAccountId) {\n              makeNearAccount(nearAccountId).then((account) => {\n                lookupHash(\n                  account,\n                  NEAR_TOKEN_BRIDGE_ACCOUNT,\n                  uint8ArrayToHex(result.assetAddress)\n                ).then((tokenAccount) => {\n                  if (!cancelled) {\n                    setOriginAddress(tokenAccount[1] || null);\n                  }\n                });\n              });\n            }\n          } else if (result.chainId === CHAIN_ID_APTOS) {\n            getTypeFromExternalAddress(\n              getAptosClient(),\n              getTokenBridgeAddressForChain(CHAIN_ID_APTOS),\n              uint8ArrayToHex(result.assetAddress)\n            ).then((tokenId) => setOriginAddress(tokenId || null));\n          } else if (result.chainId === CHAIN_ID_INJECTIVE) {\n            const client = getInjectiveWasmClient();\n            const tokenBridgeAddress = getTokenBridgeAddressForChain(\n              result.chainId\n            );\n            queryExternalIdInjective(\n              client,\n              tokenBridgeAddress,\n              uint8ArrayToHex(result.assetAddress)\n            ).then((tokenId) => setOriginAddress(tokenId));\n          } else if (result.chainId === CHAIN_ID_SUI) {\n            getForeignAssetSui(\n              getSuiProvider(),\n              getTokenBridgeAddressForChain(CHAIN_ID_SUI),\n              result.chainId,\n              result.assetAddress\n            ).then((coinType) => {\n              if (!cancelled) {\n                setOriginAddress(coinType);\n              }\n            });\n          } else {\n            setOriginAddress(\n              hexToNativeAssetString(\n                uint8ArrayToHex(result.assetAddress),\n                result.chainId\n              ) || null\n            );\n          }\n          setOriginTokenId(result.tokenId || null);\n          setOriginChain(result.chainId);\n        }\n      })\n      .catch((e) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setError(\"Unable to determine original asset.\");\n        }\n      });\n  }, [\n    foreignChain,\n    foreignAddress,\n    nft,\n    provider,\n    setArgs,\n    argumentError,\n    tokenId,\n    argsEqual,\n    nearAccountId,\n  ]);\n\n  const output: DataWrapper<OriginalAssetInfo> = useMemo(\n    () => ({\n      error: error,\n      isFetching: isLoading,\n      data:\n        originChain || originAddress || originTokenId\n          ? { originChain, originAddress, originTokenId }\n          : null,\n      receivedAt: null,\n    }),\n    [isLoading, originAddress, originChain, originTokenId, error]\n  );\n\n  return output;\n}\n\nexport default useOriginalAsset;\n","import { Button } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  setSourceAsset,\n  setSourceChain,\n  setStep,\n  setTargetChain,\n} from \"../../store/attestSlice\";\nimport {\n  selectAttestSignedVAAHex,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferSourceAsset,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport {\n  ChainId,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_TERRA2,\n  CHAIN_ID_XPLA,\n  hexToNativeAssetString,\n  CHAIN_ID_SUI,\n} from \"@certusone/wormhole-sdk\";\n\nexport function RegisterNowButtonCore({\n  originChain,\n  originAsset,\n  targetChain,\n  forceAsset,\n}: {\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  targetChain: ChainId;\n  forceAsset?: string;\n}) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  // user might be in the middle of a different attest\n  const signedVAAHex = useSelector(selectAttestSignedVAAHex);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const canSwitch = originChain && originAsset && !signedVAAHex;\n  const handleClick = useCallback(() => {\n    const nativeAsset = originChain\n      ? originChain === CHAIN_ID_TERRA2 ||\n        originChain === CHAIN_ID_NEAR ||\n        originChain === CHAIN_ID_XPLA ||\n        originChain === CHAIN_ID_APTOS ||\n        originChain === CHAIN_ID_INJECTIVE ||\n        originChain === CHAIN_ID_SUI\n        ? sourceAsset || forceAsset\n        : hexToNativeAssetString(originAsset, originChain)\n      : undefined;\n    if (originChain && originAsset && nativeAsset && canSwitch) {\n      dispatch(setSourceChain(originChain));\n      dispatch(setSourceAsset(nativeAsset));\n      dispatch(setTargetChain(targetChain));\n      dispatch(setStep(2));\n      history.push(\"/register\");\n    }\n  }, [\n    dispatch,\n    canSwitch,\n    originChain,\n    originAsset,\n    targetChain,\n    history,\n    sourceAsset,\n    forceAsset,\n  ]);\n  if (!canSwitch) return null;\n  return (\n    <Button\n      variant=\"outlined\"\n      size=\"small\"\n      style={{ display: \"block\", margin: \"4px auto 0px\" }}\n      onClick={handleClick}\n    >\n      Register Now\n    </Button>\n  );\n}\n\nexport default function RegisterNowButton() {\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const targetChain = useSelector(selectTransferTargetChain);\n  return (\n    <RegisterNowButtonCore\n      originChain={originChain}\n      originAsset={originAsset}\n      targetChain={targetChain}\n    />\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA2,\n  isEVMChain,\n  nativeToHexString,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Card,\n  CircularProgress,\n  Container,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport useFetchForeignAsset, {\n  ForeignAssetInfo,\n} from \"../hooks/useFetchForeignAsset\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useMetadata from \"../hooks/useMetadata\";\nimport useOriginalAsset, { OriginalAssetInfo } from \"../hooks/useOriginalAsset\";\nimport { COLORS } from \"../muiTheme\";\nimport { BETA_CHAINS, CHAINS, CHAINS_BY_ID } from \"../utils/consts\";\nimport HeaderText from \"./HeaderText\";\nimport KeyAndBalance from \"./KeyAndBalance\";\nimport SmartAddress from \"./SmartAddress\";\nimport { RegisterNowButtonCore } from \"./Transfer/RegisterNowButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  flexBox: {\n    display: \"flex\",\n    width: \"100%\",\n    justifyContent: \"center\",\n    \"& > *\": {\n      margin: theme.spacing(2),\n    },\n  },\n  mainCard: {\n    padding: \"32px 32px 16px\",\n    backgroundColor: COLORS.whiteWithTransparency,\n  },\n  spacer: {\n    height: theme.spacing(3),\n  },\n  centered: {\n    textAlign: \"center\",\n  },\n  arrowIcon: {\n    margin: \"0 auto\",\n    fontSize: \"70px\",\n  },\n  resultContainer: {\n    margin: theme.spacing(2),\n  },\n}));\n\nfunction PrimaryAssetInformation({\n  lookupChain,\n  lookupAsset,\n  originChain,\n  originAsset,\n  showLoader,\n}: {\n  lookupChain: ChainId;\n  lookupAsset: string;\n  originChain: ChainId;\n  originAsset: string;\n  showLoader: boolean;\n}) {\n  const classes = useStyles();\n  const tokenArray = useMemo(() => [originAsset], [originAsset]);\n  const metadata = useMetadata(originChain, tokenArray);\n  const nativeContent = (\n    <div>\n      <Typography>{`This is not a Portal wrapped token.`}</Typography>\n    </div>\n  );\n  const wrapped = (\n    <div>\n      <Typography>{`This is wrapped by Portal! Here is the original token: `}</Typography>\n      <div className={classes.flexBox}>\n        <Typography>{`Chain: ${CHAINS_BY_ID[originChain].name}`}</Typography>\n        <div>\n          <Typography component=\"div\">\n            {\"Token: \"}\n            <SmartAddress\n              address={originAsset}\n              chainId={originChain}\n              symbol={metadata.data?.get(originAsset)?.symbol}\n              tokenName={metadata.data?.get(originAsset)?.tokenName}\n              isAsset\n            />\n          </Typography>\n        </div>\n      </div>\n    </div>\n  );\n  return lookupChain === originChain ? nativeContent : wrapped;\n}\n\nfunction SecondaryAssetInformation({\n  chainId,\n  foreignAssetInfo,\n  originAssetInfo,\n}: {\n  chainId: ChainId;\n  foreignAssetInfo?: ForeignAssetInfo;\n  originAssetInfo?: OriginalAssetInfo;\n}) {\n  const classes = useStyles();\n  const tokenArray: string[] = useMemo(() => {\n    //Saved to a variable to help typescript cope\n    const originAddress = originAssetInfo?.originAddress;\n    return originAddress && chainId === originAssetInfo?.originChain\n      ? [originAddress]\n      : foreignAssetInfo?.address\n      ? [foreignAssetInfo?.address]\n      : [];\n  }, [foreignAssetInfo, originAssetInfo, chainId]);\n  const metadata = useMetadata(chainId, tokenArray);\n  //TODO when this is the origin chain\n  return !originAssetInfo ? null : chainId === originAssetInfo.originChain ? (\n    <div>\n      <Typography>{`Transferring to ${CHAINS_BY_ID[chainId].name} will unwrap the token:`}</Typography>\n      <div className={classes.resultContainer}>\n        <SmartAddress\n          chainId={chainId}\n          address={originAssetInfo.originAddress || undefined}\n          symbol={\n            metadata.data?.get(originAssetInfo.originAddress || \"\")?.symbol ||\n            undefined\n          }\n          tokenName={\n            metadata.data?.get(originAssetInfo.originAddress || \"\")\n              ?.tokenName || undefined\n          }\n          isAsset\n        />\n      </div>\n    </div>\n  ) : !foreignAssetInfo ? null : foreignAssetInfo.doesExist === false ? (\n    <div>\n      <Typography>{`This token has not yet been registered on ${CHAINS_BY_ID[chainId].name}`}</Typography>\n      <RegisterNowButtonCore\n        originChain={originAssetInfo?.originChain || undefined}\n        originAsset={\n          // use pre-image for these\n          originAssetInfo?.originChain === CHAIN_ID_TERRA2 ||\n          originAssetInfo?.originChain === CHAIN_ID_NEAR\n            ? originAssetInfo?.originAddress || undefined\n            : nativeToHexString(\n                originAssetInfo?.originAddress || undefined,\n                originAssetInfo?.originChain || CHAIN_ID_SOLANA // this should exist\n              ) || undefined\n        }\n        forceAsset={\n          // use pre-image for these\n          originAssetInfo?.originChain === CHAIN_ID_TERRA2 ||\n          originAssetInfo?.originChain === CHAIN_ID_NEAR\n            ? originAssetInfo?.originAddress || undefined\n            : undefined\n        }\n        targetChain={chainId}\n      />\n    </div>\n  ) : (\n    <div>\n      <Typography>When bridged, this asset becomes: </Typography>\n      <div className={classes.resultContainer}>\n        <SmartAddress\n          chainId={chainId}\n          address={foreignAssetInfo.address || undefined}\n          symbol={\n            metadata.data?.get(foreignAssetInfo.address || \"\")?.symbol ||\n            undefined\n          }\n          tokenName={\n            metadata.data?.get(foreignAssetInfo.address || \"\")?.tokenName ||\n            undefined\n          }\n          isAsset\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default function TokenOriginVerifier() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n\n  const [primaryLookupChain, setPrimaryLookupChain] = useState(CHAIN_ID_SOLANA);\n  const [primaryLookupAsset, setPrimaryLookupAsset] = useState(\"\");\n\n  const [secondaryLookupChain, setSecondaryLookupChain] =\n    useState<ChainId>(CHAIN_ID_ETH);\n\n  const primaryLookupChainOptions = useMemo(\n    () => (isBeta ? CHAINS.filter((x) => !BETA_CHAINS.includes(x.id)) : CHAINS),\n    [isBeta]\n  );\n  const secondaryLookupChainOptions = useMemo(\n    () =>\n      isBeta\n        ? CHAINS.filter(\n            (x) => !BETA_CHAINS.includes(x.id) && x.id !== primaryLookupChain\n          )\n        : CHAINS.filter((x) => x.id !== primaryLookupChain),\n    [isBeta, primaryLookupChain]\n  );\n\n  const handlePrimaryLookupChainChange = useCallback(\n    (e) => {\n      setPrimaryLookupChain(e.target.value);\n      if (secondaryLookupChain === e.target.value) {\n        setSecondaryLookupChain(\n          e.target.value === CHAIN_ID_SOLANA ? CHAIN_ID_ETH : CHAIN_ID_SOLANA\n        );\n      }\n      setPrimaryLookupAsset(\"\");\n    },\n    [secondaryLookupChain]\n  );\n  const handleSecondaryLookupChainChange = useCallback((e) => {\n    setSecondaryLookupChain(e.target.value);\n  }, []);\n  const handlePrimaryLookupAssetChange = useCallback((event) => {\n    setPrimaryLookupAsset(event.target.value);\n  }, []);\n\n  const originInfo = useOriginalAsset(\n    primaryLookupChain,\n    primaryLookupAsset,\n    false\n  );\n  const foreignAssetInfo = useFetchForeignAsset(\n    originInfo.data?.originChain || 1,\n    originInfo.data?.originAddress || \"\",\n    secondaryLookupChain\n  );\n\n  const primaryWallet = useIsWalletReady(primaryLookupChain);\n  const secondaryWallet = useIsWalletReady(secondaryLookupChain);\n\n  const primaryWalletError =\n    isEVMChain(primaryLookupChain) &&\n    primaryLookupAsset &&\n    !originInfo.data &&\n    !originInfo.error &&\n    (!primaryWallet.isReady ? primaryWallet.statusMessage : \"\");\n  const originError = originInfo.error;\n  const primaryError = primaryWalletError || originError;\n\n  const secondaryWalletError =\n    isEVMChain(secondaryLookupChain) &&\n    originInfo.data?.originAddress &&\n    originInfo.data?.originChain &&\n    !foreignAssetInfo.data &&\n    (!secondaryWallet.isReady ? secondaryWallet.statusMessage : \"\");\n  const foreignError = foreignAssetInfo.error;\n  const secondaryError = secondaryWalletError || foreignError;\n\n  const primaryContent = (\n    <>\n      <Typography variant=\"h5\">Source Information</Typography>\n      <Typography variant=\"body1\" color=\"textSecondary\">\n        Enter a token from any supported chain to get started.\n      </Typography>\n      <div className={classes.spacer} />\n      <TextField\n        select\n        variant=\"outlined\"\n        label=\"Chain\"\n        value={primaryLookupChain}\n        onChange={handlePrimaryLookupChainChange}\n        fullWidth\n        margin=\"normal\"\n      >\n        {primaryLookupChainOptions.map(({ id, name }) => (\n          <MenuItem key={id} value={id}>\n            {name}\n          </MenuItem>\n        ))}\n      </TextField>\n      <TextField\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        label=\"Paste an address\"\n        value={primaryLookupAsset}\n        onChange={handlePrimaryLookupAssetChange}\n      />\n      <div className={classes.centered}>\n        {isEVMChain(primaryLookupChain) ? (\n          <KeyAndBalance chainId={primaryLookupChain} />\n        ) : null}\n        {primaryError ? (\n          <Typography color=\"error\">{primaryError}</Typography>\n        ) : null}\n        <div className={classes.spacer} />\n        {originInfo.isFetching ? (\n          <CircularProgress />\n        ) : originInfo.data?.originChain && originInfo.data.originAddress ? (\n          <PrimaryAssetInformation\n            lookupAsset={primaryLookupAsset}\n            lookupChain={primaryLookupChain}\n            originChain={originInfo.data.originChain}\n            originAsset={originInfo.data.originAddress}\n            showLoader={originInfo.isFetching}\n          />\n        ) : null}\n      </div>\n    </>\n  );\n\n  const secondaryContent = originInfo.data ? (\n    <>\n      <Typography variant=\"h5\">Bridge Results</Typography>\n      <Typography variant=\"body1\" color=\"textSecondary\">\n        Select a chain to see the result of bridging this token.\n      </Typography>\n      <div className={classes.spacer} />\n      <TextField\n        select\n        variant=\"outlined\"\n        label=\"Other Chain\"\n        value={secondaryLookupChain}\n        onChange={handleSecondaryLookupChainChange}\n        fullWidth\n        margin=\"normal\"\n      >\n        {secondaryLookupChainOptions.map(({ id, name }) => (\n          <MenuItem key={id} value={id}>\n            {name}\n          </MenuItem>\n        ))}\n      </TextField>\n      <div className={classes.centered}>\n        {isEVMChain(secondaryLookupChain) ? (\n          <KeyAndBalance chainId={secondaryLookupChain} />\n        ) : null}\n        {secondaryError ? (\n          <Typography color=\"error\">{secondaryError}</Typography>\n        ) : null}\n        <div className={classes.spacer} />\n        {foreignAssetInfo.isFetching ? (\n          <CircularProgress />\n        ) : originInfo.data?.originChain && originInfo.data.originAddress ? (\n          <SecondaryAssetInformation\n            foreignAssetInfo={foreignAssetInfo.data || undefined}\n            originAssetInfo={originInfo.data || undefined}\n            chainId={secondaryLookupChain}\n          />\n        ) : null}\n      </div>\n    </>\n  ) : null;\n\n  const content = (\n    <div>\n      <Container maxWidth=\"md\" className={classes.centered}>\n        <HeaderText white>Token Origin Verifier</HeaderText>\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Card className={classes.mainCard}>{primaryContent}</Card>\n        {secondaryContent ? (\n          <>\n            <div className={classes.centered}>\n              <ArrowDropDownIcon className={classes.arrowIcon} />\n            </div>\n            <Card className={classes.mainCard}>{secondaryContent}</Card>\n          </>\n        ) : null}\n      </Container>\n    </div>\n  );\n\n  return content;\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectTransferSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useTransferSignedVAA() {\n  const signedVAAHex = useSelector(selectTransferSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import {\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_SUI,\n  CHAIN_ID_XPLA,\n  getIsTransferCompletedAlgorand,\n  getIsTransferCompletedAptos,\n  getIsTransferCompletedEth,\n  getIsTransferCompletedInjective,\n  getIsTransferCompletedSolana,\n  getIsTransferCompletedSui,\n  getIsTransferCompletedTerra,\n  getIsTransferCompletedXpla,\n  isEVMChain,\n  isTerraChain,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport algosdk from \"algosdk\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useNearContext } from \"../contexts/NearWalletContext\";\nimport {\n  selectTransferIsRecovery,\n  selectTransferTargetAddressHex,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport {\n  ALGORAND_HOST,\n  ALGORAND_TOKEN_BRIDGE_ID,\n  getEvmChainId,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  getTerraGasPricesUrl,\n  getTerraConfig,\n  NEAR_TOKEN_BRIDGE_ACCOUNT,\n  XPLA_LCD_CLIENT_CONFIG,\n} from \"../utils/consts\";\nimport { getIsTransferCompletedNear, makeNearAccount } from \"../utils/near\";\nimport useIsWalletReady from \"./useIsWalletReady\";\nimport useTransferSignedVAA from \"./useTransferSignedVAA\";\nimport { LCDClient as XplaLCDClient } from \"@xpla/xpla.js\";\nimport { getAptosClient } from \"../utils/aptos\";\nimport { getInjectiveWasmClient } from \"../utils/injective\";\nimport { getSuiProvider } from \"../utils/sui\";\n\n/**\n * @param recoveryOnly Only fire when in recovery mode\n */\nexport default function useGetIsTransferCompleted(\n  recoveryOnly: boolean,\n  pollFrequency?: number\n): {\n  isTransferCompletedLoading: boolean;\n  isTransferCompleted: boolean;\n} {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTransferCompleted, setIsTransferCompleted] = useState(false);\n\n  const isRecovery = useSelector(selectTransferIsRecovery);\n  const targetAddress = useSelector(selectTransferTargetAddressHex);\n  const targetChain = useSelector(selectTransferTargetChain);\n\n  const { isReady } = useIsWalletReady(targetChain, false);\n  const { provider, evmChainId } = useEthereumProvider(targetChain);\n  const { accountId: nearAccountId } = useNearContext();\n  const signedVAA = useTransferSignedVAA();\n\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const shouldFire = !recoveryOnly || isRecovery;\n  const [pollState, setPollState] = useState(pollFrequency);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (pollFrequency && !isLoading && !isTransferCompleted) {\n      setTimeout(() => {\n        if (!cancelled) {\n          setPollState((prevState) => (prevState || 0) + 1);\n        }\n      }, pollFrequency);\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [pollFrequency, isLoading, isTransferCompleted]);\n\n  useEffect(() => {\n    if (!shouldFire) {\n      return;\n    }\n\n    let cancelled = false;\n    let transferCompleted = false;\n    if (targetChain && targetAddress && signedVAA && isReady) {\n      if (isEVMChain(targetChain) && hasCorrectEvmNetwork && provider) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            transferCompleted = await getIsTransferCompletedEth(\n              getTokenBridgeAddressForChain(targetChain),\n              provider,\n              signedVAA\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      } else if (targetChain === CHAIN_ID_SOLANA) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            transferCompleted = await getIsTransferCompletedSolana(\n              getTokenBridgeAddressForChain(targetChain),\n              signedVAA,\n              connection\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      } else if (isTerraChain(targetChain)) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            const lcdClient = new LCDClient(getTerraConfig(targetChain));\n            transferCompleted = await getIsTransferCompletedTerra(\n              getTokenBridgeAddressForChain(targetChain),\n              signedVAA,\n              lcdClient,\n              getTerraGasPricesUrl(targetChain)\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      } else if (targetChain === CHAIN_ID_XPLA) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            const lcdClient = new XplaLCDClient(XPLA_LCD_CLIENT_CONFIG);\n            transferCompleted = await getIsTransferCompletedXpla(\n              getTokenBridgeAddressForChain(targetChain),\n              signedVAA,\n              lcdClient\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      } else if (targetChain === CHAIN_ID_APTOS) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            transferCompleted = await getIsTransferCompletedAptos(\n              getAptosClient(),\n              getTokenBridgeAddressForChain(targetChain),\n              signedVAA\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      } else if (targetChain === CHAIN_ID_ALGORAND) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            const algodClient = new algosdk.Algodv2(\n              ALGORAND_HOST.algodToken,\n              ALGORAND_HOST.algodServer,\n              ALGORAND_HOST.algodPort\n            );\n            transferCompleted = await getIsTransferCompletedAlgorand(\n              algodClient,\n              ALGORAND_TOKEN_BRIDGE_ID,\n              signedVAA\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      } else if (targetChain === CHAIN_ID_NEAR && nearAccountId) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            const account = await makeNearAccount(nearAccountId);\n            transferCompleted = await getIsTransferCompletedNear(\n              account,\n              NEAR_TOKEN_BRIDGE_ACCOUNT,\n              signedVAA\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      } else if (targetChain === CHAIN_ID_INJECTIVE) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            const client = getInjectiveWasmClient();\n            transferCompleted = await getIsTransferCompletedInjective(\n              getTokenBridgeAddressForChain(targetChain),\n              signedVAA,\n              client\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      } else if (targetChain === CHAIN_ID_SUI) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            const provider = getSuiProvider();\n            transferCompleted = await getIsTransferCompletedSui(\n              provider,\n              getTokenBridgeAddressForChain(CHAIN_ID_SUI),\n              signedVAA\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      }\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    shouldFire,\n    hasCorrectEvmNetwork,\n    targetChain,\n    targetAddress,\n    signedVAA,\n    isReady,\n    provider,\n    pollState,\n    nearAccountId,\n  ]);\n\n  return { isTransferCompletedLoading: isLoading, isTransferCompleted };\n}\n","export const ThresholdL2WormholeGateway = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint16\",\n        name: \"chainId\",\n        type: \"uint16\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"gateway\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"GatewayAddressUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, internalType: \"uint8\", name: \"version\", type: \"uint8\" },\n    ],\n    name: \"Initialized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"mintingLimit\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"MintingLimitUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"depositor\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"WormholeTbtcDeposited\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"receiver\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"WormholeTbtcReceived\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint16\",\n        name: \"recipientChain\",\n        type: \"uint16\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"gateway\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"recipient\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"arbiterFee\",\n        type: \"uint256\",\n      },\n      { indexed: false, internalType: \"uint32\", name: \"nonce\", type: \"uint32\" },\n    ],\n    name: \"WormholeTbtcSent\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [\n      {\n        internalType: \"contract IWormholeTokenBridge\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"bridgeToken\",\n    outputs: [\n      { internalType: \"contract IERC20Upgradeable\", name: \"\", type: \"address\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\n    name: \"depositWormholeTbtc\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes32\", name: \"_address\", type: \"bytes32\" }],\n    name: \"fromWormholeAddress\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint16\", name: \"\", type: \"uint16\" }],\n    name: \"gateways\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IWormholeTokenBridge\",\n        name: \"_bridge\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20Upgradeable\",\n        name: \"_bridgeToken\",\n        type: \"address\",\n      },\n      { internalType: \"contract L2TBTC\", name: \"_tbtc\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mintedAmount\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"mintingLimit\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"encodedVm\", type: \"bytes\" }],\n    name: \"receiveTbtc\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"uint16\", name: \"recipientChain\", type: \"uint16\" },\n      { internalType: \"bytes32\", name: \"recipient\", type: \"bytes32\" },\n      { internalType: \"uint256\", name: \"arbiterFee\", type: \"uint256\" },\n      { internalType: \"uint32\", name: \"nonce\", type: \"uint32\" },\n    ],\n    name: \"sendTbtc\",\n    outputs: [{ internalType: \"uint64\", name: \"\", type: \"uint64\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"tbtc\",\n    outputs: [{ internalType: \"contract L2TBTC\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"_address\", type: \"address\" }],\n    name: \"toWormholeAddress\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newOwner\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint16\", name: \"chainId\", type: \"uint16\" },\n      { internalType: \"bytes32\", name: \"gateway\", type: \"bytes32\" },\n    ],\n    name: \"updateGatewayAddress\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"_mintingLimit\", type: \"uint256\" },\n    ],\n    name: \"updateMintingLimit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","import {\n  ChainId,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_KLAYTN,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_XPLA,\n  isEVMChain,\n  isTerraChain,\n  postVaaSolanaWithRetry,\n  redeemAndUnwrapOnSolana,\n  redeemOnAlgorand,\n  redeemOnEth,\n  redeemOnEthNative,\n  redeemOnInjective,\n  redeemOnSolana,\n  redeemOnTerra,\n  redeemOnXpla,\n  TerraChainId,\n  uint8ArrayToHex,\n  CHAIN_ID_SUI,\n  CHAIN_ID_POLYGON,\n} from \"@certusone/wormhole-sdk\";\nimport { completeTransferAndRegister } from \"@certusone/wormhole-sdk/lib/esm/aptos/api/tokenBridge\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport algosdk from \"algosdk\";\nimport axios from \"axios\";\nimport { Contract, Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useAlgorandWallet } from \"../contexts/AlgorandWalletContext\";\nimport { useAptosContext } from \"../contexts/AptosWalletContext\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useNearContext } from \"../contexts/NearWalletContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTerraFeeDenom,\n  selectTransferIsRedeeming,\n  selectTransferTargetChain,\n  selectTransferIsTBTC,\n} from \"../store/selectors\";\nimport { setIsRedeeming, setRedeemTx } from \"../store/transferSlice\";\nimport { signSendAndConfirmAlgorand } from \"../utils/algorand\";\nimport {\n  getAptosClient,\n  waitForSignAndSubmitTransaction,\n} from \"../utils/aptos\";\nimport {\n  ACALA_RELAY_URL,\n  ALGORAND_BRIDGE_ID,\n  ALGORAND_HOST,\n  ALGORAND_TOKEN_BRIDGE_ID,\n  getTokenBridgeAddressForChain,\n  MAX_VAA_UPLOAD_RETRIES_SOLANA,\n  NEAR_TOKEN_BRIDGE_ACCOUNT,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  getBridgeAddressForChain,\n  THRESHOLD_GATEWAYS,\n} from \"../utils/consts\";\nimport {\n  makeNearAccount,\n  redeemOnNear,\n  signAndSendTransactions,\n} from \"../utils/near\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { postWithFees } from \"../utils/terra\";\nimport useTransferSignedVAA from \"./useTransferSignedVAA\";\nimport { postWithFeesXpla } from \"../utils/xpla\";\nimport { broadcastInjectiveTx } from \"../utils/injective\";\nimport { useInjectiveContext } from \"../contexts/InjectiveWalletContext\";\nimport { AlgorandWallet } from \"@xlabs-libs/wallet-aggregator-algorand\";\nimport { SolanaWallet } from \"@xlabs-libs/wallet-aggregator-solana\";\nimport { AptosWallet } from \"@xlabs-libs/wallet-aggregator-aptos\";\nimport { InjectiveWallet } from \"@xlabs-libs/wallet-aggregator-injective\";\nimport { NearWallet } from \"@xlabs-libs/wallet-aggregator-near\";\nimport { useTerraWallet } from \"../contexts/TerraWalletContext\";\nimport { TerraWallet } from \"@xlabs-libs/wallet-aggregator-terra\";\nimport { useXplaWallet } from \"../contexts/XplaWalletContext\";\nimport { XplaWallet } from \"@xlabs-libs/wallet-aggregator-xpla\";\nimport { SuiWallet } from \"@xlabs-libs/wallet-aggregator-sui\";\nimport { getSuiProvider } from \"../utils/sui\";\nimport { useSuiWallet } from \"../contexts/SuiWalletContext\";\nimport { redeemOnSui } from \"../utils/suiRedeemHotfix\";\nimport { ThresholdL2WormholeGateway } from \"../utils/ThresholdL2WormholeGateway\";\n\nasync function algo(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: AlgorandWallet,\n  signedVAA: Uint8Array\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const algodClient = new algosdk.Algodv2(\n      ALGORAND_HOST.algodToken,\n      ALGORAND_HOST.algodServer,\n      ALGORAND_HOST.algodPort\n    );\n    const txs = await redeemOnAlgorand(\n      algodClient,\n      ALGORAND_TOKEN_BRIDGE_ID,\n      ALGORAND_BRIDGE_ID,\n      signedVAA,\n      wallet.getAddress()!\n    );\n    const result = await signSendAndConfirmAlgorand(wallet, algodClient, txs);\n    // TODO: fill these out correctly\n    dispatch(\n      setRedeemTx({\n        id: txs[txs.length - 1].tx.txID(),\n        block: result[\"confirmed-round\"],\n      })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function aptos(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signedVAA: Uint8Array,\n  wallet: AptosWallet\n) {\n  dispatch(setIsRedeeming(true));\n  const tokenBridgeAddress = getTokenBridgeAddressForChain(CHAIN_ID_APTOS);\n  try {\n    const msg = await completeTransferAndRegister(\n      getAptosClient(),\n      tokenBridgeAddress,\n      signedVAA\n    );\n    msg.arguments[0] = Array.from(msg.arguments[0]);\n    const result = await waitForSignAndSubmitTransaction(msg, wallet);\n    dispatch(setRedeemTx({ id: result, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  isNative: boolean,\n  chainId: ChainId,\n  isTBTC?: boolean\n) {\n  dispatch(setIsRedeeming(true));\n\n  try {\n    let receipt;\n\n    const isCanonicalTarget = !!THRESHOLD_GATEWAYS[chainId];\n    if (isTBTC && isCanonicalTarget) {\n      console.log(\"redeem tbtc on canonical\");\n      const targetAddress = THRESHOLD_GATEWAYS[chainId];\n      const L2WormholeGateway = new Contract(\n        targetAddress,\n        ThresholdL2WormholeGateway,\n        signer\n      );\n\n      const estimateGas = await L2WormholeGateway.estimateGas.receiveTbtc(\n        signedVAA\n      );\n\n      // We increase the gas limit estimation here by a factor of 10% to account for some faulty public JSON-RPC endpoints.\n      const gasLimit = estimateGas.mul(1100).div(1000);\n      const overrides = {\n        gasLimit,\n        // We use the legacy tx envelope here to avoid triggering gas price autodetection using EIP1559 for polygon.\n        // EIP1559 is not actually implemented in polygon. The node is only API compatible but this breaks some clients\n        // like ethers when choosing fees automatically.\n        ...(chainId === CHAIN_ID_POLYGON && { type: 0 }),\n      };\n\n      const tx = await L2WormholeGateway.receiveTbtc(signedVAA, overrides);\n      receipt = await tx.wait();\n    }\n    // REGULAR PORTAL BRIDGE FLOW\n    else {\n      // Klaytn requires specifying gasPrice\n      const overrides =\n        chainId === CHAIN_ID_KLAYTN\n          ? { gasPrice: (await signer.getGasPrice()).toString() }\n          : {};\n\n      receipt = isNative\n        ? await redeemOnEthNative(\n            getTokenBridgeAddressForChain(chainId),\n            signer,\n            signedVAA,\n            overrides\n          )\n        : await redeemOnEth(\n            getTokenBridgeAddressForChain(chainId),\n            signer,\n            signedVAA,\n            overrides\n          );\n    }\n\n    dispatch(\n      setRedeemTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function near(\n  dispatch: any,\n  enqueueSnackbar: any,\n  senderAddr: string,\n  signedVAA: Uint8Array,\n  wallet: NearWallet\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const account = await makeNearAccount(senderAddr);\n    const msgs = await redeemOnNear(\n      account,\n      NEAR_TOKEN_BRIDGE_ACCOUNT,\n      signedVAA\n    );\n    const receipt = await signAndSendTransactions(account, wallet, msgs);\n    dispatch(\n      setRedeemTx({\n        id: receipt.transaction_outcome.id,\n        block: 0,\n      })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function xpla(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: XplaWallet,\n  signedVAA: Uint8Array\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const msg = await redeemOnXpla(\n      getTokenBridgeAddressForChain(CHAIN_ID_XPLA),\n      wallet.getAddress()!,\n      signedVAA\n    );\n    const result = await postWithFeesXpla(\n      wallet,\n      [msg],\n      \"Wormhole - Complete Transfer\"\n    );\n    dispatch(\n      setRedeemTx({ id: result.result.txhash, block: result.result.height })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function injective(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: InjectiveWallet,\n  walletAddress: string,\n  signedVAA: Uint8Array\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const msg = await redeemOnInjective(\n      getTokenBridgeAddressForChain(CHAIN_ID_INJECTIVE),\n      walletAddress,\n      signedVAA\n    );\n    const tx = await broadcastInjectiveTx(\n      wallet,\n      walletAddress,\n      msg,\n      \"Wormhole - Complete Transfer\"\n    );\n    dispatch(setRedeemTx({ id: tx.txHash, block: tx.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: SolanaWallet,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array,\n  isNative: boolean\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    await postVaaSolanaWithRetry(\n      connection,\n      wallet.signTransaction.bind(wallet),\n      SOL_BRIDGE_ADDRESS,\n      payerAddress,\n      Buffer.from(signedVAA),\n      MAX_VAA_UPLOAD_RETRIES_SOLANA\n    );\n    // TODO: how do we retry in between these steps\n    const transaction = isNative\n      ? await redeemAndUnwrapOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        )\n      : await redeemOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n    const txid = await signSendAndConfirm(wallet, transaction);\n    // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    dispatch(setRedeemTx({ id: txid, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: TerraWallet,\n  signedVAA: Uint8Array,\n  feeDenom: string,\n  chainId: TerraChainId\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const msg = await redeemOnTerra(\n      getTokenBridgeAddressForChain(chainId),\n      wallet.getAddress()!,\n      signedVAA\n    );\n    const result = await postWithFees(\n      wallet,\n      [msg],\n      \"Wormhole - Complete Transfer\",\n      [feeDenom],\n      chainId\n    );\n    dispatch(\n      setRedeemTx({ id: result.result.txhash, block: result.result.height })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function sui(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: SuiWallet,\n  signedVAA: Uint8Array\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const provider = getSuiProvider();\n    const tx = await redeemOnSui(\n      provider,\n      getBridgeAddressForChain(CHAIN_ID_SUI),\n      getTokenBridgeAddressForChain(CHAIN_ID_SUI),\n      signedVAA\n    );\n    const response = (\n      await wallet.signAndSendTransaction({\n        transactionBlock: tx,\n      })\n    ).data;\n    if (!response) {\n      throw new Error(\"Error parsing transaction results\");\n    }\n    dispatch(\n      setRedeemTx({\n        id: response.digest,\n        block: Number(response.checkpoint || 0),\n      })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nexport function useHandleRedeem() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const isTBTC = useSelector(selectTransferIsTBTC);\n\n  const { publicKey: solPK, wallet: solanaWallet } = useSolanaWallet();\n  const { signer } = useEthereumProvider(targetChain);\n  const { wallet: terraWallet } = useTerraWallet(targetChain);\n  const terraFeeDenom = useSelector(selectTerraFeeDenom);\n  const xplaWallet = useXplaWallet();\n  const { address: algoAccount, wallet: algoWallet } = useAlgorandWallet();\n  const { accountId: nearAccountId, wallet } = useNearContext();\n  const { account: aptosAddress, wallet: aptosWallet } = useAptosContext();\n  const { wallet: injWallet, address: injAddress } = useInjectiveContext();\n  const suiWallet = useSuiWallet();\n  const signedVAA = useTransferSignedVAA();\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const handleRedeemClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        signedVAA,\n        false,\n        targetChain,\n        isTBTC\n      );\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(dispatch, enqueueSnackbar, solanaWallet, solPK, signedVAA, false);\n    } else if (isTerraChain(targetChain) && !!terraWallet && signedVAA) {\n      terra(\n        dispatch,\n        enqueueSnackbar,\n        terraWallet,\n        signedVAA,\n        terraFeeDenom,\n        targetChain\n      );\n    } else if (targetChain === CHAIN_ID_XPLA && !!xplaWallet && signedVAA) {\n      xpla(dispatch, enqueueSnackbar, xplaWallet, signedVAA);\n    } else if (targetChain === CHAIN_ID_APTOS && !!aptosAddress && signedVAA) {\n      aptos(dispatch, enqueueSnackbar, signedVAA, aptosWallet!);\n    } else if (\n      targetChain === CHAIN_ID_ALGORAND &&\n      algoAccount &&\n      !!signedVAA\n    ) {\n      algo(dispatch, enqueueSnackbar, algoWallet, signedVAA);\n    } else if (\n      targetChain === CHAIN_ID_NEAR &&\n      nearAccountId &&\n      wallet &&\n      !!signedVAA\n    ) {\n      near(dispatch, enqueueSnackbar, nearAccountId, signedVAA, wallet);\n    } else if (\n      targetChain === CHAIN_ID_INJECTIVE &&\n      injWallet &&\n      injAddress &&\n      signedVAA\n    ) {\n      injective(dispatch, enqueueSnackbar, injWallet, injAddress, signedVAA);\n    } else if (\n      targetChain === CHAIN_ID_SUI &&\n      suiWallet?.getAddress() &&\n      !!signedVAA\n    ) {\n      sui(dispatch, enqueueSnackbar, suiWallet, signedVAA);\n    }\n  }, [\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    xplaWallet,\n    aptosAddress,\n    algoAccount,\n    nearAccountId,\n    wallet,\n    injWallet,\n    injAddress,\n    suiWallet,\n    dispatch,\n    enqueueSnackbar,\n    isTBTC,\n    terraFeeDenom,\n    aptosWallet,\n    algoWallet,\n  ]);\n\n  const handleRedeemNativeClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, true, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(dispatch, enqueueSnackbar, solanaWallet, solPK, signedVAA, true);\n    } else if (isTerraChain(targetChain) && !!terraWallet && signedVAA) {\n      terra(\n        dispatch,\n        enqueueSnackbar,\n        terraWallet,\n        signedVAA,\n        terraFeeDenom,\n        targetChain\n      ); //TODO isNative = true\n    } else if (\n      targetChain === CHAIN_ID_ALGORAND &&\n      algoAccount &&\n      !!signedVAA\n    ) {\n      algo(dispatch, enqueueSnackbar, algoWallet, signedVAA);\n    } else if (\n      targetChain === CHAIN_ID_INJECTIVE &&\n      injWallet &&\n      injAddress &&\n      signedVAA\n    ) {\n      injective(dispatch, enqueueSnackbar, injWallet, injAddress, signedVAA);\n    } else if (\n      targetChain === CHAIN_ID_SUI &&\n      suiWallet?.getAddress() &&\n      signedVAA\n    ) {\n      sui(dispatch, enqueueSnackbar, suiWallet, signedVAA);\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    terraFeeDenom,\n    algoAccount,\n    algoWallet,\n    injWallet,\n    injAddress,\n    suiWallet,\n  ]);\n\n  const handleAcalaRelayerRedeemClick = useCallback(async () => {\n    if (!signedVAA) return;\n\n    dispatch(setIsRedeeming(true));\n\n    try {\n      const res = await axios.post(ACALA_RELAY_URL, {\n        targetChain,\n        signedVAA: uint8ArrayToHex(signedVAA),\n      });\n\n      dispatch(\n        setRedeemTx({\n          id: res.data.transactionHash,\n          block: res.data.blockNumber,\n        })\n      );\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n      });\n    } catch (e) {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n      });\n      dispatch(setIsRedeeming(false));\n    }\n  }, [targetChain, signedVAA, enqueueSnackbar, dispatch]);\n\n  return useMemo(\n    () => ({\n      handleNativeClick: handleRedeemNativeClick,\n      handleClick: handleRedeemClick,\n      handleAcalaRelayerRedeemClick,\n      disabled: !!isRedeeming,\n      showLoader: !!isRedeeming,\n    }),\n    [\n      handleRedeemClick,\n      isRedeeming,\n      handleRedeemNativeClick,\n      handleAcalaRelayerRedeemClick,\n    ]\n  );\n}\n","import { parseTokenTransferVaa } from \"@certusone/wormhole-sdk\";\nimport {\n  getPackageId,\n  getTokenCoinType,\n} from \"@certusone/wormhole-sdk/lib/cjs/sui\";\nimport {\n  JsonRpcProvider,\n  SUI_CLOCK_OBJECT_ID,\n  TransactionBlock,\n  builder,\n} from \"@mysten/sui.js\";\n\nconst MAX_PURE_ARGUMENT_SIZE = 16 * 1024;\n\nexport async function redeemOnSui(\n  provider: JsonRpcProvider,\n  coreBridgeStateObjectId: string,\n  tokenBridgeStateObjectId: string,\n  transferVAA: Uint8Array\n) {\n  const { tokenAddress, tokenChain } = parseTokenTransferVaa(transferVAA);\n  const coinType = await getTokenCoinType(\n    provider,\n    tokenBridgeStateObjectId,\n    tokenAddress,\n    tokenChain\n  );\n  if (!coinType) {\n    throw new Error(\"Unable to fetch token coinType\");\n  }\n  const coreBridgePackageId = await getPackageId(\n    provider,\n    coreBridgeStateObjectId\n  );\n  const tokenBridgePackageId = await getPackageId(\n    provider,\n    tokenBridgeStateObjectId\n  );\n  const tx = new TransactionBlock();\n  const [verifiedVAA] = tx.moveCall({\n    target: `${coreBridgePackageId}::vaa::parse_and_verify`,\n    arguments: [\n      tx.object(coreBridgeStateObjectId),\n      tx.pure(\n        builder\n          .ser(\"vector<u8>\", transferVAA, { maxSize: MAX_PURE_ARGUMENT_SIZE })\n          .toBytes()\n      ),\n      tx.object(SUI_CLOCK_OBJECT_ID),\n    ],\n  });\n  const [tokenBridgeMessage] = tx.moveCall({\n    target: `${tokenBridgePackageId}::vaa::verify_only_once`,\n    arguments: [tx.object(tokenBridgeStateObjectId), verifiedVAA],\n  });\n  const [relayerReceipt] = tx.moveCall({\n    target: `${tokenBridgePackageId}::complete_transfer::authorize_transfer`,\n    arguments: [tx.object(tokenBridgeStateObjectId), tokenBridgeMessage],\n    typeArguments: [coinType],\n  });\n  const [coins] = tx.moveCall({\n    target: `${tokenBridgePackageId}::complete_transfer::redeem_relayer_payout`,\n    arguments: [relayerReceipt],\n    typeArguments: [coinType],\n  });\n  tx.moveCall({\n    target: `${tokenBridgePackageId}::coin_utils::return_nonzero`,\n    arguments: [coins],\n    typeArguments: [coinType],\n  });\n  return tx;\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getForeignAssetSolana,\n  hexToNativeAssetString,\n  hexToNativeString,\n  hexToUint8Array,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetAddressHex,\n} from \"../store/selectors\";\nimport { SOLANA_HOST, SOL_TOKEN_BRIDGE_ADDRESS } from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport SmartAddress from \"./SmartAddress\";\n\nexport function useAssociatedAccountExistsState(\n  targetChain: ChainId,\n  mintAddress: string | null | undefined,\n  readableTargetAddress: string | undefined\n) {\n  const [associatedAccountExists, setAssociatedAccountExists] = useState(true); // for now, assume it exists until we confirm it doesn't\n  const { publicKey: solPK } = useSolanaWallet();\n  useEffect(() => {\n    setAssociatedAccountExists(true);\n    if (\n      targetChain !== CHAIN_ID_SOLANA ||\n      !mintAddress ||\n      !readableTargetAddress ||\n      !solPK\n    )\n      return;\n    let cancelled = false;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(mintAddress);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === readableTargetAddress;\n      if (match) {\n        const associatedAddressInfo = await connection.getAccountInfo(\n          associatedAddress\n        );\n        if (!associatedAddressInfo) {\n          if (!cancelled) {\n            setAssociatedAccountExists(false);\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [targetChain, mintAddress, readableTargetAddress, solPK]);\n  return useMemo(\n    () => ({ associatedAccountExists, setAssociatedAccountExists }),\n    [associatedAccountExists]\n  );\n}\n\nexport default function SolanaCreateAssociatedAddress({\n  mintAddress,\n  readableTargetAddress,\n  associatedAccountExists,\n  setAssociatedAccountExists,\n}: {\n  mintAddress: string;\n  readableTargetAddress: string;\n  associatedAccountExists: boolean;\n  setAssociatedAccountExists: (associatedAccountExists: boolean) => void;\n}) {\n  const [isCreating, setIsCreating] = useState(false);\n  const { publicKey: solPK, wallet: solanaWallet } = useSolanaWallet();\n  const handleClick = useCallback(() => {\n    if (\n      associatedAccountExists ||\n      !mintAddress ||\n      !readableTargetAddress ||\n      !solPK ||\n      !solanaWallet\n    )\n      return;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(mintAddress);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === readableTargetAddress;\n      if (match) {\n        const associatedAddressInfo = await connection.getAccountInfo(\n          associatedAddress\n        );\n        if (!associatedAddressInfo) {\n          setIsCreating(true);\n          const transaction = new Transaction().add(\n            await Token.createAssociatedTokenAccountInstruction(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              mintPublicKey,\n              associatedAddress,\n              payerPublicKey, // owner\n              payerPublicKey // payer\n            )\n          );\n          const { blockhash } = await connection.getRecentBlockhash();\n          transaction.recentBlockhash = blockhash;\n          transaction.feePayer = new PublicKey(payerPublicKey);\n          await signSendAndConfirm(solanaWallet, transaction);\n          setIsCreating(false);\n          setAssociatedAccountExists(true);\n        } else {\n          console.log(\"Account already exists.\");\n        }\n      }\n    })();\n  }, [\n    associatedAccountExists,\n    setAssociatedAccountExists,\n    mintAddress,\n    solPK,\n    readableTargetAddress,\n    solanaWallet,\n  ]);\n  if (associatedAccountExists) return null;\n  return (\n    <>\n      <Typography color=\"error\" variant=\"body2\">\n        This associated token account doesn't exist.\n      </Typography>\n      <ButtonWithLoader\n        disabled={\n          !mintAddress || !readableTargetAddress || !solPK || isCreating\n        }\n        onClick={handleClick}\n        showLoader={isCreating}\n      >\n        Create Associated Token Account\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport function SolanaCreateAssociatedAddressAlternate() {\n  const { enqueueSnackbar } = useSnackbar();\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const addressHex = useSelector(selectTransferTargetAddressHex);\n  const base58TargetAddress = useMemo(\n    () => hexToNativeString(addressHex, CHAIN_ID_SOLANA) || \"\",\n    [addressHex]\n  );\n  const base58OriginAddress = useMemo(\n    () => hexToNativeAssetString(originAsset, CHAIN_ID_SOLANA) || \"\",\n    [originAsset]\n  );\n  const connection = useMemo(() => new Connection(SOLANA_HOST), []);\n  const [targetAsset, setTargetAsset] = useState<string | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (!(originChain && originAsset && addressHex && base58TargetAddress)) {\n      setTargetAsset(null);\n    } else if (originChain === CHAIN_ID_SOLANA && base58OriginAddress) {\n      setTargetAsset(base58OriginAddress);\n    } else {\n      getForeignAssetSolana(\n        connection,\n        SOL_TOKEN_BRIDGE_ADDRESS,\n        originChain,\n        hexToUint8Array(originAsset)\n      ).then((result) => {\n        if (!cancelled) {\n          setTargetAsset(result);\n        }\n      });\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    originChain,\n    originAsset,\n    addressHex,\n    base58TargetAddress,\n    connection,\n    base58OriginAddress,\n  ]);\n\n  const { associatedAccountExists, setAssociatedAccountExists } =\n    useAssociatedAccountExistsState(\n      CHAIN_ID_SOLANA,\n      targetAsset,\n      base58TargetAddress\n    );\n\n  const { publicKey: solPK, wallet: solanaWallet } = useSolanaWallet();\n  const handleForceCreateClick = useCallback(() => {\n    if (!targetAsset || !base58TargetAddress || !solPK || !solanaWallet) return;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(targetAsset);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === base58TargetAddress;\n      if (match) {\n        try {\n          const transaction = new Transaction().add(\n            await Token.createAssociatedTokenAccountInstruction(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              mintPublicKey,\n              associatedAddress,\n              payerPublicKey, // owner\n              payerPublicKey // payer\n            )\n          );\n          const { blockhash } = await connection.getRecentBlockhash();\n          transaction.recentBlockhash = blockhash;\n          transaction.feePayer = new PublicKey(payerPublicKey);\n          await signSendAndConfirm(solanaWallet, transaction);\n          setAssociatedAccountExists(true);\n          enqueueSnackbar(null, {\n            content: (\n              <Alert severity=\"success\">\n                Successfully created associated token account\n              </Alert>\n            ),\n          });\n        } catch (e) {\n          enqueueSnackbar(null, {\n            content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n          });\n        }\n      } else {\n        enqueueSnackbar(null, {\n          content: (\n            <Alert severity=\"error\">\n              Derived address does not match the target address. Do you have the\n              same wallet connected?\n            </Alert>\n          ),\n        });\n      }\n    })();\n  }, [\n    setAssociatedAccountExists,\n    targetAsset,\n    solPK,\n    base58TargetAddress,\n    solanaWallet,\n    enqueueSnackbar,\n  ]);\n\n  return targetAsset ? (\n    <div style={{ textAlign: \"center\" }}>\n      <Typography variant=\"subtitle2\">Recipient Address:</Typography>\n      <Typography component=\"div\">\n        <SmartAddress\n          chainId={CHAIN_ID_SOLANA}\n          address={base58TargetAddress}\n          variant=\"h6\"\n          extraContent={\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              onClick={handleForceCreateClick}\n              disabled={!targetAsset || !base58TargetAddress || !solPK}\n            >\n              Force Create Account\n            </Button>\n          }\n        />\n      </Typography>\n      {associatedAccountExists ? null : (\n        <SolanaCreateAssociatedAddress\n          mintAddress={targetAsset}\n          readableTargetAddress={base58TargetAddress}\n          associatedAccountExists={associatedAccountExists}\n          setAssociatedAccountExists={setAssociatedAccountExists}\n        />\n      )}\n    </div>\n  ) : null;\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport {\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n  selectTransferIsTBTC,\n} from \"../../store/selectors\";\nimport { THRESHOLD_TBTC_CONTRACTS, getEvmChainId } from \"../../utils/consts\";\nimport {\n  ethTokenToParsedTokenAccount,\n  getEthereumToken,\n} from \"../../utils/ethereum\";\n\nconst useStyles = makeStyles((theme) => ({\n  addButton: {\n    display: \"block\",\n    margin: `${theme.spacing(1)}px auto 0px`,\n  },\n}));\n\nexport default function AddToMetamask() {\n  const classes = useStyles();\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const targetChain = useSelector(selectTransferTargetChain);\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n\n  const isTBTC = useSelector(selectTransferIsTBTC);\n  const isAddingTBTC =\n    isTBTC &&\n    THRESHOLD_TBTC_CONTRACTS[targetChain] &&\n    THRESHOLD_TBTC_CONTRACTS[sourceChain];\n  const tbtcAsset = THRESHOLD_TBTC_CONTRACTS[targetChain];\n\n  const { provider, signerAddress, evmChainId, wallet } =\n    useEthereumProvider(targetChain);\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const handleClick = useCallback(() => {\n    if (provider && targetAsset && signerAddress && hasCorrectEvmNetwork) {\n      (async () => {\n        try {\n          const token = await getEthereumToken(targetAsset, provider);\n          const { symbol, decimals } = await ethTokenToParsedTokenAccount(\n            token,\n            signerAddress\n          );\n          const ethereum = (await detectEthereumProvider()) as any;\n          ethereum.request({\n            method: \"wallet_watchAsset\",\n            params: {\n              type: \"ERC20\", // In the future, other standards will be supported\n              options: {\n                address: isAddingTBTC ? tbtcAsset : targetAsset, // The address of the token contract\n                symbol: (\n                  symbol ||\n                  sourceParsedTokenAccount?.symbol ||\n                  \"wh\"\n                ).substr(0, 5), // A ticker symbol or shorthand, up to 5 characters\n                decimals, // The number of token decimals\n                // image: string; // A string url of the token logo\n              },\n            },\n          });\n        } catch (e) {\n          console.error(e);\n        }\n      })();\n    }\n  }, [\n    provider,\n    targetAsset,\n    signerAddress,\n    hasCorrectEvmNetwork,\n    isAddingTBTC,\n    tbtcAsset,\n    sourceParsedTokenAccount?.symbol,\n  ]);\n  return provider &&\n    signerAddress &&\n    targetAsset &&\n    isEVMChain(targetChain) &&\n    hasCorrectEvmNetwork ? (\n    <Button\n      onClick={handleClick}\n      size=\"small\"\n      variant=\"outlined\"\n      className={classes.addButton}\n    >\n      {`Add to ${wallet?.getName() || \"wallet\"}`}\n    </Button>\n  ) : null;\n}\n","import { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { Launch } from \"@material-ui/icons\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { useSelector } from \"react-redux\";\nimport useMarketsMap from \"../../hooks/useMarketsMap\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport {\n  selectSolanaTokenMap,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { JUPITER_SWAP_BASE_URL } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    marginTop: theme.spacing(1),\n  },\n  button: {\n    margin: theme.spacing(0.5, 0.5),\n  },\n}));\n\nfunction getJupiterSwapUrl(\n  link: string,\n  targetAsset: string,\n  tokenMap: DataWrapper<TokenInfo[]>\n) {\n  if (!tokenMap.error && !tokenMap.isFetching && tokenMap.data) {\n    const tokenInfo = tokenMap.data.find((value) => {\n      return value.address === targetAsset;\n    });\n    if (tokenInfo) {\n      const sourceSymbol = tokenInfo.symbol;\n      if (sourceSymbol) {\n        const targetSymbol = sourceSymbol === \"UST\" ? \"SOL\" : \"UST\";\n        return `${JUPITER_SWAP_BASE_URL}/${sourceSymbol}-${targetSymbol}`;\n      }\n    }\n  }\n  return link;\n}\n\nexport default function FeaturedMarkets() {\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const solanaTokenMap = useSelector(selectSolanaTokenMap);\n  const { data: marketsData } = useMarketsMap(true);\n  const classes = useStyles();\n\n  if (\n    !sourceAsset ||\n    !targetAsset ||\n    !marketsData ||\n    !marketsData.markets ||\n    !marketsData.tokenMarkets\n  ) {\n    return null;\n  }\n\n  const tokenMarkets =\n    marketsData.tokenMarkets[sourceChain]?.[targetChain]?.[sourceAsset];\n  if (!tokenMarkets) {\n    return null;\n  }\n\n  const tokenMarketButtons = [];\n  for (const market of tokenMarkets.markets) {\n    const marketInfo = marketsData.markets[market];\n    if (marketInfo) {\n      const url =\n        market === \"jupiter\"\n          ? getJupiterSwapUrl(marketInfo.link, sourceAsset, solanaTokenMap)\n          : marketInfo.link;\n      tokenMarketButtons.push(\n        <Button\n          key={market}\n          size=\"small\"\n          variant=\"outlined\"\n          color=\"secondary\"\n          startIcon={<Launch />}\n          href={url}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.button}\n        >\n          {marketInfo.name}\n        </Button>\n      );\n    }\n  }\n\n  return tokenMarketButtons.length ? (\n    <div style={{ textAlign: \"center\" }}>\n      <Typography\n        variant=\"subtitle2\"\n        gutterBottom\n        className={classes.description}\n      >\n        Featured markets\n      </Typography>\n      {tokenMarketButtons}\n    </div>\n  ) : null;\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectTransferRedeemTx,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/transferSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\nimport AddToMetamask from \"./AddToMetamask\";\nimport FeaturedMarkets from \"./FeaturedMarkets\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nexport default function RedeemPreview({\n  overrideExplainerString,\n}: {\n  overrideExplainerString?: string;\n}) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const redeemTx = useSelector(selectTransferRedeemTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n\n  const explainerString =\n    overrideExplainerString ||\n    \"Success! The redeem transaction was submitted. The tokens will become available once the transaction confirms.\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle1\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {redeemTx ? <ShowTx chainId={targetChain} tx={redeemTx} /> : null}\n      <AddToMetamask />\n      <FeaturedMarkets />\n      <ButtonWithLoader onClick={handleResetClick}>\n        Transfer More Tokens!\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  CHAIN_ID_ACALA,\n  CHAIN_ID_ARBITRUM,\n  CHAIN_ID_AURORA,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_FANTOM,\n  CHAIN_ID_KARURA,\n  CHAIN_ID_KLAYTN,\n  CHAIN_ID_MOONBEAM,\n  CHAIN_ID_NEON,\n  CHAIN_ID_OASIS,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  isEVMChain,\n  isTerraChain,\n  WSOL_ADDRESS,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Button,\n  Checkbox,\n  CircularProgress,\n  FormControlLabel,\n  Link,\n  makeStyles,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useGetIsTransferCompleted from \"../../hooks/useGetIsTransferCompleted\";\nimport { useHandleRedeem } from \"../../hooks/useHandleRedeem\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectTransferIsRecovery,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n  selectTransferUseRelayer,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/transferSlice\";\nimport {\n  ARBWETH_ADDRESS,\n  CHAINS_BY_ID,\n  CLUSTER,\n  getHowToAddTokensToWalletUrl,\n  WAVAX_ADDRESS,\n  WBNB_ADDRESS,\n  WETH_ADDRESS,\n  WETH_AURORA_ADDRESS,\n  WFTM_ADDRESS,\n  WGLMR_ADDRESS,\n  WKLAY_ADDRESS,\n  WMATIC_ADDRESS,\n  WNEON_ADDRESS,\n  WROSE_ADDRESS,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport SmartAddress from \"../SmartAddress\";\nimport { SolanaCreateAssociatedAddressAlternate } from \"../SolanaCreateAssociatedAddress\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\nimport AddToMetamask from \"./AddToMetamask\";\nimport RedeemPreview from \"./RedeemPreview\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  centered: {\n    margin: theme.spacing(4, 0, 2),\n    textAlign: \"center\",\n  },\n}));\n\nfunction Redeem() {\n  const {\n    handleClick,\n    handleNativeClick,\n    handleAcalaRelayerRedeemClick,\n    disabled,\n    showLoader,\n  } = useHandleRedeem();\n  const useRelayer = useSelector(selectTransferUseRelayer);\n  const [manualRedeem, setManualRedeem] = useState(!useRelayer);\n  const handleManuallyRedeemClick = useCallback(() => {\n    setManualRedeem(true);\n  }, []);\n  const handleSwitchToRelayViewClick = useCallback(() => {\n    if (useRelayer) {\n      setManualRedeem(false);\n    }\n  }, [useRelayer]);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetIsAcala =\n    targetChain === CHAIN_ID_ACALA || targetChain === CHAIN_ID_KARURA;\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const isRecovery = useSelector(selectTransferIsRecovery);\n  const { isTransferCompletedLoading, isTransferCompleted } =\n    useGetIsTransferCompleted(\n      useRelayer ? false : true,\n      useRelayer ? 5000 : undefined\n    );\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  //TODO better check, probably involving a hook & the VAA\n  const isEthNative =\n    targetChain === CHAIN_ID_ETH &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WETH_ADDRESS.toLowerCase();\n  const isBscNative =\n    targetChain === CHAIN_ID_BSC &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WBNB_ADDRESS.toLowerCase();\n  const isPolygonNative =\n    targetChain === CHAIN_ID_POLYGON &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WMATIC_ADDRESS.toLowerCase();\n  const isAvaxNative =\n    targetChain === CHAIN_ID_AVAX &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WAVAX_ADDRESS.toLowerCase();\n  const isOasisNative =\n    targetChain === CHAIN_ID_OASIS &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WROSE_ADDRESS.toLowerCase();\n  const isAuroraNative =\n    targetChain === CHAIN_ID_AURORA &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WETH_AURORA_ADDRESS.toLowerCase();\n  const isFantomNative =\n    targetChain === CHAIN_ID_FANTOM &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WFTM_ADDRESS.toLowerCase();\n  const isKlaytnNative =\n    targetChain === CHAIN_ID_KLAYTN &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WKLAY_ADDRESS.toLowerCase();\n  const isNeonNative =\n    targetChain === CHAIN_ID_NEON &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WNEON_ADDRESS.toLowerCase();\n  const isMoonbeamNative =\n    targetChain === CHAIN_ID_MOONBEAM &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WGLMR_ADDRESS.toLowerCase();\n  const isArbitrumNative =\n    targetChain === CHAIN_ID_ARBITRUM &&\n    targetAsset &&\n    targetAsset.toLowerCase() === ARBWETH_ADDRESS.toLowerCase();\n  const isSolNative =\n    targetChain === CHAIN_ID_SOLANA &&\n    targetAsset &&\n    targetAsset === WSOL_ADDRESS;\n  const isNativeEligible =\n    isEthNative ||\n    isBscNative ||\n    isPolygonNative ||\n    isAvaxNative ||\n    isOasisNative ||\n    isAuroraNative ||\n    isFantomNative ||\n    isKlaytnNative ||\n    isNeonNative ||\n    isMoonbeamNative ||\n    isArbitrumNative ||\n    isSolNative;\n  const [useNativeRedeem, setUseNativeRedeem] = useState(true);\n  const toggleNativeRedeem = useCallback(() => {\n    setUseNativeRedeem(!useNativeRedeem);\n  }, [useNativeRedeem]);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n  const howToAddTokensUrl = getHowToAddTokensToWalletUrl(targetChain);\n\n  const relayerContent = (\n    <>\n      {isEVMChain(targetChain) && !isTransferCompleted && !targetIsAcala ? (\n        <KeyAndBalance chainId={targetChain} />\n      ) : null}\n\n      {!isReady &&\n      isEVMChain(targetChain) &&\n      !isTransferCompleted &&\n      !targetIsAcala ? (\n        <Typography className={classes.centered}>\n          {\"Please connect your wallet to check for transfer completion.\"}\n        </Typography>\n      ) : null}\n\n      {(!isEVMChain(targetChain) || isReady) &&\n      !isTransferCompleted &&\n      !targetIsAcala ? (\n        <div className={classes.centered}>\n          <CircularProgress style={{ marginBottom: 16 }} />\n          <Typography>\n            {\"Waiting for a relayer to process your transfer.\"}\n          </Typography>\n          <Tooltip title=\"Your fees will be refunded on the target chain\">\n            <Button\n              onClick={handleManuallyRedeemClick}\n              size=\"small\"\n              variant=\"outlined\"\n              style={{ marginTop: 16 }}\n            >\n              Manually redeem instead\n            </Button>\n          </Tooltip>\n        </div>\n      ) : null}\n\n      {/* TODO: handle recovery */}\n      {targetIsAcala && !isTransferCompleted ? (\n        <div className={classes.centered}>\n          <ButtonWithLoader\n            disabled={disabled}\n            onClick={handleAcalaRelayerRedeemClick}\n            showLoader={showLoader}\n          >\n            <span>\n              Redeem ({CHAINS_BY_ID[targetChain].name} pays gas for you\n              &#127881;)\n            </span>\n          </ButtonWithLoader>\n          <Button\n            onClick={handleManuallyRedeemClick}\n            size=\"small\"\n            variant=\"outlined\"\n            style={{ marginTop: 16 }}\n          >\n            Manually redeem instead\n          </Button>\n        </div>\n      ) : null}\n\n      {isTransferCompleted ? (\n        <RedeemPreview overrideExplainerString=\"Success! Your transfer is complete.\" />\n      ) : null}\n    </>\n  );\n\n  const nonRelayContent = (\n    <>\n      <KeyAndBalance chainId={targetChain} />\n      {isTerraChain(targetChain) && (\n        <TerraFeeDenomPicker disabled={disabled} chainId={targetChain} />\n      )}\n      {isNativeEligible && (\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={useNativeRedeem}\n              onChange={toggleNativeRedeem}\n              color=\"primary\"\n            />\n          }\n          label=\"Automatically unwrap to native currency\"\n        />\n      )}\n      {targetChain === CHAIN_ID_SOLANA && CLUSTER === \"mainnet\" && (\n        <SolanaTPSWarning />\n      )}\n      {targetChain === CHAIN_ID_SOLANA ? (\n        <SolanaCreateAssociatedAddressAlternate />\n      ) : null}\n\n      <>\n        {\" \"}\n        <ButtonWithLoader\n          //TODO disable when the associated token account is confirmed to not exist\n          disabled={\n            !isReady ||\n            disabled ||\n            (isRecovery && (isTransferCompletedLoading || isTransferCompleted))\n          }\n          onClick={\n            isNativeEligible && useNativeRedeem\n              ? handleNativeClick\n              : handleClick\n          }\n          showLoader={showLoader || (isRecovery && isTransferCompletedLoading)}\n          error={statusMessage}\n        >\n          Redeem\n        </ButtonWithLoader>\n        <WaitingForWalletMessage />\n      </>\n\n      {useRelayer && !isTransferCompleted ? (\n        <div className={classes.centered}>\n          <Button\n            onClick={handleSwitchToRelayViewClick}\n            size=\"small\"\n            variant=\"outlined\"\n            style={{ marginTop: 16 }}\n          >\n            Return to relayer view\n          </Button>\n        </div>\n      ) : null}\n\n      {isRecovery && isReady && isTransferCompleted ? (\n        <>\n          <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n            These tokens have already been redeemed.{\" \"}\n            {!isEVMChain(targetChain) && howToAddTokensUrl ? (\n              <Link\n                href={howToAddTokensUrl}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Click here to see how to add them to your wallet.\n              </Link>\n            ) : null}\n          </Alert>\n          {targetAsset ? (\n            <>\n              <span>Token Address:</span>\n              <SmartAddress\n                chainId={targetChain}\n                address={targetAsset || undefined}\n                isAsset\n              />\n            </>\n          ) : null}\n          {isEVMChain(targetChain) ? <AddToMetamask /> : null}\n          <ButtonWithLoader onClick={handleResetClick}>\n            Transfer More Tokens!\n          </ButtonWithLoader>\n        </>\n      ) : null}\n    </>\n  );\n\n  return (\n    <>\n      <StepDescription>Receive the tokens on the target chain</StepDescription>\n      {manualRedeem ? nonRelayContent : relayerContent}\n    </>\n  );\n}\n\nexport default Redeem;\n","import {\n  ChainId,\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_KLAYTN,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_XPLA,\n  createNonce,\n  getEmitterAddressAlgorand,\n  getEmitterAddressEth,\n  getEmitterAddressInjective,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  getEmitterAddressXpla,\n  hexToUint8Array,\n  isEVMChain,\n  isTerraChain,\n  parseSequenceFromLogAlgorand,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogInjective,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  parseSequenceFromLogXpla,\n  TerraChainId,\n  transferFromAlgorand,\n  transferFromEth,\n  transferFromEthNative,\n  transferFromInjective,\n  transferFromSolana,\n  transferFromTerra,\n  transferFromXpla,\n  transferNativeSol,\n  uint8ArrayToHex,\n  transferFromSui,\n  CHAIN_ID_SUI,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n} from \"@certusone/wormhole-sdk\";\nimport { transferTokens } from \"@certusone/wormhole-sdk/lib/esm/aptos/api/tokenBridge\";\nimport { CHAIN_ID_NEAR } from \"@certusone/wormhole-sdk/lib/esm\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport algosdk from \"algosdk\";\nimport { Types } from \"aptos\";\nimport { BigNumber, Contract, ContractReceipt, Signer } from \"ethers\";\nimport { arrayify, parseUnits, zeroPad } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useAlgorandWallet } from \"../contexts/AlgorandWalletContext\";\nimport { useAptosContext } from \"../contexts/AptosWalletContext\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useNearContext } from \"../contexts/NearWalletContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTerraFeeDenom,\n  selectTransferAmount,\n  selectTransferIsSendComplete,\n  selectTransferIsSending,\n  selectTransferIsTBTC,\n  selectTransferIsTargetComplete,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferRelayerFee,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport {\n  setIsSending,\n  setIsVAAPending,\n  setSignedVAAHex,\n  setTransferTx,\n} from \"../store/transferSlice\";\nimport { signSendAndConfirmAlgorand } from \"../utils/algorand\";\nimport {\n  getAptosClient,\n  getEmitterAddressAndSequenceFromResult,\n  waitForSignAndSubmitTransaction,\n} from \"../utils/aptos\";\nimport {\n  ALGORAND_BRIDGE_ID,\n  ALGORAND_HOST,\n  ALGORAND_TOKEN_BRIDGE_ID,\n  getBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  NATIVE_NEAR_PLACEHOLDER,\n  NEAR_CORE_BRIDGE_ACCOUNT,\n  NEAR_TOKEN_BRIDGE_ACCOUNT,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  THRESHOLD_ARBITER_FEE,\n  THRESHOLD_NONCE,\n  THRESHOLD_GATEWAYS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport {\n  getEmitterAddressNear,\n  makeNearAccount,\n  parseSequenceFromLogNear,\n  signAndSendTransactions,\n  transferNearFromNear,\n  transferTokenFromNear,\n} from \"../utils/near\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\nimport useTransferTargetAddressHex from \"./useTransferTargetAddress\";\nimport { postWithFeesXpla, waitForXplaExecution } from \"../utils/xpla\";\nimport { broadcastInjectiveTx } from \"../utils/injective\";\nimport { useInjectiveContext } from \"../contexts/InjectiveWalletContext\";\nimport { AlgorandWallet } from \"@xlabs-libs/wallet-aggregator-algorand\";\nimport { SolanaWallet } from \"@xlabs-libs/wallet-aggregator-solana\";\nimport { AptosWallet } from \"@xlabs-libs/wallet-aggregator-aptos\";\nimport { InjectiveWallet } from \"@xlabs-libs/wallet-aggregator-injective\";\nimport { NearWallet } from \"@xlabs-libs/wallet-aggregator-near\";\nimport { useTerraWallet } from \"../contexts/TerraWalletContext\";\nimport { TerraWallet } from \"@xlabs-libs/wallet-aggregator-terra\";\nimport { useXplaWallet } from \"../contexts/XplaWalletContext\";\nimport { XplaWallet } from \"@xlabs-libs/wallet-aggregator-xpla\";\nimport { SuiWallet } from \"@xlabs-libs/wallet-aggregator-sui\";\nimport { getSuiProvider } from \"../utils/sui\";\nimport {\n  getEmitterAddressAndSequenceFromResponseSui,\n  getOriginalPackageId,\n} from \"@certusone/wormhole-sdk/lib/cjs/sui\";\nimport { useSuiWallet } from \"../contexts/SuiWalletContext\";\nimport { ThresholdL2WormholeGateway } from \"../utils/ThresholdL2WormholeGateway\";\n\ntype AdditionalPayloadOverride = {\n  receivingContract: Uint8Array;\n  payload: Uint8Array;\n};\ntype MaybeAdditionalPayloadFn = () => AdditionalPayloadOverride | null;\n\nasync function fetchSignedVAA(\n  chainId: ChainId,\n  emitterAddress: string,\n  sequence: string,\n  enqueueSnackbar: any,\n  dispatch: any\n) {\n  enqueueSnackbar(null, {\n    content: <Alert severity=\"info\">Fetching VAA</Alert>,\n  });\n  const { vaaBytes, isPending } = await getSignedVAAWithRetry(\n    chainId,\n    emitterAddress,\n    sequence\n  );\n  if (vaaBytes !== undefined) {\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    dispatch(setIsVAAPending(false));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } else if (isPending) {\n    dispatch(setIsVAAPending(isPending));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"warning\">VAA is Pending</Alert>,\n    });\n  } else {\n    throw new Error(\"Error retrieving VAA info\");\n  }\n}\n\nfunction handleError(e: any, enqueueSnackbar: any, dispatch: any) {\n  console.error(e);\n  enqueueSnackbar(null, {\n    content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n  });\n  dispatch(setIsSending(false));\n  dispatch(setIsVAAPending(false));\n}\n\nasync function algo(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: AlgorandWallet,\n  tokenAddress: string,\n  decimals: number,\n  amount: string,\n  recipientChain: ChainId,\n  recipientAddress: Uint8Array,\n  chainId: ChainId,\n  maybeAdditionalPayload: MaybeAdditionalPayloadFn,\n  relayerFee?: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const baseAmountParsed = parseUnits(amount, decimals);\n    const feeParsed = parseUnits(relayerFee || \"0\", decimals);\n    const transferAmountParsed = baseAmountParsed.add(feeParsed);\n    const additionalPayload = maybeAdditionalPayload();\n    const algodClient = new algosdk.Algodv2(\n      ALGORAND_HOST.algodToken,\n      ALGORAND_HOST.algodServer,\n      ALGORAND_HOST.algodPort\n    );\n    const txs = await transferFromAlgorand(\n      algodClient,\n      ALGORAND_TOKEN_BRIDGE_ID,\n      ALGORAND_BRIDGE_ID,\n      wallet.getAddress()!,\n      BigInt(tokenAddress),\n      transferAmountParsed.toBigInt(),\n      uint8ArrayToHex(additionalPayload?.receivingContract || recipientAddress),\n      recipientChain,\n      feeParsed.toBigInt(),\n      additionalPayload?.payload\n    );\n    const result = await signSendAndConfirmAlgorand(wallet, algodClient, txs);\n    const sequence = parseSequenceFromLogAlgorand(result);\n    dispatch(\n      setTransferTx({\n        id: txs[txs.length - 1].tx.txID(),\n        block: result[\"confirmed-round\"],\n      })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const emitterAddress = getEmitterAddressAlgorand(ALGORAND_TOKEN_BRIDGE_ID);\n    await fetchSignedVAA(\n      chainId,\n      emitterAddress,\n      sequence,\n      enqueueSnackbar,\n      dispatch\n    );\n  } catch (e) {\n    handleError(e, enqueueSnackbar, dispatch);\n  }\n}\n\nasync function aptos(\n  dispatch: any,\n  enqueueSnackbar: any,\n  tokenAddress: string,\n  decimals: number,\n  amount: string,\n  recipientChain: ChainId,\n  recipientAddress: Uint8Array,\n  chainId: ChainId,\n  wallet: AptosWallet,\n  maybeAdditionalPayload: MaybeAdditionalPayloadFn,\n  relayerFee?: string\n) {\n  dispatch(setIsSending(true));\n  const tokenBridgeAddress = getTokenBridgeAddressForChain(CHAIN_ID_APTOS);\n  try {\n    const baseAmountParsed = parseUnits(amount, decimals);\n    const feeParsed = parseUnits(relayerFee || \"0\", decimals);\n    const transferAmountParsed = baseAmountParsed.add(feeParsed);\n\n    const additionalPayload = maybeAdditionalPayload();\n    if (additionalPayload?.payload) {\n      throw new Error(\"Transfer with payload is unsupported on Aptos\");\n    }\n\n    const transferPayload = transferTokens(\n      tokenBridgeAddress,\n      tokenAddress,\n      transferAmountParsed.toString(),\n      recipientChain,\n      recipientAddress,\n      feeParsed.toString(),\n      createNonce().readUInt32LE(0)\n    );\n    const hash = await waitForSignAndSubmitTransaction(transferPayload, wallet);\n    dispatch(setTransferTx({ id: hash, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const result = (await getAptosClient().waitForTransactionWithResult(\n      hash\n    )) as Types.UserTransaction;\n    const { emitterAddress, sequence } =\n      getEmitterAddressAndSequenceFromResult(result);\n    await fetchSignedVAA(\n      chainId,\n      emitterAddress,\n      sequence,\n      enqueueSnackbar,\n      dispatch\n    );\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\n// Threshold normalize amounts\nfunction normalizeAmount(amount: BigNumber, decimals: number): BigNumber {\n  if (decimals > 8) {\n    amount = amount.div(BigNumber.from(10).pow(decimals - 8));\n  }\n  return amount;\n}\n\nfunction deNormalizeAmount(amount: BigNumber, decimals: number): BigNumber {\n  if (decimals > 8) {\n    amount = amount.mul(BigNumber.from(10).pow(decimals - 8));\n  }\n  return amount;\n}\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  tokenAddress: string,\n  decimals: number,\n  amount: string,\n  recipientChain: ChainId,\n  recipientAddress: Uint8Array,\n  isNative: boolean,\n  chainId: ChainId,\n  isTBTC: boolean,\n  maybeAdditionalPayload: MaybeAdditionalPayloadFn,\n  relayerFee?: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const baseAmountParsed = parseUnits(amount, decimals);\n    const feeParsed = parseUnits(relayerFee || \"0\", decimals);\n    const transferAmountParsed = baseAmountParsed.add(feeParsed);\n\n    let receipt: ContractReceipt;\n\n    if (isTBTC && THRESHOLD_GATEWAYS[chainId]) {\n      const sourceAddress = THRESHOLD_GATEWAYS[chainId].toLowerCase();\n\n      const L2WormholeGateway = new Contract(\n        sourceAddress,\n        ThresholdL2WormholeGateway,\n        signer\n      );\n\n      const amountNormalizeAmount = deNormalizeAmount(\n        normalizeAmount(transferAmountParsed, decimals),\n        decimals\n      );\n\n      const estimateGas = await L2WormholeGateway.estimateGas.sendTbtc(\n        amountNormalizeAmount,\n        recipientChain,\n        recipientAddress,\n        THRESHOLD_ARBITER_FEE,\n        THRESHOLD_NONCE\n      );\n\n      // We increase the gas limit estimation here by a factor of 10% to account for\n      // some faulty public JSON-RPC endpoints.\n      const gasLimit = estimateGas.mul(1100).div(1000);\n      const overrides = {\n        gasLimit,\n        // We use the legacy tx envelope here to avoid triggering gas price autodetection using EIP1559 for polygon.\n        // EIP1559 is not actually implemented in polygon. The node is only API compatible but this breaks some clients\n        // like ethers when choosing fees automatically.\n        ...(chainId === CHAIN_ID_POLYGON && { type: 0 }),\n      };\n\n      const tx = await L2WormholeGateway.sendTbtc(\n        amountNormalizeAmount,\n        recipientChain,\n        recipientAddress,\n        THRESHOLD_ARBITER_FEE,\n        THRESHOLD_NONCE,\n        overrides\n      );\n\n      receipt = await tx.wait();\n    } else {\n      // Klaytn requires specifying gasPrice\n      const overrides =\n        chainId === CHAIN_ID_KLAYTN\n          ? { gasPrice: (await signer.getGasPrice()).toString() }\n          : {};\n\n      const additionalPayload = maybeAdditionalPayload();\n\n      receipt = isNative\n        ? await transferFromEthNative(\n            getTokenBridgeAddressForChain(chainId),\n            signer,\n            transferAmountParsed,\n            recipientChain,\n            additionalPayload?.receivingContract || recipientAddress,\n            feeParsed,\n            overrides,\n            additionalPayload?.payload\n          )\n        : await transferFromEth(\n            getTokenBridgeAddressForChain(chainId),\n            signer,\n            tokenAddress,\n            transferAmountParsed,\n            recipientChain,\n            additionalPayload?.receivingContract || recipientAddress,\n            feeParsed,\n            overrides,\n            additionalPayload?.payload\n          );\n    }\n\n    dispatch(\n      setTransferTx({\n        id: receipt.transactionHash,\n        block: receipt.blockNumber,\n      })\n    );\n\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n\n    const emitterAddress = getEmitterAddressEth(\n      getTokenBridgeAddressForChain(chainId)\n    );\n\n    await fetchSignedVAA(\n      chainId,\n      emitterAddress,\n      sequence,\n      enqueueSnackbar,\n      dispatch\n    );\n  } catch (e) {\n    handleError(e, enqueueSnackbar, dispatch);\n  }\n}\n\nasync function near(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: NearWallet,\n  senderAddr: string,\n  tokenAddress: string,\n  decimals: number,\n  amount: string,\n  recipientChain: ChainId,\n  recipientAddress: Uint8Array,\n  chainId: ChainId,\n  maybeAdditionalPayload: MaybeAdditionalPayloadFn,\n  relayerFee?: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const baseAmountParsed = parseUnits(amount, decimals);\n    const feeParsed = parseUnits(relayerFee || \"0\", decimals);\n    const transferAmountParsed = baseAmountParsed.add(feeParsed);\n    const additionalPayload = maybeAdditionalPayload();\n    const account = await makeNearAccount(senderAddr);\n    const msgs =\n      tokenAddress === NATIVE_NEAR_PLACEHOLDER\n        ? await transferNearFromNear(\n            account,\n            NEAR_CORE_BRIDGE_ACCOUNT,\n            NEAR_TOKEN_BRIDGE_ACCOUNT,\n            transferAmountParsed.toBigInt(),\n            additionalPayload?.receivingContract || recipientAddress,\n            recipientChain,\n            feeParsed.toBigInt(),\n            additionalPayload?.payload\n              ? uint8ArrayToHex(additionalPayload.payload)\n              : undefined\n          )\n        : await transferTokenFromNear(\n            account,\n            NEAR_CORE_BRIDGE_ACCOUNT,\n            NEAR_TOKEN_BRIDGE_ACCOUNT,\n            tokenAddress,\n            transferAmountParsed.toBigInt(),\n            additionalPayload?.receivingContract || recipientAddress,\n            recipientChain,\n            feeParsed.toBigInt(),\n            additionalPayload?.payload\n              ? uint8ArrayToHex(additionalPayload.payload)\n              : undefined\n          );\n    const receipt = await signAndSendTransactions(account, wallet, msgs);\n    const sequence = parseSequenceFromLogNear(receipt);\n    dispatch(\n      setTransferTx({\n        id: receipt.transaction_outcome.id,\n        block: 0,\n      })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const emitterAddress = getEmitterAddressNear(NEAR_TOKEN_BRIDGE_ACCOUNT);\n    await fetchSignedVAA(\n      chainId,\n      emitterAddress,\n      sequence,\n      enqueueSnackbar,\n      dispatch\n    );\n  } catch (e) {\n    handleError(e, enqueueSnackbar, dispatch);\n  }\n}\n\nasync function xpla(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: XplaWallet,\n  asset: string,\n  amount: string,\n  decimals: number,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  maybeAdditionalPayload: MaybeAdditionalPayloadFn,\n  relayerFee?: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const baseAmountParsed = parseUnits(amount, decimals);\n    const feeParsed = parseUnits(relayerFee || \"0\", decimals);\n    const transferAmountParsed = baseAmountParsed.add(feeParsed);\n    const additionalPayload = maybeAdditionalPayload();\n    const tokenBridgeAddress = getTokenBridgeAddressForChain(CHAIN_ID_XPLA);\n    const msgs = await transferFromXpla(\n      wallet.getAddress()!,\n      tokenBridgeAddress,\n      asset,\n      transferAmountParsed.toString(),\n      targetChain,\n      additionalPayload?.receivingContract || targetAddress,\n      feeParsed.toString(),\n      additionalPayload?.payload\n    );\n\n    const result = await postWithFeesXpla(\n      wallet,\n      msgs,\n      \"Wormhole - Initiate Transfer\"\n    );\n\n    const info = await waitForXplaExecution(result);\n    dispatch(setTransferTx({ id: info.txhash, block: info.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogXpla(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressXpla(tokenBridgeAddress);\n    await fetchSignedVAA(\n      CHAIN_ID_XPLA,\n      emitterAddress,\n      sequence,\n      enqueueSnackbar,\n      dispatch\n    );\n  } catch (e) {\n    handleError(e, enqueueSnackbar, dispatch);\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: SolanaWallet,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  fromAddress: string,\n  mintAddress: string,\n  amount: string,\n  decimals: number,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  isNative: boolean,\n  maybeAdditionalPayload: MaybeAdditionalPayloadFn,\n  originAddressStr?: string,\n  originChain?: ChainId,\n  relayerFee?: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const baseAmountParsed = parseUnits(amount, decimals);\n    const feeParsed = parseUnits(relayerFee || \"0\", decimals);\n    const transferAmountParsed = baseAmountParsed.add(feeParsed);\n    const additionalPayload = maybeAdditionalPayload();\n    const originAddress = originAddressStr\n      ? zeroPad(hexToUint8Array(originAddressStr), 32)\n      : undefined;\n    const promise = isNative\n      ? transferNativeSol(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          transferAmountParsed.toBigInt(),\n          additionalPayload?.receivingContract || targetAddress,\n          targetChain,\n          feeParsed.toBigInt(),\n          additionalPayload?.payload\n        )\n      : transferFromSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          fromAddress,\n          mintAddress,\n          transferAmountParsed.toBigInt(),\n          additionalPayload?.receivingContract || targetAddress,\n          targetChain,\n          originAddress,\n          originChain,\n          undefined,\n          feeParsed.toBigInt(),\n          additionalPayload?.payload\n        );\n    const transaction = await promise;\n    const txid = await signSendAndConfirm(wallet, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setTransferTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    await fetchSignedVAA(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence,\n      enqueueSnackbar,\n      dispatch\n    );\n  } catch (e) {\n    handleError(e, enqueueSnackbar, dispatch);\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: TerraWallet,\n  asset: string,\n  amount: string,\n  decimals: number,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  feeDenom: string,\n  chainId: TerraChainId,\n  maybeAdditionalPayload: MaybeAdditionalPayloadFn,\n  relayerFee?: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const baseAmountParsed = parseUnits(amount, decimals);\n    const feeParsed = parseUnits(relayerFee || \"0\", decimals);\n    const transferAmountParsed = baseAmountParsed.add(feeParsed);\n    const additionalPayload = maybeAdditionalPayload();\n    const tokenBridgeAddress = getTokenBridgeAddressForChain(chainId);\n    const msgs = await transferFromTerra(\n      wallet.getAddress()!,\n      tokenBridgeAddress,\n      asset,\n      transferAmountParsed.toString(),\n      targetChain,\n      additionalPayload?.receivingContract || targetAddress,\n      feeParsed.toString(),\n      additionalPayload?.payload\n    );\n\n    const result = await postWithFees(\n      wallet,\n      msgs,\n      \"Wormhole - Initiate Transfer\",\n      [feeDenom],\n      chainId\n    );\n\n    const info = await waitForTerraExecution(result, chainId);\n    dispatch(setTransferTx({ id: info.txhash, block: info.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(tokenBridgeAddress);\n    await fetchSignedVAA(\n      chainId,\n      emitterAddress,\n      sequence,\n      enqueueSnackbar,\n      dispatch\n    );\n  } catch (e) {\n    handleError(e, enqueueSnackbar, dispatch);\n  }\n}\n\nasync function injective(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: InjectiveWallet,\n  walletAddress: string,\n  asset: string,\n  amount: string,\n  decimals: number,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  maybeAdditionalPayload: MaybeAdditionalPayloadFn,\n  relayerFee?: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const baseAmountParsed = parseUnits(amount, decimals);\n    const feeParsed = parseUnits(relayerFee || \"0\", decimals);\n    const transferAmountParsed = baseAmountParsed.add(feeParsed);\n    const additionalPayload = maybeAdditionalPayload();\n    const tokenBridgeAddress =\n      getTokenBridgeAddressForChain(CHAIN_ID_INJECTIVE);\n    const msgs = await transferFromInjective(\n      walletAddress,\n      tokenBridgeAddress,\n      asset,\n      transferAmountParsed.toString(),\n      targetChain,\n      additionalPayload?.receivingContract || targetAddress,\n      feeParsed.toString(),\n      additionalPayload?.payload\n    );\n    const tx = await broadcastInjectiveTx(\n      wallet,\n      walletAddress,\n      msgs,\n      \"Wormhole - Initiate Transfer\"\n    );\n    dispatch(setTransferTx({ id: tx.txHash, block: tx.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogInjective(tx);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressInjective(tokenBridgeAddress);\n    await fetchSignedVAA(\n      CHAIN_ID_INJECTIVE,\n      emitterAddress,\n      sequence,\n      enqueueSnackbar,\n      dispatch\n    );\n  } catch (e) {\n    handleError(e, enqueueSnackbar, dispatch);\n  }\n}\n\nasync function sui(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: SuiWallet,\n  asset: string,\n  amount: string,\n  decimals: number,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  maybeAdditionalPayload: MaybeAdditionalPayloadFn,\n  relayerFee?: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const address = wallet.getAddress();\n    if (!address) {\n      throw new Error(\"No wallet address\");\n    }\n    const baseAmountParsed = parseUnits(amount, decimals);\n    const feeParsed = parseUnits(relayerFee || \"0\", decimals);\n    const transferAmountParsed = baseAmountParsed.add(feeParsed);\n    const additionalPayload = maybeAdditionalPayload();\n    const provider = getSuiProvider();\n    // TODO: handle pagination\n    const coins = (\n      await provider.getCoins({\n        owner: address,\n        coinType: asset,\n      })\n    ).data;\n    const tx = await transferFromSui(\n      provider,\n      getBridgeAddressForChain(CHAIN_ID_SUI),\n      getTokenBridgeAddressForChain(CHAIN_ID_SUI),\n      coins,\n      asset,\n      transferAmountParsed.toBigInt(),\n      targetChain,\n      additionalPayload?.receivingContract || targetAddress,\n      undefined,\n      undefined,\n      additionalPayload?.payload\n    );\n    const response = (\n      await wallet.signAndSendTransaction({\n        transactionBlock: tx,\n        options: {\n          showEvents: true,\n        },\n      })\n    ).data;\n    if (!response) {\n      throw new Error(\"Error parsing transaction results\");\n    }\n    dispatch(\n      setTransferTx({\n        id: response.digest,\n        block: Number(response.checkpoint || 0),\n      })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const coreBridgePackageId = await getOriginalPackageId(\n      provider,\n      getBridgeAddressForChain(CHAIN_ID_SUI)\n    );\n    if (!coreBridgePackageId)\n      throw new Error(\"Unable to retrieve original package id\");\n    const { sequence, emitterAddress } =\n      getEmitterAddressAndSequenceFromResponseSui(\n        coreBridgePackageId,\n        response\n      );\n    await fetchSignedVAA(\n      CHAIN_ID_SUI,\n      emitterAddress,\n      sequence,\n      enqueueSnackbar,\n      dispatch\n    );\n  } catch (e) {\n    handleError(e, enqueueSnackbar, dispatch);\n  }\n}\n\nexport function useHandleTransfer() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const amount = useSelector(selectTransferAmount);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAddress = useTransferTargetAddressHex();\n  const isTargetComplete = useSelector(selectTransferIsTargetComplete);\n  const isSending = useSelector(selectTransferIsSending);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n  const isTBTC = useSelector(selectTransferIsTBTC);\n  const { signer } = useEthereumProvider(sourceChain);\n  const { wallet: solanaWallet, publicKey: solPK } = useSolanaWallet();\n  const { wallet: terraWallet } = useTerraWallet(sourceChain);\n  const terraFeeDenom = useSelector(selectTerraFeeDenom);\n  const xplaWallet = useXplaWallet();\n  const { address: algoAccount, wallet: algoWallet } = useAlgorandWallet();\n  const { accountId: nearAccountId, wallet } = useNearContext();\n  const { account: aptosAddress, wallet: aptosWallet } = useAptosContext();\n  const { wallet: injWallet, address: injAddress } = useInjectiveContext();\n  const suiWallet = useSuiWallet();\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const relayerFee = useSelector(selectTransferRelayerFee);\n\n  const sourceTokenPublicKey = sourceParsedTokenAccount?.publicKey;\n  const decimals = sourceParsedTokenAccount?.decimals;\n  const isNative = sourceParsedTokenAccount?.isNativeAsset || false;\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n\n  const maybeAdditionalPayload: MaybeAdditionalPayloadFn = useCallback(() => {\n    if (\n      isTBTC &&\n      originChain === CHAIN_ID_ETH &&\n      THRESHOLD_GATEWAYS[targetChain] &&\n      targetAddress\n    ) {\n      const tbtcGateway = arrayify(THRESHOLD_GATEWAYS[targetChain]);\n      return {\n        receivingContract: zeroPad(tbtcGateway, 32),\n        payload: targetAddress,\n      };\n    }\n    return null;\n  }, [isTBTC, originChain, targetAddress, targetChain]);\n\n  const handleTransferClick = useCallback(() => {\n    // TODO: we should separate state for transaction vs fetching vaa\n    if (\n      isEVMChain(sourceChain) &&\n      !!signer &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        sourceAsset,\n        decimals,\n        amount,\n        targetChain,\n        targetAddress,\n        isNative,\n        sourceChain,\n        isTBTC,\n        maybeAdditionalPayload,\n        relayerFee\n      );\n    } else if (\n      sourceChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!sourceAsset &&\n      !!sourceTokenPublicKey &&\n      !!targetAddress &&\n      decimals !== undefined\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK,\n        sourceTokenPublicKey,\n        sourceAsset,\n        amount,\n        decimals,\n        targetChain,\n        targetAddress,\n        isNative,\n        maybeAdditionalPayload,\n        originAsset,\n        originChain,\n        relayerFee\n      );\n    } else if (\n      isTerraChain(sourceChain) &&\n      !!terraWallet &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      terra(\n        dispatch,\n        enqueueSnackbar,\n        terraWallet,\n        sourceAsset,\n        amount,\n        decimals,\n        targetChain,\n        targetAddress,\n        terraFeeDenom,\n        sourceChain,\n        maybeAdditionalPayload,\n        relayerFee\n      );\n    } else if (\n      sourceChain === CHAIN_ID_XPLA &&\n      !!xplaWallet &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      xpla(\n        dispatch,\n        enqueueSnackbar,\n        xplaWallet,\n        sourceAsset,\n        amount,\n        decimals,\n        targetChain,\n        targetAddress,\n        maybeAdditionalPayload,\n        relayerFee\n      );\n    } else if (\n      sourceChain === CHAIN_ID_ALGORAND &&\n      algoAccount &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      algo(\n        dispatch,\n        enqueueSnackbar,\n        algoWallet,\n        sourceAsset,\n        decimals,\n        amount,\n        targetChain,\n        targetAddress,\n        sourceChain,\n        maybeAdditionalPayload,\n        relayerFee\n      );\n    } else if (\n      sourceChain === CHAIN_ID_NEAR &&\n      nearAccountId &&\n      wallet &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      near(\n        dispatch,\n        enqueueSnackbar,\n        wallet,\n        nearAccountId,\n        sourceAsset,\n        decimals,\n        amount,\n        targetChain,\n        targetAddress,\n        sourceChain,\n        maybeAdditionalPayload,\n        relayerFee\n      );\n    } else if (\n      sourceChain === CHAIN_ID_APTOS &&\n      aptosAddress &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      aptos(\n        dispatch,\n        enqueueSnackbar,\n        sourceAsset,\n        decimals,\n        amount,\n        targetChain,\n        targetAddress,\n        sourceChain,\n        aptosWallet!,\n        maybeAdditionalPayload,\n        relayerFee\n      );\n    } else if (\n      sourceChain === CHAIN_ID_INJECTIVE &&\n      injWallet &&\n      injAddress &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      injective(\n        dispatch,\n        enqueueSnackbar,\n        injWallet,\n        injAddress,\n        sourceAsset,\n        amount,\n        decimals,\n        targetChain,\n        targetAddress,\n        maybeAdditionalPayload,\n        relayerFee\n      );\n    } else if (\n      sourceChain === CHAIN_ID_SUI &&\n      suiWallet?.isConnected() &&\n      suiWallet.getAddress() &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      sui(\n        dispatch,\n        enqueueSnackbar,\n        suiWallet,\n        sourceAsset,\n        amount,\n        decimals,\n        targetChain,\n        targetAddress,\n        maybeAdditionalPayload,\n        relayerFee\n      );\n    }\n  }, [\n    sourceChain,\n    signer,\n    sourceAsset,\n    decimals,\n    targetAddress,\n    solanaWallet,\n    solPK,\n    sourceTokenPublicKey,\n    terraWallet,\n    xplaWallet,\n    algoAccount,\n    nearAccountId,\n    wallet,\n    aptosAddress,\n    injWallet,\n    injAddress,\n    suiWallet,\n    dispatch,\n    enqueueSnackbar,\n    amount,\n    targetChain,\n    isNative,\n    relayerFee,\n    originAsset,\n    originChain,\n    terraFeeDenom,\n    algoWallet,\n    aptosWallet,\n    maybeAdditionalPayload,\n    isTBTC,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleTransferClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleTransferClick, disabled, isSending]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectTransferTargetAddressHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useTransferTargetAddressHex() {\n  const targetAddressHex = useSelector(selectTransferTargetAddressHex);\n  const targetAddress = useMemo(\n    () => (targetAddressHex ? hexToUint8Array(targetAddressHex) : undefined),\n    [targetAddressHex]\n  );\n  return targetAddress;\n}\n","import {\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_SUI,\n  CHAIN_ID_XPLA,\n  ensureHexPrefix,\n  ethers_contracts,\n  isEVMChain,\n  isNativeDenomInjective,\n  isNativeDenomXpla,\n  isTerraChain,\n  parseSmartContractStateResponse,\n  terra,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useAlgorandWallet } from \"../contexts/AlgorandWalletContext\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setTargetParsedTokenAccount } from \"../store/transferSlice\";\nimport {\n  ALGORAND_HOST,\n  getEvmChainId,\n  SOLANA_HOST,\n  getTerraConfig,\n  NATIVE_NEAR_PLACEHOLDER,\n  NATIVE_NEAR_DECIMALS,\n  XPLA_LCD_CLIENT_CONFIG,\n} from \"../utils/consts\";\nimport { NATIVE_TERRA_DECIMALS } from \"../utils/terra\";\nimport { createParsedTokenAccount } from \"./useGetSourceParsedTokenAccounts\";\nimport useMetadata from \"./useMetadata\";\nimport { Algodv2 } from \"algosdk\";\nimport { useNearContext } from \"../contexts/NearWalletContext\";\nimport { makeNearAccount } from \"../utils/near\";\nimport { fetchSingleMetadata } from \"./useNearMetadata\";\nimport { useXplaWallet } from \"../contexts/XplaWalletContext\";\nimport { LCDClient as XplaLCDClient } from \"@xpla/xpla.js\";\nimport { NATIVE_XPLA_DECIMALS } from \"../utils/xpla\";\nimport { useAptosContext } from \"../contexts/AptosWalletContext\";\nimport { getAptosClient } from \"../utils/aptos\";\nimport {\n  getInjectiveBankClient,\n  NATIVE_INJECTIVE_DECIMALS,\n  getInjectiveWasmClient,\n} from \"../utils/injective\";\nimport { useInjectiveContext } from \"../contexts/InjectiveWalletContext\";\nimport { useTerraWallet } from \"../contexts/TerraWalletContext\";\nimport { useSuiWallet } from \"../contexts/SuiWalletContext\";\nimport { getSuiProvider } from \"../utils/sui\";\n\nfunction useGetTargetParsedTokenAccounts() {\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const targetAssetArrayed = useMemo(\n    () => (targetAsset ? [targetAsset] : []),\n    [targetAsset]\n  );\n  const metadata = useMetadata(targetChain, targetAssetArrayed);\n  const tokenName =\n    (targetAsset && metadata.data?.get(targetAsset)?.tokenName) || undefined;\n  const symbol =\n    (targetAsset && metadata.data?.get(targetAsset)?.symbol) || undefined;\n  const logo =\n    (targetAsset && metadata.data?.get(targetAsset)?.logo) || undefined;\n  const decimals =\n    (targetAsset && metadata.data?.get(targetAsset)?.decimals) || undefined;\n  const { publicKey: solPK, wallet: solanaWallet } = useSolanaWallet();\n  const terraWallet = useTerraWallet(targetChain);\n  const { provider, signerAddress, evmChainId } =\n    useEthereumProvider(targetChain);\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const xplaWallet = useXplaWallet();\n  const { address: algoAccount } = useAlgorandWallet();\n  const { accountId: nearAccountId } = useNearContext();\n  const { account: aptosAddress } = useAptosContext();\n  const { address: injAddress } = useInjectiveContext();\n  const suiWallet = useSuiWallet();\n  const suiAddress = suiWallet?.getAddress();\n  const hasResolvedMetadata = metadata.data || metadata.error;\n  useEffect(() => {\n    // targetParsedTokenAccount is cleared on setTargetAsset, but we need to clear it on wallet changes too\n    dispatch(setTargetParsedTokenAccount(undefined));\n    if (!targetAsset || !hasResolvedMetadata) {\n      return;\n    }\n    let cancelled = false;\n\n    if (isTerraChain(targetChain) && terraWallet.walletAddress) {\n      const lcd = new LCDClient(getTerraConfig(targetChain));\n      if (terra.isNativeDenom(targetAsset)) {\n        lcd.bank\n          .balance(terraWallet.walletAddress)\n          .then(([coins]) => {\n            const balance = coins.get(targetAsset)?.amount?.toString();\n            if (balance && !cancelled) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  createParsedTokenAccount(\n                    \"\",\n                    \"\",\n                    balance,\n                    NATIVE_TERRA_DECIMALS,\n                    Number(formatUnits(balance, NATIVE_TERRA_DECIMALS)),\n                    formatUnits(balance, NATIVE_TERRA_DECIMALS),\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            }\n          })\n          .catch(() => {\n            if (!cancelled) {\n              // TODO: error state\n            }\n          });\n      } else {\n        lcd.wasm\n          .contractQuery(targetAsset, {\n            token_info: {},\n          })\n          .then((info: any) =>\n            lcd.wasm\n              .contractQuery(targetAsset, {\n                balance: {\n                  address: terraWallet.walletAddress,\n                },\n              })\n              .then((balance: any) => {\n                if (balance && info && !cancelled) {\n                  dispatch(\n                    setTargetParsedTokenAccount(\n                      createParsedTokenAccount(\n                        \"\",\n                        \"\",\n                        balance.balance.toString(),\n                        info.decimals,\n                        Number(formatUnits(balance.balance, info.decimals)),\n                        formatUnits(balance.balance, info.decimals),\n                        symbol,\n                        tokenName,\n                        logo\n                      )\n                    )\n                  );\n                }\n              })\n          )\n          .catch(() => {\n            if (!cancelled) {\n              // TODO: error state\n            }\n          });\n      }\n    }\n    if (targetChain === CHAIN_ID_XPLA && xplaWallet) {\n      const lcd = new XplaLCDClient(XPLA_LCD_CLIENT_CONFIG);\n      if (isNativeDenomXpla(targetAsset)) {\n        lcd.bank\n          .balance(xplaWallet.getAddress()!)\n          .then(([coins]) => {\n            const balance = coins.get(targetAsset)?.amount?.toString();\n            if (balance && !cancelled) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  createParsedTokenAccount(\n                    \"\",\n                    \"\",\n                    balance,\n                    NATIVE_XPLA_DECIMALS,\n                    Number(formatUnits(balance, NATIVE_XPLA_DECIMALS)),\n                    formatUnits(balance, NATIVE_XPLA_DECIMALS),\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            }\n          })\n          .catch(() => {\n            if (!cancelled) {\n              // TODO: error state\n            }\n          });\n      } else {\n        lcd.wasm\n          .contractQuery(targetAsset, {\n            token_info: {},\n          })\n          .then((info: any) =>\n            lcd.wasm\n              .contractQuery(targetAsset, {\n                balance: {\n                  address: xplaWallet.getAddress(),\n                },\n              })\n              .then((balance: any) => {\n                if (balance && info && !cancelled) {\n                  dispatch(\n                    setTargetParsedTokenAccount(\n                      createParsedTokenAccount(\n                        \"\",\n                        \"\",\n                        balance.balance.toString(),\n                        info.decimals,\n                        Number(formatUnits(balance.balance, info.decimals)),\n                        formatUnits(balance.balance, info.decimals),\n                        symbol,\n                        tokenName,\n                        logo\n                      )\n                    )\n                  );\n                }\n              })\n          )\n          .catch(() => {\n            if (!cancelled) {\n              // TODO: error state\n            }\n          });\n      }\n    }\n    if (\n      targetChain === CHAIN_ID_APTOS &&\n      aptosAddress &&\n      decimals !== undefined\n    ) {\n      (async () => {\n        try {\n          const client = getAptosClient();\n          let value = BigInt(0);\n          try {\n            // This throws if the user never registered for the token\n            const coinStore = `0x1::coin::CoinStore<${ensureHexPrefix(\n              targetAsset\n            )}>`;\n            value = (\n              (await client.getAccountResource(aptosAddress, coinStore))\n                .data as any\n            ).coin.value;\n          } catch (e) {}\n          if (!cancelled) {\n            dispatch(\n              setTargetParsedTokenAccount(\n                createParsedTokenAccount(\n                  \"\",\n                  \"\",\n                  value.toString(),\n                  decimals,\n                  Number(formatUnits(value, decimals)),\n                  formatUnits(value, decimals),\n                  symbol,\n                  tokenName,\n                  logo\n                )\n              )\n            );\n          }\n        } catch (e) {\n          if (!cancelled) {\n            console.error(e);\n            // TODO: error state\n          }\n        }\n      })();\n    }\n\n    if (targetChain === CHAIN_ID_SUI && suiAddress) {\n      const provider = getSuiProvider();\n      (async () => {\n        try {\n          const { totalBalance } = await provider.getBalance({\n            owner: suiAddress,\n            coinType: targetAsset,\n          });\n          const response = await provider.getCoinMetadata({\n            coinType: targetAsset,\n          });\n          if (!response) {\n            throw new Error(\"bad response\");\n          }\n          const { decimals, symbol } = response;\n          if (!cancelled) {\n            dispatch(\n              setTargetParsedTokenAccount(\n                createParsedTokenAccount(\n                  \"\",\n                  \"\",\n                  totalBalance,\n                  decimals,\n                  Number(formatUnits(totalBalance, decimals)),\n                  formatUnits(totalBalance, decimals),\n                  symbol,\n                  tokenName,\n                  logo\n                )\n              )\n            );\n          }\n        } catch (e: any) {\n          console.error(\"error getting target balance\", e, e?.message, e?.code);\n          if (!cancelled) {\n            // TODO: error state\n          }\n        }\n      })();\n    }\n\n    if (targetChain === CHAIN_ID_SOLANA && solPK) {\n      let mint;\n      try {\n        mint = new PublicKey(targetAsset);\n      } catch (e) {\n        return;\n      }\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      connection\n        .getParsedTokenAccountsByOwner(new PublicKey(solPK), { mint })\n        .then(({ value }) => {\n          if (!cancelled) {\n            if (value.length) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  createParsedTokenAccount(\n                    value[0].pubkey.toString(),\n                    value[0].account.data.parsed?.info?.mint,\n                    value[0].account.data.parsed?.info?.tokenAmount?.amount,\n                    value[0].account.data.parsed?.info?.tokenAmount?.decimals,\n                    value[0].account.data.parsed?.info?.tokenAmount?.uiAmount,\n                    value[0].account.data.parsed?.info?.tokenAmount\n                      ?.uiAmountString,\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            } else {\n              // TODO: error state\n            }\n          }\n        })\n        .catch(() => {\n          if (!cancelled) {\n            // TODO: error state\n          }\n        });\n    }\n    if (\n      isEVMChain(targetChain) &&\n      provider &&\n      signerAddress &&\n      hasCorrectEvmNetwork\n    ) {\n      const token = ethers_contracts.TokenImplementation__factory.connect(\n        targetAsset,\n        provider\n      );\n      token\n        .decimals()\n        .then((decimals) => {\n          token.balanceOf(signerAddress).then((n) => {\n            if (!cancelled) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  // TODO: verify accuracy\n                  createParsedTokenAccount(\n                    signerAddress,\n                    token.address,\n                    n.toString(),\n                    decimals,\n                    Number(formatUnits(n, decimals)),\n                    formatUnits(n, decimals),\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            }\n          });\n        })\n        .catch(() => {\n          if (!cancelled) {\n            // TODO: error state\n          }\n        });\n    }\n    if (\n      targetChain === CHAIN_ID_ALGORAND &&\n      algoAccount &&\n      decimals !== undefined\n    ) {\n      const algodClient = new Algodv2(\n        ALGORAND_HOST.algodToken,\n        ALGORAND_HOST.algodServer,\n        ALGORAND_HOST.algodPort\n      );\n      try {\n        const tokenId = BigInt(targetAsset);\n        algodClient\n          .accountInformation(algoAccount)\n          .do()\n          .then((accountInfo) => {\n            let balance = 0;\n            if (tokenId === BigInt(0)) {\n              balance = accountInfo.amount;\n            } else {\n              let ret = 0;\n              const assets: Array<any> = accountInfo.assets;\n              assets.forEach((asset) => {\n                if (tokenId === BigInt(asset[\"asset-id\"])) {\n                  ret = asset.amount;\n                  return;\n                }\n              });\n              balance = ret;\n            }\n            dispatch(\n              setTargetParsedTokenAccount(\n                createParsedTokenAccount(\n                  algoAccount,\n                  targetAsset,\n                  balance.toString(),\n                  decimals,\n                  Number(formatUnits(balance, decimals)),\n                  formatUnits(balance, decimals),\n                  symbol,\n                  tokenName,\n                  logo\n                )\n              )\n            );\n          })\n          .catch(() => {\n            if (!cancelled) {\n              // TODO: error state\n            }\n          });\n      } catch (e) {\n        if (!cancelled) {\n          // TODO: error state\n        }\n      }\n    }\n    if (targetChain === CHAIN_ID_NEAR && nearAccountId) {\n      try {\n        makeNearAccount(nearAccountId)\n          .then((account) => {\n            if (targetAsset === NATIVE_NEAR_PLACEHOLDER) {\n              account\n                .getAccountBalance()\n                .then((balance) => {\n                  if (!cancelled) {\n                    dispatch(\n                      setTargetParsedTokenAccount(\n                        createParsedTokenAccount(\n                          nearAccountId, //publicKey\n                          NATIVE_NEAR_PLACEHOLDER, //the app doesn't like when this isn't truthy\n                          balance.available, //amount\n                          NATIVE_NEAR_DECIMALS,\n                          parseFloat(\n                            formatUnits(balance.available, NATIVE_NEAR_DECIMALS)\n                          ),\n                          formatUnits(\n                            balance.available,\n                            NATIVE_NEAR_DECIMALS\n                          ).toString(),\n                          \"NEAR\",\n                          \"Near\",\n                          undefined, //TODO logo\n                          true\n                        )\n                      )\n                    );\n                  }\n                })\n                .catch(() => {\n                  if (!cancelled) {\n                    // TODO: error state\n                  }\n                });\n            } else {\n              fetchSingleMetadata(targetAsset, account)\n                .then(({ decimals }) => {\n                  account\n                    .viewFunction(targetAsset, \"ft_balance_of\", {\n                      account_id: nearAccountId,\n                    })\n                    .then((balance) => {\n                      if (!cancelled) {\n                        dispatch(\n                          setTargetParsedTokenAccount(\n                            createParsedTokenAccount(\n                              nearAccountId,\n                              targetAsset,\n                              balance.toString(),\n                              decimals,\n                              Number(formatUnits(balance, decimals)),\n                              formatUnits(balance, decimals),\n                              symbol,\n                              tokenName,\n                              logo\n                            )\n                          )\n                        );\n                      }\n                    })\n                    .catch(() => {\n                      if (!cancelled) {\n                        // TODO: error state\n                      }\n                    });\n                })\n                .catch(() => {\n                  if (!cancelled) {\n                    // TODO: error state\n                  }\n                });\n            }\n          })\n          .catch(() => {\n            if (!cancelled) {\n              // TODO: error state\n            }\n          });\n      } catch (e) {\n        if (!cancelled) {\n          // TODO: error state\n        }\n      }\n    }\n    if (targetChain === CHAIN_ID_INJECTIVE && injAddress) {\n      if (isNativeDenomInjective(targetAsset)) {\n        const client = getInjectiveBankClient();\n        client\n          .fetchBalance({ accountAddress: injAddress, denom: targetAsset })\n          .then(({ amount }) => {\n            if (!cancelled) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  createParsedTokenAccount(\n                    \"\",\n                    \"\",\n                    amount,\n                    NATIVE_INJECTIVE_DECIMALS,\n                    Number(formatUnits(amount, NATIVE_INJECTIVE_DECIMALS)),\n                    formatUnits(amount, NATIVE_INJECTIVE_DECIMALS),\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            }\n          })\n          .catch(() => {\n            if (!cancelled) {\n              // TODO: error state\n            }\n          });\n      } else {\n        const client = getInjectiveWasmClient();\n        client\n          .fetchSmartContractState(\n            targetAsset,\n            Buffer.from(\n              JSON.stringify({\n                token_info: {},\n              })\n            ).toString(\"base64\")\n          )\n          .then((infoData) =>\n            client\n              .fetchSmartContractState(\n                targetAsset,\n                Buffer.from(\n                  JSON.stringify({\n                    balance: {\n                      address: injAddress,\n                    },\n                  })\n                ).toString(\"base64\")\n              )\n              .then((balanceData) => {\n                if (infoData && balanceData && !cancelled) {\n                  const balance = parseSmartContractStateResponse(balanceData);\n                  const info = parseSmartContractStateResponse(infoData);\n                  dispatch(\n                    setTargetParsedTokenAccount(\n                      createParsedTokenAccount(\n                        \"\",\n                        \"\",\n                        balance.balance.toString(),\n                        info.decimals,\n                        Number(formatUnits(balance.balance, info.decimals)),\n                        formatUnits(balance.balance, info.decimals),\n                        symbol,\n                        tokenName,\n                        logo\n                      )\n                    )\n                  );\n                }\n              })\n          )\n          .catch((e) => {\n            if (!cancelled) {\n              // TODO: error state\n            }\n          });\n      }\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    targetAsset,\n    targetChain,\n    provider,\n    signerAddress,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    hasCorrectEvmNetwork,\n    hasResolvedMetadata,\n    symbol,\n    tokenName,\n    logo,\n    algoAccount,\n    decimals,\n    nearAccountId,\n    xplaWallet,\n    aptosAddress,\n    injAddress,\n    suiAddress,\n  ]);\n}\n\nexport default useGetTargetParsedTokenAccounts;\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_TERRA2,\n  hexToNativeAssetString,\n} from \"@certusone/wormhole-sdk\";\nimport axios from \"axios\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  selectTransferGasPrice,\n  selectTransferSourceParsedTokenAccount,\n} from \"../store/selectors\";\nimport { getCoinGeckoURL, RELAYER_COMPARE_ASSET } from \"../utils/consts\";\nimport useRelayersAvailable, {\n  FeeScheduleEntryFlat,\n  FeeScheduleEntryPercent,\n  RelayerTokenInfo,\n} from \"./useRelayersAvailable\";\n\nexport function getRelayAssetInfo(\n  originChain: ChainId,\n  originAsset: string,\n  info: RelayerTokenInfo\n) {\n  if (!originChain || !originAsset || !info) {\n    return null;\n  }\n  return info.supportedTokens?.find(\n    (x) =>\n      originAsset.toLowerCase() === x.address?.toLowerCase() &&\n      originChain === x.chainId\n  );\n}\n\nfunction isRelayable(\n  originChain: ChainId,\n  originAsset: string,\n  info: RelayerTokenInfo\n) {\n  if (!originChain || !originAsset || !info) {\n    return false;\n  }\n  const tokenRecord = info.supportedTokens?.find(\n    (x) =>\n      originAsset.toLowerCase() === x.address?.toLowerCase() &&\n      originChain === x.chainId\n  );\n\n  return !!(\n    tokenRecord &&\n    tokenRecord.address &&\n    tokenRecord.chainId &&\n    tokenRecord.coingeckoId\n  );\n}\n\nexport type RelayerInfo = {\n  isRelayable: boolean;\n  isRelayingAvailable: boolean;\n  feeUsd?: string;\n  feeFormatted?: string;\n  targetNativeAssetPriceQuote?: number;\n};\n\nfunction calculateFeeUsd(\n  info: RelayerTokenInfo,\n  comparisonAssetPrice: number,\n  targetChain: ChainId,\n  gasPrice?: number\n) {\n  let feeUsd = 0;\n\n  if (info?.feeSchedule) {\n    try {\n      if (info.feeSchedule[targetChain]?.type === \"flat\") {\n        feeUsd = (info.feeSchedule[targetChain] as FeeScheduleEntryFlat).feeUsd;\n      } else if (info.feeSchedule[targetChain]?.type === \"percent\") {\n        const entry = info.feeSchedule[targetChain] as FeeScheduleEntryPercent;\n        if (!gasPrice) {\n          feeUsd = 0; //catch this error elsewhere\n        } else {\n          // Number should be safe as long as we don't modify highGasEstimate to be in the BigInt range\n          feeUsd =\n            ((Number(entry.gasEstimate) * gasPrice) / 1000000000) *\n            comparisonAssetPrice *\n            entry.feePercent;\n        }\n      }\n    } catch (e) {\n      console.error(\"Error determining relayer fee\");\n    }\n  }\n\n  return feeUsd;\n}\n\nfunction fixedUsd(fee: number) {\n  return fee.toFixed(2);\n}\n\nfunction requireGasPrice(targetChain: ChainId) {\n  return targetChain === CHAIN_ID_ETH;\n}\n\nfunction calculateFeeFormatted(\n  feeUsd: number,\n  originAssetPrice: number,\n  sourceAssetDecimals: number\n) {\n  const sendableDecimals = Math.min(8, sourceAssetDecimals);\n  const minimumFee = parseFloat(\n    (10 ** -sendableDecimals).toFixed(sendableDecimals)\n  );\n  const calculatedFee = feeUsd / originAssetPrice;\n  console.log(\"min\", minimumFee, \"calc\", calculatedFee);\n  return Math.max(minimumFee, calculatedFee).toFixed(sourceAssetDecimals);\n}\n\n//This potentially returns the same chain as the foreign chain, in the case where the asset is native\nfunction useRelayerInfo(\n  originChain?: ChainId,\n  originAsset?: string,\n  targetChain?: ChainId\n): DataWrapper<RelayerInfo> {\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [comparisonAssetPrice, setComparisonAssetPrice] = useState<\n    number | null\n  >(null);\n  const [originAssetPrice, setOriginAssetPrice] = useState<number | null>(null);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceAssetDecimals = sourceParsedTokenAccount?.decimals;\n  const gasPrice = useSelector(selectTransferGasPrice);\n  const relayerInfo = useRelayersAvailable(true);\n  // console.log(\"relayerInfo\", relayerInfo);\n\n  const originAssetNative =\n    originAsset && originChain\n      ? sourceParsedTokenAccount &&\n        (originChain === CHAIN_ID_TERRA2 || originChain === CHAIN_ID_NEAR)\n        ? // use preimage address\n          sourceParsedTokenAccount?.mintKey\n        : hexToNativeAssetString(originAsset, originChain)\n      : null;\n\n  useEffect(() => {\n    if (\n      !(originAssetNative && originChain && targetChain && relayerInfo.data)\n    ) {\n      return;\n    }\n\n    const relayerAsset = getRelayAssetInfo(\n      originChain,\n      originAssetNative,\n      relayerInfo.data\n    );\n\n    //same check as relayable, to satiate typescript.\n    if (\n      !(\n        relayerAsset &&\n        relayerAsset.address &&\n        relayerAsset.coingeckoId &&\n        relayerAsset.chainId\n      )\n    ) {\n      return;\n    }\n\n    let cancelled = false;\n    setIsLoading(true);\n    setError(\"\");\n\n    const promises = [];\n    const comparisonAsset = RELAYER_COMPARE_ASSET[targetChain];\n    promises.push(\n      axios\n        .get(getCoinGeckoURL(relayerAsset.coingeckoId))\n        .then((result) => {\n          if (!cancelled) {\n            const value = result.data[relayerAsset.coingeckoId as any][\n              \"usd\"\n            ] as number;\n            if (!value) {\n              setError(\"Unable to fetch required asset price\");\n              return;\n            }\n            setOriginAssetPrice(value);\n          }\n        })\n        .catch((error) => {\n          if (!cancelled) {\n            setError(\"Unable to fetch required asset price.\");\n          }\n        })\n    );\n\n    promises.push(\n      axios\n        .get(getCoinGeckoURL(comparisonAsset))\n        .then((result) => {\n          if (!cancelled) {\n            const value = result.data[comparisonAsset][\"usd\"] as number;\n            if (!value) {\n              setError(\"Unable to fetch required asset price\");\n              return;\n            }\n            setComparisonAssetPrice(value);\n          }\n        })\n        .catch((error) => {\n          if (!cancelled) {\n            setError(\"Unable to fetch required asset price.\");\n          }\n        })\n    );\n\n    Promise.all(promises).then(() => {\n      setIsLoading(false);\n    });\n\n    return () => {\n      cancelled = true;\n    };\n  }, [originAssetNative, originChain, targetChain, relayerInfo.data]);\n\n  const output: DataWrapper<RelayerInfo> = useMemo(() => {\n    if (error) {\n      return {\n        error: error,\n        isFetching: false,\n        receivedAt: null,\n        data: null,\n      };\n    } else if (isLoading || relayerInfo.isFetching) {\n      return {\n        error: \"\",\n        isFetching: true,\n        receivedAt: null,\n        data: null,\n      };\n    } else if (relayerInfo.error || !relayerInfo.data) {\n      return {\n        error: \"\",\n        isFetching: false,\n        receivedAt: null,\n        data: {\n          isRelayable: false,\n          isRelayingAvailable: false,\n          targetNativeAssetPriceQuote: undefined, //TODO can still get this without relayers\n        },\n      };\n    } else if (\n      !originChain ||\n      !originAssetNative ||\n      !targetChain ||\n      !sourceAssetDecimals\n    ) {\n      return {\n        error: \"Invalid arguments supplied.\",\n        isFetching: false,\n        receivedAt: null,\n        data: null,\n      };\n    } else if (\n      !comparisonAssetPrice ||\n      !originAssetPrice ||\n      (requireGasPrice(targetChain) && !gasPrice)\n    ) {\n      return {\n        error: \"Failed to fetch necessary price data.\",\n        isFetching: false,\n        receivedAt: null,\n        data: null,\n      };\n    } else {\n      const relayable = isRelayable(\n        originChain,\n        originAssetNative,\n        relayerInfo.data\n      );\n      const feeUsd = calculateFeeUsd(\n        relayerInfo.data,\n        comparisonAssetPrice,\n        targetChain,\n        gasPrice\n      );\n      const feeFormatted = calculateFeeFormatted(\n        feeUsd,\n        originAssetPrice,\n        sourceAssetDecimals\n      );\n      const usdString = fixedUsd(feeUsd);\n      return {\n        error: \"\",\n        isFetching: false,\n        receivedAt: null,\n        data: {\n          isRelayable: relayable && feeUsd > 0,\n          isRelayingAvailable: true,\n          feeUsd: usdString,\n          feeFormatted: feeFormatted,\n          targetNativeAssetPriceQuote: comparisonAssetPrice,\n        },\n      };\n    }\n  }, [\n    isLoading,\n    originChain,\n    targetChain,\n    error,\n    comparisonAssetPrice,\n    originAssetPrice,\n    gasPrice,\n    originAssetNative,\n    relayerInfo.data,\n    relayerInfo.error,\n    relayerInfo.isFetching,\n    sourceAssetDecimals,\n  ]);\n\n  return output;\n}\n\nexport default useRelayerInfo;\n","import {\n  CHAIN_ID_ACALA,\n  CHAIN_ID_KARURA,\n  CHAIN_ID_TERRA,\n  hexToNativeAssetString,\n  isEVMChain,\n  isTerraChain,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Card,\n  Checkbox,\n  Chip,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport SmartAddress from \"../components/SmartAddress\";\nimport { useAcalaRelayerInfo } from \"../hooks/useAcalaRelayerInfo\";\nimport useRelayerInfo from \"../hooks/useRelayerInfo\";\nimport { GasEstimateSummary } from \"../hooks/useTransactionFees\";\nimport { COLORS } from \"../muiTheme\";\nimport {\n  selectTransferAmount,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetChain,\n  selectTransferUseRelayer,\n} from \"../store/selectors\";\nimport { setRelayerFee, setUseRelayer } from \"../store/transferSlice\";\nimport { CHAINS_BY_ID, getDefaultNativeCurrencySymbol } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  feeSelectorContainer: {\n    marginTop: \"2rem\",\n    textAlign: \"center\",\n  },\n  title: {\n    margin: theme.spacing(2),\n  },\n  optionCardBase: {\n    display: \"flex\",\n    margin: theme.spacing(2),\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    padding: theme.spacing(1),\n    background: COLORS.nearBlackWithMinorTransparency,\n    \"& > *\": {\n      margin: \".5rem\",\n    },\n    border: \"1px solid \" + COLORS.nearBlackWithMinorTransparency,\n  },\n  alignCenterContainer: {\n    alignItems: \"center\",\n    display: \"flex\",\n    \"& > *\": {\n      margin: \"0rem 1rem 0rem 1rem\",\n    },\n  },\n  optionCardSelectable: {\n    \"&:hover\": {\n      cursor: \"pointer\",\n      boxShadow: \"inset 0 0 100px 100px rgba(255, 255, 255, 0.1)\",\n    },\n  },\n  optionCardSelected: {\n    border: \"1px solid \" + COLORS.blue,\n  },\n  inlineBlock: {\n    display: \"inline-block\",\n  },\n  alignLeft: {\n    textAlign: \"left\",\n  },\n  betaLabel: {\n    color: COLORS.white,\n    background: \"linear-gradient(20deg, #f44b1b 0%, #eeb430 100%)\",\n    marginLeft: theme.spacing(1),\n    fontSize: \"120%\",\n  },\n}));\n\nfunction FeeMethodSelector() {\n  const classes = useStyles();\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const originChain = useSelector(selectTransferOriginChain);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const transferAmount = useSelector(selectTransferAmount);\n  const relayerInfo = useRelayerInfo(originChain, originAsset, targetChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceDecimals = sourceParsedTokenAccount?.decimals;\n  let vaaNormalizedAmount: string | undefined = undefined;\n  if (transferAmount && sourceDecimals !== undefined) {\n    try {\n      vaaNormalizedAmount = parseUnits(\n        transferAmount,\n        Math.min(sourceDecimals, 8)\n      ).toString();\n    } catch (e) {}\n  }\n  const sourceSymbol = sourceParsedTokenAccount?.symbol;\n  const acalaRelayerInfo = useAcalaRelayerInfo(\n    targetChain,\n    vaaNormalizedAmount,\n    originChain ? hexToNativeAssetString(originAsset, originChain) : undefined\n  );\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const dispatch = useDispatch();\n  const relayerSelected = !!useSelector(selectTransferUseRelayer);\n\n  // console.log(\"relayer info in fee method selector\", relayerInfo);\n\n  const relayerEligible =\n    relayerInfo.data &&\n    relayerInfo.data.isRelayable &&\n    relayerInfo.data.feeFormatted &&\n    relayerInfo.data.feeUsd;\n\n  const targetIsAcala =\n    targetChain === CHAIN_ID_ACALA || targetChain === CHAIN_ID_KARURA;\n  const acalaRelayerEligible = acalaRelayerInfo.data?.shouldRelay;\n\n  const chooseAcalaRelayer = useCallback(() => {\n    if (targetIsAcala && acalaRelayerEligible) {\n      dispatch(setUseRelayer(true));\n      dispatch(setRelayerFee(undefined));\n    }\n  }, [dispatch, targetIsAcala, acalaRelayerEligible]);\n\n  const chooseRelayer = useCallback(() => {\n    if (relayerEligible) {\n      dispatch(setUseRelayer(true));\n      dispatch(setRelayerFee(relayerInfo.data?.feeFormatted));\n    }\n  }, [relayerInfo, dispatch, relayerEligible]);\n\n  const chooseManual = useCallback(() => {\n    dispatch(setUseRelayer(false));\n    dispatch(setRelayerFee(undefined));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (targetIsAcala) {\n      if (acalaRelayerEligible) {\n        chooseAcalaRelayer();\n      } else {\n        chooseManual();\n      }\n    } else if (relayerInfo.data?.isRelayable === true) {\n      chooseRelayer();\n    } else if (relayerInfo.data?.isRelayable === false) {\n      chooseManual();\n    }\n    //If it's undefined / null it's still loading, so no action is taken.\n  }, [\n    relayerInfo,\n    chooseRelayer,\n    chooseManual,\n    targetIsAcala,\n    acalaRelayerEligible,\n    chooseAcalaRelayer,\n  ]);\n\n  const acalaRelayerContent = (\n    <Card\n      className={\n        classes.optionCardBase +\n        \" \" +\n        (relayerSelected ? classes.optionCardSelected : \"\") +\n        \" \" +\n        (acalaRelayerEligible ? classes.optionCardSelectable : \"\")\n      }\n      onClick={chooseAcalaRelayer}\n    >\n      <div className={classes.alignCenterContainer}>\n        <Checkbox\n          checked={relayerSelected}\n          disabled={!acalaRelayerEligible}\n          onClick={chooseAcalaRelayer}\n          className={classes.inlineBlock}\n        />\n        <div className={clsx(classes.inlineBlock, classes.alignLeft)}>\n          {acalaRelayerEligible ? (\n            <div>\n              <Typography variant=\"body1\">\n                {CHAINS_BY_ID[targetChain].name}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                {CHAINS_BY_ID[targetChain].name} pays gas for you &#127881;\n              </Typography>\n            </div>\n          ) : (\n            <>\n              <Typography color=\"textSecondary\" variant=\"body2\">\n                {\"Automatic redeem is unavailable for this token.\"}\n              </Typography>\n              <div />\n            </>\n          )}\n        </div>\n      </div>\n      {acalaRelayerEligible ? (\n        <>\n          <div></div>\n          <div></div>\n        </>\n      ) : null}\n    </Card>\n  );\n\n  const relayerContent = (\n    <Card\n      className={\n        classes.optionCardBase +\n        \" \" +\n        (relayerSelected ? classes.optionCardSelected : \"\") +\n        \" \" +\n        (relayerEligible ? classes.optionCardSelectable : \"\")\n      }\n      onClick={chooseRelayer}\n    >\n      <div className={classes.alignCenterContainer}>\n        <Checkbox\n          checked={relayerSelected}\n          disabled={!relayerEligible}\n          onClick={chooseRelayer}\n          className={classes.inlineBlock}\n        />\n        <div className={clsx(classes.inlineBlock, classes.alignLeft)}>\n          {relayerEligible ? (\n            <div>\n              <Typography variant=\"body1\">Automatic Payment</Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                {`Pay with additional ${\n                  sourceSymbol ? sourceSymbol : \"tokens\"\n                } and use a relayer`}\n              </Typography>\n            </div>\n          ) : (\n            <>\n              <Typography color=\"textSecondary\" variant=\"body2\">\n                {\"Automatic redeem is unavailable for this token.\"}\n              </Typography>\n              <div />\n            </>\n          )}\n        </div>\n      </div>\n      {/* TODO fixed number of decimals on these strings */}\n      {relayerEligible ? (\n        <>\n          <div>\n            <Chip label=\"Beta\" className={classes.betaLabel} />\n          </div>\n          <div>\n            <div>\n              <Typography className={classes.inlineBlock}>\n                {/* Transfers are max 8 decimals */}\n                {parseFloat(relayerInfo.data?.feeFormatted || \"0\").toFixed(\n                  Math.min(sourceParsedTokenAccount?.decimals || 8, 8)\n                )}\n              </Typography>\n              <SmartAddress\n                chainId={sourceChain}\n                parsedTokenAccount={sourceParsedTokenAccount}\n                isAsset\n              />\n            </div>{\" \"}\n            <Typography>{`($ ${relayerInfo.data?.feeUsd})`}</Typography>\n          </div>\n        </>\n      ) : null}\n    </Card>\n  );\n\n  const manualRedeemContent = (\n    <Card\n      className={\n        classes.optionCardBase +\n        \" \" +\n        classes.optionCardSelectable +\n        \" \" +\n        (!relayerSelected ? classes.optionCardSelected : \"\")\n      }\n      onClick={chooseManual}\n    >\n      <div className={classes.alignCenterContainer}>\n        <Checkbox\n          checked={!relayerSelected}\n          onClick={chooseManual}\n          className={classes.inlineBlock}\n        />\n        <div className={clsx(classes.inlineBlock, classes.alignLeft)}>\n          <Typography variant=\"body1\">{\"Manual Payment\"}</Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            {`Pay with your own ${\n              isTerraChain(targetChain)\n                ? \"funds\"\n                : getDefaultNativeCurrencySymbol(targetChain)\n            } on ${CHAINS_BY_ID[targetChain]?.name || \"target chain\"}`}\n          </Typography>\n        </div>\n      </div>\n      {(isEVMChain(targetChain) || targetChain === CHAIN_ID_TERRA) && (\n        <GasEstimateSummary\n          methodType=\"transfer\"\n          chainId={targetChain}\n          priceQuote={relayerInfo.data?.targetNativeAssetPriceQuote}\n        />\n      )}\n    </Card>\n  );\n\n  return (\n    <div className={classes.feeSelectorContainer}>\n      <Typography\n        className={classes.title}\n        variant=\"subtitle2\"\n        color=\"textSecondary\"\n      >\n        How would you like to pay the target chain fees?\n      </Typography>\n      {targetIsAcala ? acalaRelayerContent : relayerContent}\n      {manualRedeemContent}\n    </div>\n  );\n}\n\nexport default FeeMethodSelector;\n","import {\n  CHAIN_ID_APTOS,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_SUI,\n  hexToNativeString,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { CHAIN_ID_NEAR } from \"@certusone/wormhole-sdk/lib/esm\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNearContext } from \"../../contexts/NearWalletContext\";\nimport useGetTargetParsedTokenAccounts from \"../../hooks/useGetTargetParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSyncTargetAddress from \"../../hooks/useSyncTargetAddress\";\nimport {\n  selectTransferAmount,\n  selectTransferIsTargetComplete,\n  selectTransferShouldLockFields,\n  selectTransferSourceChain,\n  selectTransferTargetAddressHex,\n  selectTransferTargetAsset,\n  selectTransferTargetAssetWrapper,\n  selectTransferTargetBalanceString,\n  selectTransferTargetChain,\n  selectTransferTargetError,\n  selectTransferTargetParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { incrementStep, setTargetChain } from \"../../store/transferSlice\";\nimport { CHAINS, CLUSTER } from \"../../utils/consts\";\nimport { getEmitterAddressNear } from \"../../utils/near\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport FeeMethodSelector from \"../FeeMethodSelector\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress, {\n  useAssociatedAccountExistsState,\n} from \"../SolanaCreateAssociatedAddress\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport RegisterNowButton from \"./RegisterNowButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport const useTargetInfo = () => {\n  const { accountId: nearAccountId } = useNearContext();\n\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAddressHex = useSelector(selectTransferTargetAddressHex);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const targetParsedTokenAccount = useSelector(\n    selectTransferTargetParsedTokenAccount\n  );\n  const tokenName = targetParsedTokenAccount?.name;\n  const symbol = targetParsedTokenAccount?.symbol;\n  const logo = targetParsedTokenAccount?.logo;\n  const readableTargetAddress =\n    targetChain === CHAIN_ID_NEAR\n      ? // Near uses a hashed address, which isn't very readable - check that the hash matches and show them their account id\n        nearAccountId &&\n        // this just happens to be the same hashing mechanism as emitters\n        getEmitterAddressNear(nearAccountId) === targetAddressHex\n        ? nearAccountId\n        : targetAddressHex || \"\"\n      : targetChain === CHAIN_ID_APTOS || targetChain === CHAIN_ID_SUI\n      ? targetAddressHex\n        ? `0x${targetAddressHex}`\n        : \"\"\n      : hexToNativeString(targetAddressHex, targetChain) || \"\";\n  return useMemo(\n    () => ({\n      targetChain,\n      targetAsset,\n      tokenName,\n      symbol,\n      logo,\n      readableTargetAddress,\n    }),\n    [targetChain, targetAsset, tokenName, symbol, logo, readableTargetAddress]\n  );\n};\n\nfunction Target() {\n  useGetTargetParsedTokenAccounts();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const chains = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const { error: targetAssetError, data } = useSelector(\n    selectTransferTargetAssetWrapper\n  );\n  const {\n    targetChain,\n    targetAsset,\n    tokenName,\n    symbol,\n    logo,\n    readableTargetAddress,\n  } = useTargetInfo();\n  const uiAmountString = useSelector(selectTransferTargetBalanceString);\n  const transferAmount = useSelector(selectTransferAmount);\n  const error = useSelector(selectTransferTargetError);\n  const isTargetComplete = useSelector(selectTransferIsTargetComplete);\n  const shouldLockFields = useSelector(selectTransferShouldLockFields);\n  const { statusMessage, isReady } = useIsWalletReady(targetChain);\n  const isLoading = !statusMessage && !targetAssetError && !data;\n  const { associatedAccountExists, setAssociatedAccountExists } =\n    useAssociatedAccountExistsState(\n      targetChain,\n      targetAsset,\n      readableTargetAddress\n    );\n  useSyncTargetAddress(!shouldLockFields);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>Select a recipient chain and address.</StepDescription>\n      <ChainSelect\n        variant=\"outlined\"\n        select\n        fullWidth\n        value={targetChain}\n        onChange={handleTargetChange}\n        disabled={true}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      {readableTargetAddress ? (\n        <>\n          {targetAsset ? (\n            <div className={classes.transferField}>\n              <Typography variant=\"subtitle2\">Bridged tokens:</Typography>\n              <Typography component=\"div\">\n                <SmartAddress\n                  chainId={targetChain}\n                  address={targetAsset}\n                  symbol={symbol}\n                  tokenName={tokenName}\n                  logo={logo}\n                  variant=\"h6\"\n                  isAsset\n                />\n                {`(Amount: ${transferAmount})`}\n              </Typography>\n            </div>\n          ) : null}\n          <div className={classes.transferField}>\n            <Typography variant=\"subtitle2\">Sent to:</Typography>\n            <Typography component=\"div\">\n              <SmartAddress\n                chainId={targetChain}\n                address={readableTargetAddress}\n                variant=\"h6\"\n              />\n              {`(Current balance: ${uiAmountString || \"0\"})`}\n            </Typography>\n          </div>\n        </>\n      ) : null}\n      {targetChain === CHAIN_ID_SOLANA && targetAsset ? (\n        <SolanaCreateAssociatedAddress\n          mintAddress={targetAsset}\n          readableTargetAddress={readableTargetAddress}\n          associatedAccountExists={associatedAccountExists}\n          setAssociatedAccountExists={setAssociatedAccountExists}\n        />\n      ) : null}\n      {isEVMChain(targetChain) && !isReady ? null : <FeeMethodSelector />}\n      <LowBalanceWarning chainId={targetChain} />\n      {targetChain === CHAIN_ID_SOLANA && CLUSTER === \"mainnet\" && (\n        <SolanaTPSWarning />\n      )}\n      <ButtonWithLoader\n        disabled={!isTargetComplete || !associatedAccountExists}\n        onClick={handleNextClick}\n        showLoader={isLoading}\n        error={\n          statusMessage || (isLoading ? undefined : error || targetAssetError)\n        }\n      >\n        Next\n      </ButtonWithLoader>\n      {!statusMessage && data && !data.doesExist ? <RegisterNowButton /> : null}\n    </>\n  );\n}\n\nexport default Target;\n","import {\n  ChainId,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { Box, Link, makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  AVAILABLE_MARKETS_URL,\n  CHAINS_BY_ID,\n  MULTI_CHAIN_TOKENS,\n} from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  alert: {\n    textAlign: \"center\",\n  },\n  line: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nfunction WormholeWrappedWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n      <Typography component=\"div\" className={classes.line}>\n        The tokens you will receive are{\" \"}\n        <Box fontWeight={900} display=\"inline\">\n          Portal Wrapped Tokens\n        </Box>{\" \"}\n        and will need to be exchanged for native assets.\n      </Typography>\n      <Typography component=\"div\">\n        <Link\n          href={AVAILABLE_MARKETS_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Click here to see available markets for wrapped tokens.\n        </Link>\n      </Typography>\n    </Alert>\n  );\n}\n\nfunction CanonicalWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n      <Typography component=\"div\">\n        You will receive tBTC as{\" \"}\n        <Box fontWeight={900} display=\"inline\">\n          canonical tokens\n        </Box>{\" \"}\n        that are natively supported and ready to use!\n      </Typography>\n      <Typography component=\"div\">\n        No need for unwrapping or exchanging for native assets.\n      </Typography>\n    </Alert>\n  );\n}\n\nfunction MultichainWarning({\n  symbol,\n  targetChain,\n}: {\n  symbol: string;\n  targetChain: ChainId;\n}) {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography\n        variant=\"h6\"\n        className={classes.line}\n      >{`You will not receive native ${symbol} on ${CHAINS_BY_ID[targetChain].name}`}</Typography>\n      <Typography\n        className={classes.line}\n      >{`To receive native ${symbol}, you will have to perform a swap with the wrapped tokens once you are done bridging.`}</Typography>\n      <Typography>\n        <Link\n          href={AVAILABLE_MARKETS_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Click here to see available markets for wrapped tokens.\n        </Link>\n      </Typography>\n    </Alert>\n  );\n}\n\nfunction RewardsWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      Lido stETH rewards can only be received on Ethereum. Use the value\n      accruing wrapper token wstETH instead.\n    </Alert>\n  );\n}\n\nfunction LiquidityWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n      <Typography component=\"div\" className={classes.line}>\n        The tokens you will receive are{\" \"}\n        <Box fontWeight={900} display=\"inline\">\n          Portal Wrapped Tokens\n        </Box>{\" \"}\n        which currently have no liquid markets!\n      </Typography>\n      <Typography component=\"div\">\n        <Link\n          href={AVAILABLE_MARKETS_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Click here to see available markets for wrapped tokens.\n        </Link>\n      </Typography>\n    </Alert>\n  );\n}\n\nfunction shouldShowLiquidityWarning(\n  sourceChain: ChainId,\n  sourceAsset: string,\n  targetChain: ChainId\n) {\n  if (sourceChain === CHAIN_ID_SOLANA && targetChain === CHAIN_ID_BSC) {\n    return [\n      \"7i5KKsX2weiTkry7jA4ZwSuXGhs5eJBEjY8vVxR4pfRx\", // GMT\n      \"AFbX8oGjGpmVFywbVouvhQSRmiW2aR1mohfahi4Y2AdB\", // GST\n    ].includes(sourceAsset);\n  } else if (sourceChain === CHAIN_ID_BSC && targetChain === CHAIN_ID_SOLANA) {\n    return [\n      \"0x3019bf2a2ef8040c242c9a4c5c4bd4c81678b2a1\", // GMT\n      \"0x4a2c860cec6471b9f5f5a336eb4f38bb21683c98\", // GST\n      \"0x570a5d26f7765ecb712c0924e4de545b89fd43df\", // \"sol\"\n    ].includes(sourceAsset);\n  }\n  return false;\n}\n\nexport default function TokenWarning({\n  sourceChain,\n  sourceAsset,\n  originChain,\n  targetChain,\n  targetAsset,\n  showCanonicalTbtcMessage = false,\n}: {\n  sourceChain?: ChainId;\n  sourceAsset?: string;\n  originChain?: ChainId;\n  targetChain?: ChainId;\n  targetAsset?: string;\n  showCanonicalTbtcMessage?: boolean;\n}) {\n  if (\n    !(originChain && targetChain && targetAsset && sourceChain && sourceAsset)\n  ) {\n    return null;\n  }\n\n  const searchableAddress = isEVMChain(sourceChain)\n    ? sourceAsset.toLowerCase()\n    : sourceAsset;\n  const isWormholeWrapped = originChain !== targetChain;\n  const multichainSymbol =\n    MULTI_CHAIN_TOKENS[sourceChain]?.[searchableAddress] || undefined;\n  const isMultiChain = !!multichainSymbol;\n  const isRewardsToken =\n    searchableAddress === \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\" &&\n    sourceChain === CHAIN_ID_ETH;\n\n  const showMultiChainWarning =\n    isMultiChain && isWormholeWrapped && targetChain !== CHAIN_ID_APTOS;\n  const showCanonicalWarning =\n    !isMultiChain &&\n    isWormholeWrapped &&\n    targetChain !== CHAIN_ID_APTOS &&\n    showCanonicalTbtcMessage;\n  const showWrappedWarning =\n    !isMultiChain &&\n    isWormholeWrapped &&\n    targetChain !== CHAIN_ID_APTOS &&\n    !showCanonicalTbtcMessage; //Multichain warning is more important\n  const showRewardsWarning = isRewardsToken;\n  const showLiquidityWarning = shouldShowLiquidityWarning(\n    sourceChain,\n    searchableAddress,\n    targetChain\n  );\n\n  return (\n    <>\n      {showMultiChainWarning ? (\n        <MultichainWarning\n          symbol={multichainSymbol || \"tokens\"}\n          targetChain={targetChain}\n        />\n      ) : null}\n      {showCanonicalWarning ? <CanonicalWarning /> : null}\n      {showWrappedWarning ? <WormholeWrappedWarning /> : null}\n      {showRewardsWarning ? <RewardsWarning /> : null}\n      {showLiquidityWarning ? <LiquidityWarning /> : null}\n    </>\n  );\n}\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Typography,\n} from \"@material-ui/core\";\nimport { ArrowDownward } from \"@material-ui/icons\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferOriginChain,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferIsTBTC,\n} from \"../../store/selectors\";\nimport {\n  CHAINS_BY_ID,\n  CLUSTER,\n  MULTI_CHAIN_TOKENS,\n  THRESHOLD_TBTC_CONTRACTS,\n} from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport { useTargetInfo } from \"./Target\";\nimport TokenWarning from \"./TokenWarning\";\n\nfunction SendConfirmationContent({\n  open,\n  onClose,\n  onClick,\n}: {\n  open: boolean;\n  onClose: () => void;\n  onClick: () => void;\n}) {\n  const isTBTC = useSelector(selectTransferIsTBTC);\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const { targetChain, targetAsset, symbol, tokenName, logo } = useTargetInfo();\n  const originChain = useSelector(selectTransferOriginChain);\n\n  //TODO this check is essentially duplicated.\n  const deservesTimeout = useMemo(() => {\n    if (originChain && sourceParsedTokenAccount?.mintKey) {\n      const searchableAddress = isEVMChain(originChain)\n        ? sourceParsedTokenAccount.mintKey.toLowerCase()\n        : sourceParsedTokenAccount.mintKey;\n      return (\n        originChain !== targetChain &&\n        !!MULTI_CHAIN_TOKENS[sourceChain]?.[searchableAddress]\n      );\n    } else {\n      return false;\n    }\n  }, [originChain, targetChain, sourceChain, sourceParsedTokenAccount]);\n  const timeoutDuration = 5;\n\n  const [countdown, setCountdown] = useState(\n    deservesTimeout ? timeoutDuration : 0\n  );\n\n  useEffect(() => {\n    if (!deservesTimeout || countdown === 0) {\n      return;\n    }\n    let cancelled = false;\n\n    setInterval(() => {\n      if (!cancelled) {\n        setCountdown((state) => state - 1);\n      }\n    }, 1000);\n\n    return () => {\n      cancelled = true;\n    };\n  }, [deservesTimeout, countdown]);\n\n  useEffect(() => {\n    if (open && deservesTimeout) {\n      //Countdown starts on mount, but we actually want it to start on open\n      setCountdown(timeoutDuration);\n    }\n  }, [open, deservesTimeout]);\n\n  const sendConfirmationContent = (\n    <>\n      <DialogTitle>Are you sure?</DialogTitle>\n      <DialogContent>\n        {targetAsset ? (\n          <div style={{ textAlign: \"center\", marginBottom: 16 }}>\n            <Typography variant=\"subtitle1\" style={{ marginBottom: 8 }}>\n              You are about to perform this transfer:\n            </Typography>\n            <SmartAddress\n              variant=\"h6\"\n              chainId={sourceChain}\n              parsedTokenAccount={sourceParsedTokenAccount}\n              isAsset\n            />\n            <div>\n              <Typography variant=\"caption\">\n                {CHAINS_BY_ID[sourceChain].name}\n              </Typography>\n            </div>\n            <div style={{ paddingTop: 4 }}>\n              <ArrowDownward fontSize=\"inherit\" />\n            </div>\n            <SmartAddress\n              variant=\"h6\"\n              chainId={targetChain}\n              address={targetAsset}\n              symbol={symbol}\n              tokenName={tokenName}\n              logo={logo}\n              isAsset\n            />\n            <div>\n              <Typography variant=\"caption\">\n                {CHAINS_BY_ID[targetChain].name}\n              </Typography>\n            </div>\n          </div>\n        ) : null}\n        <TokenWarning\n          sourceAsset={sourceParsedTokenAccount?.mintKey}\n          sourceChain={sourceChain}\n          originChain={originChain}\n          targetAsset={targetAsset ?? undefined}\n          targetChain={targetChain}\n          showCanonicalTbtcMessage={\n            isTBTC && THRESHOLD_TBTC_CONTRACTS[targetChain]\n          }\n        />\n        {sourceChain === CHAIN_ID_SOLANA && CLUSTER === \"mainnet\" && (\n          <SolanaTPSWarning />\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"outlined\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onClick}\n          size={\"medium\"}\n          disabled={!!countdown}\n        >\n          {!!countdown ? countdown.toString() : \"Confirm\"}\n        </Button>\n      </DialogActions>\n    </>\n  );\n\n  return sendConfirmationContent;\n}\n\nexport default function SendConfirmationDialog({\n  open,\n  onClick,\n  onClose,\n}: {\n  open: boolean;\n  onClick: () => void;\n  onClose: () => void;\n}) {\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <SendConfirmationContent\n        open={open}\n        onClose={onClose}\n        onClick={onClick}\n      />\n    </Dialog>\n  );\n}\n","import {\n  CHAIN_ID_SOLANA,\n  isEVMChain,\n  isTerraChain,\n} from \"@certusone/wormhole-sdk\";\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { ethers } from \"ethers\";\nimport { formatUnits, parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useAllowance from \"../../hooks/useAllowance\";\nimport { useHandleTransfer } from \"../../hooks/useHandleTransfer\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectSourceWalletAddress,\n  selectTransferAmount,\n  selectTransferIsSendComplete,\n  selectTransferIsVAAPending,\n  selectTransferRelayerFee,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetChain,\n  selectTransferTargetError,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/transferSlice\";\nimport { CHAINS_BY_ID, CLUSTER } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport ShowTx from \"../ShowTx\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport PendingVAAWarning from \"./PendingVAAWarning\";\nimport SendConfirmationDialog from \"./SendConfirmationDialog\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Send() {\n  const dispatch = useDispatch();\n  const { handleClick, disabled, showLoader } = useHandleTransfer();\n  const [isConfirmOpen, setIsConfirmOpen] = useState(false);\n  const handleTransferClick = useCallback(() => {\n    setIsConfirmOpen(true);\n  }, []);\n  const handleConfirmClick = useCallback(() => {\n    handleClick();\n    setIsConfirmOpen(false);\n  }, [handleClick]);\n  const handleConfirmClose = useCallback(() => {\n    setIsConfirmOpen(false);\n  }, []);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const sourceAmount = useSelector(selectTransferAmount);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const relayerFee = useSelector(selectTransferRelayerFee);\n  const sourceDecimals = sourceParsedTokenAccount?.decimals;\n  const sourceIsNative = sourceParsedTokenAccount?.isNativeAsset;\n  const baseAmountParsed =\n    sourceDecimals !== undefined &&\n    sourceDecimals !== null &&\n    sourceAmount &&\n    parseUnits(sourceAmount, sourceDecimals);\n  const feeParsed =\n    sourceDecimals !== undefined\n      ? parseUnits(relayerFee || \"0\", sourceDecimals)\n      : 0;\n  const transferAmountParsed =\n    baseAmountParsed && baseAmountParsed.add(feeParsed).toBigInt();\n  const humanReadableTransferAmount =\n    sourceDecimals !== undefined &&\n    sourceDecimals !== null &&\n    transferAmountParsed &&\n    formatUnits(transferAmountParsed, sourceDecimals);\n  const oneParsed =\n    sourceDecimals !== undefined &&\n    sourceDecimals !== null &&\n    parseUnits(\"1\", sourceDecimals).toBigInt();\n  const transferTx = useSelector(selectTransferTransferTx);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n  const isVAAPending = useSelector(selectTransferIsVAAPending);\n\n  const error = useSelector(selectTransferTargetError);\n  const [allowanceError, setAllowanceError] = useState(\"\");\n  const { isReady, statusMessage, walletAddress } =\n    useIsWalletReady(sourceChain);\n  const sourceWalletAddress = useSelector(selectSourceWalletAddress);\n  //The chain ID compare is handled implicitly, as the isWalletReady hook should report !isReady if the wallet is on the wrong chain.\n  const isWrongWallet =\n    sourceWalletAddress &&\n    walletAddress &&\n    sourceWalletAddress !== walletAddress;\n  const [shouldApproveUnlimited, setShouldApproveUnlimited] = useState(false);\n  const toggleShouldApproveUnlimited = useCallback(\n    () => setShouldApproveUnlimited(!shouldApproveUnlimited),\n    [shouldApproveUnlimited]\n  );\n\n  const {\n    sufficientAllowance,\n    isAllowanceFetching,\n    isApproveProcessing,\n    approveAmount,\n  } = useAllowance(\n    sourceChain,\n    sourceAsset,\n    transferAmountParsed || undefined,\n    sourceIsNative,\n    targetChain,\n    isReady\n  );\n\n  const approveButtonNeeded = isEVMChain(sourceChain) && !sufficientAllowance;\n  const notOne = shouldApproveUnlimited || transferAmountParsed !== oneParsed;\n  const isDisabled =\n    !isReady ||\n    isWrongWallet ||\n    disabled ||\n    isAllowanceFetching ||\n    isApproveProcessing;\n  const errorMessage = isWrongWallet\n    ? \"A different wallet is connected than in Step 1.\"\n    : statusMessage || error || allowanceError || undefined;\n\n  const approveExactAmount = useMemo(() => {\n    return () => {\n      setAllowanceError(\"\");\n      approveAmount(BigInt(transferAmountParsed)).then(\n        () => {\n          setAllowanceError(\"\");\n        },\n        (error) => setAllowanceError(\"Failed to approve the token transfer.\")\n      );\n    };\n  }, [approveAmount, transferAmountParsed]);\n  const approveUnlimited = useMemo(() => {\n    return () => {\n      setAllowanceError(\"\");\n      approveAmount(ethers.constants.MaxUint256.toBigInt()).then(\n        () => {\n          setAllowanceError(\"\");\n        },\n        (error) => setAllowanceError(\"Failed to approve the token transfer.\")\n      );\n    };\n  }, [approveAmount]);\n\n  return (\n    <>\n      <StepDescription>\n        Transfer the tokens to the Wormhole Token Bridge.\n      </StepDescription>\n      <KeyAndBalance chainId={sourceChain} />\n      {isTerraChain(sourceChain) && (\n        <TerraFeeDenomPicker disabled={disabled} chainId={sourceChain} />\n      )}\n      <Alert severity=\"info\" variant=\"outlined\">\n        This will initiate the transfer on {CHAINS_BY_ID[sourceChain].name} and\n        wait for finalization. If you navigate away from this page before\n        completing Step 4, you will have to perform the recovery workflow to\n        complete the transfer.\n      </Alert>\n      {sourceChain === CHAIN_ID_SOLANA && CLUSTER === \"mainnet\" && (\n        <SolanaTPSWarning />\n      )}\n      {approveButtonNeeded ? (\n        <>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={shouldApproveUnlimited}\n                onChange={toggleShouldApproveUnlimited}\n                color=\"primary\"\n              />\n            }\n            label=\"Approve Unlimited Tokens\"\n          />\n          <ButtonWithLoader\n            disabled={isDisabled}\n            onClick={\n              shouldApproveUnlimited ? approveUnlimited : approveExactAmount\n            }\n            showLoader={isAllowanceFetching || isApproveProcessing}\n            error={errorMessage}\n          >\n            {\"Approve \" +\n              (shouldApproveUnlimited\n                ? \"Unlimited\"\n                : humanReadableTransferAmount\n                ? humanReadableTransferAmount\n                : sourceAmount) +\n              ` Token${notOne ? \"s\" : \"\"}`}\n          </ButtonWithLoader>\n        </>\n      ) : (\n        <>\n          <ButtonWithLoader\n            disabled={isDisabled}\n            onClick={handleTransferClick}\n            showLoader={showLoader && !isVAAPending}\n            error={errorMessage}\n          >\n            Transfer\n          </ButtonWithLoader>\n          <SendConfirmationDialog\n            open={isConfirmOpen}\n            onClick={handleConfirmClick}\n            onClose={handleConfirmClose}\n          />\n        </>\n      )}\n      <WaitingForWalletMessage />\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={transferTx}\n        isSendComplete={isSendComplete || isVAAPending}\n      />\n      {isVAAPending ? (\n        <>\n          <PendingVAAWarning sourceChain={sourceChain} />\n          <ButtonWithLoader onClick={handleResetClick}>\n            Transfer More Tokens!\n          </ButtonWithLoader>\n        </>\n      ) : null}\n    </>\n  );\n}\n\nexport default Send;\n","import {\n  approveEth,\n  ChainId,\n  CHAIN_ID_KLAYTN,\n  getAllowanceEth,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { BigNumber } from \"ethers\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport {\n  selectTransferIsApproving,\n  selectTransferIsTBTC,\n  selectTransferSourceChain,\n} from \"../store/selectors\";\nimport { setIsApproving } from \"../store/transferSlice\";\nimport {\n  THRESHOLD_GATEWAYS,\n  getTokenBridgeAddressForChain,\n} from \"../utils/consts\";\n\nexport default function useAllowance(\n  chainId: ChainId,\n  tokenAddress?: string,\n  transferAmount?: BigInt,\n  sourceIsNative?: boolean,\n  targetChain?: ChainId,\n  isReady?: boolean\n) {\n  const dispatch = useDispatch();\n  const [allowance, setAllowance] = useState<BigInt | null>(null);\n  const [isAllowanceFetching, setIsAllowanceFetching] = useState(false);\n  const contract = useRef(getTokenBridgeAddressForChain(chainId));\n\n  const isTBTC = useSelector(selectTransferIsTBTC);\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const isApproveProcessing = useSelector(selectTransferIsApproving);\n  const { signer } = useEthereumProvider(chainId);\n  const sufficientAllowance =\n    !isEVMChain(chainId) ||\n    sourceIsNative ||\n    (allowance && transferAmount && allowance >= transferAmount);\n\n  useEffect(() => {\n    let cancelled = false;\n\n    // THRESHOLD TBTC FLOW\n    if (isTBTC && THRESHOLD_GATEWAYS[sourceChain]) {\n      console.log(\"allowance contract is now for Threshold\");\n      contract.current = THRESHOLD_GATEWAYS[chainId];\n    }\n\n    if (isEVMChain(chainId) && tokenAddress && signer && !isApproveProcessing) {\n      setIsAllowanceFetching(true);\n      getAllowanceEth(contract.current, tokenAddress, signer).then(\n        (result) => {\n          if (!cancelled) {\n            setIsAllowanceFetching(false);\n            setAllowance(result.toBigInt());\n          }\n        },\n        (_error) => {\n          if (!cancelled) {\n            setIsAllowanceFetching(false);\n            //setError(\"Unable to retrieve allowance\"); //TODO set an error\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    chainId,\n    tokenAddress,\n    signer,\n    isApproveProcessing,\n    targetChain,\n    isReady,\n    isTBTC,\n    sourceChain,\n  ]);\n\n  const approveAmount: (amount: BigInt) => Promise<any> = useMemo(() => {\n    return !isEVMChain(chainId) || !tokenAddress || !signer\n      ? (amount: BigInt) => {\n          return Promise.resolve();\n        }\n      : (amount: BigInt) => {\n          dispatch(setIsApproving(true));\n          // Klaytn requires specifying gasPrice\n          const gasPricePromise =\n            chainId === CHAIN_ID_KLAYTN\n              ? signer.getGasPrice()\n              : Promise.resolve(undefined);\n          return gasPricePromise.then(\n            (gasPrice) =>\n              approveEth(\n                contract.current,\n                tokenAddress,\n                signer,\n                BigNumber.from(amount),\n                gasPrice === undefined ? {} : { gasPrice }\n              ).then(\n                () => {\n                  dispatch(setIsApproving(false));\n                  return Promise.resolve();\n                },\n                () => {\n                  dispatch(setIsApproving(false));\n                  return Promise.reject();\n                }\n              ),\n            () => {\n              dispatch(setIsApproving(false));\n              return Promise.reject();\n            }\n          );\n        };\n  }, [chainId, tokenAddress, signer, dispatch]);\n\n  return useMemo(\n    () => ({\n      sufficientAllowance,\n      approveAmount,\n      isAllowanceFetching,\n      isApproveProcessing,\n    }),\n    [\n      sufficientAllowance,\n      approveAmount,\n      isAllowanceFetching,\n      isApproveProcessing,\n    ]\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferSourceChain,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const transferTx = useSelector(selectTransferTransferTx);\n\n  const explainerString = \"The tokens have entered the bridge!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n    </>\n  );\n}\n","import { IconButton } from \"@material-ui/core\";\nimport { ArrowForward, SwapHoriz } from \"@material-ui/icons\";\nimport { useState } from \"react\";\n\nexport default function ChainSelectArrow({\n  onClick,\n  disabled,\n}: {\n  onClick: () => void;\n  disabled: boolean;\n}) {\n  const [showSwap, setShowSwap] = useState(false);\n\n  return (\n    <IconButton\n      onClick={onClick}\n      onMouseEnter={() => {\n        setShowSwap(true);\n      }}\n      onMouseLeave={() => {\n        setShowSwap(false);\n      }}\n      disabled={disabled}\n    >\n      {showSwap ? <SwapHoriz /> : <ArrowForward />}\n    </IconButton>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  ETH_POLYGON_WRAPPED_TOKENS,\n  POLYGON_TERRA_WRAPPED_TOKENS,\n} from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction PolygonTerraWrappedWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography variant=\"body1\">\n        This is a Shuttle-wrapped asset from Polygon! Transferring it will\n        result in a double wrapped (Portal-wrapped Shuttle-wrapped) asset, which\n        has no liquid markets.\n      </Typography>\n    </Alert>\n  );\n}\n\nfunction EthPolygonWrappedWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography variant=\"body1\">\n        This is a Polygon Bridge-wrapped asset from Ethereum! Transferring it\n        will result in a double wrapped (Portal-wrapped Polygon-wrapped) asset,\n        which has no liquid markets.\n      </Typography>\n    </Alert>\n  );\n}\n\nexport default function SoureAssetWarning({\n  sourceChain,\n  sourceAsset,\n}: {\n  sourceChain?: ChainId;\n  sourceAsset?: string;\n  originChain?: ChainId;\n  targetChain?: ChainId;\n  targetAsset?: string;\n}) {\n  if (!(sourceChain && sourceAsset)) {\n    return null;\n  }\n\n  const searchableAddress: string = sourceAsset.toLowerCase();\n\n  const showPolygonTerraWrappedWarning =\n    sourceChain === CHAIN_ID_POLYGON &&\n    POLYGON_TERRA_WRAPPED_TOKENS.some(\n      (address) => address.toLowerCase() === searchableAddress\n    );\n\n  const showEthPolygonWrappedWarning =\n    sourceChain === CHAIN_ID_ETH &&\n    ETH_POLYGON_WRAPPED_TOKENS.some(\n      (address) => address.toLowerCase() === searchableAddress\n    );\n\n  return (\n    <>\n      {showPolygonTerraWrappedWarning && <PolygonTerraWrappedWarning />}\n      {showEthPolygonWrappedWarning && <EthPolygonWrappedWarning />}\n    </>\n  );\n}\n","import axios from \"axios\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferAmount,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferSourceChain,\n} from \"../store/selectors\";\nimport { WORMHOLE_RPC_HOSTS } from \"../utils/consts\";\nimport { ChainId } from \"@certusone/wormhole-sdk\";\n\nconst REMAINING_NOTIONAL_TOLERANCE = 0.98;\ninterface TokenListEntry {\n  originAddress: string;\n  originChainId: number;\n  price: number;\n}\n\ninterface TokenList {\n  entries: TokenListEntry[];\n}\n\ninterface AvailableNotionalByChainEntry {\n  chainId: number;\n  remainingAvailableNotional: number;\n  notionalLimit: number;\n  bigTransactionSize: number;\n}\n\ninterface AvailableNotionalByChain {\n  entries: AvailableNotionalByChainEntry[];\n}\n\nexport interface ChainLimits {\n  chainId: ChainId;\n  chainNotionalLimit: number;\n  chainRemainingAvailableNotional: number;\n  chainBigTransactionSize: number;\n  tokenPrice: number;\n}\n\nexport interface IsTransferLimitedResult {\n  isLimited: boolean;\n  reason?:\n    | \"EXCEEDS_REMAINING_NOTIONAL\"\n    | \"EXCEEDS_MAX_NOTIONAL\"\n    | \"EXCEEDS_LARGE_TRANSFER_LIMIT\";\n  limits?: ChainLimits;\n}\n\nconst useIsTransferLimited = (): IsTransferLimitedResult => {\n  const [tokenList, setTokenList] = useState<TokenList | null>(null);\n  const [availableNotionalByChain, setAvailableNotionalByChain] =\n    useState<AvailableNotionalByChain | null>(null);\n\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const amount = useSelector(selectTransferAmount);\n  const amountParsed = useMemo(() => {\n    return amount ? parseFloat(amount) : undefined;\n  }, [amount]);\n\n  const effectTriggered = useRef(false);\n\n  useEffect(() => {\n    if (!effectTriggered.current && amountParsed) {\n      let cancelled = false;\n      (async () => {\n        for (const rpcHost of WORMHOLE_RPC_HOSTS) {\n          try {\n            const baseUrl = `${rpcHost}/v1/governor`;\n            const [tokenListResponse, availableNotionalByChainResponse] =\n              await Promise.all([\n                axios.get<TokenList>(`${baseUrl}/token_list`),\n                axios.get<AvailableNotionalByChain>(\n                  `${baseUrl}/available_notional_by_chain`\n                ),\n              ]);\n            if (!cancelled) {\n              setTokenList(tokenListResponse.data);\n              setAvailableNotionalByChain(\n                availableNotionalByChainResponse.data\n              );\n              break;\n            }\n          } catch (error) {\n            console.error(error);\n          }\n          if (cancelled) {\n            break;\n          }\n        }\n        return () => {\n          cancelled = true;\n        };\n      })();\n      effectTriggered.current = true;\n    }\n  }, [amountParsed]);\n\n  const result = useMemo<IsTransferLimitedResult>(() => {\n    if (\n      originAsset &&\n      originChain &&\n      amountParsed &&\n      tokenList &&\n      availableNotionalByChain\n    ) {\n      const token = tokenList.entries.find(\n        (entry) =>\n          entry.originChainId === originChain &&\n          entry.originAddress === \"0x\" + originAsset\n      );\n      if (token) {\n        const chain = availableNotionalByChain.entries.find(\n          (entry) => entry.chainId === sourceChain\n        );\n        if (chain) {\n          const transferNotional = token.price * amountParsed;\n          const isLimitedReason =\n            transferNotional > chain.notionalLimit\n              ? \"EXCEEDS_MAX_NOTIONAL\"\n              : transferNotional >\n                chain.bigTransactionSize * REMAINING_NOTIONAL_TOLERANCE\n              ? \"EXCEEDS_LARGE_TRANSFER_LIMIT\"\n              : transferNotional >\n                chain.remainingAvailableNotional * REMAINING_NOTIONAL_TOLERANCE\n              ? \"EXCEEDS_REMAINING_NOTIONAL\"\n              : undefined;\n          return {\n            isLimited: !!isLimitedReason,\n            reason: isLimitedReason,\n            limits: {\n              chainId: sourceChain,\n              chainNotionalLimit: chain.notionalLimit,\n              chainRemainingAvailableNotional: chain.remainingAvailableNotional,\n              chainBigTransactionSize: chain.bigTransactionSize,\n              tokenPrice: token.price,\n            },\n          };\n        }\n      }\n    }\n    return {\n      isLimited: false,\n    };\n  }, [\n    sourceChain,\n    originChain,\n    originAsset,\n    amountParsed,\n    tokenList,\n    availableNotionalByChain,\n  ]);\n\n  return result;\n};\n\nexport default useIsTransferLimited;\n","import { makeStyles } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { IsTransferLimitedResult } from \"../../hooks/useIsTransferLimited\";\nimport {\n  CHAINS_BY_ID,\n  USD_NUMBER_FORMATTER as USD_FORMATTER,\n} from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nconst TransferLimitedWarning = ({\n  isTransferLimited,\n}: {\n  isTransferLimited: IsTransferLimitedResult;\n}) => {\n  const classes = useStyles();\n  if (\n    isTransferLimited.isLimited &&\n    isTransferLimited.reason &&\n    isTransferLimited.limits\n  ) {\n    const chainName =\n      CHAINS_BY_ID[isTransferLimited.limits.chainId]?.name || \"unknown\";\n    const message =\n      isTransferLimited.reason === \"EXCEEDS_MAX_NOTIONAL\"\n        ? `This transfer's estimated notional value would exceed the notional value limit for transfers on ${chainName} (${USD_FORMATTER.format(\n            isTransferLimited.limits.chainNotionalLimit\n          )}) and may be subject to a 24 hour delay.`\n        : isTransferLimited.reason === \"EXCEEDS_LARGE_TRANSFER_LIMIT\"\n        ? `This transfer's estimated notional value may exceed the notional value for large transfers on ${chainName} (${USD_FORMATTER.format(\n            isTransferLimited.limits.chainBigTransactionSize\n          )}) and may be subject to a 24 hour delay.`\n        : isTransferLimited.reason === \"EXCEEDS_REMAINING_NOTIONAL\"\n        ? `This transfer's estimated notional value may exceed the remaining notional value available for transfers on ${chainName} (${USD_FORMATTER.format(\n            isTransferLimited.limits.chainRemainingAvailableNotional\n          )}) and may be subject to a delay.`\n        : \"\";\n    return (\n      <Alert variant=\"outlined\" severity=\"warning\" className={classes.alert}>\n        {message}\n      </Alert>\n    );\n  }\n  return null;\n};\n\nexport default TransferLimitedWarning;\n","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_CELO,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { VerifiedUser } from \"@material-ui/icons\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectTransferAmount,\n  selectTransferIsSourceComplete,\n  selectTransferShouldLockFields,\n  selectTransferSourceBalanceString,\n  selectTransferSourceChain,\n  selectTransferSourceError,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport {\n  incrementStep,\n  setAmount,\n  setSourceChain,\n  setTargetChain,\n} from \"../../store/transferSlice\";\nimport {\n  BSC_MIGRATION_ASSET_MAP,\n  CELO_MIGRATION_ASSET_MAP,\n  CHAINS,\n  CLUSTER,\n  ETH_MIGRATION_ASSET_MAP,\n  getIsTransferDisabled,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport ChainSelectArrow from \"../ChainSelectArrow\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport NumberTextField from \"../NumberTextField\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport { TokenSelector } from \"../TokenSelectors/SourceTokenSelector\";\nimport SourceAssetWarning from \"./SourceAssetWarning\";\nimport ChainWarningMessage from \"../ChainWarningMessage\";\nimport useIsTransferLimited from \"../../hooks/useIsTransferLimited\";\nimport TransferLimitedWarning from \"./TransferLimitedWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  chainSelectWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n    },\n  },\n  chainSelectContainer: {\n    flexBasis: \"100%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\",\n    },\n  },\n  chainSelectArrow: {\n    position: \"relative\",\n    top: \"20px\",\n    [theme.breakpoints.down(\"sm\")]: { transform: \"rotate(90deg)\" },\n  },\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetChainOptions = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const isSourceTransferDisabled = useMemo(() => {\n    return getIsTransferDisabled(sourceChain, true);\n  }, [sourceChain]);\n  const isTargetTransferDisabled = useMemo(() => {\n    return getIsTransferDisabled(targetChain, false);\n  }, [targetChain]);\n  const parsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const hasParsedTokenAccount = !!parsedTokenAccount;\n  const isEthereumMigration =\n    sourceChain === CHAIN_ID_ETH &&\n    !!parsedTokenAccount &&\n    !!ETH_MIGRATION_ASSET_MAP.get(getAddress(parsedTokenAccount.mintKey));\n  const isBscMigration =\n    sourceChain === CHAIN_ID_BSC &&\n    !!parsedTokenAccount &&\n    !!BSC_MIGRATION_ASSET_MAP.get(getAddress(parsedTokenAccount.mintKey));\n  const isCeloMigration =\n    sourceChain === CHAIN_ID_CELO &&\n    !!parsedTokenAccount &&\n    !!CELO_MIGRATION_ASSET_MAP.get(getAddress(parsedTokenAccount.mintKey));\n  const isMigrationAsset =\n    isEthereumMigration || isBscMigration || isCeloMigration;\n  const uiAmountString = useSelector(selectTransferSourceBalanceString);\n  const amount = useSelector(selectTransferAmount);\n  const error = useSelector(selectTransferSourceError);\n  const isSourceComplete = useSelector(selectTransferIsSourceComplete);\n  const shouldLockFields = useSelector(selectTransferShouldLockFields);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n  const isTransferLimited = useIsTransferLimited();\n  const handleMigrationClick = useCallback(() => {\n    if (sourceChain === CHAIN_ID_ETH) {\n      history.push(`/migrate/Ethereum/${parsedTokenAccount?.mintKey}`);\n    } else if (sourceChain === CHAIN_ID_BSC) {\n      history.push(`/migrate/BinanceSmartChain/${parsedTokenAccount?.mintKey}`);\n    } else if (sourceChain === CHAIN_ID_CELO) {\n      history.push(`/migrate/Celo/${parsedTokenAccount?.mintKey}`);\n    }\n  }, [history, parsedTokenAccount, sourceChain]);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleAmountChange = useCallback(\n    (event) => {\n      dispatch(setAmount(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (uiAmountString) {\n      dispatch(setAmount(uiAmountString));\n    }\n  }, [dispatch, uiAmountString]);\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n\n  return (\n    <>\n      <StepDescription>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          Select the asset you wish to transfer through Dijets Bridge.\n          <div style={{ flexGrow: 1 }} />\n          <div>\n            <Button\n              component={Link}\n              to=\"/token-origin-verifier\"\n              size=\"small\"\n              variant=\"outlined\"\n              startIcon={<VerifiedUser />}\n            >\n              Token Origin Verifier\n            </Button>\n          </div>\n        </div>\n      </StepDescription>\n      <div\n        className={classes.chainSelectWrapper}\n        style={{ marginBottom: \"25px\" }}\n      >\n        <div className={classes.chainSelectContainer}>\n          <Typography variant=\"caption\">Source</Typography>\n          <ChainSelect\n            select\n            variant=\"outlined\"\n            fullWidth\n            value={sourceChain}\n            onChange={handleSourceChange}\n            disabled={shouldLockFields}\n            chains={CHAINS}\n          />\n        </div>\n        <div className={classes.chainSelectArrow}>\n          <ChainSelectArrow\n            onClick={() => {\n              dispatch(setSourceChain(targetChain));\n            }}\n            disabled={shouldLockFields}\n          />\n        </div>\n        <div className={classes.chainSelectContainer}>\n          <Typography variant=\"caption\">Target</Typography>\n          <ChainSelect\n            variant=\"outlined\"\n            select\n            fullWidth\n            value={targetChain}\n            onChange={handleTargetChange}\n            disabled={shouldLockFields}\n            chains={targetChainOptions}\n          />\n        </div>\n      </div>\n      <KeyAndBalance chainId={sourceChain} />\n      {isReady || uiAmountString ? (\n        <div className={classes.transferField}>\n          <TokenSelector disabled={shouldLockFields} />\n        </div>\n      ) : null}\n      {isMigrationAsset ? (\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          fullWidth\n          onClick={handleMigrationClick}\n        >\n          Go to Migration Page\n        </Button>\n      ) : (\n        <>\n          <LowBalanceWarning chainId={sourceChain} />\n          {sourceChain === CHAIN_ID_SOLANA && CLUSTER === \"mainnet\" && (\n            <SolanaTPSWarning />\n          )}\n          <SourceAssetWarning\n            sourceChain={sourceChain}\n            sourceAsset={parsedTokenAccount?.mintKey}\n          />\n          {hasParsedTokenAccount ? (\n            <NumberTextField\n              variant=\"outlined\"\n              label=\"Amount\"\n              fullWidth\n              className={classes.transferField}\n              value={amount}\n              onChange={handleAmountChange}\n              disabled={shouldLockFields}\n              onMaxClick={\n                uiAmountString && !parsedTokenAccount.isNativeAsset\n                  ? handleMaxClick\n                  : undefined\n              }\n            />\n          ) : null}\n          <ChainWarningMessage chainId={sourceChain} />\n          <ChainWarningMessage chainId={targetChain} />\n          <TransferLimitedWarning isTransferLimited={isTransferLimited} />\n          <ButtonWithLoader\n            disabled={\n              !isSourceComplete ||\n              isSourceTransferDisabled ||\n              isTargetTransferDisabled\n            }\n            onClick={handleNextClick}\n            showLoader={false}\n            error={statusMessage || error}\n          >\n            Submit\n          </ButtonWithLoader>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Source;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport numeral from \"numeral\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectSourceWalletAddress,\n  selectTransferAmount,\n  selectTransferRelayerFee,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceWalletAddress = useSelector(selectSourceWalletAddress);\n  const sourceAmount = useSelector(selectTransferAmount);\n  const relayerFee = useSelector(selectTransferRelayerFee);\n\n  const explainerContent =\n    sourceChain && sourceParsedTokenAccount ? (\n      <>\n        <span>\n          You will transfer {sourceAmount}{\" \"}\n          {relayerFee\n            ? `(+~${numeral(relayerFee).format(\"0.00\")} relayer fee)`\n            : \"\"}\n        </span>\n        <SmartAddress\n          chainId={sourceChain}\n          parsedTokenAccount={sourceParsedTokenAccount}\n          isAsset\n        />\n        {sourceWalletAddress ? (\n          <>\n            <span>from</span>\n            <SmartAddress chainId={sourceChain} address={sourceWalletAddress} />\n          </>\n        ) : null}\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerContent}\n      </Typography>\n    </>\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport { useTargetInfo } from \"./Target\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const {\n    targetChain,\n    readableTargetAddress,\n    targetAsset,\n    symbol,\n    tokenName,\n    logo,\n  } = useTargetInfo();\n\n  const explainerContent =\n    targetChain && readableTargetAddress ? (\n      <>\n        {targetAsset ? (\n          <>\n            <span>and receive</span>\n            <SmartAddress\n              chainId={targetChain}\n              address={targetAsset}\n              symbol={symbol}\n              tokenName={tokenName}\n              logo={logo}\n              isAsset\n            />\n          </>\n        ) : null}\n        <span>to</span>\n        <SmartAddress chainId={targetChain} address={readableTargetAddress} />\n        <span>on {CHAINS_BY_ID[targetChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import { ChainId, coalesceChainId, ChainName } from \"@certusone/wormhole-sdk\";\nimport { useMemo } from \"react\";\n\nfunction parseChain(chain: string | null = null): ChainId {\n  if (chain) {\n    const chainId = parseInt(chain);\n    try {\n      if (isNaN(chainId)) {\n        return coalesceChainId(chain as ChainName);\n      } else {\n        return coalesceChainId(chainId as ChainId);\n      }\n    } catch (err) {\n      console.error(\"Invalid path params specified.\", err);\n      return NaN as ChainId;\n    }\n  } else {\n    return NaN as ChainId;\n  }\n}\n\nexport function useDeepLinkTransferParams(search: string) {\n  const query = useMemo(() => new URLSearchParams(search), [search]);\n  const sourceChain = useMemo(\n    () => parseChain(query.get(\"sourceChain\")),\n    [query]\n  );\n  const targetChain = useMemo(\n    () => parseChain(query.get(\"targetChain\")),\n    [query]\n  );\n  return { sourceChain, targetChain };\n}\n","import {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport useCheckIfWormholeWrapped from \"../../hooks/useCheckIfWormholeWrapped\";\nimport useFetchTargetAsset from \"../../hooks/useFetchTargetAsset\";\nimport {\n  selectTransferActiveStep,\n  selectTransferIsRedeemComplete,\n  selectTransferIsRedeeming,\n  selectTransferIsSendComplete,\n  selectTransferIsSending,\n} from \"../../store/selectors\";\nimport {\n  setSourceChain,\n  setStep,\n  setTargetChain,\n} from \"../../store/transferSlice\";\nimport Redeem from \"./Redeem\";\nimport RedeemPreview from \"./RedeemPreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\nimport { useDeepLinkTransferParams } from \"../../hooks/useDeepLinkTransferParams\";\n\nfunction Transfer() {\n  useCheckIfWormholeWrapped();\n  useFetchTargetAsset();\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectTransferActiveStep);\n  const isSending = useSelector(selectTransferIsSending);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const isRedeemComplete = useSelector(selectTransferIsRedeemComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isRedeeming) && !isRedeemComplete;\n\n  const { search } = useLocation();\n  const { sourceChain, targetChain } = useDeepLinkTransferParams(search);\n\n  useEffect(() => {\n    if (sourceChain && targetChain) {\n      dispatch(setSourceChain(sourceChain));\n      dispatch(setTargetChain(targetChain));\n    }\n  }, [sourceChain, targetChain, dispatch]);\n\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))} icon={null}>\n            1. Bridging From:\n          </StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton\n            disabled={preventNavigation || isRedeemComplete || activeStep === 0}\n            onClick={() => dispatch(setStep(1))}\n            icon={null}\n          >\n            2. Target:\n          </StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton disabled icon={null}>\n            3. Send tokens\n          </StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3} completed={isRedeemComplete}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete || isRedeemComplete}\n            icon={null}\n          >\n            4. Redeem tokens:\n          </StepButton>\n          <StepContent>\n            {isRedeemComplete ? <RedeemPreview /> : <Redeem />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default Transfer;\n","import {\n  CHAIN_ID_ARBITRUM,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_FANTOM,\n  CHAIN_ID_KLAYTN,\n  CHAIN_ID_MOONBEAM,\n  CHAIN_ID_NEON,\n  CHAIN_ID_OASIS,\n  CHAIN_ID_POLYGON,\n  ethers_contracts,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Container,\n  ListItemIcon,\n  makeStyles,\n  MenuItem,\n  Paper,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { ethers } from \"ethers\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport arbitrumIcon from \"../icons/arbitrum.svg\";\nimport avaxIcon from \"../icons/avax.svg\";\nimport bnbIcon from \"../icons/bnb.svg\";\nimport ethIcon from \"../icons/eth.svg\";\nimport fantomIcon from \"../icons/fantom.svg\";\nimport klaytnIcon from \"../icons/klaytn.svg\";\nimport moonbeamIcon from \"../icons/moonbeam.svg\";\nimport neonIcon from \"../icons/neon.svg\";\nimport oasisIcon from \"../icons/oasis-network-rose-logo.svg\";\nimport polygonIcon from \"../icons/polygon.svg\";\nimport { COLORS } from \"../muiTheme\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"../store/helpers\";\nimport {\n  ARBWETH_ADDRESS,\n  ARBWETH_DECIMALS,\n  WAVAX_ADDRESS,\n  WAVAX_DECIMALS,\n  WBNB_ADDRESS,\n  WBNB_DECIMALS,\n  WETH_ADDRESS,\n  WETH_DECIMALS,\n  WFTM_ADDRESS,\n  WFTM_DECIMALS,\n  WGLMR_ADDRESS,\n  WGLMR_DECIMALS,\n  WKLAY_ADDRESS,\n  WKLAY_DECIMALS,\n  WMATIC_ADDRESS,\n  WMATIC_DECIMALS,\n  WNEON_ADDRESS,\n  WNEON_DECIMALS,\n  WROSE_ADDRESS,\n  WROSE_DECIMALS,\n} from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport ConnectWalletButton from \"./ConnectWalletButton\";\nimport HeaderText from \"./HeaderText\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    display: \"flex\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n    textAlign: \"center\",\n  },\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  select: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    \"& .MuiSelect-root\": {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  },\n  listItemIcon: {\n    minWidth: 40,\n  },\n  icon: {\n    height: 24,\n    maxWidth: 24,\n  },\n}));\n\nconst supportedTokens = {\n  [CHAIN_ID_ETH]: {\n    symbol: \"WETH\",\n    icon: ethIcon,\n    address: WETH_ADDRESS,\n    decimals: WETH_DECIMALS,\n  },\n  [CHAIN_ID_BSC]: {\n    symbol: \"WBNB\",\n    icon: bnbIcon,\n    address: WBNB_ADDRESS,\n    decimals: WBNB_DECIMALS,\n  },\n  [CHAIN_ID_POLYGON]: {\n    symbol: \"WMATIC\",\n    icon: polygonIcon,\n    address: WMATIC_ADDRESS,\n    decimals: WMATIC_DECIMALS,\n  },\n  [CHAIN_ID_AVAX]: {\n    symbol: \"WAVAX\",\n    icon: avaxIcon,\n    address: WAVAX_ADDRESS,\n    decimals: WAVAX_DECIMALS,\n  },\n  [CHAIN_ID_OASIS]: {\n    symbol: \"WROSE\",\n    icon: oasisIcon,\n    address: WROSE_ADDRESS,\n    decimals: WROSE_DECIMALS,\n  },\n  [CHAIN_ID_FANTOM]: {\n    symbol: \"WFTM\",\n    icon: fantomIcon,\n    address: WFTM_ADDRESS,\n    decimals: WFTM_DECIMALS,\n  },\n  [CHAIN_ID_KLAYTN]: {\n    symbol: \"WKLAY\",\n    icon: klaytnIcon,\n    address: WKLAY_ADDRESS,\n    decimals: WKLAY_DECIMALS,\n  },\n  [CHAIN_ID_NEON]: {\n    symbol: \"WNEON\",\n    icon: neonIcon,\n    address: WNEON_ADDRESS,\n    decimals: WNEON_DECIMALS,\n  },\n  [CHAIN_ID_MOONBEAM]: {\n    symbol: \"WGLMR\",\n    icon: moonbeamIcon,\n    address: WGLMR_ADDRESS,\n    decimals: WGLMR_DECIMALS,\n  },\n  [CHAIN_ID_ARBITRUM]: {\n    symbol: \"WETH\",\n    icon: arbitrumIcon,\n    address: ARBWETH_ADDRESS,\n    decimals: ARBWETH_DECIMALS,\n  },\n} as const;\n\ntype SupportedChain = keyof typeof supportedTokens;\n\ninterface BalancesInfo {\n  native: ethers.BigNumber;\n  wrapped: ethers.BigNumber;\n}\n\nfunction UnwrapNative() {\n  const classes = useStyles();\n  const [selectedChainId, setSelectedChainId] = useState<SupportedChain>(\n    CHAIN_ID_ETH as SupportedChain\n  );\n  const [balances, setBalances] = useState<DataWrapper<BalancesInfo>>(\n    getEmptyDataWrapper()\n  );\n  const [unwrapRequest, setUnwrapRequest] = useState<DataWrapper<boolean>>(\n    getEmptyDataWrapper()\n  );\n  const { signer } = useEthereumProvider(selectedChainId);\n  const { isReady, statusMessage } = useIsWalletReady(selectedChainId);\n  const handleSelect = useCallback((event) => {\n    setSelectedChainId(parseInt(event.target.value) as SupportedChain);\n  }, []);\n  useEffect(() => {\n    setBalances(getEmptyDataWrapper());\n    setUnwrapRequest(getEmptyDataWrapper());\n  }, [selectedChainId]);\n  useEffect(() => {\n    if (!isReady || !signer) return;\n    setBalances(fetchDataWrapper());\n    let cancelled = false;\n    (async () => {\n      try {\n        const native = await signer.getBalance();\n        if (cancelled) return;\n        const wrappedToken = await ethers_contracts.MockWETH9__factory.connect(\n          supportedTokens[selectedChainId].address,\n          signer\n        );\n        if (cancelled) return;\n        const signerAddress = await signer.getAddress();\n        if (cancelled) return;\n        const wrapped = await wrappedToken.balanceOf(signerAddress);\n        if (cancelled) return;\n        setBalances(receiveDataWrapper({ native, wrapped }));\n      } catch (e) {\n        console.error(e);\n        if (cancelled) return;\n        setBalances(\n          errorDataWrapper(\"An error occurred while fetching balances\")\n        );\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [isReady, signer, selectedChainId, unwrapRequest.data]);\n  const handleClick = useCallback(() => {\n    if (!isReady || !signer || !balances.data || balances.data.wrapped.eq(0))\n      return;\n    const amount = balances.data.wrapped;\n    let cancelled = false;\n    setUnwrapRequest(fetchDataWrapper());\n    (async () => {\n      try {\n        const wrappedToken = await ethers_contracts.MockWETH9__factory.connect(\n          supportedTokens[selectedChainId].address,\n          signer\n        );\n        const tx = await wrappedToken.withdraw(amount);\n        await tx.wait();\n        if (cancelled) return;\n        setUnwrapRequest(receiveDataWrapper(true));\n      } catch (e) {\n        console.error(e);\n        if (cancelled) return;\n        setUnwrapRequest(errorDataWrapper(parseError(e)));\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [isReady, signer, selectedChainId, balances.data]);\n  const error = unwrapRequest.error || balances.error || statusMessage;\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText white>Unwrap Native Tokens</HeaderText>\n      <Paper className={classes.mainPaper}>\n        <Typography style={{ textAlign: \"center\" }}>\n          Unwrap (withdraw) native tokens from their wrapped form (e.g. WETH\n          &rarr; ETH)\n        </Typography>\n        <ConnectWalletButton chainId={selectedChainId} />\n        <TextField\n          select\n          value={selectedChainId}\n          onChange={handleSelect}\n          className={classes.select}\n          disabled={unwrapRequest.isFetching}\n        >\n          {Object.entries(supportedTokens).map(([key, item]) => (\n            <MenuItem key={key} value={key}>\n              <ListItemIcon className={classes.listItemIcon}>\n                <img\n                  src={item.icon}\n                  alt={item.symbol}\n                  className={classes.icon}\n                />\n              </ListItemIcon>\n              {item.symbol}\n            </MenuItem>\n          ))}\n        </TextField>\n        <Typography variant=\"h5\" gutterBottom>\n          {formatUnits(\n            balances.data?.wrapped || 0,\n            supportedTokens[selectedChainId].decimals\n          )}\n        </Typography>\n        <Typography variant=\"subtitle1\" gutterBottom>\n          {supportedTokens[selectedChainId].symbol.substring(1)}\n        </Typography>\n        <Typography variant=\"h5\" gutterBottom>\n          {formatUnits(\n            balances.data?.native || 0,\n            supportedTokens[selectedChainId].decimals\n          )}\n        </Typography>\n        <Typography variant=\"h5\" gutterBottom></Typography>\n        <ButtonWithLoader\n          disabled={\n            !isReady ||\n            balances.isFetching ||\n            !balances.data ||\n            balances.data.wrapped.eq(0) ||\n            unwrapRequest.isFetching\n          }\n          onClick={handleClick}\n          showLoader={balances.isFetching || unwrapRequest.isFetching}\n          error={error}\n        >\n          Unwrap All\n        </ButtonWithLoader>\n      </Paper>\n    </Container>\n  );\n}\n\nexport default UnwrapNative;\n","// TODO: need to add select chain bar\nimport { useCallback, useState } from \"react\";\nimport { MsgExecuteContract } from \"@terra-money/terra.js\";\nimport {\n  getTokenBridgeAddressForChain,\n  SUPPORTED_TERRA_TOKENS,\n} from \"../utils/consts\";\nimport {\n  Container,\n  FormControl,\n  InputLabel,\n  makeStyles,\n  MenuItem,\n  Paper,\n  Select,\n  Typography,\n} from \"@material-ui/core\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport { useSnackbar } from \"notistack\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useSelector } from \"react-redux\";\nimport { selectTerraFeeDenom } from \"../store/selectors\";\nimport TerraFeeDenomPicker from \"./TerraFeeDenomPicker\";\nimport HeaderText from \"./HeaderText\";\nimport { COLORS } from \"../muiTheme\";\nimport { CHAIN_ID_TERRA } from \"@certusone/wormhole-sdk\";\nimport { useTerraWallet } from \"../contexts/TerraWalletContext\";\nimport { TerraWallet } from \"@xlabs-libs/wallet-aggregator-terra\";\nimport ConnectWalletButton from \"./ConnectWalletButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    display: \"flex\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n    textAlign: \"center\",\n  },\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n}));\n\nconst withdraw = async (\n  wallet: TerraWallet,\n  token: string,\n  feeDenom: string\n) => {\n  const withdraw = new MsgExecuteContract(\n    wallet.getAddress()!,\n    getTokenBridgeAddressForChain(CHAIN_ID_TERRA),\n    {\n      withdraw_tokens: {\n        asset: {\n          native_token: {\n            denom: token,\n          },\n        },\n      },\n    },\n    {}\n  );\n  const txResult = await postWithFees(\n    wallet,\n    [withdraw],\n    \"Wormhole - Withdraw Tokens\",\n    [feeDenom],\n    CHAIN_ID_TERRA\n  );\n  await waitForTerraExecution(txResult, CHAIN_ID_TERRA);\n};\n\nexport default function WithdrawTokensTerra() {\n  const { wallet } = useTerraWallet(CHAIN_ID_TERRA);\n  const [token, setToken] = useState(SUPPORTED_TERRA_TOKENS[0]);\n  const [isLoading, setIsLoading] = useState(false);\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const feeDenom = useSelector(selectTerraFeeDenom);\n\n  const handleClick = useCallback(() => {\n    if (wallet) {\n      (async () => {\n        setIsLoading(true);\n        try {\n          await withdraw(wallet, token, feeDenom);\n          enqueueSnackbar(null, {\n            content: <Alert severity=\"success\">Transaction confirmed.</Alert>,\n          });\n        } catch (e) {\n          enqueueSnackbar(null, {\n            content: <Alert severity=\"error\">Error withdrawing tokens.</Alert>,\n          });\n          console.error(e);\n        }\n        setIsLoading(false);\n      })();\n    }\n  }, [wallet, token, enqueueSnackbar, feeDenom]);\n\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText white>Withdraw Tokens</HeaderText>\n      <Paper className={classes.mainPaper}>\n        <Typography style={{ textAlign: \"center\" }}>\n          Withdraw tokens from the Terra token bridge\n        </Typography>\n        <ConnectWalletButton chainId={CHAIN_ID_TERRA} />\n        <FormControl className={classes.formControl}>\n          <InputLabel>Token</InputLabel>\n          <Select\n            value={token}\n            onChange={(event) => {\n              setToken(event.target.value as string);\n            }}\n          >\n            {SUPPORTED_TERRA_TOKENS.map((name) => (\n              <MenuItem key={name} value={name}>\n                {name}\n              </MenuItem>\n            ))}\n          </Select>\n          <TerraFeeDenomPicker disabled={isLoading} chainId={CHAIN_ID_TERRA} />\n          <ButtonWithLoader\n            onClick={handleClick}\n            disabled={!wallet || isLoading}\n            showLoader={isLoading}\n          >\n            Withdraw\n          </ButtonWithLoader>\n        </FormControl>\n      </Paper>\n    </Container>\n  );\n}\n","var _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _g, _g2, _g3, _g4, _g5, _g6, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _path19, _path20, _path21, _path22, _path23, _path24, _path25, _path26, _path27, _path28, _path29, _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgPortalLogoW(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 1000,\n    height: 427,\n    viewBox: \"0 0 1000 427\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M192.261 100.344H43.1121V126.57H192.261V100.344Z\",\n    fill: \"url(#paint0_linear_884_314)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M417.682 226.349H279.796V252.574H417.682V226.349Z\",\n    fill: \"url(#paint1_linear_884_314)\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M538.044 100.344H388.895V126.57H538.044V100.344Z\",\n    fill: \"url(#paint2_linear_884_314)\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M743.245 226.349H545.505V252.574H743.245V226.349Z\",\n    fill: \"url(#paint3_linear_884_314)\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M912.711 100.344H763.562V126.57H912.711V100.344Z\",\n    fill: \"url(#paint4_linear_884_314)\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M192.261 100.344H43.1121V126.57H192.261V100.344Z\",\n    fill: \"url(#paint5_radial_884_314)\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M417.682 226.349H279.796V252.574H417.682V226.349Z\",\n    fill: \"url(#paint6_radial_884_314)\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M538.044 100.344H388.895V126.57H538.044V100.344Z\",\n    fill: \"url(#paint7_radial_884_314)\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M743.245 226.349H545.505V252.574H743.245V226.349Z\",\n    fill: \"url(#paint8_radial_884_314)\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M912.711 100.344H763.562V126.57H912.711V100.344Z\",\n    fill: \"url(#paint9_radial_884_314)\"\n  })), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    filter: \"url(#filter0_i_884_314)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 100.344H79.9194C115.902 100.344 131.23 116.525 131.23 140.157V141.009C131.23 158.043 122.5 169.328 105.468 173.798C124.204 176.992 135.915 188.275 135.915 209.354V210.206C135.915 237.459 118.242 252.576 80.5581 252.576H12V100.344ZM71.1894 160.809C84.8167 160.809 89.9247 156.127 89.9247 145.265V144.414C89.9247 133.983 84.3886 129.298 71.1894 129.298H54.5832V160.809H71.1894ZM72.6798 223.405C86.5201 223.405 92.9079 217.017 92.9079 205.735V204.881C92.9079 193.383 86.733 187.423 71.4045 187.423H54.5855V223.405H72.6798Z\",\n    fill: \"#F3F3F3\"\n  }))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", {\n    filter: \"url(#filter1_i_884_314)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M192.261 100.344H251.876C291.691 100.344 313.833 116.525 313.833 148.674V149.526C313.833 171.245 302.335 183.382 286.368 189.554L322.776 252.576H276.788L245.916 198.071H235.696V252.576H192.261V100.344ZM249.747 169.754C264.439 169.754 271.676 163.579 271.676 151.23V150.376C271.676 138.028 264.01 133.131 249.959 133.131H235.693V169.754H249.747Z\",\n    fill: \"#F3F3F3\"\n  }))), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", {\n    filter: \"url(#filter2_i_884_314)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M373.608 100.344H417.682V252.574H373.608V100.344Z\",\n    fill: \"#F3F3F3\"\n  }))), _g4 || (_g4 = /*#__PURE__*/React.createElement(\"g\", {\n    filter: \"url(#filter3_i_884_314)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M481.198 100.344H536.555C590.636 100.344 618.102 127.382 618.102 174.649V176.355C618.102 223.833 589.998 252.576 536.344 252.576H481.201L481.198 100.344ZM535.065 218.936C561.04 218.936 572.538 205.309 572.538 176.994V175.288C572.538 146.332 561.04 133.985 534.639 133.985H525.059V218.934H535.067L535.065 218.936Z\",\n    fill: \"#F3F3F3\"\n  }))), _g5 || (_g5 = /*#__PURE__*/React.createElement(\"g\", {\n    filter: \"url(#filter4_i_884_314)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M666.064 177.417V175.714C666.064 129.298 700.13 98 745.907 98C781.89 98 813.824 114.395 816.805 153.998H773.585C771.456 139.732 762.3 132.279 746.12 132.279C724.617 132.279 711.628 148.885 711.628 176.353V178.056C711.628 202.756 720.782 221.915 747.182 221.915C768.475 221.915 776.564 211.056 777.416 198.921H748.888V168.474H820.425V187.21C820.425 225.96 795.089 255.129 745.907 255.129C694.168 255.129 666.064 222.982 666.064 177.417Z\",\n    fill: \"#F3F3F3\"\n  }))), _g6 || (_g6 = /*#__PURE__*/React.createElement(\"g\", {\n    filter: \"url(#filter5_i_884_314)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M876.771 100.344H981.95V133.985H920.206V160.173H969.39V191.26H920.206V218.938H985.357V252.579H876.771V100.344Z\",\n    fill: \"#F3F3F3\"\n  }))), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M302.028 337.543V305.281H312.929C315.46 305.281 317.529 305.738 319.135 306.652C320.753 307.555 321.95 308.779 322.727 310.322C323.504 311.866 323.893 313.588 323.893 315.489C323.893 317.39 323.504 319.118 322.727 320.672C321.96 322.226 320.774 323.465 319.167 324.39C317.56 325.303 315.502 325.76 312.992 325.76H305.179V322.294H312.866C314.599 322.294 315.99 321.995 317.04 321.397C318.091 320.798 318.852 319.989 319.325 318.971C319.808 317.941 320.049 316.781 320.049 315.489C320.049 314.198 319.808 313.042 319.325 312.024C318.852 311.005 318.085 310.207 317.025 309.629C315.964 309.041 314.557 308.747 312.803 308.747H305.935V337.543H302.028Z\",\n    fill: \"#CFCFCF\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M363.839 321.412C363.839 324.815 363.225 327.755 361.996 330.234C360.767 332.712 359.082 334.624 356.939 335.968C354.797 337.312 352.35 337.984 349.599 337.984C346.847 337.984 344.4 337.312 342.258 335.968C340.115 334.624 338.43 332.712 337.201 330.234C335.972 327.755 335.358 324.815 335.358 321.412C335.358 318.01 335.972 315.069 337.201 312.591C338.43 310.112 340.115 308.201 342.258 306.857C344.4 305.512 346.847 304.84 349.599 304.84C352.35 304.84 354.797 305.512 356.939 306.857C359.082 308.201 360.767 310.112 361.996 312.591C363.225 315.069 363.839 318.01 363.839 321.412ZM360.058 321.412C360.058 318.619 359.591 316.261 358.656 314.339C357.732 312.417 356.477 310.963 354.891 309.976C353.316 308.989 351.552 308.495 349.599 308.495C347.645 308.495 345.876 308.989 344.29 309.976C342.715 310.963 341.46 312.417 340.525 314.339C339.601 316.261 339.139 318.619 339.139 321.412C339.139 324.206 339.601 326.563 340.525 328.485C341.46 330.407 342.715 331.862 344.29 332.849C345.876 333.836 347.645 334.33 349.599 334.33C351.552 334.33 353.316 333.836 354.891 332.849C356.477 331.862 357.732 330.407 358.656 328.485C359.591 326.563 360.058 324.206 360.058 321.412Z\",\n    fill: \"#CFCFCF\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M382.7 337.543L373.879 305.281H377.848L384.591 331.557H384.906L391.774 305.281H396.185L403.053 331.557H403.368L410.11 305.281H414.08L405.258 337.543H401.225L394.105 311.835H393.853L386.733 337.543H382.7Z\",\n    fill: \"#CFCFCF\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M425.38 337.543V305.281H444.85V308.747H429.286V319.648H443.842V323.114H429.286V334.078H445.102V337.543H425.38Z\",\n    fill: \"#CFCFCF\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M458.324 337.543V305.281H469.225C471.745 305.281 473.814 305.712 475.431 306.573C477.048 307.424 478.246 308.595 479.023 310.086C479.8 311.577 480.189 313.273 480.189 315.174C480.189 317.075 479.8 318.761 479.023 320.231C478.246 321.701 477.054 322.856 475.447 323.696C473.84 324.526 471.787 324.941 469.288 324.941H460.466V321.412H469.162C470.884 321.412 472.27 321.16 473.32 320.656C474.381 320.152 475.148 319.438 475.62 318.514C476.103 317.579 476.345 316.466 476.345 315.174C476.345 313.882 476.103 312.754 475.62 311.787C475.137 310.821 474.365 310.076 473.305 309.55C472.244 309.015 470.842 308.747 469.099 308.747H462.23V337.543H458.324ZM473.509 323.051L481.449 337.543H476.912L469.099 323.051H473.509Z\",\n    fill: \"#CFCFCF\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M493.131 337.543V305.281H512.601V308.747H497.037V319.648H511.593V323.114H497.037V334.078H512.853V337.543H493.131Z\",\n    fill: \"#CFCFCF\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M536.03 337.543H526.075V305.281H536.472C539.601 305.281 542.279 305.927 544.505 307.219C546.732 308.5 548.438 310.343 549.625 312.748C550.812 315.143 551.405 318.01 551.405 321.349C551.405 324.71 550.807 327.603 549.609 330.029C548.412 332.445 546.669 334.303 544.379 335.606C542.09 336.897 539.307 337.543 536.03 337.543ZM529.981 334.078H535.778C538.446 334.078 540.656 333.563 542.41 332.534C544.164 331.505 545.472 330.04 546.333 328.139C547.194 326.238 547.624 323.975 547.624 321.349C547.624 318.745 547.199 316.503 546.349 314.623C545.498 312.733 544.227 311.283 542.536 310.275C540.846 309.256 538.74 308.747 536.219 308.747H529.981V334.078Z\",\n    fill: \"#CFCFCF\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M583.299 337.543V305.281H594.578C596.825 305.281 598.679 305.67 600.139 306.447C601.598 307.214 602.685 308.248 603.399 309.55C604.114 310.842 604.471 312.276 604.471 313.851C604.471 315.237 604.224 316.382 603.73 317.285C603.247 318.188 602.607 318.902 601.808 319.427C601.021 319.953 600.165 320.341 599.241 320.593V320.908C600.228 320.971 601.22 321.318 602.218 321.948C603.216 322.578 604.051 323.481 604.723 324.657C605.395 325.834 605.731 327.272 605.731 328.974C605.731 330.591 605.363 332.045 604.628 333.337C603.893 334.629 602.733 335.653 601.147 336.409C599.561 337.165 597.497 337.543 594.956 337.543H583.299ZM587.206 334.078H594.956C597.508 334.078 599.319 333.584 600.391 332.597C601.472 331.599 602.013 330.391 602.013 328.974C602.013 327.881 601.735 326.873 601.178 325.949C600.622 325.014 599.829 324.269 598.8 323.712C597.77 323.145 596.552 322.862 595.145 322.862H587.206V334.078ZM587.206 319.459H594.452C595.628 319.459 596.689 319.228 597.634 318.766C598.59 318.304 599.346 317.653 599.902 316.812C600.469 315.972 600.753 314.985 600.753 313.851C600.753 312.433 600.259 311.231 599.272 310.244C598.285 309.246 596.72 308.747 594.578 308.747H587.206V319.459Z\",\n    fill: \"#CFCFCF\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M615.81 305.281H620.284L629.231 320.341H629.609L638.557 305.281H643.031L631.374 324.248V337.543H627.467V324.248L615.81 305.281Z\",\n    fill: \"#CFCFCF\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M682.411 337.543H670.486V305.281H682.395C685.682 305.281 688.512 305.927 690.886 307.219C693.27 308.5 695.108 310.349 696.399 312.764C697.691 315.169 698.337 318.046 698.337 321.397C698.337 324.757 697.691 327.645 696.399 330.061C695.118 332.476 693.286 334.33 690.902 335.621C688.518 336.903 685.687 337.543 682.411 337.543ZM678.284 330.895H682.112C683.918 330.895 685.446 330.591 686.696 329.982C687.956 329.362 688.906 328.359 689.547 326.973C690.198 325.576 690.524 323.717 690.524 321.397C690.524 319.076 690.198 317.227 689.547 315.852C688.896 314.465 687.935 313.468 686.664 312.859C685.404 312.239 683.85 311.929 682.001 311.929H678.284V330.895Z\",\n    fill: \"#CFCFCF\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M717.119 305.281V337.543H709.322V305.281H717.119Z\",\n    fill: \"#CFCFCF\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M741.553 305.281H749.24V327.587C749.23 329.677 748.731 331.505 747.744 333.069C746.757 334.624 745.391 335.831 743.648 336.693C741.915 337.554 739.909 337.984 737.63 337.984C735.614 337.984 733.782 337.632 732.133 336.929C730.494 336.225 729.187 335.133 728.21 333.652C727.244 332.171 726.766 330.276 726.777 327.965H734.543C734.574 328.795 734.732 329.504 735.016 330.092C735.31 330.67 735.714 331.106 736.228 331.4C736.743 331.694 737.357 331.841 738.072 331.841C738.817 331.841 739.447 331.683 739.962 331.368C740.477 331.043 740.865 330.565 741.128 329.935C741.401 329.304 741.542 328.522 741.553 327.587V305.281Z\",\n    fill: \"#CFCFCF\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M760.568 337.543V305.281H783.063V311.614H768.365V318.23H781.913V324.579H768.365V331.211H783.063V337.543H760.568Z\",\n    fill: \"#CFCFCF\"\n  })), _path24 || (_path24 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M793.323 311.614V305.281H820.591V311.614H810.808V337.543H803.121V311.614H793.323Z\",\n    fill: \"#CFCFCF\"\n  })), _path25 || (_path25 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M848.27 314.954C848.165 313.798 847.697 312.901 846.868 312.26C846.048 311.609 844.877 311.283 843.355 311.283C842.347 311.283 841.506 311.415 840.834 311.677C840.162 311.94 839.658 312.302 839.322 312.764C838.986 313.216 838.813 313.735 838.802 314.324C838.781 314.807 838.876 315.232 839.086 315.6C839.306 315.967 839.621 316.293 840.031 316.576C840.451 316.849 840.955 317.091 841.543 317.301C842.131 317.511 842.793 317.695 843.528 317.852L846.3 318.482C847.897 318.829 849.304 319.291 850.522 319.869C851.751 320.446 852.78 321.134 853.61 321.932C854.45 322.73 855.085 323.649 855.516 324.689C855.946 325.729 856.167 326.894 856.177 328.186C856.167 330.223 855.652 331.972 854.634 333.432C853.615 334.891 852.15 336.01 850.239 336.787C848.338 337.564 846.043 337.953 843.355 337.953C840.656 337.953 838.303 337.548 836.297 336.74C834.292 335.931 832.732 334.702 831.619 333.054C830.506 331.405 829.933 329.32 829.902 326.8H837.369C837.432 327.839 837.71 328.706 838.204 329.399C838.697 330.092 839.374 330.617 840.236 330.974C841.107 331.331 842.115 331.51 843.26 331.51C844.31 331.51 845.203 331.368 845.938 331.085C846.684 330.801 847.256 330.407 847.655 329.903C848.054 329.399 848.259 328.821 848.27 328.17C848.259 327.561 848.07 327.041 847.702 326.611C847.335 326.17 846.768 325.792 846.001 325.477C845.245 325.151 844.279 324.852 843.103 324.579L839.732 323.791C836.938 323.15 834.738 322.116 833.131 320.688C831.524 319.249 830.726 317.306 830.737 314.859C830.726 312.864 831.262 311.115 832.343 309.613C833.425 308.112 834.922 306.941 836.833 306.101C838.744 305.26 840.923 304.84 843.37 304.84C845.87 304.84 848.039 305.266 849.876 306.116C851.725 306.957 853.158 308.138 854.177 309.661C855.196 311.184 855.715 312.948 855.736 314.954H848.27Z\",\n    fill: \"#CFCFCF\"\n  })), _path26 || (_path26 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M890.308 305.281V337.543H882.511V305.281H890.308Z\",\n    fill: \"#CFCFCF\"\n  })), _path27 || (_path27 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M929.093 305.281V337.543H922.476L909.638 318.923H909.433V337.543H901.636V305.281H908.346L921.043 323.87H921.311V305.281H929.093Z\",\n    fill: \"#CFCFCF\"\n  })), _path28 || (_path28 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M969.712 316.97H961.836C961.731 316.161 961.516 315.432 961.19 314.78C960.864 314.129 960.434 313.573 959.898 313.111C959.363 312.649 958.727 312.297 957.992 312.055C957.268 311.803 956.464 311.677 955.582 311.677C954.017 311.677 952.668 312.06 951.534 312.827C950.41 313.594 949.543 314.702 948.934 316.151C948.336 317.6 948.036 319.354 948.036 321.412C948.036 323.555 948.341 325.351 948.95 326.8C949.57 328.239 950.436 329.325 951.549 330.061C952.673 330.785 954.001 331.148 955.535 331.148C956.396 331.148 957.178 331.037 957.882 330.817C958.596 330.596 959.221 330.276 959.756 329.856C960.303 329.425 960.749 328.905 961.095 328.296C961.453 327.677 961.699 326.978 961.836 326.201L969.712 326.248C969.576 327.677 969.161 329.084 968.468 330.47C967.785 331.856 966.845 333.122 965.648 334.267C964.451 335.401 962.991 336.304 961.269 336.976C959.557 337.648 957.593 337.984 955.377 337.984C952.458 337.984 949.843 337.344 947.532 336.062C945.232 334.771 943.416 332.891 942.082 330.423C940.748 327.955 940.081 324.951 940.081 321.412C940.081 317.863 940.759 314.854 942.113 312.386C943.468 309.918 945.301 308.043 947.611 306.762C949.921 305.481 952.51 304.84 955.377 304.84C957.331 304.84 959.137 305.113 960.796 305.66C962.455 306.195 963.915 306.983 965.175 308.022C966.436 309.052 967.46 310.317 968.247 311.819C969.035 313.321 969.523 315.038 969.712 316.97Z\",\n    fill: \"#CFCFCF\"\n  })), _path29 || (_path29 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M984.938 338C983.804 338 982.833 337.601 982.024 336.803C981.226 336.005 980.832 335.038 980.843 333.904C980.832 332.791 981.226 331.841 982.024 331.053C982.833 330.255 983.804 329.856 984.938 329.856C986.01 329.856 986.955 330.255 987.774 331.053C988.604 331.841 989.024 332.791 989.034 333.904C989.024 334.66 988.824 335.348 988.436 335.968C988.057 336.587 987.559 337.081 986.939 337.449C986.33 337.816 985.663 338 984.938 338Z\",\n    fill: \"#CFCFCF\"\n  })), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter0_i_884_314\",\n    x: 9,\n    y: 100.344,\n    width: 126.915,\n    height: 154.232,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"BackgroundImageFix\",\n    result: \"shape\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dx: -3,\n    dy: 2\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 1.5\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    in2: \"hardAlpha\",\n    operator: \"arithmetic\",\n    k2: -1,\n    k3: 1\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.35 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"shape\",\n    result: \"effect1_innerShadow_884_314\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter1_i_884_314\",\n    x: 189.261,\n    y: 100.344,\n    width: 133.516,\n    height: 154.232,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"BackgroundImageFix\",\n    result: \"shape\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dx: -3,\n    dy: 2\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 1.5\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    in2: \"hardAlpha\",\n    operator: \"arithmetic\",\n    k2: -1,\n    k3: 1\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.35 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"shape\",\n    result: \"effect1_innerShadow_884_314\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter2_i_884_314\",\n    x: 370.608,\n    y: 100.344,\n    width: 47.0737,\n    height: 154.23,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"BackgroundImageFix\",\n    result: \"shape\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dx: -3,\n    dy: 2\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 1.5\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    in2: \"hardAlpha\",\n    operator: \"arithmetic\",\n    k2: -1,\n    k3: 1\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.35 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"shape\",\n    result: \"effect1_innerShadow_884_314\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter3_i_884_314\",\n    x: 478.198,\n    y: 100.344,\n    width: 139.903,\n    height: 154.232,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"BackgroundImageFix\",\n    result: \"shape\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dx: -3,\n    dy: 2\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 1.5\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    in2: \"hardAlpha\",\n    operator: \"arithmetic\",\n    k2: -1,\n    k3: 1\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.35 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"shape\",\n    result: \"effect1_innerShadow_884_314\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter4_i_884_314\",\n    x: 663.064,\n    y: 98,\n    width: 157.361,\n    height: 159.129,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"BackgroundImageFix\",\n    result: \"shape\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dx: -3,\n    dy: 2\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 1.5\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    in2: \"hardAlpha\",\n    operator: \"arithmetic\",\n    k2: -1,\n    k3: 1\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.35 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"shape\",\n    result: \"effect1_innerShadow_884_314\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter5_i_884_314\",\n    x: 873.771,\n    y: 100.344,\n    width: 111.586,\n    height: 154.234,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"BackgroundImageFix\",\n    result: \"shape\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dx: -3,\n    dy: 2\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 1.5\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    in2: \"hardAlpha\",\n    operator: \"arithmetic\",\n    k2: -1,\n    k3: 1\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.35 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"shape\",\n    result: \"effect1_innerShadow_884_314\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint0_linear_884_314\",\n    x1: 117.687,\n    y1: 100.344,\n    x2: 117.687,\n    y2: 126.57,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#FF9900\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#FF6109\",\n    stopOpacity: 0.57\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint1_linear_884_314\",\n    x1: 348.739,\n    y1: 226.349,\n    x2: 348.739,\n    y2: 252.574,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#FF9900\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#FF6109\",\n    stopOpacity: 0.57\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint2_linear_884_314\",\n    x1: 463.469,\n    y1: 100.344,\n    x2: 463.469,\n    y2: 126.57,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#FF9900\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#FF6109\",\n    stopOpacity: 0.57\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint3_linear_884_314\",\n    x1: 644.375,\n    y1: 226.349,\n    x2: 644.375,\n    y2: 252.574,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#FF9900\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#FF6109\",\n    stopOpacity: 0.57\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint4_linear_884_314\",\n    x1: 838.137,\n    y1: 100.344,\n    x2: 838.137,\n    y2: 126.57,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#FF9900\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#FF6109\",\n    stopOpacity: 0.57\n  })), /*#__PURE__*/React.createElement(\"radialGradient\", {\n    id: \"paint5_radial_884_314\",\n    cx: 0,\n    cy: 0,\n    r: 1,\n    gradientUnits: \"userSpaceOnUse\",\n    gradientTransform: \"translate(117.68 113.455) scale(62.5046 10.9905)\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.2254,\n    stopColor: \"#FFA217\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.5444,\n    stopColor: \"#FFAA2C\",\n    stopOpacity: 0.44\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.6859,\n    stopColor: \"#FCAD15\",\n    stopOpacity: 0.23\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.8568,\n    stopColor: \"#FFB876\",\n    stopOpacity: 0.07\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#FF9A62\",\n    stopOpacity: 0\n  })), /*#__PURE__*/React.createElement(\"radialGradient\", {\n    id: \"paint6_radial_884_314\",\n    cx: 0,\n    cy: 0,\n    r: 1,\n    gradientUnits: \"userSpaceOnUse\",\n    gradientTransform: \"translate(348.733 239.46) scale(57.7845 10.9905)\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.2254,\n    stopColor: \"#FFA217\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.5444,\n    stopColor: \"#FFAA2C\",\n    stopOpacity: 0.44\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.6859,\n    stopColor: \"#FCAD15\",\n    stopOpacity: 0.23\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.8568,\n    stopColor: \"#FFB876\",\n    stopOpacity: 0.07\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#FF9A62\",\n    stopOpacity: 0\n  })), /*#__PURE__*/React.createElement(\"radialGradient\", {\n    id: \"paint7_radial_884_314\",\n    cx: 0,\n    cy: 0,\n    r: 1,\n    gradientUnits: \"userSpaceOnUse\",\n    gradientTransform: \"translate(463.462 113.455) scale(62.5046 10.9905)\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.2254,\n    stopColor: \"#FFA217\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.5444,\n    stopColor: \"#FFAA2C\",\n    stopOpacity: 0.44\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.6859,\n    stopColor: \"#FCAD15\",\n    stopOpacity: 0.23\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.8568,\n    stopColor: \"#FFB876\",\n    stopOpacity: 0.07\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#FF9A62\",\n    stopOpacity: 0\n  })), /*#__PURE__*/React.createElement(\"radialGradient\", {\n    id: \"paint8_radial_884_314\",\n    cx: 0,\n    cy: 0,\n    r: 1,\n    gradientUnits: \"userSpaceOnUse\",\n    gradientTransform: \"translate(644.366 239.46) scale(82.8681 10.9905)\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.2254,\n    stopColor: \"#FFA217\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.5444,\n    stopColor: \"#FFAA2C\",\n    stopOpacity: 0.44\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.6859,\n    stopColor: \"#FCAD15\",\n    stopOpacity: 0.23\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.8568,\n    stopColor: \"#FFB876\",\n    stopOpacity: 0.07\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#FF9A62\",\n    stopOpacity: 0\n  })), /*#__PURE__*/React.createElement(\"radialGradient\", {\n    id: \"paint9_radial_884_314\",\n    cx: 0,\n    cy: 0,\n    r: 1,\n    gradientUnits: \"userSpaceOnUse\",\n    gradientTransform: \"translate(838.13 113.455) scale(62.5046 10.9905)\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.2254,\n    stopColor: \"#FFA217\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.5444,\n    stopColor: \"#FFAA2C\",\n    stopOpacity: 0.44\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.6859,\n    stopColor: \"#FCAD15\",\n    stopOpacity: 0.23\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.8568,\n    stopColor: \"#FFB876\",\n    stopOpacity: 0.07\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#FF9A62\",\n    stopOpacity: 0\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPortalLogoW);\nexport default __webpack_public_path__ + \"static/media/portal_logo_w.11190f7def3417a0efc148dc5b1c4dae.svg\";\nexport { ForwardRef as ReactComponent };","import { makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  bar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    minHeight: \"48px\",\n    padding: \"4px 16px\",\n    textAlign: \"center\",\n    fontWeight: 500,\n    fontSize: \"14px\",\n    letterSpacing: \"0.02em\",\n    background: \"linear-gradient(20deg, #f44b1b 0%, #eeb430 100%);\",\n  },\n}));\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst NewsBar = ({ children }: Props) => {\n  const classes = useStyles();\n\n  return <div className={classes.bar}>{children}</div>;\n};\n\nexport default NewsBar;\n","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_CELO,\n  CHAIN_ID_ETH,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  AppBar,\n  Container,\n  Hidden,\n  IconButton,\n  Link,\n  makeStyles,\n  Tab,\n  Tabs,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport { HelpOutline } from \"@material-ui/icons\";\nimport { useCallback } from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\nimport {\n  Link as RouterLink,\n  NavLink,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport Attest from \"./components/Attest\";\nimport Footer from \"./components/Footer\";\nimport HeaderText from \"./components/HeaderText\";\nimport Migration from \"./components/Migration\";\nimport EvmQuickMigrate from \"./components/Migration/EvmQuickMigrate\";\nimport NFT from \"./components/NFT\";\nimport NFTOriginVerifier from \"./components/NFTOriginVerifier\";\nimport Recovery from \"./components/Recovery\";\nimport Stats from \"./components/Stats\";\nimport CustodyAddresses from \"./components/Stats/CustodyAddresses\";\nimport TokenOriginVerifier from \"./components/TokenOriginVerifier\";\nimport Transfer from \"./components/Transfer\";\nimport UnwrapNative from \"./components/UnwrapNative\";\nimport WithdrawTokensTerra from \"./components/WithdrawTokensTerra\";\nimport { useBetaContext } from \"./contexts/BetaContext\";\nimport Portal from \"./icons/portal_logo_w.svg\";\nimport { CLUSTER } from \"./utils/consts\";\nimport NewsBar from \"./components/NewsBar\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    background: \"transparent\",\n    marginTop: theme.spacing(2),\n    \"& > .MuiToolbar-root\": {\n      margin: \"auto\",\n      width: \"100%\",\n      maxWidth: 1440,\n    },\n  },\n  spacer: {\n    flex: 1,\n    width: \"100vw\",\n  },\n  link: {\n    ...theme.typography.body2,\n    fontWeight: 600,\n    fontFamily: \"Suisse BP Intl, sans-serif\",\n    color: \"white\",\n    marginLeft: theme.spacing(4),\n    textUnderlineOffset: \"6px\",\n    [theme.breakpoints.down(\"sm\")]: {\n      marginLeft: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: theme.spacing(1),\n    },\n    \"&.active\": {\n      textDecoration: \"underline\",\n    },\n  },\n  bannerLink: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    borderRadius: 20,\n    padding: \"6px 12px\",\n    backgroundColor: \"white\",\n    color: \"#F47B48\",\n    marginLeft: \"8px\",\n    fontSize: \"12px\",\n    letterSpacing: \"0.08em\",\n    fontWeight: 600,\n    minHeight: \"32px\",\n    minWidth: \"fit-content\",\n  },\n  bg: {\n    //background: \"linear-gradient(160deg, rgba(69,74,117,.1) 0%, rgba(138,146,178,.1) 33%, rgba(69,74,117,.1) 66%, rgba(98,104,143,.1) 100%), linear-gradient(45deg, rgba(153,69,255,.1) 0%, rgba(121,98,231,.1) 20%, rgba(0,209,140,.1) 100%)\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    minHeight: \"100vh\",\n    position: \"relative\",\n    overflow: \"hidden\",\n  },\n  brandLink: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    width: \"100%\",\n    justifyContent: \"center\",\n    paddingBottom: \"36px\",\n    \"&:hover\": {\n      textDecoration: \"none\",\n    },\n  },\n  iconButton: {\n    [theme.breakpoints.up(\"md\")]: {\n      marginRight: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      marginRight: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      marginRight: theme.spacing(1),\n    },\n  },\n  betaBanner: {\n    backgroundColor: \"rgba(0,0,0,0.75)\",\n    padding: theme.spacing(1, 0),\n  },\n  wormholeIcon: {\n    height: 68,\n    \"&:hover\": {\n      filter: \"contrast(1)\",\n    },\n    verticalAlign: \"middle\",\n    marginRight: theme.spacing(1),\n    display: \"inline-block\",\n  },\n  gradientRight: {\n    position: \"absolute\",\n    top: \"72px\",\n    right: \"-1000px\",\n    width: \"1757px\",\n    height: \"1506px\",\n    background:\n      \"radial-gradient(closest-side at 50% 50%, #FFCE00 0%, #FFCE0000 100%)\",\n    opacity: \"0.2\",\n    transform: \"matrix(0.87, 0.48, -0.48, 0.87, 0, 0)\",\n    zIndex: \"-1\",\n    pointerEvent: \"none\",\n    [theme.breakpoints.down(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n  gradientLeft: {\n    top: \"-530px\",\n    left: \"-350px\",\n    width: \"1379px\",\n    height: \"1378px\",\n    position: \"absolute\",\n    background:\n      \"radial-gradient(closest-side at 50% 50%, #F44B1B 0%, #F44B1B00 100%)\",\n    opacity: \"0.2\",\n    zIndex: \"-1\",\n    pointerEvent: \"none\",\n  },\n  gradientLeft2: {\n    bottom: \"-330px\",\n    left: \"-350px\",\n    width: \"1379px\",\n    height: \"1378px\",\n    position: \"absolute\",\n    background:\n      \"radial-gradient(closest-side at 50% 50%, #F44B1B 0%, #F44B1B00 100%)\",\n    opacity: \"0.2\",\n    zIndex: \"-1\",\n    pointerEvent: \"none\",\n    [theme.breakpoints.down(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n  gradientRight2: {\n    position: \"absolute\",\n    bottom: \"-900px\",\n    right: \"-1000px\",\n    width: \"1757px\",\n    height: \"1506px\",\n    background:\n      \"radial-gradient(closest-side at 50% 50%, #FFCE00 0%, #FFCE0000 100%)\",\n    opacity: \"0.24\",\n    transform: \"matrix(0.87, 0.48, -0.48, 0.87, 0, 0);\",\n    zIndex: \"-1\",\n    pointerEvent: \"none\",\n    [theme.breakpoints.down(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const { push } = useHistory();\n  const { pathname } = useLocation();\n  const handleTabChange = useCallback(\n    (event, value) => {\n      push(value);\n    },\n    [push]\n  );\n  return (\n    <div className={classes.bg}>\n      <NewsBar>\n        <>\n          <span>\n            Dijets Bridge will go live on Friday 16/06/2023 at 16:00pm UTC.\n          </span>\n        </>\n      </NewsBar>\n      <AppBar\n        position=\"static\"\n        color=\"inherit\"\n        className={classes.appBar}\n        elevation={0}\n      >\n        <Toolbar>\n          <Link\n            component={RouterLink}\n            to=\"/transfer\"\n            className={classes.brandLink}\n          >\n            <img src={Portal} alt=\"Portal\" className={classes.wormholeIcon} />\n          </Link>\n          <div className={classes.spacer} />\n          <Hidden implementation=\"css\" xsDown>\n            <div style={{ display: \"none\", alignItems: \"center\" }}>\n              <Link\n                component={NavLink}\n                to=\"/transfer\"\n                color=\"inherit\"\n                className={classes.link}\n              >\n                Welcome to Dijets Bridge!\n              </Link>\n            </div>\n          </Hidden>\n        </Toolbar>\n      </AppBar>\n      {[\"/transfer\", \"/nft\", \"/redeem\"].includes(pathname) ? (\n        <Container maxWidth=\"md\" style={{ paddingBottom: 24 }}>\n          <HeaderText\n            white\n            subtitle={\n              <>\n                <Typography>\n                  Dijets Bridge offers bi-directional asset transfers\n                  between Dijets &amp; Ethereum for liquidity.\n                </Typography>\n                <Typography>\n                  Use the bridge to transfer native Dijets Assets like LQ, HAL and GOV\n                  for instant liquidity &amp; cashouts.\n                </Typography>\n              </>\n            }\n          >\n            Welcome to Dijets Bridge!\n          </HeaderText>\n          <Tabs\n            value={pathname}\n            variant=\"fullWidth\"\n            onChange={handleTabChange}\n            indicatorColor=\"primary\"\n          >\n            <Tab label=\"Tokens\" value=\"/transfer\" />\n            <Tab label=\"NFTs\" value=\"/nft\" />\n            <Tab label=\"Redeem\" value=\"/redeem\" to=\"/redeem\" />\n          </Tabs>\n        </Container>\n      ) : null}\n      <Switch>\n        <Route exact path=\"/transfer\">\n          <Transfer />\n        </Route>\n        <Route exact path=\"/nft\">\n          <NFT />\n        </Route>\n        <Route exact path=\"/redeem\">\n          <Recovery />\n        </Route>\n        <Route exact path=\"/nft-origin-verifier\">\n          <NFTOriginVerifier />\n        </Route>\n        <Route exact path=\"/token-origin-verifier\">\n          <TokenOriginVerifier />\n        </Route>\n        <Route exact path=\"/register\">\n          <Attest />\n        </Route>\n        <Route exact path=\"/migrate/Ethereum/:legacyAsset/\">\n          <Migration chainId={CHAIN_ID_ETH} />\n        </Route>\n        <Route exact path=\"/migrate/BinanceSmartChain/:legacyAsset/\">\n          <Migration chainId={CHAIN_ID_BSC} />\n        </Route>\n        <Route exact path=\"/migrate/Celo/:legacyAsset/\">\n          <Migration chainId={CHAIN_ID_CELO} />\n        </Route>\n        <Route exact path=\"/migrate/Ethereum/\">\n          <EvmQuickMigrate chainId={CHAIN_ID_ETH} />\n        </Route>\n        <Route exact path=\"/migrate/BinanceSmartChain/\">\n          <EvmQuickMigrate chainId={CHAIN_ID_BSC} />\n        </Route>\n        <Route exact path=\"/migrate/Celo/\">\n          <EvmQuickMigrate chainId={CHAIN_ID_CELO} />\n        </Route>\n        <Route exact path=\"/stats\">\n          <Stats />\n        </Route>\n        <Route exact path=\"/withdraw-tokens-terra\">\n          <WithdrawTokensTerra />\n        </Route>\n        <Route exact path=\"/unwrap-native\">\n          <UnwrapNative />\n        </Route>\n        <Route exact path=\"/custody-addresses\">\n          <CustodyAddresses />\n        </Route>\n        <Route>\n          <Redirect to=\"/transfer\" />\n        </Route>\n      </Switch>\n      <div className={classes.spacer} />\n      <div className={classes.gradientRight}></div>\n      <div className={classes.gradientRight2}></div>\n      <div className={classes.gradientLeft}></div>\n      <div className={classes.gradientLeft2}></div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\n\nexport default class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <Typography variant=\"h5\" style={{ textAlign: \"center\", marginTop: 24 }}>\n          An unexpected error has occurred. Please refresh the page.\n        </Typography>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","import { makeStyles } from \"@material-ui/core\";\n// import { useRouteMatch } from \"react-router\";\n\nconst useStyles = makeStyles((theme) => ({\n  holeOuterContainer: {\n    maxWidth: \"100%\",\n    width: \"100%\",\n    position: \"relative\",\n  },\n  holeInnerContainer: {\n    position: \"absolute\",\n    zIndex: -1,\n    left: \"50%\",\n    transform: \"translate(-50%, 0)\",\n    width: \"100%\",\n    maxWidth: \"100%\",\n    overflow: \"hidden\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  holeImage: {\n    width: \"max(1200px, 100vw)\",\n    maxWidth: \"1600px\",\n  },\n  blurred: {\n    filter: \"blur(2px)\",\n    opacity: \".9\",\n  },\n}));\n\nconst BackgroundImage = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.holeOuterContainer}>\n      <div className={classes.holeInnerContainer}></div>\n    </div>\n  );\n};\n\nexport default BackgroundImage;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport attestReducer from \"./attestSlice\";\nimport nftReducer from \"./nftSlice\";\nimport transferReducer from \"./transferSlice\";\nimport tokenReducer from \"./tokenSlice\";\nimport feeReducer from \"./feeSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    attest: attestReducer,\n    nft: nftReducer,\n    transfer: transferReducer,\n    tokens: tokenReducer,\n    fee: feeReducer,\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import { CssBaseline } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport {\n  AlgorandLedgerWallet,\n  DeflyWallet,\n  MyAlgoWallet,\n  PeraWallet,\n} from \"@xlabs-libs/wallet-aggregator-algorand\";\nimport {\n  CHAIN_ID_ALGORAND,\n  CHAIN_ID_APTOS,\n  CHAIN_ID_ETH,\n  CHAIN_ID_INJECTIVE,\n  CHAIN_ID_NEAR,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_SUI,\n  CHAIN_ID_TERRA2,\n  CHAIN_ID_XPLA,\n} from \"@xlabs-libs/wallet-aggregator-core\";\nimport {\n  InjectedWallet,\n  WalletConnectLegacyWallet,\n} from \"@xlabs-libs/wallet-aggregator-evm\";\nimport { WalletContextProvider } from \"@xlabs-libs/wallet-aggregator-react\";\nimport { SnackbarProvider } from \"notistack\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport BackgroundImage from \"./components/BackgroundImage\";\nimport { getWrappedWallets as getWrappedAptosWallets } from \"./contexts/AptosWalletContext\";\nimport { BetaContextProvider } from \"./contexts/BetaContext\";\nimport { getInjectiveWallets } from \"./contexts/InjectiveWalletContext\";\nimport { getNearWallets } from \"./contexts/NearWalletContext\";\nimport { getWrappedWallets as getWrappedSolanaWallets } from \"./contexts/SolanaWalletContext\";\nimport { getSuiWallets } from \"./contexts/SuiWalletContext\";\nimport { getTerraWallets } from \"./contexts/TerraWalletContext\";\nimport { getXplaWallets } from \"./contexts/XplaWalletContext\";\nimport { theme } from \"./muiTheme\";\nimport { store } from \"./store\";\n\nconst AGGREGATOR_WALLETS_BUILDER = async () => {\n  return {\n    [CHAIN_ID_ALGORAND]: [\n      new MyAlgoWallet(),\n      new PeraWallet(),\n      new DeflyWallet(),\n      new AlgorandLedgerWallet(),\n    ],\n    [CHAIN_ID_ETH]: [new InjectedWallet(), new WalletConnectLegacyWallet()],\n    [CHAIN_ID_SOLANA]: getWrappedSolanaWallets(),\n    [CHAIN_ID_APTOS]: getWrappedAptosWallets(),\n    [CHAIN_ID_INJECTIVE]: getInjectiveWallets(),\n    [CHAIN_ID_NEAR]: await getNearWallets(),\n    [CHAIN_ID_TERRA2]: await getTerraWallets(),\n    [CHAIN_ID_XPLA]: await getXplaWallets(),\n    [CHAIN_ID_SUI]: await getSuiWallets(),\n  };\n};\n\nReactDOM.render(\n  <ErrorBoundary>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <ErrorBoundary>\n          <SnackbarProvider maxSnack={3}>\n            <WalletContextProvider wallets={AGGREGATOR_WALLETS_BUILDER}>\n              <BetaContextProvider>\n                <HashRouter>\n                  <BackgroundImage />\n                  <App />\n                </HashRouter>\n              </BetaContextProvider>\n            </WalletContextProvider>\n          </SnackbarProvider>\n        </ErrorBoundary>\n      </ThemeProvider>\n    </Provider>\n  </ErrorBoundary>,\n  document.getElementById(\"root\")\n);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.amdD = function () {\n\tthrow new Error('define cannot be used indirect');\n};","__webpack_require__.amdO = {};","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"229\":\"035f5483\",\"329\":\"34ae8c28\",\"396\":\"ce39230c\",\"578\":\"ab2990ec\",\"606\":\"94ba3400\",\"670\":\"703f0338\",\"839\":\"88f75c5f\",\"970\":\"bb67fbf3\",\"986\":\"24f48ddb\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var inProgress = {};\nvar dataWebpackPrefix = \"@xlabs/portal-bridge-ui:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_xlabs_portal_bridge_ui\"] = self[\"webpackChunk_xlabs_portal_bridge_ui\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [288,960,368,213,718], () => (__webpack_require__(94833)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["initialState","activeStep","sourceChain","CHAIN_ID_SOLANA","sourceAsset","targetChain","CHAIN_ID_ETH","attestTx","undefined","signedVAAHex","isSending","isCreating","createTx","attestSlice","createSlice","name","reducers","incrementStep","state","decrementStep","setStep","action","payload","setSourceChain","prevSourceChain","setSourceAsset","setTargetChain","prevTargetChain","setAttestTx","setSignedVAAHex","setIsSending","setIsCreating","setCreateTx","reset","actions","CHAIN_CONFIG_MAP","CHAIN_ID_AURORA","disableTransfers","warningMessage","text","AptosNetwork","getAptosClient","AptosClient","APTOS_URL","getEmitterAddressAndSequenceFromResult","result","_result$events$find","data","events","find","e","type","getBridgeAddressForChain","CHAIN_ID_APTOS","emitterAddress","hexZeroPad","parseInt","sender","toString","substring","sequence","async","waitForSignAndSubmitTransaction","wallet","arguments","map","a","Uint8Array","Array","from","hash","signAndSendTransaction","id","Error","client","waitForTransaction","fetchCurrentTokens","ownerAddress","offset","limit","axios","APTOS_INDEXER_URL","query","variables","owner_address","CLUSTER","CHAINS","logo","ethIcon","solanaIcon","BETA_CHAINS","CHAINS_WITH_NFT_SUPPORT","filter","_ref","CHAIN_ID_AVAX","CHAIN_ID_BSC","CHAIN_ID_POLYGON","CHAIN_ID_OASIS","CHAIN_ID_FANTOM","CHAIN_ID_KARURA","CHAIN_ID_ACALA","CHAIN_ID_KLAYTN","CHAIN_ID_CELO","CHAIN_ID_NEON","CHAIN_ID_MOONBEAM","CHAIN_ID_ARBITRUM","CHAIN_ID_OPTIMISM","CHAINS_BY_ID","reduce","obj","chain","THRESHOLD_GATEWAYS","THRESHOLD_TBTC_CONTRACTS","TBTC_ASSET_ADDRESS","slice","padStart","getDefaultNativeCurrencySymbol","chainId","CHAIN_ID_TERRA","CHAIN_ID_TERRA2","CHAIN_ID_ALGORAND","CHAIN_ID_XPLA","CHAIN_ID_INJECTIVE","CHAIN_ID_SUI","getDefaultNativeCurrencyAddressEvm","WETH_ADDRESS","WBNB_ADDRESS","WMATIC_ADDRESS","WAVAX_ADDRESS","WROSE_ADDRESS","WETH_AURORA_ADDRESS","WFTM_ADDRESS","KAR_ADDRESS","ACA_ADDRESS","WKLAY_ADDRESS","CELO_ADDRESS","WNEON_ADDRESS","WGLMR_ADDRESS","getExplorerName","isTerraChain","WORMHOLE_RPC_HOSTS","ARBITRUM_NETWORK_CHAIN_ID","getEvmChainId","SOLANA_HOST","process","REACT_APP_SOLANA_API_URL","clusterApiUrl","getTerraConfig","isClassic","URL","chainID","XPLA_LCD_CLIENT_CONFIG","APTOS_NETWORK","Testnet","getInjectiveNetworkInfo","getNetworkInfo","Network","SUI_CONNECTION","testnetConnection","ALGORAND_HOST","algodToken","algodServer","algodPort","KARURA_HOST","ACALA_HOST","SOL_BRIDGE_ADDRESS","getAddress","CONTRACTS","SOL_NFT_BRIDGE_ADDRESS","SOL_TOKEN_BRIDGE_ADDRESS","ALGORAND_BRIDGE_ID","BigInt","ALGORAND_TOKEN_BRIDGE_ID","NEAR_CORE_BRIDGE_ACCOUNT","NEAR_TOKEN_BRIDGE_ACCOUNT","coalesceChainName","core","getNFTBridgeAddressForChain","nft_bridge","getTokenBridgeAddressForChain","token_bridge","COVALENT_API_KEY","REACT_APP_COVALENT_API_KEY","COVALENT_GET_TOKENS_URL","walletAddress","nft","noNftMetadata","chainNum","BLOCKSCOUT_GET_TOKENS_URL","baseUrl","ARBWETH_ADDRESS","ETH_MIGRATION_ASSET_MAP","Map","BSC_MIGRATION_ASSET_MAP","CELO_MIGRATION_ASSET_MAP","getMigrationAssetMap","SUPPORTED_TERRA_TOKENS","TERRA_DEFAULT_FEE_DENOM","XPLA_NATIVE_DENOM","getTerraGasPricesUrl","getTerraFCDBaseUrl","nearKeyStore","keyStores","getNearConnectionConfig","networkId","keyStore","nodeUrl","walletUrl","helperUrl","headers","NATIVE_NEAR_DECIMALS","NATIVE_NEAR_PLACEHOLDER","NATIVE_NEAR_WH_ADDRESS","VAA_EMITTER_ADDRESSES","MULTI_CHAIN_TOKENS","AVAILABLE_MARKETS_URL","logoOverrides","POLYGON_TERRA_WRAPPED_TOKENS","ETH_POLYGON_WRAPPED_TOKENS","getIsTransferDisabled","isSourceChain","_CHAIN_CONFIG_MAP$cha","RELAYER_COMPARE_ASSET","getCoinGeckoURL","coinGeckoId","ACALA_RELAYER_URL","ACALA_RELAY_URL","ACALA_SHOULD_RELAY_URL","getChainShortName","_CHAINS_BY_ID$chainId","COLOR_BY_CHAIN_ID","DISABLED_TOKEN_TRANSFERS","inj","DISABLED_TOKEN_REASONS","link","url","USD_NUMBER_FORMATTER","Intl","NumberFormat","style","currency","maximumFractionDigits","getWalletAddressNative","hexAddress","ensureHexPrefix","hexToNativeString","selectAttestActiveStep","attest","selectAttestSourceChain","selectAttestSourceAsset","selectAttestTargetChain","selectAttestAttestTx","selectAttestSignedVAAHex","selectAttestIsSending","selectAttestIsCreating","selectAttestCreateTx","selectAttestIsSourceComplete","selectAttestIsTargetComplete","selectAttestIsSendComplete","selectAttestIsCreateComplete","selectAttestShouldLockFields","selectNFTActiveStep","selectNFTSourceChain","selectNFTSourceAsset","_state$nft$sourcePars","sourceParsedTokenAccount","mintKey","selectNFTIsSourceAssetWormholeWrapped","isSourceAssetWormholeWrapped","selectNFTOriginChain","originChain","selectNFTOriginAsset","originAsset","selectNFTOriginTokenId","originTokenId","selectNFTSourceWalletAddress","sourceWalletAddress","selectNFTSourceParsedTokenAccount","selectNFTSourceParsedTokenAccounts","sourceParsedTokenAccounts","selectNFTSourceBalanceString","_state$nft$sourcePars2","uiAmountString","selectNFTTargetChain","selectNFTTargetAddressHex","targetAddressHex","selectNFTTargetAsset","_state$nft$targetAsse","targetAsset","address","selectNFTTransferTx","transferTx","selectNFTSignedVAAHex","selectNFTIsSending","selectNFTIsRedeeming","isRedeeming","selectNFTRedeemTx","redeemTx","selectNFTSourceError","_state$nft$sourcePars3","_state$nft$sourcePars4","_state$nft$sourcePars5","_state$nft$sourcePars6","publicKey","decimals","uri","length","parseUnits","lte","message","indexOf","selectNFTIsSourceComplete","selectNFTTargetError","sourceError","UNREGISTERED_ERROR_MESSAGE","selectNFTIsTargetComplete","selectNFTIsSendComplete","selectNFTIsRedeemComplete","selectNFTShouldLockFields","selectNFTIsRecovery","isRecovery","selectTransferActiveStep","transfer","selectTransferSourceChain","selectTransferSourceAsset","_state$transfer$sourc","selectTransferIsTBTC","_state$transfer$origi","toLowerCase","selectTransferIsSourceAssetWormholeWrapped","selectTransferOriginChain","selectTransferOriginAsset","selectSourceWalletAddress","selectTransferSourceParsedTokenAccount","selectTransferSourceParsedTokenAccounts","selectTransferSourceBalanceString","_state$transfer$sourc2","selectTransferAmount","amount","selectTransferTargetChain","selectTransferTargetAddressHex","selectTransferTargetAssetWrapper","selectTransferTargetAsset","_state$transfer$targe","selectTransferTargetParsedTokenAccount","targetParsedTokenAccount","selectTransferTargetBalanceString","_state$transfer$targe2","selectTransferTransferTx","selectTransferSignedVAAHex","selectTransferIsVAAPending","isVAAPending","selectTransferIsSending","selectTransferIsRedeeming","selectTransferRedeemTx","selectTransferIsApproving","isApproving","selectTransferSourceError","gt","selectTransferIsSourceComplete","selectTransferTargetError","_state$transfer$acala","isEVMChain","ethers","useRelayer","relayerFee","acalaRelayerInfo","shouldRelay","add","selectTransferIsTargetComplete","selectTransferIsSendComplete","selectTransferIsRedeemComplete","selectTransferShouldLockFields","selectTransferIsRecovery","selectTransferGasPrice","gasPrice","selectTransferUseRelayer","selectTransferRelayerFee","selectAcalaRelayerInfo","selectSolanaTokenMap","tokens","solanaTokenMap","selectTerraTokenMap","terraTokenMap","selectMarketsMap","marketsMap","selectTerraFeeDenom","fee","terraFeeDenom","selectRelayerTokenInfo","relayerTokenInfo","COLORS","suisse","fontFamily","fontStyle","fontDisplay","fontWeight","src","SuisseBPIntlBold2","suisse2","SuisseBPIntlBold","theme","responsiveFontSizes","createTheme","palette","background","default","paper","divider","primary","main","light","secondary","error","typography","fontSize","h1","lineHeight","letterSpacing","h2","h4","overrides","MuiCssBaseline","body","overscrollBehaviorY","backgroundPosition","backgroundRepeat","backgroundSize","scrollbarWidth","scrollbarColor","width","height","backgroundColor","borderRadius","MuiInputLabel","formControl","top","MuiOutlinedInput","input","padding","MuiAccordion","root","display","rounded","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","MuiAlert","outlinedInfo","color","border","marginTop","marginBottom","Icon","MuiSvgIcon","fill","MuiTypography","caption","colorError","MuiButton","outlinedSizeSmall","whiteSpace","MuiLink","MuiPaper","backdropFilter","MuiStepper","MuiStep","MuiStepConnector","lineVertical","borderLeftWidth","MuiStepContent","marginLeft","paddingLeft","MuiSelect","selectMenu","minHeight","MuiStepLabel","label","textTransform","MuiTabs","borderBottom","flexContainer","indicator","zIndex","MuiTab","textColorInherit","opacity","MuiTableCell","useStyles","makeStyles","centeredContainer","textAlign","linearGradient","WebkitBackgroundClip","backgroundClip","WebkitTextFillColor","MozBackgroundClip","MozTextFillColor","subtitle","spacing","HeaderText","children","white","small","classes","_jsxs","className","_jsx","Typography","variant","component","clsx","useEthereumProvider","useWallet","signerAddress","setSignerAddress","useState","evmChainId","setEvmChainId","signer","setSigner","provider","setProvider","useEffect","_wallet$getNetworkInf","getSigner","getProvider","handleNetworkChange","_wallet$getNetworkInf2","on","off","useMemo","useAlgorandWallet","getNearWallets","NearModalSelectorWallet","config","contractId","modules","setupDefaultWallets","setupNearWallet","setupMyNearWallet","setupSender","setupMathWallet","setupNightly","setupMeteorWallet","useNearContext","CHAIN_ID_NEAR","accountId","getWrappedWallets","wallets","PhantomWalletAdapter","SolflareWalletAdapter","BackpackWalletAdapter","NightlyWalletAdapter","CloverWalletAdapter","Coin98WalletAdapter","SlopeWalletAdapter","SolongWalletAdapter","TorusWalletAdapter","ExodusWalletAdapter","BraveWalletAdapter","network","WalletAdapterNetwork","push","BloctoWalletAdapter","adapter","SolanaWallet","Connection","useSolanaWallet","getXplaWallets","xplaWallets","getWallets","ConnectType","err","console","useXplaWallet","AptosWalletAdapter","MartianWalletAdapter","RiseWalletAdapter","PontemWalletAdapter","FletchWalletAdapter","FewchaWalletAdapter","SpikaWalletAdapter","AptosSnapAdapter","BitkeepWalletAdapter","TokenPocketWalletAdapter","AptosWallet","useAptosContext","account","getAdapter","INJECTIVE_NETWORKS","getInjectiveWallets","includes","networkInfo","opts","networkChainId","InjectiveChainId","broadcasterOptions","endpoints","indexerApi","sentryGrpcApi","sentryHttpApi","KeplrWallet","useInjectiveContext","getTerraWallets","useTerraWallet","setWalletAddress","getSuiWallets","suiWallets","useSuiWallet","createWalletStatus","isReady","statusMessage","_aptosNetwork$name","autoSwitch","solPK","terraWallet","hasTerraWallet","evmWallet","hasEthInfo","correctEvmNetwork","hasCorrectEvmNetwork","algoAccount","nearPK","xplaWallet","hasXplaWallet","aptosAddress","aptosNetwork","hasAptosWallet","hasCorrectAptosNetwork","injAddress","hasInjWallet","suiWallet","suiAddress","switchChain","makeNearAccount","connect","senderAddr","signAndSendTransactions","messages","nearWallet","getWallet","lastReceipt","functionCall","receipts","sendTransaction","transactions","options","_options$gas","_options$attachedDepo","signerId","receiverId","params","methodName","args","gas","deposit","attachedDeposit","getIsWrappedAssetNear","tokenBridge","asset","endsWith","lookupHash","viewFunction","getOriginalAssetNear","tokenAccount","assetAccount","retVal","isWrapped","assetAddress","arrayify","sha256","Buffer","zeroPad","buf","token","hexToUint8Array","getEmitterAddressNear","programAddress","uint8ArrayToHex","parseSequenceFromLogNear","o","receipts_outcome","l","outcome","logs","startsWith","JSON","parse","standard","event","seq","getForeignAssetNear","contract","coalesceChainId","ret","getInjectiveWasmClient","ChainGrpcWasmApi","grpc","getInjectiveBankClient","ChainGrpcBankApi","getInjectiveTxClient","TxGrpcClient","broadcastInjectiveTx","msgs","memo","tx","fetchTxPoll","code","rawLog","getSuiProvider","JsonRpcProvider","foreignChain","useIsWalletReady","nearAccountId","setAssetAddress","doesExist","setDoesExist","setError","isLoading","setIsLoading","originAssetHex","buildTokenId","nativeToHexString","previousArgs","setPreviousArgs","argsEqual","setArgs","useCallback","argumentError","getForeignAssetEth","lcd","LCDClient","getForeignAssetTerra","XplaLCDClient","getForeignAssetXpla","getForeignAssetAptos","connection","getForeignAssetSolana","algodClient","Algodv2","getForeignAssetAlgorand","then","catch","Promise","reject","getForeignAssetInjective","getForeignAssetSui","resolve","compoundError","isFetching","receivedAt","signSendAndConfirmAlgorand","txs","assignGroupID","unsignedTxns","pair","txn","toByte","signers","walletSignedTxns","signTransaction","signedTxns","i","signature","signTxn","sendRawTransaction","do","waitForConfirmation","txID","getKaruraGasParams","rpc","res","jsonrpc","method","gasLimit","storageLimit","waitForXplaExecution","transaction","info","setTimeout","txInfo","txhash","isTxError","raw_log","postWithFeesXpla","gasPrices","auth","accountInfo","feeDenoms","feeEstimate","estimateFee","sequenceNumber","getSequenceNumber","getPublicKey","MM_ERR_WITH_INFO_START","_e$data","_e$data$message","_e$response","_e$response$data","replace","response","signSendAndConfirm","commitment","preflightCommitment","extractMintInfo","mintInfo","MintLayout","uintArray","mintAuthority","pubkey","PublicKey","supply","BigNumber","reverse","getMultipleAccountsRPC","pubkeys","getMultipleAccounts","all","array","size","apply","Math","ceil","_","index","chunks","chunk","getMultipleAccountsInfo","flat","shortenAddress","LUNA_SYMBOL","LUNA_CLASSIC_SYMBOL","getNativeTerraIcon","symbol","formatNativeDenom","denom","unit","toUpperCase","isValidTerra","terra","waitForTerraExecution","postWithFees","stabilityFee","Coins","forEach","msg","_msg$coins","coins","coin","mul","toIntCeilCoins","Fee","gas_limit","sleep","ms","publishCoin","coreBridgeStateObjectId","tokenBridgeStateObjectId","coreBridgePackageId","getPackageId","tokenBridgePackageId","build","getCoinBuildOutput","publishPackage","_await$getOriginalPac","min","strippedTokenBridgePackageId","getOriginalPackageId","bytecodeHex","dependencies","d","normalizeSuiObjectId","buildOutput","TransactionBlock","upgradeCap","publish","m","fromB64","transferObjects","pure","near","dispatch","enqueueSnackbar","signedVAA","attestVAA","vaa","BN","createWrappedOnNear","receipt","transaction_outcome","block","content","Alert","severity","parseError","sui","foreignAddress","suiUpdateWrappedTxPayload","coinPackageId","_await$provider$getCo","coinType","getWrappedCoinType","coinMetadataObjectId","getCoinMetadata","moveCall","target","object","SUI_CLOCK_OBJECT_ID","typeArguments","updateWrappedOnSui","split","transactionBlock","showEvents","_suiPrepareRegistrati","suiPrepareRegistrationTxPayload","createWrappedOnSuiPrepare","parseAttestMetaVaa","suiPrepareRegistrationTxRes","showObjectChanges","wrappedAssetSetupEvent","objectChanges","oc","objectType","wrappedAssetSetupType","publishEvents","getPublishedObjectChanges","packageId","attempts","suiCompleteRegistrationTxPayload","createWrappedOnSui","digest","Number","checkpoint","useHandleCreateWrapped","shouldUpdate","useDispatch","useSnackbar","useSelector","solanaWallet","useAttestSignedVAA","algoWallet","aptosWallet","injWallet","handleCreateClick","getGasPrice","updateWrappedOnEth","createWrappedOnEth","transactionHash","blockNumber","evm","payerAddress","postVaaSolanaWithRetry","bind","updateWrappedOnSolana","createWrappedOnSolana","txid","solana","feeDenom","tokenBridgeAddress","updateWrappedOnTerra","createWrappedOnTerra","updateWrappedOnXpla","createWrappedOnXpla","xpla","createWrappedCoinTypePayload","createWrappedTypeOnAptos","createWrappedCoinPayload","createWrappedOnAptos","aptos","algosdk","createWrappedOnAlgorand","algo","updateWrappedOnInjective","createWrappedOnInjective","txHash","injective","isConnected","handleClick","disabled","showLoader","position","button","loader","bottom","left","ButtonWithLoader","onClick","_Fragment","Button","CircularProgress","flexTitle","alignItems","flexGrow","marginRight","icon","WalletOptionContent","ListItemIcon","alt","ListItemText","WalletOption","_ref2","onSelect","onClose","ListItem","getIcon","getName","_ref3","isOpen","detected","undetected","getWalletState","WalletState","Dialog","open","DialogTitle","IconButton","CloseIcon","List","Divider","href","getUrl","rel","margin","maxWidth","disconnect","connected","pk","walletIcon","is0x","Tooltip","title","startIcon","LinkOff","substr","getIsSanctioned","addr","trmChain","trm_chain_names","CHAIN_ID_BTC","isCosmWasmChain","getTrmChainName","localStorageKey","rightNow","Date","storedResult","storedValue","localStorage","getItem","stored","expires","removeItem","isSanctioned","resp","fetch","stringify","accountExternalId","screeningData","json","addressRiskIndicators","risk","categoryRiskScoreLevel","entities","entity","riskScoreLevel","setItem","getTime","changeWallet","useChangeWallet","unsetWalletFromChain","useUnsetWalletFromChain","isDialogOpen","setIsDialogOpen","availableWallets","useWalletsForChain","w","wAddress","openDialog","closeDialog","handleConnect","ToggleConnectedButton","ConnectWalletDialog","isChainAllowed","ConnectWalletButton","feeSlice","setTerraFeeDenom","useTerraNativeBalances","refreshRef","balances","setBalances","refresh","setRefresh","current","bank","balance","feePickerContainer","flexDirection","select","listItemIcon","minWidth","TerraFeeDenomPicker","props","feeDenomItems","items","Object","entries","item","TextField","fullWidth","value","onChange","MenuItem","warning","WAITING_FOR_WALLET_AND_CONF","WaitingForWalletMessage","alignCenter","spacer","_foreignAssetInfo$dat","_foreignAssetInfo$dat2","foreignAssetInfo","useFetchForeignAsset","KeyAndBalance","viewButton","ShowTx","explorerAddress","explorerName","noWrap","description","alert","CreatePreview","useHistory","handleResetClick","handleReturnClick","howToAddToTokenListUrl","Link","coreBridge","message_fee","attestNearFromNear","attestTokenFromNear","vaaBytes","getSignedVAAWithRetry","useHandleAttest","isTargetComplete","isSendComplete","terraAddress","handleAttestClick","attestFromEth","parseSequenceFromLogEth","getEmitterAddressEth","attestFromSolana","getTransaction","slot","parseSequenceFromLogSolana","getEmitterAddressSolana","attestFromTerra","parseSequenceFromLogTerra","getEmitterAddressTerra","attestFromXpla","parseSequenceFromLogXpla","getEmitterAddressXpla","attestFromAlgorand","parseSequenceFromLogAlgorand","getEmitterAddressAlgorand","attestPayload","attestFromAptos","waitForTransactionWithResult","attestFromInjective","parseSequenceFromLogInjective","getEmitterAddressInjective","attestFromSui","getEmitterAddressAndSequenceFromResponseSui","base58","require","METADATA_REPLACE","RegExp","PubKeysInternedMap","toPublicKey","key","get","set","TOKEN_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","BPF_UPGRADE_LOADER_ID","MEMO_ID","METADATA_PROGRAM_ID","METAPLEX_ID","SYSTEM","STORE","findProgramAddress","seeds","programId","agg","cached","nonce","toBase58","MetadataKey","getEdition","tokenMint","PROGRAM_IDS","associatedToken","bpf_upgrade_loader","system","metadata","vault","auction","metaplex","store","toBuffer","Creator","constructor","verified","share","this","Data","uriMetadata","sellerFeeBasisPoints","creators","URIMetadata","image","assign","Metadata","updateAuthority","mint","primarySaleHappened","isMutable","editionNonce","masterEdition","edition","MetadataV1","METADATA_SCHEMA","instruction","kind","fields","maxSupply","printingMint","oneTimePrintingAuthorizationMint","MasterEditionV1","MasterEditionV2","parent","EditionV1","ledger","EditionMarker","editionTaken","editionOffset","indexOffset","floor","positionInBitsetFromRight","mask","pow","BinaryReader","readFixedArray","BinaryWriter","writeFixedArray","encode","decode","getMetadataAddress","getMetaplexData","promises","mintAddresses","metaAddresses","output","metadataParsed","buffer","deserializeUnchecked","decodeMetadata","_metadataParsed$data","_response$headers$get","redirect","addresses","results","setResults","setReceivedAt","useLayoutEffect","cancelled","createResultMap","metadatas","x","toISOString","useCopyToClipboard","_pushToClipboard","navigator","clipboard","writeText","pushToClipboard","mainTypog","textDecoration","textUnderlineOffset","buttons","StyledTooltip","withStyles","tooltip","SmartBlock","copyToClipboard","explorerButton","OpenInNew","copyButton","FileCopy","tooltipContent","interactive","TransactionProgress","currentBlock","setCurrentBlock","newBlock","getBlock","number","getBlockNumber","sub","onSlotChange","slotInfo","removeSlotChangeListener","isFinalized","blockDiff","expectedBlocks","LinearProgress","SolanaTokenMetadataWarning","_metaplexData$data","sourceAssetArrayed","metaplexData","useMetaplexData","SendPreview","BetaContext","React","BetaContextProvider","isBetaEnabled","setIsBetaEnabled","userEntered","secretSequence","secretListener","k","keyCode","prev","window","addEventListener","removeEventListener","Provider","useBetaContext","useContext","ChainSelect","chains","rest","isBeta","filteredChains","createChainMenuItem","receiveDataWrapper","errorDataWrapper","transferSlice","setSourceWormholeWrappedInfo","setSourceWalletAddress","setSourceParsedTokenAccount","setSourceParsedTokenAccounts","fetchSourceParsedTokenAccounts","errorSourceParsedTokenAccounts","receiveSourceParsedTokenAccounts","setAmount","setTargetAddressHex","setTargetAsset","setTargetParsedTokenAccount","setTransferTx","setIsVAAPending","setIsRedeeming","setRedeemTx","setIsApproving","setRecoveryVaa","parsedPayload","targetAddress","originAddress","setGasPrice","setUseRelayer","setRelayerFee","setAcalaRelayerInfo","fetchAcalaRelayerInfo","errorAcalaRelayerInfo","receiveAcalaRelayerInfo","SOLANA_THRESHOLD_LAMPORTS","ETHEREUM_THRESHOLD_WEI","TERRA_THRESHOLD_ULUNA","TERRA_THRESHOLD_UUSD","isSufficientBalance","toBalanceString","formatUnits","useTransactionFees","setBalance","terraBalances","setTerraBalances","loadStart","lamports","getBalanceSolana","adjustedresult","getBalance","toBigInt","getBalanceEvm","TARGET_DENOMS","_ref4","getBalancesTerra","adjustedResults","_ref5","some","balanceString","useEthereumGasPrice","estimateResults","setEstimateResults","lowEstimateGasAmount","evmEstimatesByContract","lowGasEstimate","highEstimateGasAmount","highGasEstimate","lowEstimate","highEstimate","currentGasPrice","priceInWei","parseFloat","toFixed","getGasEstimates","log","EthGasEstimateSummary","_ref6","methodType","priceQuote","estimate","lowUsd","highUsd","flexWrap","LocalGasStation","terraEstimatesByContract","createWrapped","TerraGasEstimateSummary","_ref7","GasEstimateSummary","_ref8","transactionFeeWarning","relayerSelected","terraChain","displayWarning","transferField","isSourceComplete","shouldLockFields","handleSourceChange","handleAssetChange","handleNextClick","LowBalanceWarning","noGutter","noUnderline","SmartAddress","parsedTokenAccount","tokenName","extraContent","isAsset","propertyVersion","isNativeTerra","useableAddress","useableSymbol","isNative","isNativeAsset","addressShort","useableName","isValidAptosType","SourcePreview","explainerContent","c","handleTargetChange","TargetPreview","explainerString","isCreateComplete","preventNavigation","onbeforeunload","Container","Stepper","orientation","Step","expanded","StepButton","StepContent","Source","Target","Send","Create","footer","container","paddingTop","paddingBottom","breakpoints","up","flex","borderTop","linkStyle","linkActiveStyle","wormholeIcon","Footer","migratorAddress","toggleRefresh","migrator","ethers_contracts","setData","poolAddress","fromAddress","fromAsset","toAddress","toAsset","fromToken","toToken","fromSymbol","toSymbol","fromDecimals","toNumber","toDecimals","sharesDecimals","fromWalletBalance","balanceOf","toWalletBalance","fromPoolBalance","toPoolBalance","walletSharesBalance","getRequisiteData","NumberTextField","onMaxClick","InputProps","endAdornment","InputAdornment","containerDiv","EvmWorkflow","_poolInfo$data","_poolInfo$data3","_poolInfo$data4","_poolInfo$data5","_poolInfo$data6","_poolInfo$data7","_poolInfo$data8","_poolInfo$data9","_poolInfo$data10","setToggleRefresh","forceRefresh","prevState","poolInfo","useEthereumMigratorInformation","migrationAmount","setMigrationAmount","migrationIsProcessing","setMigrationIsProcessing","setTransaction","fromParse","_poolInfo$data2","hasRequisiteData","amountGreaterThanZero","sufficientFromTokens","sufficientPoolBalance","isReadyToTransfer","handleAmountChange","handleMaxClick","migrateTokens","approve","migrate","wait","toTokenPretty","fromTokenPretty","poolPretty","fatalError","mainWorkflow","mainPaper","EthereumRoot","legacyAsset","match","targetPool","withRouter","Paper","lineItem","justifyContent","alignSelf","flewGrow","hidden","convertButton","EvmMigrationLineItem","onLoadComplete","loaded","setLoaded","compareWithDecimalOffset","valueA","decimalsA","valueB","decimalsB","decimalsBasis","normalizedA","normalizedB","migrationAmountAbs","ArrowRightAltIcon","EvmQuickMigrate","migrationMap","eligibleTokens","keys","migrators","setMigrators","migratorsError","setMigratorsError","migratorsLoading","setMigratorsLoading","migratorsFinishedLoading","setMigratorsFinishedLoading","reportLoadComplete","factory","getAddressBalances","migratorAddresses","tokenAddress","_result$get","hasEligibleAssets","chainName","nftSlice","tokenId","makeStateSafe","nftSourceParsedTokenAccount","aptosTokenId","setNFTSourceWormholeWrappedInfo","setTransferSourceWormholeWrappedInfo","_THRESHOLD_TBTC_CONTR","wrappedInfo","getOriginalAssetEthNFT","getOriginalAssetEth","getOriginalAssetSolNFT","getOriginalAssetSol","getOriginalAssetCosmWasm","getOriginalAssetAptos","getOriginalAssetAptosNFT","getOriginalAssetAlgorand","getOriginalAssetInjective","getOriginalAssetSui","isTBTC","setNFTTargetAsset","setTransferTargetAsset","lastSuccessfulArgs","setLastSuccessfulArgs","argsMatchLastSuccess","queryExternalId","getForeignAssetAptosNFT","token_data_id","collection","queryExternalIdInjective","hexToNativeAssetString","getTypeFromExternalAddress","getForeignAssetEthNFT","getForeignAssetSolNFT","aptosClient","creator","useHandleNFTRedeem","aptosAccount","useNFTSignedVAA","handleRedeemClick","redeemOnEth","claimAddress","getClaimAddressSolana","getAccountInfo","redeemOnSolana","isNFTVAASolanaNative","parsedVAA","parseVaa","parseNFTPayload","mintAddress","getForeignAssetSol","metadataAddress","createMetaOnSolana","nftBridgeAddress","redeemOnAptos","StepDescription","RedeemPreview","useHandleNFTTransfer","sourceTokenId","useNFTTargetAddressHex","sourceTokenPublicKey","handleTransferClick","recipientChain","recipientAddress","transferFromEth","originAddressStr","transferFromSolana","transferPayload","transferFromAptos","property_version","isWrongWallet","isDisabled","errorMessage","fetchSingleMetadata","assetId","assetInfo","getAssetByID","setIsFetching","resultsArray","fetchAlgoMetadata","createParsedTokenAccount","uiAmount","createNFTParsedTokenAccount","animation_url","external_url","image_256","nftName","createParsedTokenAccountFromCovalent","covalent","contract_address","contract_decimals","contract_ticker_symbol","contract_name","logo_url","createNativeEthParsedTokenAccount","balanceInWei","balanceInEth","createNativeBscParsedTokenAccount","bnbIcon","createNativePolygonParsedTokenAccount","polygonIcon","createNativeAvaxParsedTokenAccount","avaxIcon","createNativeOasisParsedTokenAccount","oasisIcon","createNativeAuroraParsedTokenAccount","auroraIcon","createNativeFantomParsedTokenAccount","fantomIcon","createNativeKaruraParsedTokenAccount","karuraIcon","createNativeAcalaParsedTokenAccount","acalaIcon","createNativeKlaytnParsedTokenAccount","klaytnIcon","createNativeCeloParsedTokenAccount","celoIcon","createNativeNeonParsedTokenAccount","neonIcon","createNativeMoonbeamParsedTokenAccount","moonbeamIcon","createNativeArbitrumParsedTokenAccount","arbitrumIcon","createNFTParsedTokenAccountFromCovalent","nft_data","token_balance","token_id","token_url","external_data","getEthereumAccountsCovalent","_item$supports_erc","_item$supports_erc2","supports_erc","getEthereumAccountsBlockscout","_item$type","_item$type2","contractAddress","quote","quote_rate","getSolanaParsedTokenAccounts","fetchSourceParsedTokenAccountsNFT","splParsedTokenAccounts","getParsedTokenAccountsByOwner","createParsedTokenAccountFromInfo","_item$data$parsed","_item$data$parsed$inf","_item$data$parsed$inf2","_item$data$parsed2","_item$data$parsed2$in","_item$data$parsed2$in2","_item$data$parsed3","_item$data$parsed3$in","_item$data$parsed3$in2","_item$data$parsed4","_item$data$parsed4$in","_item$data$parsed4$in2","_item$data$parsed5","_item$data$parsed5$in","_item$data$parsed5$in2","parsed","tokenAmount","receiveSourceParsedTokenAccountsNFT","nativeAccount","fetchAccounts","WSOL_ADDRESS","WSOL_DECIMALS","createNativeSolParsedTokenAccount","unshift","errorSourceParsedTokenAccountsNFT","getAlgorandParsedTokenAccounts","accountInformation","parsedTokenAccounts","assets","fetchSingleMetadataAlgo","isNFT","getNearParsedTokenAccounts","getAccountBalance","nativeNear","available","getAptosParsedTokenAccounts","parsedTokenAccountsNFT","current_token_ownerships","token_data_id_hash","collection_name","current_token_data","metadata_uri","creator_address","coinResources","getAccountResources","r","cr","coinStore","getAccountResource","aptosIcon","getSuiParsedTokenAccounts","getAllBalances","owner","totalBalance","suiIcon","tokenAccounts","lookupChain","setCovalent","covalentLoading","setCovalentLoading","covalentError","setCovalentError","ethNativeAccount","setEthNativeAccount","ethNativeAccountLoading","setEthNativeAccountLoading","ethNativeAccountError","setEthNativeAccountError","solanaMintAccounts","setSolanaMintAccounts","solanaMintAccountsLoading","setSolanaMintAccountsLoading","solanaMintAccountsError","setSolanaMintAccountsError","selectedSourceWalletAddress","currentSourceWalletAddress","resetSourceAccounts","setSourceWalletAddressNFT","setSourceParsedTokenAccountNFT","setSourceParsedTokenAccountsNFT","_tokenAccounts$data","getAccounts","accounts","arr","ethAccounts","_output$data","mintAccounts","resetAccounts","tokenSlice","receiveSolanaTokenMap","fetchSolanaTokenMap","errorSolanaTokenMap","receiveTerraTokenMap","fetchTerraTokenMap","errorTerraTokenMap","receiveMarketsMap","fetchMarketsMap","errorMarketsMap","receiveRelayerTokenInfo","fetchRelayerTokenInfo","errorRelayerTokenInfo","getMarketsMap","shouldFire","internalShouldFire","balancePretty","uiString","numberString","nsLen","safeIPFS","LogoIcon","Avatar","bscIcon","card","transition","transform","silverBorder","cardInset","textContent","detailsContent","mediaContent","silverMediaBorder","borderColor","eth","bsc","polygon","skeleton","placeItems","verticalAlign","wormholePositioner","ViewerLoader","Skeleton","animation","Wormhole","NFTViewer","_metadata$animation_u","_value$aptosTokenId","setMetadata","isMediaLoading","setIsMediaLoading","onLoad","_result$data$result","image_url","big_image","small_image","animLower","hasVideo","hasAudio","hasImage","copyTokenId","videoSrc","imageSrc","audioSrc","onError","media","autoPlay","controls","loop","onLoadedData","Card","elevation","CardContent","CardMedia","align","arrow","createStyles","optionContainer","optionContent","tokenList","maxHeight","overflow","dialogContent","overflowX","selectionButtonContainer","selectionButton","values","sm","tokenOverviewContainer","flexBasis","flexShrink","tokenImageContainer","tokenImage","tokenMarketsList","order","migrationAlert","grower","disabledTokenAlert","borderStyle","noClickThrough","stopPropagation","BasicAccountRender","isMigrationEligible","displayBalance","marketsData","useMarketsMap","mintPrettyString","shouldDisplayBalance","nftContent","wordBreak","tokenContent","markets","market","_marketsData$markets","Launch","migrationRender","TokenPicker","_marketsData$tokens","_marketsData$tokenMar","_marketsData$tokenMar2","RenderOption","isValidAddress","useTokenId","holderString","setHolderString","tokenIdHolderString","setTokenIdHolderString","loadingError","setLoadingError","isLocalLoading","setLocalLoading","dialogIsOpen","setDialogIsOpen","selectionError","setSelectionError","handleSelectOption","newOption","option","_e$message","resetAccountsWrapper","searchFilter","optionString","searchString","marketChainTokens","featuredMarkets","tokenMarkets","featuredOptions","ownedMarketTokens","_marketChainTokens$mi","_marketChainTokens$mi2","nonFeaturedOptions","_marketChainTokens$op","localFind","localLoader","displayLocalError","TokenListItem","isTokenDisabled","getIsTokenTransferDisabled","_DISABLED_TOKEN_TRANS","disabledTransfers","disabledTokenReasons","getIsTokenTransferDisabledReasons","_DISABLED_TOKEN_REASO","disabledReason","linkText","isAptosNFT","dialog","RefreshIcon","DialogContent","gutterBottom","InfoOutlined","selectionChip","KeyboardArrowDownIcon","returnsFalse","AlgoTokenPicker","resetAccountWrapper","onChangeWrapper","lookupAlgoAddress","lookupAsset","isSearchableAddress","RenderComp","AptosTokenPicker","nativeRefresh","useRef","lookupAptosAddress","getEthereumToken","ethTokenToParsedTokenAccount","getEthereumNFT","ethNFTToNFTParsedTokenAccount","ownerOf","tokenURI","isValidEthereumAddress","EvmTokenPicker","selectedTokenAccount","selectedMintMatch","selectedTokenIdMatch","getEthAddress","v1","isWormholev1","WormholeAbi__factory","isWrappedAsset","migration","fetchNearMetadata","NearTokenPicker","lookupNearAddress","account_id","inlineContentWrapper","flexWrapper","RefreshButtonWrapper","callback","environment","ENV","getSolanaTokenMap","TokenListProvider","filterByChainId","getList","useSolanaTokenMap","tokenMap","sortParsedTokenAccounts","b","localeCompare","SolanaSourceTokenSelector","_mintAccounts$data","mintAuth","memoizedTokenMap","getLogo","_memoizedTokenMap$get","_metaplex$data","_metaplex$data$get","_metaplex$data$get$da","_metaplex$data$get$da2","_metaplex$data2","_metaplex$data2$get","_metaplex$data2$get$d","logoURI","getSymbol","_memoizedTokenMap$get2","_metaplex$data3","_metaplex$data3$get","_metaplex$data3$get$d","_memoizedTokenMap$get3","_metaplex$data4","_metaplex$data4$get","_metaplex$data4$get$d","filteredOptions","_metaplex$data5","_metaplex$data5$get","_metaplex$data5$get$d","_mintAccounts$data2","_mintAccounts$data2$g","is721CompatibleNFT","sort","accountsWithMetadata","isWormholev1orSollet","_props$mintAccounts","_props$mintAccounts$d","newValue","TerraTokenPicker","nativeIsLoading","terraTokenArray","lookupTerraAddress","wasm","contractQuery","token_info","isValidTerraAddress","startsWithTerra","isParseable","cosmos","isLengthOk","XplaTokenPicker","useXplaNativeBalances","xplaTokenArray","lookupXplaAddress","isNativeDenomXpla","startsWithXpla","isValidXplaAddress","InjectiveTokenPicker","fetchBalances","nativeBalances","useInjectiveNativeBalances","injTokenArray","injectiveIcon","lookupInjectiveAddress","fetchSmartContractState","infoData","balanceData","parseSmartContractStateResponse","isNativeDenomInjective","startsWithInj","isParsable","isValidInjectiveAddress","SuiTokenPicker","lookupSuiAddress","TokenSelector","_maps$tokenAccounts","walletIsReady","setNFTSourceParsedTokenAccount","setTransferSourceParsedTokenAccount","setNFTSourceWalletAddress","setTransferSourceWalletAddress","handleOnChange","newTokenAccount","maps","useGetSourceParsedTokens","SolanaTokenPicker","placeholder","ChainWarningMessage","isTransferDisabled","to","VerifiedUser","_sourceParsedTokenAcc","targetTokenAccountPublicKey","setNFTTargetAddressHex","setTransferTargetAddressHex","toBytes","associatedTokenAccount","Token","ASSOCIATED_TOKEN_PROGRAM_ID","decodeAddress","account_hash","myAddress","myAddress2","getTransactionLastResult","readableTargetAddress","useSyncTargetAddress","isValidTargetAssetAddress","targetAddressNative","useCheckIfWormholeWrapped","useFetchTargetAsset","isRedeemComplete","search","useLocation","URLSearchParams","pathSourceChain","pathTargetChain","_CHAINS_WITH_NFT_SUPP","_CHAINS_WITH_NFT_SUPP2","completed","Redeem","mainCard","originHeader","viewButtonWrapper","loaderWrapper","NFTOriginVerifier","setLookupChain","setLookupAsset","lookupTokenId","setLookupTokenId","lookupCreatorAddress","setLookupCreatorAddress","lookupCollectionName","setLookupCollectionName","lookupTokenName","setLookupTokenName","lookupError","setLookupError","setParsedTokenAccount","originInfo","setOriginInfo","handleChainChange","handleTokenIdChange","handleCreatorAddressChange","handleCollectionNameChange","handleTokenNameChange","hasAptosLookupData","supportsErc721","supportsInterface","supportsErc721Metadata","newParsedTokenAccount","tokenClient","TokenClient","getTokenData","readableAddress","getAssetAddressNative","displayError","useAcalaRelayerInfo","vaaNormalizedAmount","useStore","setState","acalaRelayerInfoFromStore","getRelayersAvailable","emitterChain","retryAttempts","currentWormholeRpcHost","rpcHost","allSettled","getSignedVAA","getGovernorIsVAAEnqueued","status","isPending","isEnqueued","reason","mainContainer","RelaySelector","_availableRelayers$da3","_availableRelayers$da4","_availableRelayers$da5","_availableRelayers$da6","selectedValue","availableRelayers","useRelayersAvailable","_availableRelayers$da","_availableRelayers$da2","relayers","selector","_CHAINS_BY_ID$sourceC","advancedContainer","relayAlert","fetchSignedVAA","gs3","expiry","repairVaa","handleError","RelayerRecovery","_relayerInfo$data","_relayerInfo$data$rel","_relayerInfo$data2","_relayerInfo$data2$re","signedVaa","relayerInfo","selectedRelayer","setSelectedRelayer","isAttemptingToSchedule","setIsAttemptingToSchedule","isEligible","handleRelayerChange","relayer","handleGo","encodeURIComponent","AcalaRelayerRecovery","_acalaRelayerInfo$dat","shouldCheck","Recovery","_recoveryParsedVAA$se","_recoveryParsedVAA$gu","_parsedPayload$fee","recoverySourceChain","setRecoverySourceChain","setType","recoverySourceTx","setRecoverySourceTx","recoverySourceTxIsLoading","setRecoverySourceTxIsLoading","recoverySourceTxError","setRecoverySourceTxError","recoverySignedVAA","setRecoverySignedVAA","recoveryParsedVAA","setRecoveryParsedVAA","setTokenId","walletConnectError","parseTransferPayload","pathSourceTransaction","_CHAINS_BY_ID","getTransactionReceipt","pendingInfo","pendingTransactionInformation","confirmedTxInfo","txStatusReceipts","fetchTx","getTransactionBlock","handleTypeChange","prevChain","handleSourceChainChange","handleSourceTxChange","trim","handleSignedVAAChange","parsedPayloadTargetChain","enableRecovery","handleRecoverClickBase","setRecoveryNFTVaa","handleRecoverClick","handleRecoverWithRelayerClick","helperText","PendingVAAWarning","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","Box","right","my","timestamp","toLocaleString","guardianSetIndex","formatTVL","tvl","divisor","fractionDigits","formatDate","date","day","month","year","timeZone","formatTickDay","formatTickMonth","formatTransactionCount","transactionCount","renderLegendText","getStartDate","timeFrame","duration","DateTime","toUTC","minus","toJSDate","createCumulativeTVLChartData","cumulativeTVL","startDate","DailyLocked","chartData","dateString","chainsAssets","totalTVL","tvlByChain","lockedAssets","notional","Notional","z","titleText","ruler","backgroundImage","valueText","active","valueFormatter","useTheme","isXSmall","useMediaQuery","down","ResponsiveContainer","AreaChart","XAxis","dataKey","tickFormatter","tick","interval","axisLine","tickLine","dy","YAxis","CustomTooltip","gradientTransform","stopColor","Area","stroke","useCumulativeTVL","setCumulativeTVL","TIME_FRAMES","days","months","years","row","chainShortName","Grid","selectedChains","LineChart","MultiChainTooltip","Line","strokeWidth","dot","Legend","iconType","iconSize","formatter","wrapperStyle","table","borderSpacing","onChainSelected","mouseOverChainId","setMouseOverChainId","chainTVLs","maxTVL","AllTime","chainInfo","tvlRatio","max","chainTVL","createChainTVLChartData","handleMouseOver","isSmall","onMouseOver","endIcon","ArrowForward","COIN_GECKO_IMAGE_URLS","aave","adapad","ageur","akropolis","alchemix","aldrin","aleph","allbridge","ampleforth","anchorust","apyswap","ardcoin","ariadne","artem","arth","auditchain","audius","augur","aurory","babytigergold","banana","banano","bancor","benqi","bilira","binancecoin","biswap","bitcoin","bitlocus","bitsong","bitspawn","blockasset","bloktopia","bluzelle","bonfida","boozedoge","botxcoin","brz","burp","cake","cardano","cartesi","cashcow","catecoin","catzcoin","celo","chainlink","charli3","chi","chiliz","chronobank","chronologic","cindicator","civic","coin98","constitutiondao","contentos","credefi","cropperfinance","curate","dai","decentraland","defiato","defil","defire","derace","dexlab","dinox","dogecoin","dragonsb","dydx","easyfi","echoin","ecomi","elyfi","enjincoin","erc20","ertha","esg","essentia","ethereum","everid","evrynet","fantom","floof","frax","gaj","gala","gemguardian","gene","genopets","goosefx","graviton","hapi","hashpanda","hedget","hex","husd","hxro","hydrolink","idefiyieldprotocol","infinitup","insure","investin","iotex","ispolink","joe","jpyc","kardiachain","kin","kineko","kleekai","kurobi","lasereyes","launchpool","litecoin","livepeer","lunachow","marinade","math","maticverse","meanfi","metaseer","metashooter","million","mim","mimatic","minato","mixmarvel","monkeyball","msol","mysterium","nexum","nftlaunch","nothing","nuls","olympus","one","only1","ontology","opendao","openocean","opium","orbs","orca","ovr","paraswap","parsiq","partneroid","pillar","pixelverse","playnity","poken","polkadot","pontoon","psyoptions","quick","quiztok","rai","ramp","raydium","recharge","renbtc","ridotto","rougecoin","rune","saber","safemoon","sail","samoyedcoin","sarcophagus","secret","serum","shirtum","sifchain","solanium","solcial","soldoge","solrazr","sportium","stader","starlaunch","starterra","stepn","streamr","sushi","swipe","synchrony","sypool","tenset","terrausd","tether","throne","tomoe","torg","tryhards","tudabirds","uniswap","upbots","usdk","victorum","vlaunch","wasder","waves","wbnb","weth","weyu","wizardia","wmatic","wolfsafepoorpeople","wowswap","wraith","xdefi","xhashtag","xsgd","xsigma","zap","zoints","ztcoin","useTVL","setTvl","count","page","rowsPerPage","onPageChange","direction","LastPageIcon","FirstPageIcon","KeyboardArrowRight","KeyboardArrowLeft","stopProp","columns","skipPageReset","getTableProps","headerGroups","prepareRow","gotoPage","setPageSize","rows","pageIndex","pageSize","useTable","autoResetPage","useGlobalFilter","useGroupBy","useSortBy","useExpanded","usePagination","TableContainer","MaUTable","TableHead","headerGroup","TableRow","getHeaderGroupProps","column","_columns$find","TableCell","getHeaderProps","getSortByToggleProps","Header","TableSortLabel","isSorted","isSortedDesc","render","canGroupBy","getGroupByToggleProps","isGrouped","RemoveCircleOutline","AddCircleOutline","TableBody","getRowProps","cells","cell","getCellProps","getToggleRowExpandedProps","isExpanded","KeyboardArrowDown","subRows","isAggregated","isPlaceholder","TablePagination","rowsPerPageOptions","SelectProps","inputProps","native","handlePageChange","newPage","onRowsPerPageChange","ActionsComponent","TablePaginationActions","logoPositioner","tokenContainer","notionalTvl","chainAssets","_CHAINS_BY_ID$originC","originChainId","lockedAsset","CoinGeckoId","Symbol","Name","Amount","totalValue","quotePrice","TokenPrice","createTVLArray","sortTokens","rowA","rowB","original","tvlColumns","sortType","disableGroupBy","accessor","Cell","_value$row","_value$row$original","_value$row2","_value$row2$original","_value$row3","_value$row3$original","_value$row4","_value$row4$original","_value$row5","_value$row5$original","_value$row6","_value$row6$original","_value$row7","_value$row7$original","_value$row8","_value$row8$original","numeral","format","_value$row9","_value$row9$original","_value$row10","_value$row10$original","_value$row11","_value$row11$original","_value$row12","_value$row12$original","MuiReactTable","sortBy","desc","displayBy","columnGap","rowGap","toggleButton","DISPLAY_BY_VALUES","TVLStats","setDisplayBy","setTimeFrame","setSelectedChains","selectedChainDetail","setSelectedChainDetail","tvlAllTime","availableChains","chainIds","handleDisplayByChange","nextValue","handleTimeFrameChange","handleSelectedChainsChange","prevValue","handleChainDetailSelected","allChainsSelected","tvlText","tooltipText","ToggleButtonGroup","exclusive","ToggleButton","ArrowBack","FormControl","Select","multiple","renderValue","selected","_CHAINS_BY_ID$selecte","MenuProps","getContentAnchorEl","Checkbox","checked","indeterminate","_CHAINS_BY_ID$option","TVLAreaChart","TVLLineChart","TVLTable","TVLBarChart","useNotionalTransferred","notionalTransferred","setNotionalTransferred","transferData","tooltipContainer","tooltipTitleText","tooltipRuler","tooltipValueText","tooltipIcon","volume","hoverChainId","setHoverChainId","barData","createBarData","volumePercent","totalVolume","transferredByChain","BarChart","ticks","domain","cursor","Bar","stackId","transactionData","formatValue","useTransactionTotals","totals","setTotals","VolumeStats","transferredAllTime","createTransferChartData","notionalTransferredFrom","Daily","transferFromData","totalTransferred","sum","transactionTotals","transactionsAllTime","createTransactionData","DailyTotals","groupByKeys","totalTransactions","transactionsByChain","VolumeAreaChart","VolumeLineChart","VolumeStackedBarChart","TransactionsAreaChart","TransactionsLineChart","StatsRoot","flexBox","explainerContainer","CustodyAddresses","nftAddress","header","fetchAptosMetadata","ERC20_BASIC_ABI","fetchEthMetadata","fetchInjectiveMetadata","useTerraMetadata","fetchTerraMetadata","getTerraTokenMap","fetchXplaMetadata","fetchSuiMetadata","constructAlgoMetadata","metadataMap","_metadataMap$data3","meta","useMetadata","useTerraTokenMap","solanaAddresses","terraAddresses","xplaAddresses","ethereumAddresses","algoAddresses","nearAddresses","aptosAddresses","injAddresses","suiAddresses","terraMetadata","ethMetadata","useEvmMetadata","algoMetadata","useAlgoMetadata","nearMetadata","useNearMetadata","xplaMetadata","useXplaMetadata","aptosMetadata","useAptosMetadata","injMetadata","useInjectiveMetadata","suiMetadata","useSuiMetadata","constructSolanaMetadata","_solanaTokenMap$data","tokenInfo","raw","constructEthMetadata","_metadataMap$data2","constructTerraMetadata","_terraMetadata$data","_tokenMap$data","_tokenMap$data2","mainnet","classic","constructXplaMetadata","_metadataMap$data","constructAptosMetadata","_metadataMap$data4","constructInjectiveMetadata","_metadataMap$data5","constructSuiMetadata","_metadataMap$data6","getOriginalAsset","foreignNativeStringAddress","promise","getOriginalAssetNFT","getOriginalAssetToken","uint8ArrayToNative","setOriginAddress","setOriginTokenId","setOriginChain","RegisterNowButtonCore","forceAsset","history","canSwitch","nativeAsset","RegisterNowButton","centered","arrowIcon","resultContainer","PrimaryAssetInformation","_metadata$data","_metadata$data$get","_metadata$data2","_metadata$data2$get","nativeContent","wrapped","SecondaryAssetInformation","_metadata$data3","_metadata$data3$get","_metadata$data4","_metadata$data4$get","_metadata$data5","_metadata$data5$get","_metadata$data6","_metadata$data6$get","originAssetInfo","tokenArray","TokenOriginVerifier","_originInfo$data","_originInfo$data2","_originInfo$data3","_originInfo$data4","_originInfo$data5","_originInfo$data6","primaryLookupChain","setPrimaryLookupChain","primaryLookupAsset","setPrimaryLookupAsset","secondaryLookupChain","setSecondaryLookupChain","primaryLookupChainOptions","secondaryLookupChainOptions","handlePrimaryLookupChainChange","handleSecondaryLookupChainChange","handlePrimaryLookupAssetChange","useOriginalAsset","primaryWallet","secondaryWallet","primaryWalletError","originError","primaryError","secondaryWalletError","foreignError","secondaryError","primaryContent","secondaryContent","ArrowDropDownIcon","useTransferSignedVAA","useGetIsTransferCompleted","recoveryOnly","pollFrequency","isTransferCompleted","setIsTransferCompleted","pollState","setPollState","transferCompleted","getIsTransferCompletedEth","getIsTransferCompletedSolana","lcdClient","getIsTransferCompletedTerra","getIsTransferCompletedXpla","getIsTransferCompletedAptos","getIsTransferCompletedAlgorand","getIsTransferCompletedNear","getIsTransferCompletedInjective","getIsTransferCompletedSui","isTransferCompletedLoading","ThresholdL2WormholeGateway","anonymous","inputs","indexed","internalType","outputs","stateMutability","redeemOnAlgorand","isCanonicalTarget","L2WormholeGateway","Contract","estimateGas","receiveTbtc","div","redeemOnEthNative","p","_parseVAAAlgorand","ToChain","user","ToAddress","FromChain","registration_only","compare","redeemOnNear","redeemOnInjective","redeemAndUnwrapOnSolana","redeemOnTerra","transferVAA","tokenChain","parseTokenTransferVaa","getTokenCoinType","verifiedVAA","builder","maxSize","tokenBridgeMessage","relayerReceipt","redeemOnSui","useHandleRedeem","redeemOnXpla","completeTransferAndRegister","handleRedeemNativeClick","handleAcalaRelayerRedeemClick","handleNativeClick","useAssociatedAccountExistsState","associatedAccountExists","setAssociatedAccountExists","mintPublicKey","payerPublicKey","associatedAddress","SolanaCreateAssociatedAddress","Transaction","blockhash","getRecentBlockhash","recentBlockhash","feePayer","SolanaCreateAssociatedAddressAlternate","addressHex","base58TargetAddress","base58OriginAddress","handleForceCreateClick","addButton","AddToMetamask","isAddingTBTC","tbtcAsset","detectEthereumProvider","request","getJupiterSwapUrl","sourceSymbol","FeaturedMarkets","tokenMarketButtons","marketInfo","overrideExplainerString","manualRedeem","setManualRedeem","handleManuallyRedeemClick","handleSwitchToRelayViewClick","targetIsAcala","isEthNative","isBscNative","isPolygonNative","isAvaxNative","isOasisNative","isAuroraNative","isFantomNative","isKlaytnNative","isNeonNative","isMoonbeamNative","isArbitrumNative","isSolNative","isNativeEligible","useNativeRedeem","setUseNativeRedeem","toggleNativeRedeem","howToAddTokensUrl","relayerContent","nonRelayContent","FormControlLabel","control","maybeAdditionalPayload","baseAmountParsed","feeParsed","transferAmountParsed","sourceAddress","amountNormalizeAmount","deNormalizeAmount","normalizeAmount","sendTbtc","additionalPayload","transferFromEthNative","receivingContract","qty","receiver","transferNearFromNear","acct","receiver_id","transferTokenFromNear","useHandleTransfer","useTransferTargetAddressHex","tbtcGateway","transferNativeSol","transferFromTerra","transferFromXpla","transferFromAlgorand","transferTokens","createNonce","readUInt32LE","transferFromInjective","getCoins","transferFromSui","targetAssetArrayed","hasResolvedMetadata","_coins$get","_coins$get$amount","_coins$get2","_coins$get2$amount","_value$0$account$data","_value$0$account$data2","_value$0$account$data3","_value$0$account$data4","_value$0$account$data5","_value$0$account$data6","_value$0$account$data7","_value$0$account$data8","_value$0$account$data9","_value$0$account$data10","_value$0$account$data11","_value$0$account$data12","_value$0$account$data13","_value$0$account$data14","n","fetchBalance","accountAddress","comparisonAssetPrice","setComparisonAssetPrice","originAssetPrice","setOriginAssetPrice","sourceAssetDecimals","originAssetNative","relayerAsset","_info$supportedTokens","supportedTokens","_x$address","getRelayAssetInfo","coingeckoId","comparisonAsset","isRelayable","isRelayingAvailable","targetNativeAssetPriceQuote","requireGasPrice","relayable","_info$supportedTokens2","tokenRecord","_x$address2","feeUsd","feeSchedule","_info$feeSchedule$tar","_info$feeSchedule$tar2","entry","gasEstimate","feePercent","calculateFeeUsd","feeFormatted","sendableDecimals","minimumFee","calculatedFee","calculateFeeFormatted","feeSelectorContainer","optionCardBase","alignCenterContainer","optionCardSelectable","boxShadow","optionCardSelected","inlineBlock","alignLeft","betaLabel","_relayerInfo$data4","_relayerInfo$data5","_CHAINS_BY_ID$targetC","_relayerInfo$data6","transferAmount","useRelayerInfo","sourceDecimals","relayerEligible","acalaRelayerEligible","chooseAcalaRelayer","chooseRelayer","chooseManual","_relayerInfo$data3","acalaRelayerContent","Chip","manualRedeemContent","useTargetInfo","useGetTargetParsedTokenAccounts","targetAssetError","FeeMethodSelector","line","WormholeWrappedWarning","CanonicalWarning","MultichainWarning","RewardsWarning","LiquidityWarning","TokenWarning","_MULTI_CHAIN_TOKENS$s","showCanonicalTbtcMessage","searchableAddress","isWormholeWrapped","multichainSymbol","isMultiChain","isRewardsToken","showMultiChainWarning","showCanonicalWarning","showWrappedWarning","showRewardsWarning","showLiquidityWarning","shouldShowLiquidityWarning","SendConfirmationContent","deservesTimeout","countdown","setCountdown","setInterval","ArrowDownward","DialogActions","SendConfirmationDialog","isConfirmOpen","setIsConfirmOpen","handleConfirmClick","handleConfirmClose","sourceAmount","sourceIsNative","humanReadableTransferAmount","oneParsed","allowanceError","setAllowanceError","shouldApproveUnlimited","setShouldApproveUnlimited","toggleShouldApproveUnlimited","sufficientAllowance","isAllowanceFetching","isApproveProcessing","approveAmount","allowance","setAllowance","setIsAllowanceFetching","getAllowanceEth","_error","approveEth","useAllowance","approveButtonNeeded","notOne","approveExactAmount","approveUnlimited","ChainSelectArrow","showSwap","setShowSwap","onMouseEnter","onMouseLeave","SwapHoriz","PolygonTerraWrappedWarning","EthPolygonWrappedWarning","SoureAssetWarning","showPolygonTerraWrappedWarning","showEthPolygonWrappedWarning","useIsTransferLimited","setTokenList","availableNotionalByChain","setAvailableNotionalByChain","amountParsed","effectTriggered","tokenListResponse","availableNotionalByChainResponse","transferNotional","price","isLimitedReason","notionalLimit","bigTransactionSize","remainingAvailableNotional","isLimited","limits","chainNotionalLimit","chainRemainingAvailableNotional","chainBigTransactionSize","tokenPrice","isTransferLimited","_CHAINS_BY_ID$isTrans","USD_FORMATTER","chainSelectWrapper","chainSelectContainer","chainSelectArrow","targetChainOptions","isSourceTransferDisabled","isTargetTransferDisabled","hasParsedTokenAccount","isEthereumMigration","isBscMigration","isCeloMigration","isMigrationAsset","handleMigrationClick","SourceAssetWarning","TransferLimitedWarning","parseChain","NaN","isNaN","useDeepLinkTransferParams","_balances$data","_balances$data2","selectedChainId","setSelectedChainId","unwrapRequest","setUnwrapRequest","handleSelect","wrappedToken","eq","withdraw","WithdrawTokensTerra","setToken","MsgExecuteContract","withdraw_tokens","native_token","txResult","InputLabel","bar","appBar","body2","bannerLink","bg","brandLink","iconButton","betaBanner","gradientRight","pointerEvent","gradientLeft","gradientLeft2","gradientRight2","pathname","handleTabChange","NewsBar","AppBar","Toolbar","RouterLink","Portal","Hidden","implementation","xsDown","NavLink","Tabs","indicatorColor","Tab","Switch","Route","exact","path","Transfer","NFT","Attest","Migration","Stats","UnwrapNative","Redirect","ErrorBoundary","super","hasError","static","componentDidCatch","errorInfo","holeOuterContainer","holeInnerContainer","holeImage","blurred","BackgroundImage","configureStore","reducer","attestReducer","nftReducer","transferReducer","tokenReducer","feeReducer","ReactDOM","ThemeProvider","CssBaseline","SnackbarProvider","maxSnack","WalletContextProvider","MyAlgoWallet","PeraWallet","DeflyWallet","AlgorandLedgerWallet","InjectedWallet","WalletConnectLegacyWallet","getWrappedSolanaWallets","getWrappedAptosWallets","HashRouter","App","document","getElementById","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","amdD","amdO","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","getter","__esModule","leafPrototypes","getProto","getPrototypeOf","t","mode","ns","create","def","getOwnPropertyNames","definition","defineProperty","enumerable","f","chunkId","u","miniCssF","g","globalThis","Function","prop","prototype","hasOwnProperty","inProgress","dataWebpackPrefix","done","script","needAttach","scripts","getElementsByTagName","s","getAttribute","createElement","charset","timeout","nc","setAttribute","onScriptComplete","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","head","appendChild","toStringTag","nmd","paths","installedChunks","installedChunkData","errorType","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}