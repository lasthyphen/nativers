{"version":3,"file":"static/js/606.94ba3400.chunk.js","mappings":"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","sources":["../../src/classes.ts","../../src/error-constants.ts","../../src/errors.ts","../../src/index.ts","../../src/utils.ts","../node_modules/@toruslabs/openlogin-utils/src/url.ts","../node_modules/@toruslabs/openlogin-jrpc/src/basePostMessageStream.ts","../node_modules/@toruslabs/openlogin-jrpc/src/safeEventEmitter.ts","../node_modules/@toruslabs/openlogin-jrpc/src/serializableError.ts","../node_modules/@toruslabs/openlogin-jrpc/src/jrpc.ts","../node_modules/@toruslabs/openlogin-utils/src/randomId.ts","../node_modules/@toruslabs/openlogin-jrpc/src/jrpcEngine.ts","../node_modules/@toruslabs/openlogin-jrpc/src/substream.ts","../node_modules/@toruslabs/openlogin-jrpc/src/mux.ts","../node_modules/@toruslabs/base-controllers/src/Network/INetworkController.ts","../node_modules/@toruslabs/base-controllers/src/enums.ts","../node_modules/@toruslabs/base-controllers/src/utils/utils.ts","../node_modules/@toruslabs/base-controllers/src/Transaction/ITransactionController.ts","../node_modules/@toruslabs/solana-embed/src/messages.ts","../node_modules/@toruslabs/solana-embed/src/interfaces.ts","../node_modules/@toruslabs/solana-embed/src/config.ts","../node_modules/@toruslabs/solana-embed/src/loglevel.ts","../node_modules/@toruslabs/solana-embed/src/utils.ts","../node_modules/@toruslabs/solana-embed/src/baseProvider.ts","../node_modules/@toruslabs/base-controllers/src/Network/createLoggerMiddleware.ts","../node_modules/@toruslabs/solana-embed/src/embedUtils.ts","../node_modules/@toruslabs/solana-embed/src/PopupHandler.ts","../node_modules/@toruslabs/solana-embed/src/communicationProvider.ts","../node_modules/@toruslabs/solana-embed/src/inPageProvider.ts","../node_modules/@toruslabs/solana-embed/src/siteMetadata.ts","../node_modules/@toruslabs/solana-embed/src/embed.ts","../node_modules/json-rpc-random-id/index.js"],"sourcesContent":[null,null,null,null,null,"import { HashParams } from \"./hashParams\";\n\nexport class URLWithHashParams extends URL {\n  hashParams: HashParams = new URLSearchParams();\n\n  toString(): string {\n    this.hash = this.hashParams.toString();\n    return super.toString.call(this);\n  }\n}\n","import { Duplex } from \"readable-stream\";\n\nfunction noop(): void {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\n\nexport default class BasePostMessageStream extends Duplex {\n  _init: boolean;\n\n  _haveSyn: boolean;\n\n  _name: string;\n\n  _target: string;\n\n  _targetWindow: Window;\n\n  _targetOrigin: string;\n\n  _onMessage: any;\n\n  _synIntervalId: number;\n\n  constructor({\n    name,\n    target,\n    targetWindow = window,\n    targetOrigin = \"*\",\n  }: {\n    name: string;\n    target: string;\n    targetWindow?: Window;\n    targetOrigin?: string;\n  }) {\n    super({\n      objectMode: true,\n    });\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n\n    window.addEventListener(\"message\", this._onMessage, false);\n    this._handShake();\n  }\n\n  _break(): void {\n    this.cork();\n    this._write(BRK, null, noop);\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake(): void {\n    this._write(SYN, null, noop);\n    this.cork();\n  }\n\n  _onData(data: unknown): void {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data: unknown): void {\n    const originConstraint = this._targetOrigin;\n    this._targetWindow.postMessage(\n      {\n        target: this._target,\n        data,\n      },\n      originConstraint\n    );\n  }\n\n  onMessage(event: MessageEvent): void {\n    const message = event.data;\n\n    // validate message\n    if (\n      (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin) ||\n      event.source !== this._targetWindow ||\n      typeof message !== \"object\" ||\n      message.target !== this._name ||\n      !message.data\n    ) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read(): void {\n    return undefined;\n  }\n\n  _write(data: unknown, _, cb: () => void): void {\n    this._postMessage(data);\n    cb();\n  }\n\n  _destroy(): void {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n}\n","import { EventEmitter } from \"events\";\n\ntype Handler = (...args: any[]) => void;\ninterface EventMap {\n  [k: string]: Handler | Handler[] | undefined;\n}\n\nfunction safeApply<T, A extends any[]>(handler: (this: T, ...handlerArgs: A) => void, context: T, args: A): void {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone<T>(arr: T[]): T[] {\n  const n = arr.length;\n  const copy = new Array(n);\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n  return copy;\n}\n\nexport default class SafeEventEmitter extends EventEmitter {\n  emit(type: string, ...args: any[]): boolean {\n    let doError = type === \"error\";\n\n    const events: EventMap = (this as any)._events;\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (doError) {\n      let er;\n      if (args.length > 0) {\n        [er] = args;\n      }\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      }\n      // At least give some kind of context to the user\n      const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n      (err as any).context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n}\n","import stringify from \"fast-safe-stringify\";\n\nexport default class SerializableError<T> extends Error {\n  public code: number;\n\n  public data: T;\n\n  constructor({ code, message, data }: { code: number; message: string; data?: T }) {\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString(): string {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack,\n    });\n  }\n}\n","import { randomId } from \"@toruslabs/openlogin-utils\";\nimport { Duplex } from \"readable-stream\";\n\nimport SafeEventEmitter from \"./safeEventEmitter\";\nimport SerializableError from \"./serializableError\";\n\nexport type Json = boolean | number | string | null | { [property: string]: Json } | Json[];\n\nexport type JRPCVersion = \"2.0\";\nexport type JRPCId = number | string | void;\n\nexport type ConsoleLike = Pick<Console, \"log\" | \"warn\" | \"error\" | \"debug\" | \"info\" | \"trace\">;\nexport interface JRPCBase {\n  jsonrpc?: JRPCVersion;\n  id?: JRPCId;\n}\n\nexport interface JRPCResponse<T> extends JRPCBase {\n  result?: T;\n  error?: any;\n}\n\nexport const getRpcPromiseCallback =\n  (resolve: (value?: any) => void, reject: (error?: Error) => void, unwrapResult = true) =>\n  (error: Error, response: JRPCResponse<unknown>): void => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n\nexport interface JRPCRequest<T> extends JRPCBase {\n  method: string;\n  params?: T;\n}\n\nexport type JRPCEngineNextCallback = (cb?: (done: (error?: Error) => void) => void) => void;\nexport type JRPCEngineEndCallback = (error?: Error) => void;\nexport type JRPCEngineReturnHandler = (done: (error?: Error) => void) => void;\n\ninterface IdMapValue {\n  req: JRPCRequest<unknown>;\n  res: JRPCResponse<unknown>;\n  next: JRPCEngineNextCallback;\n  end: JRPCEngineEndCallback;\n}\n\ninterface IdMap {\n  [requestId: string]: IdMapValue;\n}\n\nexport type JRPCMiddleware<T, U> = (req: JRPCRequest<T>, res: JRPCResponse<U>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => void;\n\nexport function createErrorMiddleware(log: ConsoleLike): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({ code: -32603, message: \"invalid method\" });\n        end();\n        return;\n      }\n      next((done) => {\n        const { error } = res;\n        if (!error) {\n          return done();\n        }\n        log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n        return done();\n      });\n    } catch (error) {\n      log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n      res.error = new SerializableError({ code: -32603, message: error.message });\n      end();\n    }\n  };\n}\n\nexport function createStreamMiddleware(): { events: SafeEventEmitter; middleware: JRPCMiddleware<unknown, unknown>; stream: Duplex } {\n  const idMap: IdMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res: JRPCResponse<unknown>) {\n    const context = idMap[res.id as unknown as string];\n    if (!context) {\n      throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n    }\n\n    delete idMap[res.id as unknown as string];\n    // copy whole res onto original res\n    Object.assign(context.res, res);\n    // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n    setTimeout(context.end);\n  }\n\n  function processNotification(res: JRPCRequest<unknown>) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res: JRPCResponse<unknown>, _encoding: unknown, cb: (error?: Error | null) => void) {\n    let err;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res as unknown as JRPCRequest<unknown>);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    }\n    // continue processing stream\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage,\n  });\n\n  const middleware: JRPCMiddleware<unknown, unknown> = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req);\n    // register request on id map\n    idMap[req.id as unknown as string] = { req, res, next, end };\n  };\n\n  return { events, middleware, stream };\n}\n\ntype ScaffoldMiddlewareHandler<T, U> = JRPCMiddleware<T, U> | Json;\n\nexport function createScaffoldMiddleware(handlers: {\n  [methodName: string]: ScaffoldMiddlewareHandler<unknown, unknown>;\n}): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method];\n    // if no handler, return\n    if (handler === undefined) {\n      return next();\n    }\n    // if handler is fn, call as middleware\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    }\n    // if handler is some other value, use as result\n    res.result = handler;\n    return end();\n  };\n}\n\nexport function createIdRemapMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next((done) => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\n\nexport function createLoggerMiddleware(logger: ConsoleLike): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\n\nexport type AsyncJRPCEngineNextCallback = () => Promise<void>;\n\ntype Maybe<T> = Partial<T> | null | undefined;\n\nexport interface JRPCSuccess<T> extends JRPCBase {\n  result: Maybe<T>;\n}\n\nexport interface JRPCError {\n  code: number;\n  message: string;\n  data?: unknown;\n  stack?: string;\n}\n\nexport interface PendingJRPCResponse<T> extends JRPCBase {\n  result?: T;\n  error?: Error | JRPCError;\n}\n\nexport interface JRPCFailure extends JRPCBase {\n  error: JRPCError;\n}\n\nexport type AsyncJRPCMiddleware<T, U> = (req: JRPCRequest<T>, res: PendingJRPCResponse<U>, next: AsyncJRPCEngineNextCallback) => Promise<void>;\n\ntype ReturnHandlerCallback = (error: null | Error) => void;\n\nexport function createAsyncMiddleware<T, U>(asyncMiddleware: AsyncJRPCMiddleware<T, U>): JRPCMiddleware<T, U> {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise: () => void;\n    const nextPromise = new Promise<void>((resolve) => {\n      resolveNextPromise = resolve;\n    });\n\n    let returnHandlerCallback: unknown = null;\n    let nextWasCalled = false;\n\n    // This will be called by the consumer's async middleware.\n    const asyncNext = async () => {\n      nextWasCalled = true;\n\n      // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next((runReturnHandlersCallback) => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n        (returnHandlerCallback as ReturnHandlerCallback)(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        (returnHandlerCallback as ReturnHandlerCallback)(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n","import randombytes from \"randombytes\";\n\nexport const randomId = (): string => randombytes(32).toString(\"hex\");\n","import { serializeError } from \"eth-rpc-errors\";\nimport { Duplex } from \"readable-stream\";\n\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCEngineReturnHandler, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"./jrpc\";\nimport SafeEventEmitter from \"./safeEventEmitter\";\nimport SerializableError from \"./serializableError\";\n\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nexport class JRPCEngine extends SafeEventEmitter {\n  private _middleware: JRPCMiddleware<unknown, unknown>[];\n\n  constructor() {\n    super();\n    this._middleware = [];\n  }\n\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n  private static async _runAllMiddleware(\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<unknown>,\n    middlewareStack: JRPCMiddleware<unknown, unknown>[]\n  ): Promise<\n    [\n      unknown, // error\n      boolean, // isComplete\n      JRPCEngineReturnHandler[]\n    ]\n  > {\n    const returnHandlers: JRPCEngineReturnHandler[] = [];\n    let error = null;\n    let isComplete = false;\n\n    // Go down stack of middleware, call and collect optional returnHandlers\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n      if (isComplete) {\n        break;\n      }\n    }\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n  private static _runMiddleware(\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<unknown>,\n    middleware: JRPCMiddleware<unknown, unknown>,\n    returnHandlers: JRPCEngineReturnHandler[]\n  ): Promise<[unknown, boolean]> {\n    return new Promise((resolve) => {\n      const end: JRPCEngineEndCallback = (err?: unknown) => {\n        const error = err || res.error;\n        if (error) {\n          res.error = serializeError(error);\n        }\n        // True indicates that the request should end\n        resolve([error, true]);\n      };\n\n      const next: JRPCEngineNextCallback = (returnHandler?: JRPCEngineReturnHandler) => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({ code: -32603, message: \"JRPCEngine: 'next' return handlers must be functions\" }));\n            }\n            returnHandlers.push(returnHandler);\n          }\n\n          // False indicates that the request should not end\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n  private static async _runReturnHandlers(handlers: JRPCEngineReturnHandler[]): Promise<void> {\n    for (const handler of handlers) {\n      await new Promise<void>((resolve, reject) => {\n        handler((err) => (err ? reject(err) : resolve()));\n      });\n    }\n  }\n\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n  private static _checkForCompletion(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>, isComplete: boolean): void {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({ code: -32603, message: \"Response has no error or result for request\" });\n    }\n    if (!isComplete) {\n      throw new SerializableError({ code: -32603, message: \"Nothing ended request\" });\n    }\n  }\n\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n  push<T, U>(middleware: JRPCMiddleware<T, U>): void {\n    this._middleware.push(middleware as JRPCMiddleware<unknown, unknown>);\n  }\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @param callback - An error-first callback that will receive the response.\n   */\n  handle<T, U>(request: JRPCRequest<T>, callback: (error: unknown, response: JRPCResponse<U>) => void): void;\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @param callback - An error-first callback that will receive the array of\n   * responses.\n   */\n  handle<T, U>(requests: JRPCRequest<T>[], callback: (error: unknown, responses: JRPCResponse<U>[]) => void): void;\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @returns A promise that resolves with the response, or rejects with an\n   * error.\n   */\n  handle<T, U>(request: JRPCRequest<T>): Promise<JRPCResponse<U>>;\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @returns A promise that resolves with the array of responses, or rejects\n   * with an error.\n   */\n  handle<T, U>(requests: JRPCRequest<T>[]): Promise<JRPCResponse<U>[]>;\n\n  handle(req: unknown, cb?: any) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req as JRPCRequest<unknown>, cb);\n    }\n    return this._promiseHandle(req as JRPCRequest<unknown>);\n  }\n\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n  asMiddleware(): JRPCMiddleware<unknown, unknown> {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError as Error);\n        }\n\n        return next(async (handlerCallback) => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n  private _handleBatch(reqs: JRPCRequest<unknown>[]): Promise<JRPCResponse<unknown>[]>;\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n  private _handleBatch(reqs: JRPCRequest<unknown>[], cb: (error: unknown, responses?: JRPCResponse<unknown>[]) => void): Promise<void>;\n\n  private async _handleBatch(\n    reqs: JRPCRequest<unknown>[],\n    cb?: (error: unknown, responses?: JRPCResponse<unknown>[]) => void\n  ): Promise<JRPCResponse<unknown>[] | void> {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all(\n        // 1. Begin executing each request in the order received\n        reqs.map(this._promiseHandle.bind(this))\n      );\n\n      // 3. Return batch response\n      if (cb) {\n        return cb(null, responses);\n      }\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * A promise-wrapped _handle.\n   */\n  private _promiseHandle(req: JRPCRequest<unknown>): Promise<JRPCResponse<unknown>> {\n    return new Promise((resolve) => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n  private async _handle(callerReq: JRPCRequest<unknown>, cb: (error: unknown, response: JRPCResponse<unknown>) => void): Promise<void> {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({ code: -32603, message: \"request must be plain object\" });\n      return cb(error, { id: undefined, jsonrpc: \"2.0\", error });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({ code: -32603, message: \"method must be string\" });\n      return cb(error, { id: callerReq.id, jsonrpc: \"2.0\", error });\n    }\n\n    const req: JRPCRequest<unknown> = { ...callerReq };\n    const res: JRPCResponse<unknown> = {\n      id: req.id,\n      jsonrpc: req.jsonrpc,\n    };\n    let error: Error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n\n    return cb(error, res as JRPCResponse<unknown>);\n  }\n\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n  private async _processRequest(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n    // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n    JRPCEngine._checkForCompletion(req, res, isComplete);\n\n    // The return handlers should run even if an error was encountered during\n    // middleware processing.\n    await JRPCEngine._runReturnHandlers(returnHandlers);\n\n    // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n    if (error) {\n      throw error;\n    }\n  }\n}\n\nexport function mergeMiddleware(middlewareStack: JRPCMiddleware<unknown, unknown>[]): JRPCMiddleware<unknown, unknown> {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach((middleware) => engine.push(middleware));\n  return engine.asMiddleware();\n}\n\nexport interface EngineStreamOptions {\n  engine: JRPCEngine;\n}\n\nexport function createEngineStream(opts: EngineStreamOptions): Duplex {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const { engine } = opts;\n  // eslint-disable-next-line prefer-const\n  let stream: Duplex;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req: JRPCRequest<unknown>, _encoding: unknown, cb: (error?: Error | null) => void) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({ objectMode: true, read, write });\n\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", (message) => {\n      stream.push(message);\n    });\n  }\n  return stream;\n}\n","import { BufferEncoding } from \"@toruslabs/openlogin-utils\";\nimport { Duplex } from \"readable-stream\";\n\nexport default class Substream extends Duplex {\n  private readonly _parent: any;\n\n  private readonly _name: string;\n\n  constructor({ parent, name }: { parent: any; name: string }) {\n    super({ objectMode: true });\n    this._parent = parent;\n    this._name = name;\n  }\n\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n  _read(): void {\n    return undefined;\n  }\n\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n  _write(chunk: unknown, _encoding: BufferEncoding, callback: (error?: Error | null) => void): void {\n    this._parent.push({\n      name: this._name,\n      data: chunk,\n    });\n    callback();\n  }\n}\n","import { BufferEncoding } from \"@toruslabs/openlogin-utils\";\nimport eos from \"end-of-stream\";\nimport once from \"once\";\nimport pump from \"pump\";\nimport { Duplex } from \"readable-stream\";\nimport type { Readable, Writable } from \"stream\";\n\nimport Substream from \"./substream\";\n\nexport const IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\n\nexport type Stream = Readable | Writable;\n\ninterface Chunk {\n  name: string;\n  data: unknown;\n}\n\nexport class ObjectMultiplex extends Duplex {\n  public _substreams: Record<string, Substream | typeof IGNORE_SUBSTREAM>;\n\n  getStream: (name: string) => Substream | symbol;\n\n  constructor(opts: Record<string, unknown> = {}) {\n    super({\n      ...opts,\n      objectMode: true,\n    });\n    this._substreams = {};\n  }\n\n  createStream(name: string): Substream {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n\n    // create substream\n    const substream = new Substream({ parent: this, name });\n    this._substreams[name] = substream;\n\n    // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    anyStreamEnd(this, (_error?: Error | null) => substream.destroy(_error || undefined));\n\n    return substream;\n  }\n\n  // ignore streams (dont display orphaned data warning)\n  ignoreStream(name: string): void {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n    // set\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read(): void {\n    return undefined;\n  }\n\n  _write(chunk: Chunk, _encoding: BufferEncoding, callback: (error?: Error | null) => void): void {\n    const { name, data } = chunk;\n\n    if (!name) {\n      window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n      return callback();\n    }\n\n    // get corresponding substream\n    const substream = this._substreams[name];\n    if (!substream) {\n      window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n      return callback();\n    }\n\n    // push data into substream\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n}\n\n// util\nfunction anyStreamEnd(stream: ObjectMultiplex, _cb: (error?: Error | null) => void) {\n  const cb = once(_cb);\n  eos(stream as unknown as Stream, { readable: false }, cb);\n  eos(stream as unknown as Stream, { writable: false }, cb);\n}\n\nexport function setupMultiplex(stream: Duplex): ObjectMultiplex {\n  const mux = new ObjectMultiplex();\n  mux.getStream = function streamHelper(name: string) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n    return this.createStream(name);\n  };\n\n  pump(stream as unknown as Stream, mux as unknown as Stream, stream as unknown as Stream, (err) => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n","import { JRPCEngine, JRPCMiddleware, JRPCRequest, JRPCResponse, SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors, serializeError } from \"eth-rpc-errors\";\nimport getCreateRandomId from \"json-rpc-random-id\";\n\nimport { BaseConfig, BaseState, IController } from \"../interfaces\";\nexport const createRandomId = getCreateRandomId();\n\nexport interface ProviderConfig {\n  /**\n   * Block explorer url for the chain\n   * @example https://ropsten.etherscan.io\n   */\n  blockExplorerUrl: string;\n  /**\n   * Logo url for the base token\n   */\n  logo: string;\n  /**\n   * Name for ticker\n   * @example 'Binance Token', 'Ethereum', 'Matic Network Token'\n   */\n  tickerName: string;\n  /**\n   * Symbol for ticker\n   * @example BNB, ETH\n   */\n  ticker: string;\n  /**\n   * RPC target Url for the chain\n   * @example https://ropsten.infura.io/v3/YOUR_API_KEY\n   */\n  rpcTarget: string;\n  /**\n   * Chain Id parameter(hex with 0x prefix) for the network. Mandatory for all networks. (assign one with a map to network identifier for platforms)\n   * @example 0x1 for mainnet, 'loading' if not connected to anything yet or connection fails\n   * @defaultValue 'loading'\n   */\n  chainId: string;\n  /**\n   * Display name for the network\n   */\n  displayName: string;\n}\n\n/**\n * Custom network properties\n * @example isEIP1559Compatible: true etc.\n */\nexport interface NetworkProperties {\n  [key: string]: number | string | boolean;\n}\n\n/**\n *\n */\nexport interface NetworkState extends BaseState {\n  /**\n   * Chain Id for the current network\n   */\n  chainId: string;\n  providerConfig: ProviderConfig;\n  properties: NetworkProperties;\n}\n\nexport interface NetworkConfig extends BaseConfig {\n  providerConfig: ProviderConfig;\n}\n\nexport interface INetworkController<C, S> extends IController<C, S> {\n  /**\n   * Gets the chainId of the network\n   */\n  getNetworkIdentifier(): string;\n\n  /**\n   * Sets provider for the current network controller\n   * @param providerConfig - Provider config object\n   */\n  setProviderConfig(providerConfig: ProviderConfig): void;\n  /**\n   * Connects to the rpcUrl for the current selected provider\n   */\n  lookupNetwork(): Promise<void>;\n}\n\nexport type BlockData = string | string[];\n\nexport type Block = Record<string, BlockData>;\n\nexport type SendAsyncCallBack = (err: Error, providerRes: JRPCResponse<Block>) => void;\n\nexport type SendCallBack<U> = (err: any, providerRes: U) => void;\n\nexport type Payload = Partial<JRPCRequest<string[]>>;\n\nexport interface RequestArguments<T> {\n  method: string;\n  params?: T;\n}\nexport type Maybe<T> = T | Partial<T> | null | undefined;\n\nexport interface SafeEventEmitterProvider extends SafeEventEmitter {\n  sendAsync: <T, U>(req: JRPCRequest<T>) => Promise<U>;\n  send: <T, U>(req: JRPCRequest<T>, callback: SendCallBack<U>) => void;\n  request: <T, U>(args: RequestArguments<T>) => Promise<Maybe<U>>;\n}\n\nexport interface ExtendedJsonRpcRequest<T> extends JRPCRequest<T> {\n  skipCache?: boolean;\n}\n\nexport function providerFromEngine(engine: JRPCEngine): SafeEventEmitterProvider {\n  const provider: SafeEventEmitterProvider = new SafeEventEmitter() as SafeEventEmitterProvider;\n  // handle both rpc send methods\n  provider.sendAsync = async <T, U>(req: JRPCRequest<T>) => {\n    const res = await engine.handle(req);\n    if (res.error) {\n      const err = serializeError(res.error, {\n        fallbackError: {\n          message: res.error?.message || res.error.toString(),\n          code: res.error?.code || -32603,\n        },\n      });\n\n      throw ethErrors.rpc.internal(err);\n    }\n    return res.result as U;\n  };\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  provider.send = <T, U>(req: JRPCRequest<T>, callback: (error: any, providerRes: U) => void) => {\n    if (typeof callback !== \"function\") {\n      throw new Error('Must provide callback to \"send\" method.');\n    }\n    engine.handle(req, callback);\n  };\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", (message: string) => {\n      provider.emit(\"data\", null, message);\n    });\n  }\n\n  provider.request = async <T, U>(args: RequestArguments<T>) => {\n    const req: JRPCRequest<T> = {\n      ...args,\n      id: createRandomId(),\n      jsonrpc: \"2.0\",\n    };\n    const res = await provider.sendAsync(req);\n    return res as U;\n  };\n  return provider;\n}\n\nexport function providerFromMiddleware(middleware: JRPCMiddleware<string[], unknown>): SafeEventEmitterProvider {\n  const engine = new JRPCEngine();\n  engine.push(middleware);\n  const provider: SafeEventEmitterProvider = providerFromEngine(engine);\n  return provider;\n}\n\nexport function providerAsMiddleware(provider: SafeEventEmitterProvider): JRPCMiddleware<unknown, unknown> {\n  return async (req, res, _next, end) => {\n    // send request to provider\n    try {\n      const providerRes: unknown = await provider.sendAsync<unknown, unknown>(req);\n      res.result = providerRes;\n      return end();\n    } catch (error) {\n      return end(error.message);\n    }\n  };\n}\n","export const FEATURES_PROVIDER_CHANGE_WINDOW = { height: 660, width: 375 };\nexport const FEATURES_DEFAULT_WALLET_WINDOW = { height: 740, width: 1315 };\nexport const FEATURES_DEFAULT_POPUP_WINDOW = { height: 700, width: 1200 };\nexport const FEATURES_CONFIRM_WINDOW = { height: 700, width: 450 };\n\nexport const POPUP_LOADED = \"popup_loaded\";\nexport const POPUP_RESULT = \"popup_result\";\n\nexport const SETUP_COMPLETE = \"setup_complete\";\n\nexport const ACTIVITY_ACTION_ALL = \"walletActivity.allTransactions\";\nexport const ACTIVITY_ACTION_SEND = \"walletActivity.send\";\nexport const ACTIVITY_ACTION_BURN = \"walletActivity.burn\";\nexport const ACTIVITY_ACTION_RECEIVE = \"walletActivity.receive\";\nexport const ACTIVITY_ACTION_TOPUP = \"walletActivity.topup\";\n\nexport const ACTIVITY_PERIOD_ALL = \"walletActivity.all\";\nexport const ACTIVITY_PERIOD_WEEK_ONE = \"walletActivity.lastOneWeek\";\nexport const ACTIVITY_PERIOD_MONTH_ONE = \"walletActivity.lastOneMonth\";\nexport const ACTIVITY_PERIOD_MONTH_SIX = \"walletActivity.lastSixMonts\";\n\nexport const ACTIVITY_STATUS_SUCCESSFUL = \"walletActivity.successful\";\nexport const ACTIVITY_STATUS_UNSUCCESSFUL = \"walletActivity.unsuccessful\";\nexport const ACTIVITY_STATUS_PENDING = \"walletActivity.pending\";\nexport const ACTIVITY_STATUS_CANCELLED = \"walletActivity.cancelled\";\nexport const ACTIVITY_STATUS_CANCELLING = \"walletActivity.cancelling\";\n\nexport const COMMUNICATION_NOTIFICATIONS = {\n  IFRAME_STATUS: \"iframe_status\",\n\n  // Tell embed to create the window\n  CREATE_WINDOW: \"create_window\",\n  // Tell embed to close the window\n  CLOSE_WINDOW: \"close_window\",\n\n  USER_LOGGED_IN: \"user_logged_in\",\n  USER_LOGGED_OUT: \"user_logged_out\",\n};\n\nexport const COMMUNICATION_JRPC_METHODS = {\n  LOGOUT: \"logout\",\n  WALLET_INSTANCE_ID: \"wallet_instance_id\",\n  USER_INFO: \"user_info\",\n  SET_PROVIDER: \"set_provider\",\n  TOPUP: \"topup\",\n  IFRAME_STATUS: \"iframe_status\",\n  // embed has opened the window as requested\n  OPENED_WINDOW: \"opened_window\",\n  // user has closed the window from embed's side\n  CLOSED_WINDOW: \"closed_window\",\n  GET_PROVIDER_STATE: \"get_provider_state\",\n  LOGIN_WITH_PRIVATE_KEY: \"login_with_private_key\",\n};\n\nexport const PROVIDER_JRPC_METHODS = {\n  GET_PROVIDER_STATE: \"wallet_get_provider_state\",\n};\n\nexport const PROVIDER_NOTIFICATIONS = {\n  ACCOUNTS_CHANGED: \"wallet_accounts_changed\",\n  CHAIN_CHANGED: \"wallet_chain_changed\",\n  UNLOCK_STATE_CHANGED: \"wallet_unlock_state_changed\",\n};\n\nexport const BROADCAST_CHANNELS = {\n  REDIRECT_CHANNEL: \"redirect_channel\",\n  PROVIDER_CHANGE_CHANNEL: \"torus_provider_change_channel\",\n  TRANSACTION_CHANNEL: \"torus_channel\",\n  MESSAGE_CHANNEL: \"torus_message_channel\",\n  WALLET_LOGOUT_CHANNEL: \"wallet_logout_channel\",\n  WALLET_SELECTED_ADDRESS_CHANNEL: \"wallet_selected_address_channel\",\n  WALLET_NETWORK_CHANGE_CHANNEL: \"wallet_network_change_channel\",\n  WALLET_ACCOUNT_IMPORT_CHANNEL: \"wallet_account_import_channel\",\n  THEME_CHANGE: \"theme_change_channel\",\n};\nexport const BROADCAST_CHANNELS_MSGS = {\n  LOGOUT: \"logout\",\n  ACCOUNT_IMPORTED: \"account_imported\",\n  SELECTED_ADDRESS_CHANGE: \"selected_address_change\",\n  NETWORK_CHANGE: \"network_change\",\n  SET_THEME: \"set_theme\",\n};\n\nexport type BROADCAST_CHANNELS_MSGS_TYPE = typeof BROADCAST_CHANNELS_MSGS[keyof typeof BROADCAST_CHANNELS_MSGS];\n","import { BigNumber } from \"bignumber.js\";\nimport { addHexPrefix, bufferToInt, ecsign, fromSigned, hashPersonalMessage, intToBuffer, stripHexPrefix, toUnsigned } from \"ethereumjs-util\";\n\nimport { TransactionMeta } from \"../Transaction/ITransactionController\";\n\n/**\n * General utility functions\n */\n\nexport function intToHex(i: number): string {\n  const hex = i.toString(16);\n  return `0x${hex}`;\n}\n\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */\nexport const randomId = (): string => Math.random().toString(36).slice(2);\n\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\nexport function padWithZeroes(hexString: string, targetLength: number): string {\n  if (hexString !== \"\" && !/^[a-f0-9]+$/iu.test(hexString)) {\n    throw new Error(`Expected an unprefixed hex string. Received: ${hexString}`);\n  }\n\n  if (targetLength < 0) {\n    throw new Error(`Expected a non-negative integer target length. Received: ${targetLength}`);\n  }\n\n  return String.prototype.padStart.call(hexString, targetLength, \"0\");\n}\n/**\n * Concatenate an extended ECDSA signature into a hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature.\n */\nexport function concatSig(v: Buffer, r: Buffer, s: Buffer): string {\n  const rSig = fromSigned(r);\n  const sSig = fromSigned(s);\n  const vSig = bufferToInt(v);\n  const rStr = padWithZeroes(toUnsigned(rSig).toString(\"hex\"), 64);\n  const sStr = padWithZeroes(toUnsigned(sSig).toString(\"hex\"), 64);\n  const vStr = stripHexPrefix(intToHex(vSig));\n  return addHexPrefix(rStr.concat(sStr, vStr));\n}\n\nexport function timeout(duration: number): Promise<void> {\n  return new Promise((resolve) => {\n    const timeoutRef = window.setTimeout(() => {\n      resolve();\n      window.clearTimeout(timeoutRef);\n    }, duration);\n  });\n}\n\nexport const getHeaders = (jwt: string) => {\n  return {\n    headers: {\n      Authorization: `Bearer ${jwt}`,\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n};\n\n/**\n * Text/number formatting utilities\n */\nexport const formatSmallNumbers = (number: number, currency = \"usd\", noTilde = false): string => {\n  const finalNumber = BigNumber.isBigNumber(number) ? number.toNumber() : number;\n  if (!Number.isFinite(finalNumber)) return \"\";\n  const value = currency.toLowerCase() === \"usd\" ? parseFloat(Number(finalNumber).toFixed(2)) : parseFloat(Number(finalNumber).toFixed(5));\n  const tilde = value > 0 ? \"~ \" : \"\";\n  return `${currency.toLowerCase() === \"usd\" || noTilde ? \"\" : tilde}${Number(value)} ${currency.toUpperCase()}`;\n};\n\nexport const addressSlicer = (address: string, sliceLength = 5): string => {\n  if (address.length < 11) {\n    return address;\n  }\n  if (typeof address !== \"string\") return \"\";\n  return `${address.slice(0, sliceLength)}...${address.slice(-sliceLength)}`;\n};\n\nexport const significantDigits = (number: number | BigNumber, perc = false, length_ = 2): number | BigNumber => {\n  let input = !BigNumber.isBigNumber(number) ? new BigNumber(number) : number;\n  if (input.isZero()) return input;\n  if (perc) {\n    input = input.times(new BigNumber(100));\n  }\n  let depth;\n  if (input.gte(new BigNumber(1))) {\n    depth = length_;\n  } else {\n    depth = length_ - 1 + Math.ceil(Math.log10(new BigNumber(\"1\").div(input).toNumber()));\n  }\n  const shift = new BigNumber(10).pow(new BigNumber(depth));\n  const roundedNumber = Math.round(shift.times(input).toNumber()) / shift.toNumber();\n  return roundedNumber;\n};\nexport const formatDate = (inputDate: string): string => {\n  const monthList = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const date = new Date(inputDate);\n  const day = date.getDate();\n  const month = monthList[date.getMonth()];\n  const year = date.getFullYear();\n  return `${day} ${month} ${year}`;\n};\n\nexport const formatTime = (time: string): string => {\n  return new Date(time).toTimeString().slice(0, 8);\n};\n\n/**\n * Network utilities\n */\nexport const transactionMatchesNetwork = <T>(transaction: TransactionMeta<T>, chainId: string): boolean => {\n  if (typeof transaction.chainId !== \"undefined\") {\n    return transaction.chainId === chainId;\n  }\n  return false;\n};\n\n/**\n * Signing utils\n */\nexport const hashMessage = (message: string): Buffer => {\n  const bufferedMessage = Buffer.from(message, \"utf8\");\n  const el = hashPersonalMessage(bufferedMessage);\n  return el;\n};\n\nexport const signMessage = (privateKey: string, data: string): string => {\n  const privKey = Buffer.from(privateKey, \"hex\");\n  const message = stripHexPrefix(data);\n  const msgSig = ecsign(Buffer.from(message, \"hex\"), privKey);\n  const rawMsgSig = concatSig(intToBuffer(msgSig.v), msgSig.r, msgSig.s);\n  return rawMsgSig;\n};\n\n/**\n * popup handler utils\n */\nexport function getPopupFeatures({ width: w, height: h }: { width: number; height: number }): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const broadcastChannelOptions = {\n  // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n  webWorkerSupport: false, // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n};\n\nexport function getCustomDeviceInfo(): Record<string, string> | undefined {\n  if ((navigator as any)?.brave) {\n    return {\n      browser: \"Brave\",\n    };\n  }\n}\nexport class UserError extends Error {}\n\nexport const handleRedirectParameters = (\n  hash: string,\n  queryParameters: Record<string, string>\n): { error: string; instanceParameters: Record<string, string>; hashParameters: Record<string, string> } => {\n  const hashParameters: Record<string, string> = {};\n  const hashUrl = new URL(`${window.location.origin}/?${hash.slice(1)}`);\n  hashUrl.searchParams.forEach((value, key) => {\n    hashParameters[key] = value;\n  });\n  let instanceParameters = {};\n  let error = \"\";\n  if (!queryParameters.windowId) {\n    if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n      instanceParameters = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n      error = hashParameters.error_description || hashParameters.error || error;\n    } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n      instanceParameters = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n      if (queryParameters.error) error = queryParameters.error;\n    }\n  }\n  return { error, instanceParameters, hashParameters };\n};\n\nexport function sleep<T>(ms: number): Promise<T> {\n  return new Promise<T>((resolve) => setTimeout(resolve, ms));\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport { BaseConfig, BaseState } from \"../interfaces\";\n\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */\n\nexport enum TransactionStatus {\n  approved = \"approved\",\n  cancelled = \"cancelled\",\n  confirmed = \"confirmed\",\n  failed = \"failed\",\n  finalized = \"finalized\",\n  processed = \"processed\",\n  rejected = \"rejected\",\n  signed = \"signed\",\n  submitted = \"submitted\",\n  unapproved = \"unapproved\",\n  dropped = \"dropped\",\n  expired = \"expired\",\n}\n\nexport const TRANSACTION_TYPES = {\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  WASM_BASED_DEPLOY: \"wasmBasedDeploy\",\n  STANDARD_TRANSACTION: \"transaction\",\n  STANDARD_PAYMENT_TRANSACTION: \"payment_transaction\", // specific to chains like solana and casper\n};\n\nexport type TRANSACTION_TYPE = typeof TRANSACTION_TYPES[keyof typeof TRANSACTION_TYPES];\n\nexport const TX_EVENTS = {\n  TX_WARNING: \"tx:warning\",\n  TX_ERROR: \"tx:error\",\n  TX_FAILED: \"tx:failed\",\n  TX_CONFIRMED: \"tx:confirmed\",\n  TX_DROPPED: \"tx:dropped\",\n  TX_EXPIRED: \"tx:expired\",\n  TX_STATUS_UPDATE: \"tx:status_update\",\n  TX_UNAPPROVED: \"tx:unapproved\",\n};\n\nexport interface TransactionMeta<T> {\n  id: string;\n  transaction: T;\n  transactionType: TRANSACTION_TYPE;\n  dappSuggestedTransaction: Partial<T>;\n  chainId: string;\n  origin: string;\n  time: number;\n  status: TransactionStatus;\n  updated_at?: string; // iso date string\n  transactionHash?: string;\n  rawTransaction?: string;\n  txReceipt?: unknown;\n  error?: Error;\n  warning?: {\n    error?: string;\n    message?: string;\n  };\n}\n\nexport type BASE_TX_EVENT_TYPE = {\n  txId: string;\n};\n\nexport type TX_ERROR_EVENT_TYPE = BASE_TX_EVENT_TYPE & {\n  error: Error;\n};\n\nexport type TX_FAILED_EVENT_TYPE = BASE_TX_EVENT_TYPE & {\n  error: Error;\n};\n\nexport type TX_EXPIRED_EVENT_TYPE = BASE_TX_EVENT_TYPE;\n\nexport type TX_WARNING_EVENT_TYPE<T> = BASE_TX_EVENT_TYPE & {\n  txMeta: TransactionMeta<T>;\n};\n\nexport type TX_CONFIRMED_EVENT_TYPE = BASE_TX_EVENT_TYPE & {\n  txReceipt: unknown;\n};\n\nexport type TX_DROPPED_EVENT_TYPE = BASE_TX_EVENT_TYPE;\n\nexport type TX_STATUS_UPDATE_EVENT_TYPE = BASE_TX_EVENT_TYPE & {\n  status: TransactionStatus;\n};\n\nexport type TX_FINISHED_EVENT_TYPE<T> = BASE_TX_EVENT_TYPE & {\n  txMeta: TransactionMeta<T>;\n};\n\n/**\n * Transaction controller configuration\n */\nexport interface TransactionConfig extends BaseConfig {\n  txHistoryLimit: number;\n}\n\n/**\n * Transaction controller state\n */\nexport interface TransactionState<T> extends BaseState {\n  /**\n   * Transactions by key (id) value (TxMeta)\n   */\n  transactions: Record<string, TransactionMeta<T>>; // all transactions (unapprroved and all others)\n  unapprovedTxs?: Record<string, TransactionMeta<T>>; // only unapproved\n  currentNetworkTxsList?: TransactionMeta<T>[];\n}\n\n/**\n * Result\n *\n * result - Promise resolving to a new transaction hash\n * transactionMeta - Meta information about this new transaction\n */\nexport interface Result<T> {\n  result: Promise<string>;\n  transactionMeta: TransactionMeta<T>;\n}\n\nexport interface ITransactionController<T> {\n  /**\n   * Add a new unapproved transaction to state.\n   * @param transaction - Transaction object to add\n   * @returns - Object containing a promise resolving to the transaction hash if approved\n   */\n  addTransaction(transaction: T, req: JRPCRequest<T & { windowId?: string }> & { origin: string }): Promise<Result<T>>;\n\n  /**\n   * Approves a transaction and updates it's status in state.\n   *\n   * @param transactionID - ID of the transaction to approve\n   * @returns - Promise resolving when this operation completes\n   */\n  approveTransaction(transactionID: string): Promise<void>;\n\n  /**\n   * Cancels a transaction based on its ID by setting its status to \"rejected\"\n   *\n   * @param transactionID - ID of the transaction to cancel\n   */\n  cancelTransaction?(transactionID: string): Promise<void>;\n}\n\nexport interface ITransactionStateManager<T> {\n  addTransactionToState(txMeta: TransactionMeta<T>): TransactionMeta<T>;\n\n  wipeTransactions(address: string): void;\n\n  getTransactions(args: {\n    searchCriteria?: Record<string, (val: unknown) => boolean> | Record<string, unknown>;\n    initialList?: TransactionMeta<T>[];\n    filterToCurrentNetwork?: boolean;\n  }): TransactionMeta<T>[];\n  getApprovedTransactions(address?: string): TransactionMeta<T>[];\n  getPendingTransactions(address?: string): TransactionMeta<T>[];\n  getConfirmedTransactions(address?: string): TransactionMeta<T>[];\n}\n","export default {\n  errors: {\n    disconnected: (): string => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: (): string => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: (method: string): string =>\n      `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: (): string => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners: number): string => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: (): string => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: (): string => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: (): string => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: (): string => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: (method: string): string => `'args.logger' must include required method '${method}'.`,\n  },\n  info: {\n    connected: (chainId: string): string => `Torus: Connected to chain with ID \"${chainId}\".`,\n  },\n  warnings: {},\n};\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nexport const PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\",\n} as const;\n\nexport const TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\",\n} as const;\n\nexport type PAYMENT_PROVIDER_TYPE = typeof PAYMENT_PROVIDER[keyof typeof PAYMENT_PROVIDER];\n\nexport type TORUS_BUILD_ENV_TYPE = typeof TORUS_BUILD_ENV[keyof typeof TORUS_BUILD_ENV];\n\nexport const BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\",\n} as const;\n\nexport type EMBED_TRANSLATION_ITEM = {\n  continue: string;\n  actionRequired: string;\n  pendingAction: string;\n  cookiesRequired: string;\n  enableCookies: string;\n  clickHere: string;\n};\n\nexport type BUTTON_POSITION_TYPE = typeof BUTTON_POSITION[keyof typeof BUTTON_POSITION];\n\nexport type WALLET_PATH = \"transfer\" | \"topup\" | \"home\" | \"settings\" | \"history\" | \"discover\";\n\nexport const LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n} as const;\n\nexport type LOGIN_PROVIDER_TYPE = typeof LOGIN_PROVIDER[keyof typeof LOGIN_PROVIDER];\n\nexport interface TorusCtorArgs {\n  /**\n   * Z-index of the modal and iframe\n   * @defaultValue 99999\n   */\n  modalZIndex?: number;\n}\n\nexport interface NetworkInterface {\n  /**\n   * Block explorer url for the chain\n   * @example https://explorer.solana.com/\n   */\n  blockExplorerUrl: string;\n  /**\n   * Logo url for the base token\n   */\n  logo: string;\n  /**\n   * Name for ticker\n   * @example 'Solana'\n   */\n  tickerName: string;\n  /**\n   * Symbol for ticker\n   * @example SOL\n   */\n  ticker: string;\n  /**\n   * RPC target Url for the chain\n   * @example https://api.devnet.solana.com/\n   */\n  rpcTarget: string;\n  /**\n   * Chain Id parameter(hex with 0x prefix) for the network. Mandatory for all networks. (assign one with a map to network identifier for platforms)\n   * @example 0x1 for mainnet, 0x2 for testnet, 0x3 for devnet,  'loading' if not connected to anything yet or connection fails\n   * @defaultValue 'loading'\n   */\n  chainId: string;\n  /**\n   * Display name for the network\n   */\n  displayName: string;\n}\n\nexport interface PaymentParams {\n  /**\n   * Address to send the funds to\n   */\n  selectedAddress?: string;\n  /**\n   * Default fiat currency for the user to make the payment in\n   */\n  selectedCurrency?: string;\n  /**\n   * Amount to buy in the selectedCurrency\n   */\n  fiatValue?: number;\n  /**\n   * Cryptocurrency to buy\n   */\n  selectedCryptoCurrency?: string;\n  /**\n   * Amount Cryptocurrency to buy\n   */\n  cryptoAmount?: number;\n}\n\nexport interface LoginParams {\n  loginProvider?: string;\n}\n\nexport interface UserInfo {\n  /**\n   * Email of the logged in user\n   */\n  email: string;\n  /**\n   * Full name of the logged in user\n   */\n  name: string;\n  /**\n   * Profile image of the logged in user\n   */\n  profileImage: string;\n  /**\n   * verifier of the logged in user (google, facebook etc)\n   */\n  verifier: string;\n  /**\n   * Verifier Id of the logged in user\n   *\n   * email for google,\n   * id for facebook,\n   * username for reddit,\n   * id for twitch,\n   * id for discord\n   */\n  verifierId: string;\n}\n\nexport interface LocaleLinks<T> {\n  /**\n   * Item corresponding to english\n   */\n  en?: T;\n  /**\n   * Item corresponding to japanese\n   */\n  ja?: T;\n  /**\n   * Item corresponding to korean\n   */\n  ko?: T;\n  /**\n   * Item corresponding to german\n   */\n  de?: T;\n  /**\n   * Item corresponding to chinese (simplified)\n   */\n  zh?: T;\n  /**\n   * Item corresponding to spanish\n   */\n  es?: T;\n}\n\nexport type NetworkLabel = \"mainnet-beta\" | \"testnet\" | \"devnet\";\n\nexport interface ThemeParams {\n  /**\n   * If true, enables dark mode\n   * Defaults to false\n   * @defaultValue false\n   */\n  isDark: boolean;\n  /**\n   * Colors object to customize colors in torus theme.\n   *\n   * Contact us for whitelabel. Example provided in `examples/vue-app`\n   */\n  colors: Record<string, string>;\n}\n\nexport interface WhiteLabelParams {\n  /**\n   * App name to display in the UI\n   */\n  name?: string;\n  /**\n   * App url\n   */\n  url?: string;\n  /**\n   * Whitelabel theme\n   */\n  theme: ThemeParams;\n  /**\n   * Language of whitelabel.\n   *\n   * order of preference: Whitelabel language \\> user language (in torus-website) \\> browser language\n   */\n  defaultLanguage?: string;\n  /**\n   * Logo Url to be used in light mode (dark logo)\n   */\n  logoDark: string;\n  /**\n   * Logo Url to be used in dark mode (light logo)\n   */\n  logoLight: string;\n  /**\n   * Shows/hides topup option in torus-website/widget.\n   * Defaults to false\n   * @defaultValue false\n   */\n  topupHide?: boolean;\n  /**\n   * Custom translations. See (examples/vue-app) to configure\n   */\n  customTranslations?: LocaleLinks<unknown>;\n}\nexport interface TorusParams {\n  /**\n   * Determines where the torus widget is visible on the page.\n   * @defaultValue bottom-left\n   */\n  buttonPosition?: BUTTON_POSITION_TYPE;\n  /**\n   * Api key\n   * Get yours today at {@link https://developer.tor.us | Dashboard}\n   */\n  apiKey?: string;\n\n  /**\n   * Torus Network Object\n   */\n  network?: NetworkInterface | NetworkLabel;\n  /**\n   * Build Environment of Torus.\n   *\n   * production uses https://solana.tor.us,\n   *\n   * development uses http://localhost:8080 (expects torus-website to be run locally),\n   *\n   * testing uses https://solana-testing.tor.us (latest internal build)\n   * @defaultValue production\n   */\n  buildEnv?: TORUS_BUILD_ENV_TYPE;\n  /**\n   * Enables or disables logging.\n   *\n   * Defaults to false in prod and true in other environments\n   */\n  enableLogging?: boolean;\n  /**\n   * whether to show/hide torus widget.\n   *\n   * Defaults to true\n   * @defaultValue true\n   */\n  showTorusButton?: boolean;\n  /**\n   * Prefers to use localStorage instead of sessionStorage for torus iframe. Allows longer lived sessions\n   *\n   * Defaults to false\n   * @defaultValue false\n   */\n  useLocalStorage?: boolean;\n  /**\n   * Allows passing external data for initialize\n   *\n   * Defaults to empty object\n   */\n  extraParams?: { [keyof: string]: string };\n  /**\n   * Params to enable whitelabelling of torus website and widget\n   */\n  whiteLabel?: WhiteLabelParams;\n}\n\nexport interface TorusLoginParams {\n  loginProvider?: LOGIN_PROVIDER_TYPE;\n  login_hint?: string;\n}\n\nexport interface ProviderOptions {\n  /**\n   * The name of the stream used to connect to the wallet.\n   */\n  jsonRpcStreamName?: string;\n\n  /**\n   * The maximum number of event listeners.\n   */\n  maxEventListeners?: number;\n}\n\nexport interface BaseProviderState {\n  isConnected: boolean;\n  initialized: boolean;\n  isPermanentlyDisconnected: boolean;\n  hasEmittedConnection: boolean;\n}\n\nexport interface InPageProviderState extends BaseProviderState {\n  accounts: null | string[];\n  isUnlocked: boolean;\n}\n\nexport interface CommunicationProviderState extends BaseProviderState {\n  buttonPosition: string;\n  isLoggedIn: boolean;\n  torusWidgetVisibility: boolean;\n  currentLoginProvider: LOGIN_PROVIDER_TYPE;\n  isIFrameFullScreen: boolean;\n}\n\nexport type Maybe<T> = Partial<T> | T | null | undefined;\n\nexport interface UnValidatedJsonRpcRequest extends JRPCRequest<unknown> {\n  windowId?: string;\n}\n\nexport interface RequestArguments<T> {\n  /** The RPC method to request. */\n  method: string;\n\n  /** The params of the RPC method, if any. */\n  params?: T;\n}\n","import { EMBED_TRANSLATION_ITEM, LocaleLinks, LOGIN_PROVIDER } from \"./interfaces\";\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\",\n    },\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\",\n    },\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\",\n    },\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\",\n    },\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\",\n    },\n  },\n} as LocaleLinks<{ embed: EMBED_TRANSLATION_ITEM }>;\n\nexport default {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: `torus-${window.location.hostname}`,\n};\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"solana-embed\");\n","import { JRPCMiddleware, SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { LogLevelDesc } from \"loglevel\";\n\nimport config from \"./config\";\nimport { NetworkInterface, NetworkLabel } from \"./interfaces\";\nimport log from \"./loglevel\";\n\n// utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nexport function createErrorMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req,\n      });\n    }\n\n    next((done) => {\n      const { error } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nexport function logStreamDisconnectWarning(remoteLabel: string, error: Error, emitter: SafeEventEmitter): void {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n  if (error?.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nexport const getWindowId = (): string => Math.random().toString(36).slice(2);\n\nexport const getTorusUrl = async (buildEnv: string): Promise<{ torusUrl: string; logLevel: LogLevelDesc }> => {\n  let torusUrl: string;\n  let logLevel: LogLevelDesc;\n  // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n  return { torusUrl, logLevel };\n};\n\nexport const getUserLanguage = (): string => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(config.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nexport const NOOP = (): void => {\n  // empty function\n};\n\nexport const FEATURES_PROVIDER_CHANGE_WINDOW = { height: 660, width: 375 };\nexport const FEATURES_DEFAULT_WALLET_WINDOW = { height: 740, width: 1315 };\nexport const FEATURES_DEFAULT_POPUP_WINDOW = { height: 700, width: 1200 };\nexport const FEATURES_CONFIRM_WINDOW = { height: 600, width: 400 };\n\nexport function storageAvailable(type: \"localStorage\" | \"sessionStorage\"): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\n/**\n * popup handler utils\n */\nexport function getPopupFeatures({ width: w, height: h }: { width: number; height: number }): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const getNetworkConfig = (label: NetworkLabel): NetworkInterface | undefined => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://green-dark-sky.solana-mainnet.quiknode.pro/0b4b99540b7930cf590dc7fb0a2d1c9a906fd53c/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://spring-black-waterfall.solana-testnet.quiknode.pro/89830c37acd15df105b23742d37f33dc85b5eff8/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    default:\n      return undefined;\n  }\n};\n","import { createLoggerMiddleware, SafeEventEmitterProvider, SendCallBack } from \"@toruslabs/base-controllers\";\nimport {\n  createIdRemapMiddleware,\n  createStreamMiddleware,\n  getRpcPromiseCallback,\n  JRPCEngine,\n  JRPCRequest,\n  JRPCResponse,\n  ObjectMultiplex,\n  SafeEventEmitter,\n  Stream,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { duplex as isDuplexStream } from \"is-stream\";\nimport pump from \"pump\";\nimport type { Duplex } from \"readable-stream\";\n\nimport { BaseProviderState, Maybe, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport messages from \"./messages\";\nimport { createErrorMiddleware, logStreamDisconnectWarning } from \"./utils\";\n\nabstract class BaseProvider<U extends BaseProviderState> extends SafeEventEmitter implements SafeEventEmitterProvider {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  public readonly isTorus: true;\n\n  _rpcEngine: JRPCEngine;\n\n  jsonRpcConnectionEvents: SafeEventEmitter;\n\n  protected _state: U;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super();\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    // this.enable = this.enable.bind(this);\n\n    // setup connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pump(\n      connectionStream as unknown as Stream,\n      mux as unknown as Stream,\n      connectionStream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus\")\n    );\n\n    // ignore phishing warning message (handled elsewhere)\n    mux.ignoreStream(\"phishing\");\n\n    // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(\n      jsonRpcConnection.stream as unknown as Stream,\n      mux.createStream(jsonRpcStreamName) as unknown as Stream,\n      jsonRpcConnection.stream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")\n    );\n\n    // handle RPC requests via dapp-side rpc engine\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({ origin: location.origin }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n  async request<TArgs, TResponse>(args: RequestArguments<TArgs>): Promise<Maybe<TResponse>> {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args,\n      });\n    }\n\n    const { method, params } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args,\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args,\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({ method, params }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  send<T, V>(req: JRPCRequest<T>, callback: SendCallBack<V>): void;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  send(payload: JRPCRequest<unknown>, callback: (error: Error | null, result?: JRPCResponse<unknown>) => void): void {\n    this._rpcRequest(payload, callback);\n  }\n\n  sendAsync<T, V>(req: JRPCRequest<T>): Promise<V>;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  sendAsync(payload: JRPCRequest<unknown>): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleStreamDisconnect(streamName: string, error: Error): void {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  abstract _initializeState(...args: unknown[]): Promise<void>;\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected abstract _rpcRequest(\n    payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[],\n    callback: (...args: unknown[]) => void,\n    isInternal?: boolean\n  ): void;\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInPageProvider#connect\n   */\n  protected abstract _handleConnect(...args: unknown[]): void;\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected abstract _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void;\n}\n\nexport default BaseProvider;\n","import { JRPCEngineNextCallback, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\nimport log from \"loglevel\";\n\nexport interface LoggerMiddlewareOptions {\n  origin: string;\n}\n\nexport function createLoggerMiddleware(options: LoggerMiddlewareOptions) {\n  return function loggerMiddleware(request: JRPCRequest<unknown>, response: JRPCResponse<unknown>, next: JRPCEngineNextCallback): void {\n    next((callback) => {\n      if (response.error) {\n        log.warn(\"Error in RPC response:\\n\", response);\n      }\n      if ((request as unknown as { isTorusInternal: boolean }).isTorusInternal) return;\n      log.info(`RPC (${options.origin}):`, request, \"->\", response);\n      callback();\n    });\n  };\n}\n","export const handleEvent = (handle: EventTarget, eventName: string, handler: (...args: unknown[]) => void, ...handlerArgs: unknown[]): void => {\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nexport async function documentReady(): Promise<void> {\n  return new Promise<void>((resolve) => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nexport const htmlToElement = <T extends Element>(html: string): T => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild as T;\n};\n","import { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { FEATURES_DEFAULT_POPUP_WINDOW, getPopupFeatures } from \"./utils\";\n\nclass PopupHandler extends SafeEventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: URL; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, CommunicationWalletProviderState } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport {\n  BUTTON_POSITION,\n  CommunicationProviderState,\n  EMBED_TRANSLATION_ITEM,\n  LOGIN_PROVIDER_TYPE,\n  ProviderOptions,\n  RequestArguments,\n  UnValidatedJsonRpcRequest,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\nimport PopupHandler from \"./PopupHandler\";\nimport { FEATURES_CONFIRM_WINDOW, getPopupFeatures, getUserLanguage } from \"./utils\";\n\nclass TorusCommunicationProvider extends BaseProvider<CommunicationProviderState> {\n  protected static _defaultState: CommunicationProviderState = {\n    buttonPosition: \"bottom-left\",\n    currentLoginProvider: null,\n    isIFrameFullScreen: false,\n    hasEmittedConnection: false,\n\n    torusWidgetVisibility: false,\n    initialized: false,\n    isLoggedIn: false,\n    isPermanentlyDisconnected: false,\n    isConnected: false,\n  };\n\n  public embedTranslations: EMBED_TRANSLATION_ITEM;\n\n  public torusUrl: string;\n\n  public dappStorageKey: string;\n\n  public windowRefs: Record<string, PopupHandler>;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusIframe: HTMLIFrameElement;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusCommunicationProvider._defaultState,\n    };\n\n    // public state\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {};\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = (payload: RequestArguments<Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const { isFullScreen, rid } = params;\n        this._displayIframe({ isFull: isFullScreen as boolean, rid: rid as string });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const { windowId, url } = params as Record<string, string>;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const { currentLoginProvider } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider as LOGIN_PROVIDER_TYPE;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn(): boolean {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen(): boolean {\n    return this._state.isIFrameFullScreen;\n  }\n\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params: Record<string, unknown>): Promise<void> {\n    try {\n      const { torusUrl, dappStorageKey, torusAlertContainer, torusIframe } = params;\n      this.torusUrl = torusUrl as string;\n      this.dappStorageKey = dappStorageKey as string;\n      this.torusAlertContainer = torusAlertContainer as HTMLDivElement;\n      this.torusIframe = torusIframe as HTMLIFrameElement;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const { currentLoginProvider, isLoggedIn } = (await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as CommunicationWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId: string, { url, target, features }: { url?: string; target?: string; features?: string } = {}): void {\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;\n      else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    const handledWindow = new PopupHandler({ url: finalUrl, target, features });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    }\n    // Add to collection only if window is opened\n    this.windowRefs[windowId] = handledWindow;\n    // We tell the iframe that the window has been successfully opened\n    this.request<{ windowId: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: { windowId },\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request<{ windowId: string }, unknown>({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: { windowId },\n      });\n    });\n  }\n\n  _displayIframe({ isFull = false, rid = \"\" }: { isFull?: boolean; rid?: string } = {}): void {\n    const style: Partial<CSSStyleDeclaration> = {};\n    // set phase\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request<{ isIFrameFullScreen: boolean; rid: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: { isIFrameFullScreen: isFull, rid },\n    });\n  }\n\n  hideTorusButton(): void {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n\n  showTorusButton(): void {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void): void {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload as JRPCRequest<unknown>[], cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(currentLoginProvider: string, isLoggedIn: boolean): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { currentLoginProvider, isLoggedIn });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  // Called if the iframe wants to close the window cause it is done processing the request\n  private _handleCloseWindow(params: { windowId?: string }): void {\n    const { windowId } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  private async _createPopupBlockAlert(windowId: string, url: string): Promise<void> {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement<HTMLDivElement>(\n      '<div id=\"torusAlert\" class=\"torus-alert--v2\">' +\n        `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` +\n        \"<div>\" +\n        `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` +\n        `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` +\n        \"</div>\" +\n        \"</div>\"\n    );\n\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  private getLogoUrl(): string {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n}\n\nexport default TorusCommunicationProvider;\n","import { InPageWalletProviderState, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest, JRPCSuccess } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport dequal from \"fast-deep-equal\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport { InPageProviderState, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\n\nclass TorusInPageProvider extends BaseProvider<InPageProviderState> {\n  protected static _defaultState: InPageProviderState = {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false,\n  };\n\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n  public chainId: string | null;\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  public selectedAddress: string | null;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusInPageProvider._defaultState,\n    };\n\n    // public state\n    this.selectedAddress = null;\n    this.chainId = null;\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = (payload: RequestArguments<unknown[] | Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params as unknown[]);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params as Record<string, unknown>);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params as Record<string, unknown>);\n      }\n    };\n\n    // json rpc notification listener\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  async _initializeState(): Promise<void> {\n    try {\n      const { accounts, chainId, isUnlocked } = (await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as InPageWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this.emit(\"connect\", { chainId });\n\n      this._handleChainChanged({ chainId });\n      this._handleUnlockStateChanged({ accounts, isUnlocked });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void, isInternal = false): void {\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err: Error, res: JRPCSuccess<string[]>) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload as JRPCRequest<unknown>, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(chainId: string): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { chainId });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  /**\n   * Called when accounts may have changed.\n   */\n  protected _handleAccountsChanged(accounts: unknown[], isEthAccounts = false, isInternal = false): void {\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    }\n\n    // emit accountsChanged if anything about the accounts array has changed\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts as string[];\n      this.emit(\"accountsChanged\", finalAccounts);\n    }\n\n    // handle selectedAddress\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = (finalAccounts[0] as string) || null;\n    }\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n  protected _handleChainChanged({ chainId }: { chainId?: string } = {}): void {\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", { chainId });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n  protected _handleUnlockStateChanged({ accounts, isUnlocked }: { accounts?: string[]; isUnlocked?: boolean } = {}): void {\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", { isUnlocked });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n\nexport default TorusInPageProvider;\n","/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n/**\n * Extracts a name for the site from the DOM\n */\nconst getSiteName = (window: Window): string => {\n  const { document } = window;\n\n  const siteName = document.querySelector<HTMLMetaElement>('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector<HTMLMetaElement>('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n\n/**\n * Extracts an icon for the site from the DOM\n */\nasync function getSiteIcon(window: Window): Promise<string> {\n  try {\n    const { document } = window;\n\n    // Use the site's favicon if it exists\n    let icon = document.querySelector<HTMLLinkElement>('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    // Search through available icons in no particular order\n    icon = Array.from(document.querySelectorAll<HTMLLinkElement>('head > link[rel=\"icon\"]')).find((_icon) => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n\n/**\n * Gets site metadata and returns it\n *\n */\nconst getSiteMetadata = async (): Promise<{ name: string; icon: string }> => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window),\n});\n\nexport default getSiteMetadata;\n","import { PublicKey, SendOptions, SignaturePubkeyPair, Transaction } from \"@solana/web3.js\";\nimport { COMMUNICATION_JRPC_METHODS } from \"@toruslabs/base-controllers\";\nimport { setAPIKey } from \"@toruslabs/http-helpers\";\nimport { BasePostMessageStream, getRpcPromiseCallback, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport TorusCommunicationProvider from \"./communicationProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport TorusInPageProvider from \"./inPageProvider\";\nimport {\n  BUTTON_POSITION,\n  LOGIN_PROVIDER_TYPE,\n  NetworkInterface,\n  PAYMENT_PROVIDER_TYPE,\n  PaymentParams,\n  TORUS_BUILD_ENV,\n  TorusCtorArgs,\n  TorusLoginParams,\n  TorusParams,\n  UnValidatedJsonRpcRequest,\n  UserInfo,\n  WALLET_PATH,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport PopupHandler from \"./PopupHandler\";\nimport getSiteMetadata from \"./siteMetadata\";\nimport {\n  FEATURES_CONFIRM_WINDOW,\n  FEATURES_DEFAULT_WALLET_WINDOW,\n  FEATURES_PROVIDER_CHANGE_WINDOW,\n  getPopupFeatures,\n  getTorusUrl,\n  getWindowId,\n  storageAvailable,\n} from \"./utils\";\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { version } = require(\"../package.json\");\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\n\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const { torusUrl } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  isInitialized: boolean;\n\n  torusAlert: HTMLDivElement;\n\n  modalZIndex: number;\n\n  alertZIndex: number;\n\n  public requestedLoginProvider?: LOGIN_PROVIDER_TYPE;\n\n  provider: TorusInPageProvider;\n\n  communicationProvider: TorusCommunicationProvider;\n\n  dappStorageKey: string;\n\n  isTopupHidden = false;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusUrl: string;\n\n  private torusIframe: HTMLIFrameElement;\n\n  private styleLink: HTMLLinkElement;\n\n  constructor({ modalZIndex = 99999 }: TorusCtorArgs = {}) {\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn(): boolean {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init({\n    buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n    enableLogging = false,\n    network,\n    showTorusButton = false,\n    useLocalStorage = false,\n    buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n    apiKey = \"torus-default\",\n    extraParams = {},\n    whiteLabel,\n  }: TorusParams = {}): Promise<void> {\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const { torusUrl, logLevel } = await getTorusUrl(buildEnv);\n    log.enableAll();\n    log.info(torusUrl, \"url loaded\");\n    log.info(`Solana Embed Version :${version}`);\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";\n    else torusIframeUrl.pathname += \"/frame\";\n\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n\n    torusIframeUrl.hash = hashParams.toString();\n\n    // Iframe code\n    this.torusIframe = htmlToElement<HTMLIFrameElement>(\n      `<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`\n    );\n\n    this.torusAlertContainer = htmlToElement<HTMLDivElement>(\n      `<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`\n    );\n\n    this.styleLink = htmlToElement<HTMLLinkElement>(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n    const handleSetup = async () => {\n      return new Promise<void>((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata();\n            // send init params here\n            this.torusIframe.contentWindow.postMessage(\n              {\n                buttonPosition,\n                apiKey,\n                network,\n                dappMetadata,\n                extraParams,\n                whiteLabel,\n              },\n              torusIframeUrl.origin\n            );\n            await this._setupWeb3({\n              torusUrl,\n            });\n            if (showTorusButton) this.showTorusButton();\n            if (whiteLabel?.topupHide) this.isTopupHidden = whiteLabel.topupHide;\n            else this.hideTorusButton();\n            this.isInitialized = true;\n            (window as any).torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login(params: TorusLoginParams = {}): Promise<string[]> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({ isFull: true });\n      }\n      // If user is already logged in, we assume they have given access to the website\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest(\n          { method: \"solana_requestAccounts\", params: [this.requestedLoginProvider, params.login_hint] },\n          getRpcPromiseCallback(resolve, reject)\n        );\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      }\n      // This would never happen, but just in case\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async loginWithPrivateKey(loginParams: { privateKey: string; userInfo: UserInfo }): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const { privateKey, userInfo } = loginParams;\n    const { success } = await this.communicationProvider.request<{ privateKey: string; userInfo: UserInfo }, { success: boolean }>({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo,\n      },\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n\n  async logout(): Promise<void> {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: [],\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp(): Promise<void> {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n\n  clearInit(): void {\n    function isElement(element: unknown) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n\n  hideTorusButton(): void {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton(): void {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params: NetworkInterface): Promise<void> {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: { ...params },\n    });\n  }\n\n  async showWallet(path: WALLET_PATH, params: Record<string, string> = {}): Promise<void> {\n    const instanceId = await this.communicationProvider.request<[], string>({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: [],\n    });\n    const finalPath = path ? `/${path}` : \"\";\n\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n    // Using URL constructor to prevent js injection and allow parameter validation.!\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach((x) => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    // No need to track this window state. Hence, no _handleWindow call.\n    const walletWindow = new PopupHandler({ url: finalUrl, features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW) });\n    walletWindow.open();\n  }\n\n  async getUserInfo(): Promise<UserInfo> {\n    const userInfoResponse = await this.communicationProvider.request<[], UserInfo>({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: [],\n    });\n    return userInfoResponse as UserInfo;\n  }\n\n  async initiateTopup(provider: PAYMENT_PROVIDER_TYPE, params: PaymentParams): Promise<boolean> {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request<\n      { provider: PAYMENT_PROVIDER_TYPE; params: PaymentParams; windowId: string },\n      boolean\n    >({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: { provider, params, windowId },\n    });\n    return topupResponse;\n  }\n\n  // Solana specific API\n  async getAccounts() {\n    const response = (await this.provider.request({\n      method: \"getAccounts\",\n      params: [],\n    })) as string[];\n    return response;\n  }\n\n  async sendTransaction(transaction: Transaction): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message: transaction.serialize({ requireAllSignatures: false }).toString(\"hex\") },\n    })) as string;\n    return response;\n  }\n\n  // support sendOptions\n  async signAndSendTransaction(transaction: Transaction, options?: SendOptions): Promise<{ signature: string }> {\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message: transaction.serialize({ requireAllSignatures: false }).toString(\"hex\"), options },\n    })) as string;\n    return { signature: response };\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response: string = (await this.provider.request({\n      method: \"sign_transaction\",\n      params: { message: transaction.serializeMessage().toString(\"hex\"), messageOnly: true },\n    })) as string;\n\n    // reconstruct signature pair\n    const parsed = JSON.parse(response);\n    const signature: SignaturePubkeyPair = { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const encodedMessage: string[] = transactions.map((tx) => {\n      return tx.serializeMessage().toString(\"hex\");\n    });\n    const responses: string[] = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: { message: encodedMessage, messageOnly: true },\n    });\n\n    // reconstruct signature pairs\n    const signatures: SignaturePubkeyPair[] = responses.map((item) => {\n      const parsed = JSON.parse(item);\n      return { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    });\n\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = (await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data,\n      },\n    })) as Uint8Array;\n    return response;\n  }\n\n  async getGaslessPublicKey(): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: [],\n    })) as string;\n    return response;\n  }\n\n  // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  private handleDappStorageKey(useLocalStorage: boolean) {\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;\n      else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  private async _setupWeb3(providerParams: { torusUrl: string }): Promise<void> {\n    log.info(\"setupWeb3 running\");\n    // setup background connection\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // compose the inPage provider\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>[], cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload: JRPCRequest<unknown>, cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW), // todo: are these features generic for all\n        });\n        // for communication methods sending window id in jrpc req params\n        (_payload.params as Record<string, unknown>).windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>, cb);\n    };\n\n    // detect solana_requestAccounts and pipe to enable for now\n    const detectAccountRequestPrototypeModifier = (m) => {\n      const originalMethod = inPageProvider[m];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this;\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const { method, params = [] } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({ loginProvider: params[0] });\n          self\n            .login({ loginProvider: params[0] })\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .then((res) => cb(null, res))\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .catch((err) => cb(err));\n        }\n        return originalMethod.apply(this, [request, cb]);\n      };\n    };\n\n    // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n\n    await Promise.all([\n      inPageProvider._initializeState(),\n      communicationProvider._initializeState({\n        ...providerParams,\n        dappStorageKey: this.dappStorageKey,\n        torusAlertContainer: this.torusAlertContainer,\n        torusIframe: this.torusIframe,\n      }),\n    ]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\n\nexport default Torus;\n","module.exports = IdIterator\n\nfunction IdIterator(opts){\n  opts = opts || {}\n  var max = opts.max || Number.MAX_SAFE_INTEGER\n  var idCounter = typeof opts.start !== 'undefined' ? opts.start : Math.floor(Math.random() * max)\n\n  return function createRandomId () {\n    idCounter = idCounter % max\n    return idCounter++\n  }\n\n}"],"names":["fast_safe_stringify_1","require","EthereumRpcError","Error","constructor","code","message","data","Number","isInteger","undefined","serialize","serialized","stack","toString","default","stringifyReplacer","exports","_","value","isValidEthProviderCode","rpc","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","parse","invalidRequest","methodNotFound","invalidParams","internal","provider","userRejectedRequest","unauthorized","unsupportedMethod","disconnected","chainDisconnected","standard","classes_1","utils_1","error_constants_1","getEthJsonRpcError","arg","parseOpts","getMessageFromCode","getEthProviderError","EthereumProviderError","Array","isArray","errorCodes","server","opts","custom","errors_1","FALLBACK_ERROR_CODE","FALLBACK_MESSAGE","FALLBACK_ERROR","fallbackMessage","arguments","length","codeString","hasKey","errorValues","isJsonRpcServerError","JSON_RPC_SERVER_ERROR_MESSAGE","isValidCode","assignOriginalError","error","Object","assign","obj","key","prototype","hasOwnProperty","call","fallbackError","shouldIncludeStack","_error","originalError","_a","_b","enumerable","get","serializeError","URL","noop","ACK","BasePostMessageStream","Duplex","_ref","name","target","targetWindow","window","targetOrigin","super","objectMode","_defineProperty","this","_init","_haveSyn","_name","_target","_targetWindow","_targetOrigin","_onMessage","onMessage","bind","_synIntervalId","addEventListener","_handShake","_break","cork","_write","_onData","push","err","emit","uncork","_postMessage","originConstraint","postMessage","event","origin","source","_read","cb","_destroy","removeEventListener","safeApply","handler","context","args","Reflect","apply","setTimeout","SafeEventEmitter","EventEmitter","type","doError","events","_events","_len","_key","er","concat","len","listeners","arr","n","copy","i","arrayClone","SerializableError","stringify","getRpcPromiseCallback","resolve","reject","unwrapResult","response","result","createStreamMiddleware","idMap","stream","read","write","res","_encoding","id","processNotification","end","processResponse","_err","middleware","req","next","createIdRemapMiddleware","_end","originalId","newId","randombytes","done","JRPCEngine","_middleware","middlewareStack","returnHandlers","isComplete","_runMiddleware","reverse","Promise","returnHandler","handlers","handle","_handleBatch","_handle","_promiseHandle","asMiddleware","async","middlewareError","_runAllMiddleware","_runReturnHandlers","handlerCallback","reqs","responses","all","map","callerReq","jsonrpc","method","_objectSpread$1","_processRequest","_checkForCompletion","Substream","parent","_parent","chunk","callback","IGNORE_SUBSTREAM","Symbol","ObjectMultiplex","_objectSpread","_substreams","createStream","substream","_cb","once","eos","readable","writable","anyStreamEnd","destroy","ignoreStream","console","warn","getCreateRandomId","COMMUNICATION_NOTIFICATIONS","COMMUNICATION_JRPC_METHODS","PROVIDER_JRPC_METHODS","PROVIDER_NOTIFICATIONS","TransactionStatus","messages","permanentlyDisconnected","unsupportedSync","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","connected","chainId","PAYMENT_PROVIDER","MOONPAY","WYRE","RAMPNETWORK","XANPOOL","MERCURYO","TRANSAK","TORUS_BUILD_ENV","PRODUCTION","DEVELOPMENT","TESTING","BUTTON_POSITION","BOTTOM_LEFT","TOP_LEFT","BOTTOM_RIGHT","TOP_RIGHT","LOGIN_PROVIDER","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","LINE","GITHUB","KAKAO","LINKEDIN","TWITTER","WEIBO","WECHAT","EMAIL_PASSWORDLESS","configuration","supportedVerifierList","api","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","prodTorusUrl","localStorageKey","location","hostname","log","loglevel","getWindowId","Math","random","slice","getTorusUrl","torusUrl","logLevel","buildEnv","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","getPopupFeatures","w","h","dualScreenLeft","screenLeft","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","left","abs","top","BaseProvider","connectionStream","jsonRpcStreamName","duplex","isTorus","setMaxListeners","_handleConnect","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","request","sendAsync","mux","pump","jsonRpcConnection","rpcEngine","options","ethErrors","isTorusInternal","_rpcEngine","jsonRpcConnectionEvents","params","send","payload","streamName","remoteLabel","emitter","warningMsg","listenerCount","logStreamDisconnectWarning","documentReady","readyState","eventName","handlerArgs","handlerWrapper","handleEvent","htmlToElement","html","template","createElement","trimmedHtml","trim","innerHTML","content","firstChild","PopupHandler","url","features","windowTimer","iClosedWindow","_setupTimer","setInterval","closed","clearInterval","open","_this$window","href","focus","close","redirect","locationReplaceOnRedirect","replace","TorusCommunicationProvider","_state","_objectSpread$2","_defaultState","dappStorageKey","languageTranslations","getUserLanguage","userLanguage","navigator","language","userLanguages","split","embedTranslations","windowRefs","on","isConnected","isFullScreen","rid","_displayIframe","isFull","windowId","_createPopupBlockAlert","_handleCloseWindow","currentLoginProvider","isLoggedIn","isIFrameFullScreen","torusAlertContainer","torusIframe","info","initialized","_handleWindow","finalUrl","hash","handledWindow","style","display","right","bottom","torusWidgetVisibility","buttonPosition","hideTorusButton","showTorusButton","_payload","tryWindowHandle","debug","isRecoverable","errorMessage","isPermanentlyDisconnected","logoUrl","getLogoUrl","torusAlert","successAlert","btnContainer","appendChild","attachOnLoad","bindOnLoad","remove","children","hasEmittedConnection","TorusInPageProvider","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","accounts","isUnlocked","isInternal","isEthAccounts","finalAccounts","account","dequal","imgExists","img","onload","onerror","src","e","getSiteName","siteName","querySelector","metaTitle","title","getSiteIcon","icon","from","querySelectorAll","find","_icon","Boolean","version","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","isLocalStorageAvailable","storage","x","setItem","removeItem","storageAvailable","torusIframeHtml","crossOrigin","rel","relList","supports","head","Torus","modalZIndex","isInitialized","requestedLoginProvider","alertZIndex","communicationProvider","enableLogging","network","useLocalStorage","apiKey","extraParams","whiteLabel","setAPIKey","enableAll","setDefaultLevel","disableAll","handleDappStorageKey","torusIframeUrl","pathname","endsWith","hashParams","URLSearchParams","append","styleLink","body","dappMetadata","getSiteMetadata","contentWindow","_setupWeb3","topupHide","isTopupHidden","torus","handleSetup","loginProvider","login_hint","loginParams","privateKey","userInfo","success","logout","clearInit","isElement","element","Element","Document","contains","path","instanceId","finalPath","searchParams","keys","forEach","transaction","requireAllSignatures","signature","serializeMessage","messageOnly","parsed","JSON","publicKey","PublicKey","Buffer","addSignature","transactions","encodedMessage","tx","signatures","item","idx","storedKey","localStorage","getItem","generatedKey","providerParams","providerStream","communicationStream","inPageProvider","includes","detectAccountRequestPrototypeModifier","m","originalMethod","self","login","then","catch","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","module","max","MAX_SAFE_INTEGER","idCounter","start","floor"],"sourceRoot":""}